#ifndef INLINE4_AMISSL_H
#define INLINE4_AMISSL_H

/*
** This file was auto generated by idltool 50.10.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif
#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef UTILITY_TAGITEM_H
#include <utility/tagitem.h>
#endif
#ifndef STDLIB_H
#include <stdlib.h>
#endif

/* Inline macros for Interface "main" */
#define InitAmiSSLA(tagList) IAmiSSL->InitAmiSSLA(tagList) 
#if !defined(__cplusplus) && (__STDC_VERSION__ >= 199901L || __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95))
#define InitAmiSSL(...) IAmiSSL->InitAmiSSL(__VA_ARGS__) 
#endif
#define CleanupAmiSSLA(tagList) IAmiSSL->CleanupAmiSSLA(tagList) 
#if !defined(__cplusplus) && (__STDC_VERSION__ >= 199901L || __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95))
#define CleanupAmiSSL(...) IAmiSSL->CleanupAmiSSL(__VA_ARGS__) 
#endif
#define AmiSSLMalloc(num) IAmiSSL->AmiSSLMalloc(num) 
#define AmiSSLRealloc(block, num) IAmiSSL->AmiSSLRealloc(block, num) 
#define AmiSSLFree(block) IAmiSSL->AmiSSLFree(block) 
#define EVP_BF_IsReal() IAmiSSL->EVP_BF_IsReal() 
#define EVP_CAST_IsReal() IAmiSSL->EVP_CAST_IsReal() 
#define EVP_des_IsReal() IAmiSSL->EVP_des_IsReal() 
#define EVP_idea_IsReal() IAmiSSL->EVP_idea_IsReal() 
#define EVP_MD2_IsReal() IAmiSSL->EVP_MD2_IsReal() 
#define EVP_MD5_IsReal() IAmiSSL->EVP_MD5_IsReal() 
#define EVP_MDC2_IsReal() IAmiSSL->EVP_MDC2_IsReal() 
#define EVP_RC2_IsReal() IAmiSSL->EVP_RC2_IsReal() 
#define EVP_RC4_IsReal() IAmiSSL->EVP_RC4_IsReal() 
#define EVP_RC5_IsReal() IAmiSSL->EVP_RC5_IsReal() 
#define EVP_RIPEMD160_IsReal() IAmiSSL->EVP_RIPEMD160_IsReal() 
#define EVP_SHA_IsReal() IAmiSSL->EVP_SHA_IsReal() 
#define ASN1_TYPE_new() IAmiSSL->ASN1_TYPE_new() 
#define ASN1_TYPE_free(a) IAmiSSL->ASN1_TYPE_free(a) 
#define i2d_ASN1_TYPE(a, pp) IAmiSSL->i2d_ASN1_TYPE(a, pp) 
#define d2i_ASN1_TYPE(a, pp, length) IAmiSSL->d2i_ASN1_TYPE(a, pp, length) 
#define ASN1_TYPE_get(a) IAmiSSL->ASN1_TYPE_get(a) 
#define ASN1_TYPE_set(a, type, value) IAmiSSL->ASN1_TYPE_set(a, type, value) 
#define ASN1_OBJECT_new() IAmiSSL->ASN1_OBJECT_new() 
#define ASN1_OBJECT_free(a) IAmiSSL->ASN1_OBJECT_free(a) 
#define i2d_ASN1_OBJECT(a, pp) IAmiSSL->i2d_ASN1_OBJECT(a, pp) 
#define d2i_ASN1_OBJECT(a, pp, length) IAmiSSL->d2i_ASN1_OBJECT(a, pp, length) 
#define ASN1_STRING_new() IAmiSSL->ASN1_STRING_new() 
#define ASN1_STRING_free(a) IAmiSSL->ASN1_STRING_free(a) 
#define ASN1_STRING_dup(a) IAmiSSL->ASN1_STRING_dup(a) 
#define ASN1_STRING_type_new(type) IAmiSSL->ASN1_STRING_type_new(type) 
#define ASN1_STRING_cmp(a, b) IAmiSSL->ASN1_STRING_cmp(a, b) 
#define ASN1_STRING_set(str, data, len) IAmiSSL->ASN1_STRING_set(str, data, len) 
#define i2d_ASN1_BIT_STRING(a, pp) IAmiSSL->i2d_ASN1_BIT_STRING(a, pp) 
#define d2i_ASN1_BIT_STRING(a, pp, length) IAmiSSL->d2i_ASN1_BIT_STRING(a, pp, length) 
#define ASN1_BIT_STRING_set_bit(a, n, value) IAmiSSL->ASN1_BIT_STRING_set_bit(a, n, value) 
#define ASN1_BIT_STRING_get_bit(a, n) IAmiSSL->ASN1_BIT_STRING_get_bit(a, n) 
#define i2d_ASN1_BOOLEAN(a, pp) IAmiSSL->i2d_ASN1_BOOLEAN(a, pp) 
#define d2i_ASN1_BOOLEAN(a, pp, length) IAmiSSL->d2i_ASN1_BOOLEAN(a, pp, length) 
#define i2d_ASN1_INTEGER(a, pp) IAmiSSL->i2d_ASN1_INTEGER(a, pp) 
#define d2i_ASN1_INTEGER(a, pp, length) IAmiSSL->d2i_ASN1_INTEGER(a, pp, length) 
#define d2i_ASN1_UINTEGER(a, pp, length) IAmiSSL->d2i_ASN1_UINTEGER(a, pp, length) 
#define i2d_ASN1_ENUMERATED(a, pp) IAmiSSL->i2d_ASN1_ENUMERATED(a, pp) 
#define d2i_ASN1_ENUMERATED(a, pp, length) IAmiSSL->d2i_ASN1_ENUMERATED(a, pp, length) 
#define ASN1_UTCTIME_check(a) IAmiSSL->ASN1_UTCTIME_check(a) 
#define ASN1_UTCTIME_set(s, t) IAmiSSL->ASN1_UTCTIME_set(s, t) 
#define ASN1_UTCTIME_set_string(s, str) IAmiSSL->ASN1_UTCTIME_set_string(s, str) 
#define ASN1_GENERALIZEDTIME_check(a) IAmiSSL->ASN1_GENERALIZEDTIME_check(a) 
#define ASN1_GENERALIZEDTIME_set(s, t) IAmiSSL->ASN1_GENERALIZEDTIME_set(s, t) 
#define ASN1_GENERALIZEDTIME_set_string(s, str) IAmiSSL->ASN1_GENERALIZEDTIME_set_string(s, str) 
#define i2d_ASN1_OCTET_STRING(a, pp) IAmiSSL->i2d_ASN1_OCTET_STRING(a, pp) 
#define d2i_ASN1_OCTET_STRING(a, pp, length) IAmiSSL->d2i_ASN1_OCTET_STRING(a, pp, length) 
#define i2d_ASN1_VISIBLESTRING(a, pp) IAmiSSL->i2d_ASN1_VISIBLESTRING(a, pp) 
#define d2i_ASN1_VISIBLESTRING(a, pp, length) IAmiSSL->d2i_ASN1_VISIBLESTRING(a, pp, length) 
#define i2d_ASN1_UTF8STRING(a, pp) IAmiSSL->i2d_ASN1_UTF8STRING(a, pp) 
#define d2i_ASN1_UTF8STRING(a, pp, length) IAmiSSL->d2i_ASN1_UTF8STRING(a, pp, length) 
#define i2d_ASN1_BMPSTRING(a, pp) IAmiSSL->i2d_ASN1_BMPSTRING(a, pp) 
#define d2i_ASN1_BMPSTRING(a, pp, length) IAmiSSL->d2i_ASN1_BMPSTRING(a, pp, length) 
#define i2d_ASN1_PRINTABLE(a, pp) IAmiSSL->i2d_ASN1_PRINTABLE(a, pp) 
#define d2i_ASN1_PRINTABLE(a, pp, l) IAmiSSL->d2i_ASN1_PRINTABLE(a, pp, l) 
#define d2i_ASN1_PRINTABLESTRING(a, pp, l) IAmiSSL->d2i_ASN1_PRINTABLESTRING(a, pp, l) 
#define i2d_DIRECTORYSTRING(a, pp) IAmiSSL->i2d_DIRECTORYSTRING(a, pp) 
#define d2i_DIRECTORYSTRING(a, pp, length) IAmiSSL->d2i_DIRECTORYSTRING(a, pp, length) 
#define i2d_DISPLAYTEXT(a, pp) IAmiSSL->i2d_DISPLAYTEXT(a, pp) 
#define d2i_DISPLAYTEXT(a, pp, length) IAmiSSL->d2i_DISPLAYTEXT(a, pp, length) 
#define d2i_ASN1_T61STRING(a, pp, l) IAmiSSL->d2i_ASN1_T61STRING(a, pp, l) 
#define i2d_ASN1_IA5STRING(a, pp) IAmiSSL->i2d_ASN1_IA5STRING(a, pp) 
#define d2i_ASN1_IA5STRING(a, pp, l) IAmiSSL->d2i_ASN1_IA5STRING(a, pp, l) 
#define i2d_ASN1_UTCTIME(a, pp) IAmiSSL->i2d_ASN1_UTCTIME(a, pp) 
#define d2i_ASN1_UTCTIME(a, pp, length) IAmiSSL->d2i_ASN1_UTCTIME(a, pp, length) 
#define i2d_ASN1_GENERALIZEDTIME(a, pp) IAmiSSL->i2d_ASN1_GENERALIZEDTIME(a, pp) 
#define d2i_ASN1_GENERALIZEDTIME(a, pp, length) IAmiSSL->d2i_ASN1_GENERALIZEDTIME(a, pp, length) 
#define i2d_ASN1_TIME(a, pp) IAmiSSL->i2d_ASN1_TIME(a, pp) 
#define d2i_ASN1_TIME(a, pp, length) IAmiSSL->d2i_ASN1_TIME(a, pp, length) 
#define ASN1_TIME_set(s, t) IAmiSSL->ASN1_TIME_set(s, t) 
#define i2d_ASN1_SET(a, pp, func, ex_tag, ex_class, is_set) IAmiSSL->i2d_ASN1_SET(a, pp, func, ex_tag, ex_class, is_set) 
#define d2i_ASN1_SET(a, pp, length, func, free_func, ex_tag, ex_class) IAmiSSL->d2i_ASN1_SET(a, pp, length, func, free_func, ex_tag, ex_class) 
#define i2a_ASN1_INTEGER(bp, a) IAmiSSL->i2a_ASN1_INTEGER(bp, a) 
#define a2i_ASN1_INTEGER(bp, bs, buf, size) IAmiSSL->a2i_ASN1_INTEGER(bp, bs, buf, size) 
#define i2a_ASN1_ENUMERATED(bp, a) IAmiSSL->i2a_ASN1_ENUMERATED(bp, a) 
#define a2i_ASN1_ENUMERATED(bp, bs, buf, size) IAmiSSL->a2i_ASN1_ENUMERATED(bp, bs, buf, size) 
#define i2a_ASN1_OBJECT(bp, a) IAmiSSL->i2a_ASN1_OBJECT(bp, a) 
#define a2i_ASN1_STRING(bp, bs, buf, size) IAmiSSL->a2i_ASN1_STRING(bp, bs, buf, size) 
#define i2a_ASN1_STRING(bp, a, type) IAmiSSL->i2a_ASN1_STRING(bp, a, type) 
#define i2t_ASN1_OBJECT(buf, buf_len, a) IAmiSSL->i2t_ASN1_OBJECT(buf, buf_len, a) 
#define a2d_ASN1_OBJECT(out, olen, buf, num) IAmiSSL->a2d_ASN1_OBJECT(out, olen, buf, num) 
#define ASN1_OBJECT_create(nid, data, len, sn, ln) IAmiSSL->ASN1_OBJECT_create(nid, data, len, sn, ln) 
#define ASN1_INTEGER_set(a, v) IAmiSSL->ASN1_INTEGER_set(a, v) 
#define ASN1_INTEGER_get(a) IAmiSSL->ASN1_INTEGER_get(a) 
#define BN_to_ASN1_INTEGER(bn, ai) IAmiSSL->BN_to_ASN1_INTEGER(bn, ai) 
#define ASN1_INTEGER_to_BN(ai, bn) IAmiSSL->ASN1_INTEGER_to_BN(ai, bn) 
#define ASN1_ENUMERATED_set(a, v) IAmiSSL->ASN1_ENUMERATED_set(a, v) 
#define ASN1_ENUMERATED_get(a) IAmiSSL->ASN1_ENUMERATED_get(a) 
#define BN_to_ASN1_ENUMERATED(bn, ai) IAmiSSL->BN_to_ASN1_ENUMERATED(bn, ai) 
#define ASN1_ENUMERATED_to_BN(ai, bn) IAmiSSL->ASN1_ENUMERATED_to_BN(ai, bn) 
#define ASN1_PRINTABLE_type(s, max) IAmiSSL->ASN1_PRINTABLE_type(s, max) 
#define i2d_ASN1_bytes(a, pp, tags, xclass) IAmiSSL->i2d_ASN1_bytes(a, pp, tags, xclass) 
#define d2i_ASN1_bytes(a, pp, length, Ptag, Pclass) IAmiSSL->d2i_ASN1_bytes(a, pp, length, Ptag, Pclass) 
#define d2i_ASN1_type_bytes(a, pp, length, type) IAmiSSL->d2i_ASN1_type_bytes(a, pp, length, type) 
#define asn1_Finish(c) IAmiSSL->asn1_Finish(c) 
#define ASN1_get_object(pp, plength, ptag, pclass, omax) IAmiSSL->ASN1_get_object(pp, plength, ptag, pclass, omax) 
#define ASN1_check_infinite_end(p, len) IAmiSSL->ASN1_check_infinite_end(p, len) 
#define ASN1_put_object(pp, constructed, length, tags, xclass) IAmiSSL->ASN1_put_object(pp, constructed, length, tags, xclass) 
#define ASN1_object_size(constructed, length, tags) IAmiSSL->ASN1_object_size(constructed, length, tags) 
#define ASN1_dup(i2d, d2i, x) IAmiSSL->ASN1_dup(i2d, d2i, x) 
#define ASN1_d2i_bio(xnew, d2i, bp, x) IAmiSSL->ASN1_d2i_bio(xnew, d2i, bp, x) 
#define ASN1_i2d_bio(i2d, out, x) IAmiSSL->ASN1_i2d_bio(i2d, out, x) 
#define ASN1_UTCTIME_print(fp, a) IAmiSSL->ASN1_UTCTIME_print(fp, a) 
#define ASN1_GENERALIZEDTIME_print(fp, a) IAmiSSL->ASN1_GENERALIZEDTIME_print(fp, a) 
#define ASN1_TIME_print(fp, a) IAmiSSL->ASN1_TIME_print(fp, a) 
#define ASN1_STRING_print(bp, v) IAmiSSL->ASN1_STRING_print(bp, v) 
#define ASN1_parse(bp, pp, len, indent) IAmiSSL->ASN1_parse(bp, pp, len, indent) 
#define i2d_ASN1_HEADER(a, pp) IAmiSSL->i2d_ASN1_HEADER(a, pp) 
#define d2i_ASN1_HEADER(a, pp, length) IAmiSSL->d2i_ASN1_HEADER(a, pp, length) 
#define ASN1_HEADER_new() IAmiSSL->ASN1_HEADER_new() 
#define ASN1_HEADER_free(a) IAmiSSL->ASN1_HEADER_free(a) 
#define ASN1_UNIVERSALSTRING_to_string(s) IAmiSSL->ASN1_UNIVERSALSTRING_to_string(s) 
#define ERR_load_ASN1_strings() IAmiSSL->ERR_load_ASN1_strings() 
#define X509_asn1_meth() IAmiSSL->X509_asn1_meth() 
#define RSAPrivateKey_asn1_meth() IAmiSSL->RSAPrivateKey_asn1_meth() 
#define ASN1_IA5STRING_asn1_meth() IAmiSSL->ASN1_IA5STRING_asn1_meth() 
#define ASN1_BIT_STRING_asn1_meth() IAmiSSL->ASN1_BIT_STRING_asn1_meth() 
#define ASN1_TYPE_set_octetstring(a, data, len) IAmiSSL->ASN1_TYPE_set_octetstring(a, data, len) 
#define ASN1_TYPE_get_octetstring(a, data, max_len) IAmiSSL->ASN1_TYPE_get_octetstring(a, data, max_len) 
#define ASN1_TYPE_set_int_octetstring(a, num, data, len) IAmiSSL->ASN1_TYPE_set_int_octetstring(a, num, data, len) 
#define ASN1_TYPE_get_int_octetstring(a, num, data, max_len) IAmiSSL->ASN1_TYPE_get_int_octetstring(a, num, data, max_len) 
#define ASN1_seq_unpack(buf, len, d2i, free_func) IAmiSSL->ASN1_seq_unpack(buf, len, d2i, free_func) 
#define ASN1_seq_pack(safes, i2d, buf, len) IAmiSSL->ASN1_seq_pack(safes, i2d, buf, len) 
#define ASN1_unpack_string(oct, d2i) IAmiSSL->ASN1_unpack_string(oct, d2i) 
#define ASN1_pack_string(obj, i2d, oct) IAmiSSL->ASN1_pack_string(obj, i2d, oct) 
#define asn1_GetSequence(c, length) IAmiSSL->asn1_GetSequence(c, length) 
#define asn1_add_error(address, offset) IAmiSSL->asn1_add_error(address, offset) 
#define BIO_set_ex_data(bio, idx, data) IAmiSSL->BIO_set_ex_data(bio, idx, data) 
#define BIO_get_ex_data(bio, idx) IAmiSSL->BIO_get_ex_data(bio, idx) 
#define BIO_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->BIO_get_ex_new_index(argl, argp, new_func, dup_func, free_func) 
#define BIO_s_file() IAmiSSL->BIO_s_file() 
#define BIO_new_file(filename, mode) IAmiSSL->BIO_new_file(filename, mode) 
#define BIO_new_fp_amiga(stream, close_flag) IAmiSSL->BIO_new_fp_amiga(stream, close_flag) 
#define BIO_new(type) IAmiSSL->BIO_new(type) 
#define BIO_set(a, type) IAmiSSL->BIO_set(a, type) 
#define BIO_free(a) IAmiSSL->BIO_free(a) 
#define BIO_read(b, data, len) IAmiSSL->BIO_read(b, data, len) 
#define BIO_gets(bp, buf, size) IAmiSSL->BIO_gets(bp, buf, size) 
#define BIO_write(b, data, len) IAmiSSL->BIO_write(b, data, len) 
#define BIO_puts(bp, buf) IAmiSSL->BIO_puts(bp, buf) 
#define BIO_ctrl(bp, cmd, larg, parg) IAmiSSL->BIO_ctrl(bp, cmd, larg, parg) 
#define BIO_ptr_ctrl(bp, cmd, larg) IAmiSSL->BIO_ptr_ctrl(bp, cmd, larg) 
#define BIO_int_ctrl(bp, cmd, larg, iarg) IAmiSSL->BIO_int_ctrl(bp, cmd, larg, iarg) 
#define BIO_push(b, append) IAmiSSL->BIO_push(b, append) 
#define BIO_pop(b) IAmiSSL->BIO_pop(b) 
#define BIO_free_all(a) IAmiSSL->BIO_free_all(a) 
#define BIO_find_type(b, bio_type) IAmiSSL->BIO_find_type(b, bio_type) 
#define BIO_get_retry_BIO(bio, reason) IAmiSSL->BIO_get_retry_BIO(bio, reason) 
#define BIO_get_retry_reason(bio) IAmiSSL->BIO_get_retry_reason(bio) 
#define BIO_dup_chain(in) IAmiSSL->BIO_dup_chain(in) 
#define BIO_debug_callback(bio, cmd, argp, argi, argl, ret) IAmiSSL->BIO_debug_callback(bio, cmd, argp, argi, argl, ret) 
#define BIO_s_mem() IAmiSSL->BIO_s_mem() 
#define BIO_s_socket() IAmiSSL->BIO_s_socket() 
#define BIO_s_connect() IAmiSSL->BIO_s_connect() 
#define BIO_s_accept() IAmiSSL->BIO_s_accept() 
#define BIO_s_fd() IAmiSSL->BIO_s_fd() 
#define BIO_s_log() IAmiSSL->BIO_s_log() 
#define BIO_s_null() IAmiSSL->BIO_s_null() 
#define BIO_f_null() IAmiSSL->BIO_f_null() 
#define BIO_f_buffer() IAmiSSL->BIO_f_buffer() 
#define BIO_f_nbio_test() IAmiSSL->BIO_f_nbio_test() 
#define BIO_sock_should_retry(i) IAmiSSL->BIO_sock_should_retry(i) 
#define BIO_sock_non_fatal_error(error) IAmiSSL->BIO_sock_non_fatal_error(error) 
#define BIO_fd_should_retry(i) IAmiSSL->BIO_fd_should_retry(i) 
#define BIO_fd_non_fatal_error(error) IAmiSSL->BIO_fd_non_fatal_error(error) 
#define BIO_dump(b, bytes, len) IAmiSSL->BIO_dump(b, bytes, len) 
#define BIO_gethostbyname(name) IAmiSSL->BIO_gethostbyname(name) 
#define BIO_sock_error(sock) IAmiSSL->BIO_sock_error(sock) 
#define BIO_socket_ioctl(fd, type, arg) IAmiSSL->BIO_socket_ioctl(fd, type, arg) 
#define BIO_socket_nbio(fd, mode) IAmiSSL->BIO_socket_nbio(fd, mode) 
#define BIO_get_port(str, port_ptr) IAmiSSL->BIO_get_port(str, port_ptr) 
#define BIO_get_host_ip(str, ip) IAmiSSL->BIO_get_host_ip(str, ip) 
#define BIO_get_accept_socket(host_port, mode) IAmiSSL->BIO_get_accept_socket(host_port, mode) 
#define BIO_accept(sock, ip_port) IAmiSSL->BIO_accept(sock, ip_port) 
#define BIO_sock_init() IAmiSSL->BIO_sock_init() 
#define BIO_sock_cleanup() IAmiSSL->BIO_sock_cleanup() 
#define BIO_set_tcp_ndelay(sock, turn_on) IAmiSSL->BIO_set_tcp_ndelay(sock, turn_on) 
#define ERR_load_BIO_strings() IAmiSSL->ERR_load_BIO_strings() 
#define BIO_new_socket(sock, close_flag) IAmiSSL->BIO_new_socket(sock, close_flag) 
#define BIO_new_fd(fd, close_flag) IAmiSSL->BIO_new_fd(fd, close_flag) 
#define BIO_new_connect(host_port) IAmiSSL->BIO_new_connect(host_port) 
#define BIO_new_accept(host_port) IAmiSSL->BIO_new_accept(host_port) 
#define BIO_copy_next_retry(b) IAmiSSL->BIO_copy_next_retry(b) 
#define BIO_ghbn_ctrl(cmd, iarg, parg) IAmiSSL->BIO_ghbn_ctrl(cmd, iarg, parg) 
#define BIO_printfA(bio, args) IAmiSSL->BIO_printfA(bio, args) 
#if !defined(__cplusplus) && (__STDC_VERSION__ >= 199901L || __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95))
#define BIO_printf(...) IAmiSSL->BIO_printf(__VA_ARGS__) 
#endif
#define BN_value_one() IAmiSSL->BN_value_one() 
#define BN_options() IAmiSSL->BN_options() 
#define BN_CTX_new() IAmiSSL->BN_CTX_new() 
#define BN_CTX_init(c) IAmiSSL->BN_CTX_init(c) 
#define BN_CTX_free(c) IAmiSSL->BN_CTX_free(c) 
#define BN_rand(rnd, bits, top, bottom) IAmiSSL->BN_rand(rnd, bits, top, bottom) 
#define BN_num_bits(a) IAmiSSL->BN_num_bits(a) 
#define BN_num_bits_word(a) IAmiSSL->BN_num_bits_word(a) 
#define BN_new() IAmiSSL->BN_new() 
#define BN_init(a) IAmiSSL->BN_init(a) 
#define BN_clear_free(a) IAmiSSL->BN_clear_free(a) 
#define BN_copy(a, b) IAmiSSL->BN_copy(a, b) 
#define BN_bin2bn(s, len, ret) IAmiSSL->BN_bin2bn(s, len, ret) 
#define BN_bn2bin(a, to) IAmiSSL->BN_bn2bin(a, to) 
#define BN_mpi2bn(s, len, ret) IAmiSSL->BN_mpi2bn(s, len, ret) 
#define BN_bn2mpi(a, to) IAmiSSL->BN_bn2mpi(a, to) 
#define BN_sub(r, a, b) IAmiSSL->BN_sub(r, a, b) 
#define BN_usub(r, a, b) IAmiSSL->BN_usub(r, a, b) 
#define BN_uadd(r, a, b) IAmiSSL->BN_uadd(r, a, b) 
#define BN_add(r, a, b) IAmiSSL->BN_add(r, a, b) 
#define BN_mod(rem, m, d, ctx) IAmiSSL->BN_mod(rem, m, d, ctx) 
#define BN_div(dv, rem, m, d, ctx) IAmiSSL->BN_div(dv, rem, m, d, ctx) 
#define BN_mul(r, a, b, ctx) IAmiSSL->BN_mul(r, a, b, ctx) 
#define BN_sqr(r, a, ctx) IAmiSSL->BN_sqr(r, a, ctx) 
#define BN_mod_word(a, w) IAmiSSL->BN_mod_word(a, w) 
#define BN_div_word(a, w) IAmiSSL->BN_div_word(a, w) 
#define BN_mul_word(a, w) IAmiSSL->BN_mul_word(a, w) 
#define BN_add_word(a, w) IAmiSSL->BN_add_word(a, w) 
#define BN_sub_word(a, w) IAmiSSL->BN_sub_word(a, w) 
#define BN_set_word(a, w) IAmiSSL->BN_set_word(a, w) 
#define BN_get_word(a) IAmiSSL->BN_get_word(a) 
#define BN_cmp(a, b) IAmiSSL->BN_cmp(a, b) 
#define BN_free(a) IAmiSSL->BN_free(a) 
#define BN_is_bit_set(a, n) IAmiSSL->BN_is_bit_set(a, n) 
#define BN_lshift(r, a, n) IAmiSSL->BN_lshift(r, a, n) 
#define BN_lshift1(r, a) IAmiSSL->BN_lshift1(r, a) 
#define BN_exp(r, a, p, ctx) IAmiSSL->BN_exp(r, a, p, ctx) 
#define BN_mod_exp(r, a, p, m, ctx) IAmiSSL->BN_mod_exp(r, a, p, m, ctx) 
#define BN_mod_exp_mont(r, a, p, m, ctx, m_ctx) IAmiSSL->BN_mod_exp_mont(r, a, p, m, ctx, m_ctx) 
#define BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx) IAmiSSL->BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx) 
#define BN_mod_exp_simple(r, a, p, m, ctx) IAmiSSL->BN_mod_exp_simple(r, a, p, m, ctx) 
#define BN_mask_bits(a, n) IAmiSSL->BN_mask_bits(a, n) 
#define BN_mod_mul(ret, a, b, m, ctx) IAmiSSL->BN_mod_mul(ret, a, b, m, ctx) 
#define BN_print(fp, a) IAmiSSL->BN_print(fp, a) 
#define BN_reciprocal(r, m, len, ctx) IAmiSSL->BN_reciprocal(r, m, len, ctx) 
#define BN_rshift(r, a, n) IAmiSSL->BN_rshift(r, a, n) 
#define BN_rshift1(r, a) IAmiSSL->BN_rshift1(r, a) 
#define BN_clear(a) IAmiSSL->BN_clear(a) 
#define bn_expand2(b, bits) IAmiSSL->bn_expand2(b, bits) 
#define BN_dup(a) IAmiSSL->BN_dup(a) 
#define BN_ucmp(a, b) IAmiSSL->BN_ucmp(a, b) 
#define BN_set_bit(a, n) IAmiSSL->BN_set_bit(a, n) 
#define BN_clear_bit(a, n) IAmiSSL->BN_clear_bit(a, n) 
#define BN_bn2hex(a) IAmiSSL->BN_bn2hex(a) 
#define BN_bn2dec(a) IAmiSSL->BN_bn2dec(a) 
#define BN_hex2bn(a, str) IAmiSSL->BN_hex2bn(a, str) 
#define BN_dec2bn(a, str) IAmiSSL->BN_dec2bn(a, str) 
#define BN_gcd(r, in_a, in_b, ctx) IAmiSSL->BN_gcd(r, in_a, in_b, ctx) 
#define BN_mod_inverse(ret, a, n, ctx) IAmiSSL->BN_mod_inverse(ret, a, n, ctx) 
#define BN_generate_prime(ret, bits, strong, add, rem, callback, cb_arg) IAmiSSL->BN_generate_prime(ret, bits, strong, add, rem, callback, cb_arg) 
#define BN_is_prime(p, nchecks, callback, ctx, cb_arg) IAmiSSL->BN_is_prime(p, nchecks, callback, ctx, cb_arg) 
#define ERR_load_BN_strings() IAmiSSL->ERR_load_BN_strings() 
#define bn_mul_add_words(rp, ap, num, w) IAmiSSL->bn_mul_add_words(rp, ap, num, w) 
#define bn_mul_words(rp, ap, num, w) IAmiSSL->bn_mul_words(rp, ap, num, w) 
#define bn_sqr_words(rp, ap, num) IAmiSSL->bn_sqr_words(rp, ap, num) 
#define bn_div_words(h, l, d) IAmiSSL->bn_div_words(h, l, d) 
#define bn_add_words(rp, ap, bp, num) IAmiSSL->bn_add_words(rp, ap, bp, num) 
#define bn_sub_words(rp, ap, bp, num) IAmiSSL->bn_sub_words(rp, ap, bp, num) 
#define BN_MONT_CTX_new() IAmiSSL->BN_MONT_CTX_new() 
#define BN_MONT_CTX_init(ctx) IAmiSSL->BN_MONT_CTX_init(ctx) 
#define BN_mod_mul_montgomery(r, a, b, mont, ctx) IAmiSSL->BN_mod_mul_montgomery(r, a, b, mont, ctx) 
#define BN_from_montgomery(r, a, mont, ctx) IAmiSSL->BN_from_montgomery(r, a, mont, ctx) 
#define BN_MONT_CTX_free(mont) IAmiSSL->BN_MONT_CTX_free(mont) 
#define BN_MONT_CTX_set(mont, modulus, ctx) IAmiSSL->BN_MONT_CTX_set(mont, modulus, ctx) 
#define BN_MONT_CTX_copy(to, from) IAmiSSL->BN_MONT_CTX_copy(to, from) 
#define BN_BLINDING_new(A, Ai, mod) IAmiSSL->BN_BLINDING_new(A, Ai, mod) 
#define BN_BLINDING_free(b) IAmiSSL->BN_BLINDING_free(b) 
#define BN_BLINDING_update(b, ctx) IAmiSSL->BN_BLINDING_update(b, ctx) 
#define BN_BLINDING_convert(n, r, ctx) IAmiSSL->BN_BLINDING_convert(n, r, ctx) 
#define BN_BLINDING_invert(n, b, ctx) IAmiSSL->BN_BLINDING_invert(n, b, ctx) 
#define BN_set_params(mul, high, low, mont) IAmiSSL->BN_set_params(mul, high, low, mont) 
#define BN_get_params(which) IAmiSSL->BN_get_params(which) 
#define BN_RECP_CTX_init(recp) IAmiSSL->BN_RECP_CTX_init(recp) 
#define BN_RECP_CTX_new() IAmiSSL->BN_RECP_CTX_new() 
#define BN_RECP_CTX_free(recp) IAmiSSL->BN_RECP_CTX_free(recp) 
#define BN_RECP_CTX_set(recp, rdiv, ctx) IAmiSSL->BN_RECP_CTX_set(recp, rdiv, ctx) 
#define BN_mod_mul_reciprocal(r, x, y, recp, ctx) IAmiSSL->BN_mod_mul_reciprocal(r, x, y, recp, ctx) 
#define BN_mod_exp_recp(r, a, p, m, ctx) IAmiSSL->BN_mod_exp_recp(r, a, p, m, ctx) 
#define BN_div_recp(dv, rem, m, recp, ctx) IAmiSSL->BN_div_recp(dv, rem, m, recp, ctx) 
#define BUF_MEM_new() IAmiSSL->BUF_MEM_new() 
#define BUF_MEM_free(a) IAmiSSL->BUF_MEM_free(a) 
#define BUF_MEM_grow(str, len) IAmiSSL->BUF_MEM_grow(str, len) 
#define BUF_strdup(str) IAmiSSL->BUF_strdup(str) 
#define ERR_load_BUF_strings() IAmiSSL->ERR_load_BUF_strings() 
#define COMP_CTX_new(meth) IAmiSSL->COMP_CTX_new(meth) 
#define COMP_CTX_free(ctx) IAmiSSL->COMP_CTX_free(ctx) 
#define COMP_compress_block(ctx, out, olen, in, ilen) IAmiSSL->COMP_compress_block(ctx, out, olen, in, ilen) 
#define COMP_expand_block(ctx, out, olen, in, ilen) IAmiSSL->COMP_expand_block(ctx, out, olen, in, ilen) 
#define COMP_rle() IAmiSSL->COMP_rle() 
#define CONF_load(conf, file, eline) IAmiSSL->CONF_load(conf, file, eline) 
#define CONF_get_section(conf, section) IAmiSSL->CONF_get_section(conf, section) 
#define CONF_get_string(conf, group, name) IAmiSSL->CONF_get_string(conf, group, name) 
#define CONF_get_number(conf, group, name) IAmiSSL->CONF_get_number(conf, group, name) 
#define CONF_free(conf) IAmiSSL->CONF_free(conf) 
#define ERR_load_CONF_strings() IAmiSSL->ERR_load_CONF_strings() 
#define SSLeay_version(type) IAmiSSL->SSLeay_version(type) 
#define SSLeay() IAmiSSL->SSLeay() 
#define CRYPTO_get_ex_new_index(idx, sk, argl, argp, new_func, dup_func, free_func) IAmiSSL->CRYPTO_get_ex_new_index(idx, sk, argl, argp, new_func, dup_func, free_func) 
#define CRYPTO_set_ex_data(ad, idx, val) IAmiSSL->CRYPTO_set_ex_data(ad, idx, val) 
#define CRYPTO_get_ex_data(ad, idx) IAmiSSL->CRYPTO_get_ex_data(ad, idx) 
#define CRYPTO_dup_ex_data(meth, from, to) IAmiSSL->CRYPTO_dup_ex_data(meth, from, to) 
#define CRYPTO_free_ex_data(meth, obj, ad) IAmiSSL->CRYPTO_free_ex_data(meth, obj, ad) 
#define CRYPTO_new_ex_data(meth, obj, ad) IAmiSSL->CRYPTO_new_ex_data(meth, obj, ad) 
#define CRYPTO_mem_ctrl(mode) IAmiSSL->CRYPTO_mem_ctrl(mode) 
#define CRYPTO_get_new_lockid(name) IAmiSSL->CRYPTO_get_new_lockid(name) 
#define CRYPTO_lock(mode, type, file, line) IAmiSSL->CRYPTO_lock(mode, type, file, line) 
#define CRYPTO_set_locking_callback(func) IAmiSSL->CRYPTO_set_locking_callback(func) 
#define CRYPTO_get_locking_callback() IAmiSSL->CRYPTO_get_locking_callback() 
#define CRYPTO_set_add_lock_callback(func) IAmiSSL->CRYPTO_set_add_lock_callback(func) 
#define CRYPTO_get_add_lock_callback() IAmiSSL->CRYPTO_get_add_lock_callback() 
#define CRYPTO_set_id_callback(func) IAmiSSL->CRYPTO_set_id_callback(func) 
#define CRYPTO_get_id_callback() IAmiSSL->CRYPTO_get_id_callback() 
#define CRYPTO_thread_id() IAmiSSL->CRYPTO_thread_id() 
#define CRYPTO_get_lock_name(type) IAmiSSL->CRYPTO_get_lock_name(type) 
#define CRYPTO_add_lock(pointer, amount, type, file, line) IAmiSSL->CRYPTO_add_lock(pointer, amount, type, file, line) 
#define CRYPTO_set_mem_functions(m, r, free_func) IAmiSSL->CRYPTO_set_mem_functions(m, r, free_func) 
#define CRYPTO_get_mem_functions(m, r, f) IAmiSSL->CRYPTO_get_mem_functions(m, r, f) 
#define CRYPTO_set_locked_mem_functions(m, free_func) IAmiSSL->CRYPTO_set_locked_mem_functions(m, free_func) 
#define CRYPTO_get_locked_mem_functions(m, f) IAmiSSL->CRYPTO_get_locked_mem_functions(m, f) 
#define CRYPTO_malloc_locked(num) IAmiSSL->CRYPTO_malloc_locked(num) 
#define CRYPTO_free_locked(a) IAmiSSL->CRYPTO_free_locked(a) 
#define CRYPTO_malloc(num) IAmiSSL->CRYPTO_malloc(num) 
#define CRYPTO_free(a) IAmiSSL->CRYPTO_free(a) 
#define CRYPTO_realloc(addr, num) IAmiSSL->CRYPTO_realloc(addr, num) 
#define CRYPTO_remalloc(addr, num) IAmiSSL->CRYPTO_remalloc(addr, num) 
#define CRYPTO_dbg_malloc(num, file, line) IAmiSSL->CRYPTO_dbg_malloc(num, file, line) 
#define CRYPTO_dbg_realloc(addr, num, file, line) IAmiSSL->CRYPTO_dbg_realloc(addr, num, file, line) 
#define CRYPTO_dbg_free(a) IAmiSSL->CRYPTO_dbg_free(a) 
#define CRYPTO_dbg_remalloc(addr, num, file, line) IAmiSSL->CRYPTO_dbg_remalloc(addr, num, file, line) 
#define CRYPTO_mem_leaks(bio) IAmiSSL->CRYPTO_mem_leaks(bio) 
#define CRYPTO_mem_leaks_cb(cb) IAmiSSL->CRYPTO_mem_leaks_cb(cb) 
#define ERR_load_CRYPTO_strings() IAmiSSL->ERR_load_CRYPTO_strings() 
#define DH_new() IAmiSSL->DH_new() 
#define DH_free(dh) IAmiSSL->DH_free(dh) 
#define DH_size(dh) IAmiSSL->DH_size(dh) 
#define DH_generate_parameters(prime_len, generator, callback, cb_arg) IAmiSSL->DH_generate_parameters(prime_len, generator, callback, cb_arg) 
#define DH_check(dh, codes) IAmiSSL->DH_check(dh, codes) 
#define DH_generate_key(dh) IAmiSSL->DH_generate_key(dh) 
#define DH_compute_key(key, pub_key, dh) IAmiSSL->DH_compute_key(key, pub_key, dh) 
#define d2i_DHparams(a, pp, length) IAmiSSL->d2i_DHparams(a, pp, length) 
#define i2d_DHparams(a, pp) IAmiSSL->i2d_DHparams(a, pp) 
#define DHparams_print(bp, x) IAmiSSL->DHparams_print(bp, x) 
#define ERR_load_DH_strings() IAmiSSL->ERR_load_DH_strings() 
#define DSA_SIG_new() IAmiSSL->DSA_SIG_new() 
#define DSA_SIG_free(a) IAmiSSL->DSA_SIG_free(a) 
#define i2d_DSA_SIG(a, pp) IAmiSSL->i2d_DSA_SIG(a, pp) 
#define d2i_DSA_SIG(v, pp, length) IAmiSSL->d2i_DSA_SIG(v, pp, length) 
#define DSA_do_sign(dgst, dlen, dsa) IAmiSSL->DSA_do_sign(dgst, dlen, dsa) 
#define DSA_do_verify(dgst, dgst_len, sig, dsa) IAmiSSL->DSA_do_verify(dgst, dgst_len, sig, dsa) 
#define DSA_new() IAmiSSL->DSA_new() 
#define DSA_size(a) IAmiSSL->DSA_size(a) 
#define DSA_sign_setup(dsa, ctx_in, kinvp, rp) IAmiSSL->DSA_sign_setup(dsa, ctx_in, kinvp, rp) 
#define DSA_sign(type, dgst, dlen, sig, siglen, dsa) IAmiSSL->DSA_sign(type, dgst, dlen, sig, siglen, dsa) 
#define DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa) IAmiSSL->DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa) 
#define DSA_free(r) IAmiSSL->DSA_free(r) 
#define ERR_load_DSA_strings() IAmiSSL->ERR_load_DSA_strings() 
#define d2i_DSAPublicKey(a, pp, length) IAmiSSL->d2i_DSAPublicKey(a, pp, length) 
#define d2i_DSAPrivateKey(a, pp, length) IAmiSSL->d2i_DSAPrivateKey(a, pp, length) 
#define d2i_DSAparams(a, pp, length) IAmiSSL->d2i_DSAparams(a, pp, length) 
#define DSA_generate_parameters(bits, seed, seed_len, counter_ret, h_ret, callback, cb_arg) IAmiSSL->DSA_generate_parameters(bits, seed, seed_len, counter_ret, h_ret, callback, cb_arg) 
#define DSA_generate_key(a) IAmiSSL->DSA_generate_key(a) 
#define i2d_DSAPublicKey(a, pp) IAmiSSL->i2d_DSAPublicKey(a, pp) 
#define i2d_DSAPrivateKey(a, pp) IAmiSSL->i2d_DSAPrivateKey(a, pp) 
#define i2d_DSAparams(a, pp) IAmiSSL->i2d_DSAparams(a, pp) 
#define DSAparams_print(bp, x) IAmiSSL->DSAparams_print(bp, x) 
#define DSA_print(bp, x, off) IAmiSSL->DSA_print(bp, x, off) 
#define DSA_is_prime(q, callback, cb_arg) IAmiSSL->DSA_is_prime(q, callback, cb_arg) 
#define ERR_put_error(lib, func, reason, file, line) IAmiSSL->ERR_put_error(lib, func, reason, file, line) 
#define ERR_set_error_data(data, flags) IAmiSSL->ERR_set_error_data(data, flags) 
#define ERR_get_error() IAmiSSL->ERR_get_error() 
#define ERR_get_error_line(file, line) IAmiSSL->ERR_get_error_line(file, line) 
#define ERR_get_error_line_data(file, line, data, flags) IAmiSSL->ERR_get_error_line_data(file, line, data, flags) 
#define ERR_peek_error() IAmiSSL->ERR_peek_error() 
#define ERR_peek_error_line(file, line) IAmiSSL->ERR_peek_error_line(file, line) 
#define ERR_peek_error_line_data(file, line, data, flags) IAmiSSL->ERR_peek_error_line_data(file, line, data, flags) 
#define ERR_clear_error() IAmiSSL->ERR_clear_error() 
#define ERR_error_string(e, buf) IAmiSSL->ERR_error_string(e, buf) 
#define ERR_lib_error_string(e) IAmiSSL->ERR_lib_error_string(e) 
#define ERR_func_error_string(e) IAmiSSL->ERR_func_error_string(e) 
#define ERR_reason_error_string(e) IAmiSSL->ERR_reason_error_string(e) 
#define ERR_print_errors(bp) IAmiSSL->ERR_print_errors(bp) 
#define ERR_add_error_dataA(num, data) IAmiSSL->ERR_add_error_dataA(num, data) 
#if !defined(__cplusplus) && (__STDC_VERSION__ >= 199901L || __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95))
#define ERR_add_error_data(...) IAmiSSL->ERR_add_error_data(__VA_ARGS__) 
#endif
#define ERR_load_strings(lib, str) IAmiSSL->ERR_load_strings(lib, str) 
#define ERR_load_ERR_strings() IAmiSSL->ERR_load_ERR_strings() 
#define ERR_load_crypto_strings() IAmiSSL->ERR_load_crypto_strings() 
#define ERR_free_strings() IAmiSSL->ERR_free_strings() 
#define ERR_remove_state(pid) IAmiSSL->ERR_remove_state(pid) 
#define ERR_get_state() IAmiSSL->ERR_get_state() 
#define ERR_get_string_table() IAmiSSL->ERR_get_string_table() 
#define ERR_get_err_state_table() IAmiSSL->ERR_get_err_state_table() 
#define ERR_get_next_error_library() IAmiSSL->ERR_get_next_error_library() 
#define EVP_MD_CTX_copy(out, in) IAmiSSL->EVP_MD_CTX_copy(out, in) 
#define EVP_DigestInit(ctx, type) IAmiSSL->EVP_DigestInit(ctx, type) 
#define EVP_DigestUpdate(ctx, d, cnt) IAmiSSL->EVP_DigestUpdate(ctx, d, cnt) 
#define EVP_DigestFinal(ctx, md, s) IAmiSSL->EVP_DigestFinal(ctx, md, s) 
#define EVP_read_pw_string(buf, length, prompt, verify) IAmiSSL->EVP_read_pw_string(buf, length, prompt, verify) 
#define EVP_set_pw_prompt(prompt) IAmiSSL->EVP_set_pw_prompt(prompt) 
#define EVP_get_pw_prompt() IAmiSSL->EVP_get_pw_prompt() 
#define EVP_BytesToKey(type, md, salt, data, datal, count, key, iv) IAmiSSL->EVP_BytesToKey(type, md, salt, data, datal, count, key, iv) 
#define EVP_EncryptInit(ctx, type, key, iv) IAmiSSL->EVP_EncryptInit(ctx, type, key, iv) 
#define EVP_EncryptUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_EncryptUpdate(ctx, out, outl, in, inl) 
#define EVP_EncryptFinal(ctx, out, outl) IAmiSSL->EVP_EncryptFinal(ctx, out, outl) 
#define EVP_DecryptInit(ctx, type, key, iv) IAmiSSL->EVP_DecryptInit(ctx, type, key, iv) 
#define EVP_DecryptUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_DecryptUpdate(ctx, out, outl, in, inl) 
#define EVP_DecryptFinal(ctx, outm, outl) IAmiSSL->EVP_DecryptFinal(ctx, outm, outl) 
#define EVP_CipherInit(ctx, type, key, iv, enc) IAmiSSL->EVP_CipherInit(ctx, type, key, iv, enc) 
#define EVP_CipherUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_CipherUpdate(ctx, out, outl, in, inl) 
#define EVP_CipherFinal(ctx, outm, outl) IAmiSSL->EVP_CipherFinal(ctx, outm, outl) 
#define EVP_SignFinal(ctx, md, s, pkey) IAmiSSL->EVP_SignFinal(ctx, md, s, pkey) 
#define EVP_VerifyFinal(ctx, sigbuf, siglen, pkey) IAmiSSL->EVP_VerifyFinal(ctx, sigbuf, siglen, pkey) 
#define EVP_OpenInit(ctx, type, ek, ekl, iv, priv) IAmiSSL->EVP_OpenInit(ctx, type, ek, ekl, iv, priv) 
#define EVP_OpenFinal(ctx, out, outl) IAmiSSL->EVP_OpenFinal(ctx, out, outl) 
#define EVP_SealInit(ctx, type, ek, ekl, iv, pubk, npubk) IAmiSSL->EVP_SealInit(ctx, type, ek, ekl, iv, pubk, npubk) 
#define EVP_SealFinal(ctx, out, outl) IAmiSSL->EVP_SealFinal(ctx, out, outl) 
#define EVP_EncodeInit(ctx) IAmiSSL->EVP_EncodeInit(ctx) 
#define EVP_EncodeUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_EncodeUpdate(ctx, out, outl, in, inl) 
#define EVP_EncodeFinal(ctx, out, outl) IAmiSSL->EVP_EncodeFinal(ctx, out, outl) 
#define EVP_EncodeBlock(t, f, n) IAmiSSL->EVP_EncodeBlock(t, f, n) 
#define EVP_DecodeInit(ctx) IAmiSSL->EVP_DecodeInit(ctx) 
#define EVP_DecodeUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_DecodeUpdate(ctx, out, outl, in, inl) 
#define EVP_DecodeFinal(ctx, out, outl) IAmiSSL->EVP_DecodeFinal(ctx, out, outl) 
#define EVP_DecodeBlock(t, f, n) IAmiSSL->EVP_DecodeBlock(t, f, n) 
#define ERR_load_EVP_strings() IAmiSSL->ERR_load_EVP_strings() 
#define EVP_CIPHER_CTX_init(a) IAmiSSL->EVP_CIPHER_CTX_init(a) 
#define EVP_CIPHER_CTX_cleanup(a) IAmiSSL->EVP_CIPHER_CTX_cleanup(a) 
#define BIO_f_md() IAmiSSL->BIO_f_md() 
#define BIO_f_base64() IAmiSSL->BIO_f_base64() 
#define BIO_f_cipher() IAmiSSL->BIO_f_cipher() 
#define BIO_f_reliable() IAmiSSL->BIO_f_reliable() 
#define BIO_set_cipher(b, c, k, i, enc) IAmiSSL->BIO_set_cipher(b, c, k, i, enc) 
#define EVP_md_null() IAmiSSL->EVP_md_null() 
#define EVP_md2() IAmiSSL->EVP_md2() 
#define EVP_md5() IAmiSSL->EVP_md5() 
#define EVP_sha() IAmiSSL->EVP_sha() 
#define EVP_sha1() IAmiSSL->EVP_sha1() 
#define EVP_dss() IAmiSSL->EVP_dss() 
#define EVP_dss1() IAmiSSL->EVP_dss1() 
#define EVP_mdc2() IAmiSSL->EVP_mdc2() 
#define EVP_ripemd160() IAmiSSL->EVP_ripemd160() 
#define EVP_enc_null() IAmiSSL->EVP_enc_null() 
#define EVP_des_ecb() IAmiSSL->EVP_des_ecb() 
#define EVP_des_ede() IAmiSSL->EVP_des_ede() 
#define EVP_des_ede3() IAmiSSL->EVP_des_ede3() 
#define EVP_des_cfb() IAmiSSL->EVP_des_cfb() 
#define EVP_des_ede_cfb() IAmiSSL->EVP_des_ede_cfb() 
#define EVP_des_ede3_cfb() IAmiSSL->EVP_des_ede3_cfb() 
#define EVP_des_ofb() IAmiSSL->EVP_des_ofb() 
#define EVP_des_ede_ofb() IAmiSSL->EVP_des_ede_ofb() 
#define EVP_des_ede3_ofb() IAmiSSL->EVP_des_ede3_ofb() 
#define EVP_des_cbc() IAmiSSL->EVP_des_cbc() 
#define EVP_des_ede_cbc() IAmiSSL->EVP_des_ede_cbc() 
#define EVP_des_ede3_cbc() IAmiSSL->EVP_des_ede3_cbc() 
#define EVP_desx_cbc() IAmiSSL->EVP_desx_cbc() 
#define EVP_rc4() IAmiSSL->EVP_rc4() 
#define EVP_rc4_40() IAmiSSL->EVP_rc4_40() 
#define EVP_idea_ecb() IAmiSSL->EVP_idea_ecb() 
#define EVP_idea_cfb() IAmiSSL->EVP_idea_cfb() 
#define EVP_idea_ofb() IAmiSSL->EVP_idea_ofb() 
#define EVP_idea_cbc() IAmiSSL->EVP_idea_cbc() 
#define EVP_rc2_ecb() IAmiSSL->EVP_rc2_ecb() 
#define EVP_rc2_cbc() IAmiSSL->EVP_rc2_cbc() 
#define EVP_rc2_40_cbc() IAmiSSL->EVP_rc2_40_cbc() 
#define EVP_rc2_64_cbc() IAmiSSL->EVP_rc2_64_cbc() 
#define EVP_rc2_cfb() IAmiSSL->EVP_rc2_cfb() 
#define EVP_rc2_ofb() IAmiSSL->EVP_rc2_ofb() 
#define EVP_bf_ecb() IAmiSSL->EVP_bf_ecb() 
#define EVP_bf_cbc() IAmiSSL->EVP_bf_cbc() 
#define EVP_bf_cfb() IAmiSSL->EVP_bf_cfb() 
#define EVP_bf_ofb() IAmiSSL->EVP_bf_ofb() 
#define EVP_cast5_ecb() IAmiSSL->EVP_cast5_ecb() 
#define EVP_cast5_cbc() IAmiSSL->EVP_cast5_cbc() 
#define EVP_cast5_cfb() IAmiSSL->EVP_cast5_cfb() 
#define EVP_cast5_ofb() IAmiSSL->EVP_cast5_ofb() 
#define EVP_rc5_32_12_16_cbc() IAmiSSL->EVP_rc5_32_12_16_cbc() 
#define EVP_rc5_32_12_16_ecb() IAmiSSL->EVP_rc5_32_12_16_ecb() 
#define EVP_rc5_32_12_16_cfb() IAmiSSL->EVP_rc5_32_12_16_cfb() 
#define EVP_rc5_32_12_16_ofb() IAmiSSL->EVP_rc5_32_12_16_ofb() 
#define SSLeay_add_all_algorithms() IAmiSSL->SSLeay_add_all_algorithms() 
#define SSLeay_add_all_ciphers() IAmiSSL->SSLeay_add_all_ciphers() 
#define SSLeay_add_all_digests() IAmiSSL->SSLeay_add_all_digests() 
#define EVP_add_cipher(cipher) IAmiSSL->EVP_add_cipher(cipher) 
#define EVP_add_digest(digest) IAmiSSL->EVP_add_digest(digest) 
#define EVP_get_cipherbyname(name) IAmiSSL->EVP_get_cipherbyname(name) 
#define EVP_get_digestbyname(name) IAmiSSL->EVP_get_digestbyname(name) 
#define EVP_cleanup() IAmiSSL->EVP_cleanup() 
#define EVP_PKEY_decrypt(dec_key, enc_key, enc_key_len, private_key) IAmiSSL->EVP_PKEY_decrypt(dec_key, enc_key, enc_key_len, private_key) 
#define EVP_PKEY_encrypt(enc_key, key, key_len, pub_key) IAmiSSL->EVP_PKEY_encrypt(enc_key, key, key_len, pub_key) 
#define EVP_PKEY_type(type) IAmiSSL->EVP_PKEY_type(type) 
#define EVP_PKEY_bits(pkey) IAmiSSL->EVP_PKEY_bits(pkey) 
#define EVP_PKEY_size(pkey) IAmiSSL->EVP_PKEY_size(pkey) 
#define EVP_PKEY_assign(pkey, type, key) IAmiSSL->EVP_PKEY_assign(pkey, type, key) 
#define EVP_PKEY_new() IAmiSSL->EVP_PKEY_new() 
#define EVP_PKEY_free(pkey) IAmiSSL->EVP_PKEY_free(pkey) 
#define d2i_PublicKey(type, a, pp, length) IAmiSSL->d2i_PublicKey(type, a, pp, length) 
#define i2d_PublicKey(a, pp) IAmiSSL->i2d_PublicKey(a, pp) 
#define d2i_PrivateKey(type, a, pp, length) IAmiSSL->d2i_PrivateKey(type, a, pp, length) 
#define i2d_PrivateKey(a, pp) IAmiSSL->i2d_PrivateKey(a, pp) 
#define EVP_PKEY_copy_parameters(to, from) IAmiSSL->EVP_PKEY_copy_parameters(to, from) 
#define EVP_PKEY_missing_parameters(pkey) IAmiSSL->EVP_PKEY_missing_parameters(pkey) 
#define EVP_PKEY_save_parameters(pkey, mode) IAmiSSL->EVP_PKEY_save_parameters(pkey, mode) 
#define EVP_PKEY_cmp_parameters(a, b) IAmiSSL->EVP_PKEY_cmp_parameters(a, b) 
#define EVP_CIPHER_type(ctx) IAmiSSL->EVP_CIPHER_type(ctx) 
#define EVP_CIPHER_param_to_asn1(c, type) IAmiSSL->EVP_CIPHER_param_to_asn1(c, type) 
#define EVP_CIPHER_asn1_to_param(c, type) IAmiSSL->EVP_CIPHER_asn1_to_param(c, type) 
#define EVP_CIPHER_set_asn1_iv(c, type) IAmiSSL->EVP_CIPHER_set_asn1_iv(c, type) 
#define EVP_CIPHER_get_asn1_iv(c, type) IAmiSSL->EVP_CIPHER_get_asn1_iv(c, type) 
#define HMAC_Init(ctx, key, len, md) IAmiSSL->HMAC_Init(ctx, key, len, md) 
#define HMAC_Update(ctx, key, len) IAmiSSL->HMAC_Update(ctx, key, len) 
#define HMAC_Final(ctx, md, len) IAmiSSL->HMAC_Final(ctx, md, len) 
#define HMAC_cleanup(ctx) IAmiSSL->HMAC_cleanup(ctx) 
#define HMAC(evp_md, key, key_len, d, n, md, md_len) IAmiSSL->HMAC(evp_md, key, key_len, d, n, md, md_len) 
#define lh_new(h, c) IAmiSSL->lh_new(h, c) 
#define lh_free(lh) IAmiSSL->lh_free(lh) 
#define lh_insert(lh, data) IAmiSSL->lh_insert(lh, data) 
#define lh_delete(lh, data) IAmiSSL->lh_delete(lh, data) 
#define lh_retrieve(lh, data) IAmiSSL->lh_retrieve(lh, data) 
#define lh_doall(lh, func) IAmiSSL->lh_doall(lh, func) 
#define lh_doall_arg(lh, func, arg) IAmiSSL->lh_doall_arg(lh, func, arg) 
#define lh_strhash(c) IAmiSSL->lh_strhash(c) 
#define lh_stats_bio(lh, out) IAmiSSL->lh_stats_bio(lh, out) 
#define lh_node_stats_bio(lh, out) IAmiSSL->lh_node_stats_bio(lh, out) 
#define lh_node_usage_stats_bio(lh, out) IAmiSSL->lh_node_usage_stats_bio(lh, out) 
#define OBJ_NAME_init() IAmiSSL->OBJ_NAME_init() 
#define OBJ_NAME_new_index(hash_func, cmp_func, free_func) IAmiSSL->OBJ_NAME_new_index(hash_func, cmp_func, free_func) 
#define OBJ_NAME_get(name, type) IAmiSSL->OBJ_NAME_get(name, type) 
#define OBJ_NAME_add(name, type, data) IAmiSSL->OBJ_NAME_add(name, type, data) 
#define OBJ_NAME_remove(name, type) IAmiSSL->OBJ_NAME_remove(name, type) 
#define OBJ_NAME_cleanup(type) IAmiSSL->OBJ_NAME_cleanup(type) 
#define OBJ_dup(o) IAmiSSL->OBJ_dup(o) 
#define OBJ_nid2obj(n) IAmiSSL->OBJ_nid2obj(n) 
#define OBJ_nid2ln(n) IAmiSSL->OBJ_nid2ln(n) 
#define OBJ_nid2sn(n) IAmiSSL->OBJ_nid2sn(n) 
#define OBJ_obj2nid(o) IAmiSSL->OBJ_obj2nid(o) 
#define OBJ_txt2obj(s, no_name) IAmiSSL->OBJ_txt2obj(s, no_name) 
#define OBJ_txt2nid(s) IAmiSSL->OBJ_txt2nid(s) 
#define OBJ_ln2nid(s) IAmiSSL->OBJ_ln2nid(s) 
#define OBJ_sn2nid(s) IAmiSSL->OBJ_sn2nid(s) 
#define OBJ_cmp(a, b) IAmiSSL->OBJ_cmp(a, b) 
#define OBJ_bsearch(key, base, num, size, cmp) IAmiSSL->OBJ_bsearch(key, base, num, size, cmp) 
#define ERR_load_OBJ_strings() IAmiSSL->ERR_load_OBJ_strings() 
#define OBJ_new_nid(num) IAmiSSL->OBJ_new_nid(num) 
#define OBJ_add_object(obj) IAmiSSL->OBJ_add_object(obj) 
#define OBJ_create(oid, sn, ln) IAmiSSL->OBJ_create(oid, sn, ln) 
#define OBJ_cleanup() IAmiSSL->OBJ_cleanup() 
#define OBJ_create_objects(in) IAmiSSL->OBJ_create_objects(in) 
#define PEM_get_EVP_CIPHER_INFO(header, cipher) IAmiSSL->PEM_get_EVP_CIPHER_INFO(header, cipher) 
#define PEM_do_header(cipher, data, len, callback, u) IAmiSSL->PEM_do_header(cipher, data, len, callback, u) 
#define PEM_read_bio(bp, name, header, data, len) IAmiSSL->PEM_read_bio(bp, name, header, data, len) 
#define PEM_write_bio(bp, name, hdr, data, len) IAmiSSL->PEM_write_bio(bp, name, hdr, data, len) 
#define PEM_ASN1_read_bio(d2i, name, bp, x, cb, u) IAmiSSL->PEM_ASN1_read_bio(d2i, name, bp, x, cb, u) 
#define PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u) 
#define PEM_X509_INFO_read_bio(bp, sk, cb, u) IAmiSSL->PEM_X509_INFO_read_bio(bp, sk, cb, u) 
#define PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cb, u) IAmiSSL->PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cb, u) 
#define PEM_SealInit(ctx, type, md_type, ek, ekl, iv, pubk, npubk) IAmiSSL->PEM_SealInit(ctx, type, md_type, ek, ekl, iv, pubk, npubk) 
#define PEM_SealUpdate(ctx, out, outl, in, inl) IAmiSSL->PEM_SealUpdate(ctx, out, outl, in, inl) 
#define PEM_SealFinal(ctx, sig, sigl, out, outl, priv) IAmiSSL->PEM_SealFinal(ctx, sig, sigl, out, outl, priv) 
#define PEM_SignInit(ctx, type) IAmiSSL->PEM_SignInit(ctx, type) 
#define PEM_SignUpdate(ctx, d, cnt) IAmiSSL->PEM_SignUpdate(ctx, d, cnt) 
#define PEM_SignFinal(ctx, sigret, siglen, pkey) IAmiSSL->PEM_SignFinal(ctx, sigret, siglen, pkey) 
#define ERR_load_PEM_strings() IAmiSSL->ERR_load_PEM_strings() 
#define PEM_proc_type(buf, type) IAmiSSL->PEM_proc_type(buf, type) 
#define PEM_dek_info(buf, type, len, str) IAmiSSL->PEM_dek_info(buf, type, len, str) 
#define PEM_read_bio_X509(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509(bp, x, cb, u) 
#define PEM_read_bio_X509_REQ(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_REQ(bp, x, cb, u) 
#define PEM_read_bio_X509_CRL(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_CRL(bp, x, cb, u) 
#define PEM_read_bio_RSAPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSAPrivateKey(bp, x, cb, u) 
#define PEM_read_bio_RSAPublicKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSAPublicKey(bp, x, cb, u) 
#define PEM_read_bio_DSAPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSAPrivateKey(bp, x, cb, u) 
#define PEM_read_bio_PrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_PrivateKey(bp, x, cb, u) 
#define PEM_read_bio_PKCS7(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS7(bp, x, cb, u) 
#define PEM_read_bio_DHparams(bp, x, cb, u) IAmiSSL->PEM_read_bio_DHparams(bp, x, cb, u) 
#define PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bp, x, cb, u) IAmiSSL->PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bp, x, cb, u) 
#define PEM_read_bio_DSAparams(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSAparams(bp, x, cb, u) 
#define PEM_write_bio_X509(bp, x) IAmiSSL->PEM_write_bio_X509(bp, x) 
#define PEM_write_bio_X509_REQ(bp, x) IAmiSSL->PEM_write_bio_X509_REQ(bp, x) 
#define PEM_write_bio_X509_CRL(bp, x) IAmiSSL->PEM_write_bio_X509_CRL(bp, x) 
#define PEM_write_bio_RSAPrivateKey(fp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_RSAPrivateKey(fp, x, enc, kstr, klen, cb, u) 
#define PEM_write_bio_RSAPublicKey(fp, x) IAmiSSL->PEM_write_bio_RSAPublicKey(fp, x) 
#define PEM_write_bio_DSAPrivateKey(fp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_DSAPrivateKey(fp, x, enc, kstr, klen, cb, u) 
#define PEM_write_bio_PrivateKey(fp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PrivateKey(fp, x, enc, kstr, klen, cb, u) 
#define PEM_write_bio_PKCS7(bp, x) IAmiSSL->PEM_write_bio_PKCS7(bp, x) 
#define PEM_write_bio_DHparams(bp, x) IAmiSSL->PEM_write_bio_DHparams(bp, x) 
#define PEM_write_bio_DSAparams(bp, x) IAmiSSL->PEM_write_bio_DSAparams(bp, x) 
#define PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bp, x) IAmiSSL->PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bp, x) 
#define PKCS12_pack_safebag(obj, i2d, nid1, nid2) IAmiSSL->PKCS12_pack_safebag(obj, i2d, nid1, nid2) 
#define PKCS12_MAKE_KEYBAG(p8) IAmiSSL->PKCS12_MAKE_KEYBAG(p8) 
#define PKCS8_encrypt(pbe_nid, cipher, pass, passlen, salt, saltlen, iter, p8) IAmiSSL->PKCS8_encrypt(pbe_nid, cipher, pass, passlen, salt, saltlen, iter, p8) 
#define PKCS12_MAKE_SHKEYBAG(pbe_nid, pass, passlen, salt, saltlen, iter, p8) IAmiSSL->PKCS12_MAKE_SHKEYBAG(pbe_nid, pass, passlen, salt, saltlen, iter, p8) 
#define PKCS12_pack_p7data(sk) IAmiSSL->PKCS12_pack_p7data(sk) 
#define PKCS12_pack_p7encdata(pbe_nid, pass, passlen, salt, saltlen, iter, bags) IAmiSSL->PKCS12_pack_p7encdata(pbe_nid, pass, passlen, salt, saltlen, iter, bags) 
#define PKCS12_add_localkeyid(bag, name, namelen) IAmiSSL->PKCS12_add_localkeyid(bag, name, namelen) 
#define PKCS12_add_friendlyname_asc(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_asc(bag, name, namelen) 
#define PKCS12_add_friendlyname_uni(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_uni(bag, name, namelen) 
#define PKCS8_add_keyusage(p8, usage) IAmiSSL->PKCS8_add_keyusage(p8, usage) 
#define PKCS12_get_attr_gen(attrs, attr_nid) IAmiSSL->PKCS12_get_attr_gen(attrs, attr_nid) 
#define PKCS12_get_friendlyname(bag) IAmiSSL->PKCS12_get_friendlyname(bag) 
#define PKCS12_pbe_crypt(algor, pass, passlen, in, inlen, data, datalen, en_de) IAmiSSL->PKCS12_pbe_crypt(algor, pass, passlen, in, inlen, data, datalen, en_de) 
#define PKCS12_decrypt_d2i(algor, d2i, free_func, pass, passlen, oct, seq) IAmiSSL->PKCS12_decrypt_d2i(algor, d2i, free_func, pass, passlen, oct, seq) 
#define PKCS12_i2d_encrypt(algor, i2d, pass, passlen, obj, seq) IAmiSSL->PKCS12_i2d_encrypt(algor, i2d, pass, passlen, obj, seq) 
#define PKCS12_init(mode) IAmiSSL->PKCS12_init(mode) 
#define PKCS12_key_gen_asc(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_asc(pass, passlen, salt, saltlen, id, iter, n, out, md_type) 
#define PKCS12_key_gen_uni(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_uni(pass, passlen, salt, saltlen, id, iter, n, out, md_type) 
#define PKCS12_gen_mac(p12, pass, passlen, mac, maclen) IAmiSSL->PKCS12_gen_mac(p12, pass, passlen, mac, maclen) 
#define PKCS12_verify_mac(p12, pass, passlen) IAmiSSL->PKCS12_verify_mac(p12, pass, passlen) 
#define PKCS12_set_mac(p12, pass, passlen, salt, saltlen, iter, md_type) IAmiSSL->PKCS12_set_mac(p12, pass, passlen, salt, saltlen, iter, md_type) 
#define PKCS12_setup_mac(p12, iter, salt, saltlen, md_type) IAmiSSL->PKCS12_setup_mac(p12, iter, salt, saltlen, md_type) 
#define asc2uni(asc, uni, unilen) IAmiSSL->asc2uni(asc, uni, unilen) 
#define uni2asc(uni, unilen) IAmiSSL->uni2asc(uni, unilen) 
#define i2d_PKCS12_BAGS(a, pp) IAmiSSL->i2d_PKCS12_BAGS(a, pp) 
#define PKCS12_BAGS_new() IAmiSSL->PKCS12_BAGS_new() 
#define d2i_PKCS12_BAGS(a, pp, length) IAmiSSL->d2i_PKCS12_BAGS(a, pp, length) 
#define PKCS12_BAGS_free(a) IAmiSSL->PKCS12_BAGS_free(a) 
#define i2d_PKCS12(a, pp) IAmiSSL->i2d_PKCS12(a, pp) 
#define d2i_PKCS12(a, pp, length) IAmiSSL->d2i_PKCS12(a, pp, length) 
#define PKCS12_new() IAmiSSL->PKCS12_new() 
#define PKCS12_free(a) IAmiSSL->PKCS12_free(a) 
#define i2d_PKCS12_MAC_DATA(a, pp) IAmiSSL->i2d_PKCS12_MAC_DATA(a, pp) 
#define PKCS12_MAC_DATA_new() IAmiSSL->PKCS12_MAC_DATA_new() 
#define d2i_PKCS12_MAC_DATA(a, pp, length) IAmiSSL->d2i_PKCS12_MAC_DATA(a, pp, length) 
#define PKCS12_MAC_DATA_free(a) IAmiSSL->PKCS12_MAC_DATA_free(a) 
#define i2d_PKCS12_SAFEBAG(a, pp) IAmiSSL->i2d_PKCS12_SAFEBAG(a, pp) 
#define PKCS12_SAFEBAG_new() IAmiSSL->PKCS12_SAFEBAG_new() 
#define d2i_PKCS12_SAFEBAG(a, pp, length) IAmiSSL->d2i_PKCS12_SAFEBAG(a, pp, length) 
#define PKCS12_SAFEBAG_free(a) IAmiSSL->PKCS12_SAFEBAG_free(a) 
#define ERR_load_PKCS12_strings() IAmiSSL->ERR_load_PKCS12_strings() 
#define PKCS12_PBE_add() IAmiSSL->PKCS12_PBE_add() 
#define PKCS12_parse(p12, pass, pkey, cert, ca) IAmiSSL->PKCS12_parse(p12, pass, pkey, cert, ca) 
#define PKCS12_create(pass, name, pkey, cert, ca, nid_key, nid_cert, iter, mac_iter, keytype) IAmiSSL->PKCS12_create(pass, name, pkey, cert, ca, nid_key, nid_cert, iter, mac_iter, keytype) 
#define i2d_PKCS12_bio(bp, p12) IAmiSSL->i2d_PKCS12_bio(bp, p12) 
#define d2i_PKCS12_bio(bp, p12) IAmiSSL->d2i_PKCS12_bio(bp, p12) 
#define PKCS7_ISSUER_AND_SERIAL_new() IAmiSSL->PKCS7_ISSUER_AND_SERIAL_new() 
#define PKCS7_ISSUER_AND_SERIAL_free(a) IAmiSSL->PKCS7_ISSUER_AND_SERIAL_free(a) 
#define i2d_PKCS7_ISSUER_AND_SERIAL(a, pp) IAmiSSL->i2d_PKCS7_ISSUER_AND_SERIAL(a, pp) 
#define d2i_PKCS7_ISSUER_AND_SERIAL(a, pp, length) IAmiSSL->d2i_PKCS7_ISSUER_AND_SERIAL(a, pp, length) 
#define PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len) IAmiSSL->PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len) 
#define PKCS7_dup(p7) IAmiSSL->PKCS7_dup(p7) 
#define d2i_PKCS7_bio(bp, p7) IAmiSSL->d2i_PKCS7_bio(bp, p7) 
#define i2d_PKCS7_bio(bp, p7) IAmiSSL->i2d_PKCS7_bio(bp, p7) 
#define PKCS7_SIGNER_INFO_new() IAmiSSL->PKCS7_SIGNER_INFO_new() 
#define PKCS7_SIGNER_INFO_free(a) IAmiSSL->PKCS7_SIGNER_INFO_free(a) 
#define i2d_PKCS7_SIGNER_INFO(a, pp) IAmiSSL->i2d_PKCS7_SIGNER_INFO(a, pp) 
#define d2i_PKCS7_SIGNER_INFO(a, pp, length) IAmiSSL->d2i_PKCS7_SIGNER_INFO(a, pp, length) 
#define PKCS7_RECIP_INFO_new() IAmiSSL->PKCS7_RECIP_INFO_new() 
#define PKCS7_RECIP_INFO_free(a) IAmiSSL->PKCS7_RECIP_INFO_free(a) 
#define i2d_PKCS7_RECIP_INFO(a, pp) IAmiSSL->i2d_PKCS7_RECIP_INFO(a, pp) 
#define d2i_PKCS7_RECIP_INFO(a, pp, length) IAmiSSL->d2i_PKCS7_RECIP_INFO(a, pp, length) 
#define PKCS7_SIGNED_new() IAmiSSL->PKCS7_SIGNED_new() 
#define PKCS7_SIGNED_free(a) IAmiSSL->PKCS7_SIGNED_free(a) 
#define i2d_PKCS7_SIGNED(a, pp) IAmiSSL->i2d_PKCS7_SIGNED(a, pp) 
#define d2i_PKCS7_SIGNED(a, pp, length) IAmiSSL->d2i_PKCS7_SIGNED(a, pp, length) 
#define PKCS7_ENC_CONTENT_new() IAmiSSL->PKCS7_ENC_CONTENT_new() 
#define PKCS7_ENC_CONTENT_free(a) IAmiSSL->PKCS7_ENC_CONTENT_free(a) 
#define i2d_PKCS7_ENC_CONTENT(a, pp) IAmiSSL->i2d_PKCS7_ENC_CONTENT(a, pp) 
#define d2i_PKCS7_ENC_CONTENT(a, pp, length) IAmiSSL->d2i_PKCS7_ENC_CONTENT(a, pp, length) 
#define PKCS7_ENVELOPE_new() IAmiSSL->PKCS7_ENVELOPE_new() 
#define PKCS7_ENVELOPE_free(a) IAmiSSL->PKCS7_ENVELOPE_free(a) 
#define i2d_PKCS7_ENVELOPE(a, pp) IAmiSSL->i2d_PKCS7_ENVELOPE(a, pp) 
#define d2i_PKCS7_ENVELOPE(a, pp, length) IAmiSSL->d2i_PKCS7_ENVELOPE(a, pp, length) 
#define PKCS7_SIGN_ENVELOPE_new() IAmiSSL->PKCS7_SIGN_ENVELOPE_new() 
#define PKCS7_SIGN_ENVELOPE_free(a) IAmiSSL->PKCS7_SIGN_ENVELOPE_free(a) 
#define i2d_PKCS7_SIGN_ENVELOPE(a, pp) IAmiSSL->i2d_PKCS7_SIGN_ENVELOPE(a, pp) 
#define d2i_PKCS7_SIGN_ENVELOPE(a, pp, length) IAmiSSL->d2i_PKCS7_SIGN_ENVELOPE(a, pp, length) 
#define PKCS7_DIGEST_new() IAmiSSL->PKCS7_DIGEST_new() 
#define PKCS7_DIGEST_free(a) IAmiSSL->PKCS7_DIGEST_free(a) 
#define i2d_PKCS7_DIGEST(a, pp) IAmiSSL->i2d_PKCS7_DIGEST(a, pp) 
#define d2i_PKCS7_DIGEST(a, pp, length) IAmiSSL->d2i_PKCS7_DIGEST(a, pp, length) 
#define PKCS7_ENCRYPT_new() IAmiSSL->PKCS7_ENCRYPT_new() 
#define PKCS7_ENCRYPT_free(a) IAmiSSL->PKCS7_ENCRYPT_free(a) 
#define i2d_PKCS7_ENCRYPT(a, pp) IAmiSSL->i2d_PKCS7_ENCRYPT(a, pp) 
#define d2i_PKCS7_ENCRYPT(a, pp, length) IAmiSSL->d2i_PKCS7_ENCRYPT(a, pp, length) 
#define PKCS7_new() IAmiSSL->PKCS7_new() 
#define PKCS7_free(a) IAmiSSL->PKCS7_free(a) 
#define PKCS7_content_free(a) IAmiSSL->PKCS7_content_free(a) 
#define i2d_PKCS7(a, pp) IAmiSSL->i2d_PKCS7(a, pp) 
#define d2i_PKCS7(a, pp, length) IAmiSSL->d2i_PKCS7(a, pp, length) 
#define ERR_load_PKCS7_strings() IAmiSSL->ERR_load_PKCS7_strings() 
#define PKCS7_ctrl(p7, cmd, larg, parg) IAmiSSL->PKCS7_ctrl(p7, cmd, larg, parg) 
#define PKCS7_set_type(p7, type) IAmiSSL->PKCS7_set_type(p7, type) 
#define PKCS7_set_content(p7, p7_data) IAmiSSL->PKCS7_set_content(p7, p7_data) 
#define PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst) IAmiSSL->PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst) 
#define PKCS7_add_signer(p7, p7i) IAmiSSL->PKCS7_add_signer(p7, p7i) 
#define PKCS7_add_certificate(p7, x509) IAmiSSL->PKCS7_add_certificate(p7, x509) 
#define PKCS7_add_crl(p7, x509) IAmiSSL->PKCS7_add_crl(p7, x509) 
#define PKCS7_content_new(p7, nid) IAmiSSL->PKCS7_content_new(p7, nid) 
#define PKCS7_dataVerify(cert_store, ctx, bio, p7, si) IAmiSSL->PKCS7_dataVerify(cert_store, ctx, bio, p7, si) 
#define PKCS7_dataInit(p7, bio) IAmiSSL->PKCS7_dataInit(p7, bio) 
#define PKCS7_dataFinal(p7, bio) IAmiSSL->PKCS7_dataFinal(p7, bio) 
#define PKCS7_dataDecode(p7, pkey, in_bio, pcert) IAmiSSL->PKCS7_dataDecode(p7, pkey, in_bio, pcert) 
#define PKCS7_add_signature(p7, x509, pkey, dgst) IAmiSSL->PKCS7_add_signature(p7, x509, pkey, dgst) 
#define PKCS7_cert_from_signer_info(p7, si) IAmiSSL->PKCS7_cert_from_signer_info(p7, si) 
#define PKCS7_get_signer_info(p7) IAmiSSL->PKCS7_get_signer_info(p7) 
#define PKCS7_add_recipient(p7, x509) IAmiSSL->PKCS7_add_recipient(p7, x509) 
#define PKCS7_add_recipient_info(p7, ri) IAmiSSL->PKCS7_add_recipient_info(p7, ri) 
#define PKCS7_RECIP_INFO_set(p7i, x509) IAmiSSL->PKCS7_RECIP_INFO_set(p7i, x509) 
#define PKCS7_set_cipher(p7, cipher) IAmiSSL->PKCS7_set_cipher(p7, cipher) 
#define PKCS7_get_issuer_and_serial(p7, idx) IAmiSSL->PKCS7_get_issuer_and_serial(p7, idx) 
#define PKCS7_digest_from_attributes(sk) IAmiSSL->PKCS7_digest_from_attributes(sk) 
#define PKCS7_add_signed_attribute(p7si, nid, type, data) IAmiSSL->PKCS7_add_signed_attribute(p7si, nid, type, data) 
#define PKCS7_add_attribute(p7si, nid, atrtype, value) IAmiSSL->PKCS7_add_attribute(p7si, nid, atrtype, value) 
#define PKCS7_get_attribute(si, nid) IAmiSSL->PKCS7_get_attribute(si, nid) 
#define PKCS7_get_signed_attribute(si, nid) IAmiSSL->PKCS7_get_signed_attribute(si, nid) 
#define PKCS7_set_signed_attributes(p7si, sk) IAmiSSL->PKCS7_set_signed_attributes(p7si, sk) 
#define PKCS7_set_attributes(p7si, sk) IAmiSSL->PKCS7_set_attributes(p7si, sk) 
#define RAND_set_rand_method(meth) IAmiSSL->RAND_set_rand_method(meth) 
#define RAND_get_rand_method() IAmiSSL->RAND_get_rand_method() 
#define RAND_SSLeay() IAmiSSL->RAND_SSLeay() 
#define RAND_cleanup() IAmiSSL->RAND_cleanup() 
#define RAND_bytes(buf, num) IAmiSSL->RAND_bytes(buf, num) 
#define RAND_seed(buf, num) IAmiSSL->RAND_seed(buf, num) 
#define RAND_load_file(file, max_bytes) IAmiSSL->RAND_load_file(file, max_bytes) 
#define RAND_write_file(file) IAmiSSL->RAND_write_file(file) 
#define RAND_file_name(file, num) IAmiSSL->RAND_file_name(file, num) 
#define ERR_load_RSAREF_strings() IAmiSSL->ERR_load_RSAREF_strings() 
#define RSA_new() IAmiSSL->RSA_new() 
#define RSA_new_method(method) IAmiSSL->RSA_new_method(method) 
#define RSA_size(a) IAmiSSL->RSA_size(a) 
#define RSA_generate_key(bits, e, callback, cb_arg) IAmiSSL->RSA_generate_key(bits, e, callback, cb_arg) 
#define RSA_public_encrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_public_encrypt(flen, from, to, rsa, padding) 
#define RSA_private_encrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_private_encrypt(flen, from, to, rsa, padding) 
#define RSA_public_decrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_public_decrypt(flen, from, to, rsa, padding) 
#define RSA_private_decrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_private_decrypt(flen, from, to, rsa, padding) 
#define RSA_free(r) IAmiSSL->RSA_free(r) 
#define RSA_flags(r) IAmiSSL->RSA_flags(r) 
#define RSA_set_default_method(meth) IAmiSSL->RSA_set_default_method(meth) 
#define RSA_memory_lock(r) IAmiSSL->RSA_memory_lock(r) 
#define RSA_PKCS1_Default() IAmiSSL->RSA_PKCS1_Default() 
#define ERR_load_RSA_strings() IAmiSSL->ERR_load_RSA_strings() 
#define d2i_RSAPublicKey(a, pp, length) IAmiSSL->d2i_RSAPublicKey(a, pp, length) 
#define i2d_RSAPublicKey(a, pp) IAmiSSL->i2d_RSAPublicKey(a, pp) 
#define d2i_RSAPrivateKey(a, pp, length) IAmiSSL->d2i_RSAPrivateKey(a, pp, length) 
#define i2d_RSAPrivateKey(a, pp) IAmiSSL->i2d_RSAPrivateKey(a, pp) 
#define RSA_print(bp, r, offset) IAmiSSL->RSA_print(bp, r, offset) 
#define i2d_Netscape_RSA(a, pp, cb) IAmiSSL->i2d_Netscape_RSA(a, pp, cb) 
#define d2i_Netscape_RSA(a, pp, length, cb) IAmiSSL->d2i_Netscape_RSA(a, pp, length, cb) 
#define d2i_Netscape_RSA_2(a, pp, length, cb) IAmiSSL->d2i_Netscape_RSA_2(a, pp, length, cb) 
#define RSA_sign(type, m, m_len, sigret, siglen, rsa) IAmiSSL->RSA_sign(type, m, m_len, sigret, siglen, rsa) 
#define RSA_verify(type, m, m_len, sigbuf, siglen, rsa) IAmiSSL->RSA_verify(type, m, m_len, sigbuf, siglen, rsa) 
#define RSA_sign_ASN1_OCTET_STRING(type, m, m_len, sigret, siglen, rsa) IAmiSSL->RSA_sign_ASN1_OCTET_STRING(type, m, m_len, sigret, siglen, rsa) 
#define RSA_verify_ASN1_OCTET_STRING(type, m, m_len, sigbuf, siglen, rsa) IAmiSSL->RSA_verify_ASN1_OCTET_STRING(type, m, m_len, sigbuf, siglen, rsa) 
#define RSA_blinding_on(rsa, ctx) IAmiSSL->RSA_blinding_on(rsa, ctx) 
#define RSA_blinding_off(rsa) IAmiSSL->RSA_blinding_off(rsa) 
#define RSA_padding_add_PKCS1_type_1(to, tlen, f, fl) IAmiSSL->RSA_padding_add_PKCS1_type_1(to, tlen, f, fl) 
#define RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len) 
#define RSA_padding_add_PKCS1_type_2(to, tlen, f, fl) IAmiSSL->RSA_padding_add_PKCS1_type_2(to, tlen, f, fl) 
#define RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len) 
#define RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl) IAmiSSL->RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl) 
#define RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl) IAmiSSL->RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl) 
#define RSA_padding_add_SSLv23(to, tlen, f, fl) IAmiSSL->RSA_padding_add_SSLv23(to, tlen, f, fl) 
#define RSA_padding_check_SSLv23(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_SSLv23(to, tlen, f, fl, rsa_len) 
#define RSA_padding_add_none(to, tlen, f, fl) IAmiSSL->RSA_padding_add_none(to, tlen, f, fl) 
#define RSA_padding_check_none(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_none(to, tlen, f, fl, rsa_len) 
#define RSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->RSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) 
#define RSA_set_ex_data(r, idx, arg) IAmiSSL->RSA_set_ex_data(r, idx, arg) 
#define RSA_get_ex_data(r, idx) IAmiSSL->RSA_get_ex_data(r, idx) 
#define BIO_f_ssl() IAmiSSL->BIO_f_ssl() 
#define BIO_new_ssl(ctx, client) IAmiSSL->BIO_new_ssl(ctx, client) 
#define BIO_new_ssl_connect(ctx) IAmiSSL->BIO_new_ssl_connect(ctx) 
#define BIO_new_buffer_ssl_connect(ctx) IAmiSSL->BIO_new_buffer_ssl_connect(ctx) 
#define BIO_ssl_copy_session_id(to, from) IAmiSSL->BIO_ssl_copy_session_id(to, from) 
#define BIO_ssl_shutdown(ssl_bio) IAmiSSL->BIO_ssl_shutdown(ssl_bio) 
#define SSL_CTX_set_cipher_list(a, str) IAmiSSL->SSL_CTX_set_cipher_list(a, str) 
#define SSL_CTX_new(meth) IAmiSSL->SSL_CTX_new(meth) 
#define SSL_CTX_free(a) IAmiSSL->SSL_CTX_free(a) 
#define SSL_CTX_set_timeout(ctx, t) IAmiSSL->SSL_CTX_set_timeout(ctx, t) 
#define SSL_CTX_get_timeout(ctx) IAmiSSL->SSL_CTX_get_timeout(ctx) 
#define SSL_CTX_get_cert_store(a) IAmiSSL->SSL_CTX_get_cert_store(a) 
#define SSL_CTX_set_cert_store(a, b) IAmiSSL->SSL_CTX_set_cert_store(a, b) 
#define SSL_want(s) IAmiSSL->SSL_want(s) 
#define SSL_clear(s) IAmiSSL->SSL_clear(s) 
#define SSL_CTX_flush_sessions(ctx, tm) IAmiSSL->SSL_CTX_flush_sessions(ctx, tm) 
#define SSL_get_current_cipher(s) IAmiSSL->SSL_get_current_cipher(s) 
#define SSL_CIPHER_get_bits(c, alg_bits) IAmiSSL->SSL_CIPHER_get_bits(c, alg_bits) 
#define SSL_CIPHER_get_version(c) IAmiSSL->SSL_CIPHER_get_version(c) 
#define SSL_CIPHER_get_name(c) IAmiSSL->SSL_CIPHER_get_name(c) 
#define SSL_get_fd(s) IAmiSSL->SSL_get_fd(s) 
#define SSL_get_cipher_list(s, n) IAmiSSL->SSL_get_cipher_list(s, n) 
#define SSL_get_shared_ciphers(s, buf, len) IAmiSSL->SSL_get_shared_ciphers(s, buf, len) 
#define SSL_get_read_ahead(s) IAmiSSL->SSL_get_read_ahead(s) 
#define SSL_pending(s) IAmiSSL->SSL_pending(s) 
#define SSL_set_fd(s, fd) IAmiSSL->SSL_set_fd(s, fd) 
#define SSL_set_rfd(s, fd) IAmiSSL->SSL_set_rfd(s, fd) 
#define SSL_set_wfd(s, fd) IAmiSSL->SSL_set_wfd(s, fd) 
#define SSL_set_bio(s, rbio, wbio) IAmiSSL->SSL_set_bio(s, rbio, wbio) 
#define SSL_get_rbio(s) IAmiSSL->SSL_get_rbio(s) 
#define SSL_get_wbio(s) IAmiSSL->SSL_get_wbio(s) 
#define SSL_set_cipher_list(s, str) IAmiSSL->SSL_set_cipher_list(s, str) 
#define SSL_set_read_ahead(s, yes) IAmiSSL->SSL_set_read_ahead(s, yes) 
#define SSL_get_verify_mode(s) IAmiSSL->SSL_get_verify_mode(s) 
#define SSL_get_verify_depth(s) IAmiSSL->SSL_get_verify_depth(s) 
#define SSL_get_verify_callback(s) IAmiSSL->SSL_get_verify_callback(s) 
#define SSL_set_verify(s, mode, callback) IAmiSSL->SSL_set_verify(s, mode, callback) 
#define SSL_set_verify_depth(s, depth) IAmiSSL->SSL_set_verify_depth(s, depth) 
#define SSL_use_RSAPrivateKey(ssl, rsa) IAmiSSL->SSL_use_RSAPrivateKey(ssl, rsa) 
#define SSL_use_RSAPrivateKey_ASN1(ssl, d, len) IAmiSSL->SSL_use_RSAPrivateKey_ASN1(ssl, d, len) 
#define SSL_use_PrivateKey(ssl, pkey) IAmiSSL->SSL_use_PrivateKey(ssl, pkey) 
#define SSL_use_PrivateKey_ASN1(pk, ssl, d, len) IAmiSSL->SSL_use_PrivateKey_ASN1(pk, ssl, d, len) 
#define SSL_use_certificate(ssl, x) IAmiSSL->SSL_use_certificate(ssl, x) 
#define SSL_use_certificate_ASN1(ssl, d, len) IAmiSSL->SSL_use_certificate_ASN1(ssl, d, len) 
#define SSL_use_RSAPrivateKey_file(ssl, file, type) IAmiSSL->SSL_use_RSAPrivateKey_file(ssl, file, type) 
#define SSL_use_PrivateKey_file(ssl, file, type) IAmiSSL->SSL_use_PrivateKey_file(ssl, file, type) 
#define SSL_use_certificate_file(ssl, file, type) IAmiSSL->SSL_use_certificate_file(ssl, file, type) 
#define SSL_CTX_use_RSAPrivateKey_file(ctx, file, type) IAmiSSL->SSL_CTX_use_RSAPrivateKey_file(ctx, file, type) 
#define SSL_CTX_use_PrivateKey_file(ctx, file, type) IAmiSSL->SSL_CTX_use_PrivateKey_file(ctx, file, type) 
#define SSL_CTX_use_certificate_file(ctx, file, type) IAmiSSL->SSL_CTX_use_certificate_file(ctx, file, type) 
#define SSL_CTX_use_certificate_chain_file(ctx, file) IAmiSSL->SSL_CTX_use_certificate_chain_file(ctx, file) 
#define SSL_load_client_CA_file(file) IAmiSSL->SSL_load_client_CA_file(file) 
#define SSL_add_file_cert_subjects_to_stack(stackCAs, file) IAmiSSL->SSL_add_file_cert_subjects_to_stack(stackCAs, file) 
#define SSL_add_dir_cert_subjects_to_stack(stackCAs, dir) IAmiSSL->SSL_add_dir_cert_subjects_to_stack(stackCAs, dir) 
#define ERR_load_SSL_strings() IAmiSSL->ERR_load_SSL_strings() 
#define SSL_load_error_strings() IAmiSSL->SSL_load_error_strings() 
#define SSL_state_string(s) IAmiSSL->SSL_state_string(s) 
#define SSL_rstate_string(s) IAmiSSL->SSL_rstate_string(s) 
#define SSL_state_string_long(s) IAmiSSL->SSL_state_string_long(s) 
#define SSL_rstate_string_long(s) IAmiSSL->SSL_rstate_string_long(s) 
#define SSL_SESSION_get_time(s) IAmiSSL->SSL_SESSION_get_time(s) 
#define SSL_SESSION_set_time(s, t) IAmiSSL->SSL_SESSION_set_time(s, t) 
#define SSL_SESSION_get_timeout(s) IAmiSSL->SSL_SESSION_get_timeout(s) 
#define SSL_SESSION_set_timeout(s, t) IAmiSSL->SSL_SESSION_set_timeout(s, t) 
#define SSL_copy_session_id(to, from) IAmiSSL->SSL_copy_session_id(to, from) 
#define SSL_SESSION_new() IAmiSSL->SSL_SESSION_new() 
#define SSL_SESSION_hash(a) IAmiSSL->SSL_SESSION_hash(a) 
#define SSL_SESSION_cmp(a, b) IAmiSSL->SSL_SESSION_cmp(a, b) 
#define SSL_SESSION_print(fp, ses) IAmiSSL->SSL_SESSION_print(fp, ses) 
#define SSL_SESSION_free(ses) IAmiSSL->SSL_SESSION_free(ses) 
#define i2d_SSL_SESSION(in, pp) IAmiSSL->i2d_SSL_SESSION(in, pp) 
#define SSL_set_session(to, session) IAmiSSL->SSL_set_session(to, session) 
#define SSL_CTX_add_session(s, c) IAmiSSL->SSL_CTX_add_session(s, c) 
#define SSL_CTX_remove_session(a, c) IAmiSSL->SSL_CTX_remove_session(a, c) 
#define d2i_SSL_SESSION(a, pp, length) IAmiSSL->d2i_SSL_SESSION(a, pp, length) 
#define SSL_get_peer_certificate(s) IAmiSSL->SSL_get_peer_certificate(s) 
#define SSL_get_peer_cert_chain(s) IAmiSSL->SSL_get_peer_cert_chain(s) 
#define SSL_CTX_get_verify_mode(ctx) IAmiSSL->SSL_CTX_get_verify_mode(ctx) 
#define SSL_CTX_get_verify_depth(ctx) IAmiSSL->SSL_CTX_get_verify_depth(ctx) 
#define SSL_CTX_get_verify_callback(ctx) IAmiSSL->SSL_CTX_get_verify_callback(ctx) 
#define SSL_CTX_set_verify(ctx, mode, callback) IAmiSSL->SSL_CTX_set_verify(ctx, mode, callback) 
#define SSL_CTX_set_verify_depth(ctx, depth) IAmiSSL->SSL_CTX_set_verify_depth(ctx, depth) 
#define SSL_CTX_set_cert_verify_callback(ctx, cb, arg) IAmiSSL->SSL_CTX_set_cert_verify_callback(ctx, cb, arg) 
#define SSL_CTX_use_RSAPrivateKey(ctx, rsa) IAmiSSL->SSL_CTX_use_RSAPrivateKey(ctx, rsa) 
#define SSL_CTX_use_RSAPrivateKey_ASN1(ctx, d, len) IAmiSSL->SSL_CTX_use_RSAPrivateKey_ASN1(ctx, d, len) 
#define SSL_CTX_use_PrivateKey(ctx, pkey) IAmiSSL->SSL_CTX_use_PrivateKey(ctx, pkey) 
#define SSL_CTX_use_PrivateKey_ASN1(pk, ctx, d, len) IAmiSSL->SSL_CTX_use_PrivateKey_ASN1(pk, ctx, d, len) 
#define SSL_CTX_use_certificate(ctx, x) IAmiSSL->SSL_CTX_use_certificate(ctx, x) 
#define SSL_CTX_use_certificate_ASN1(ctx, len, d) IAmiSSL->SSL_CTX_use_certificate_ASN1(ctx, len, d) 
#define SSL_CTX_set_default_passwd_cb(ctx, cb) IAmiSSL->SSL_CTX_set_default_passwd_cb(ctx, cb) 
#define SSL_CTX_check_private_key(ctx) IAmiSSL->SSL_CTX_check_private_key(ctx) 
#define SSL_check_private_key(ctx) IAmiSSL->SSL_check_private_key(ctx) 
#define SSL_CTX_set_session_id_context(ctx, sid_ctx, sid_ctx_len) IAmiSSL->SSL_CTX_set_session_id_context(ctx, sid_ctx, sid_ctx_len) 
#define SSL_new(ctx) IAmiSSL->SSL_new(ctx) 
#define SSL_set_session_id_context(ssl, sid_ctx, sid_ctx_len) IAmiSSL->SSL_set_session_id_context(ssl, sid_ctx, sid_ctx_len) 
#define SSL_free(ssl) IAmiSSL->SSL_free(ssl) 
#define SSL_accept(ssl) IAmiSSL->SSL_accept(ssl) 
#define SSL_connect(ssl) IAmiSSL->SSL_connect(ssl) 
#define SSL_read(ssl, buf, num) IAmiSSL->SSL_read(ssl, buf, num) 
#define SSL_peek(ssl, buf, num) IAmiSSL->SSL_peek(ssl, buf, num) 
#define SSL_write(ssl, buf, num) IAmiSSL->SSL_write(ssl, buf, num) 
#define SSL_ctrl(ssl, cmd, larg, parg) IAmiSSL->SSL_ctrl(ssl, cmd, larg, parg) 
#define SSL_CTX_ctrl(ctx, cmd, larg, parg) IAmiSSL->SSL_CTX_ctrl(ctx, cmd, larg, parg) 
#define SSL_get_error(s, ret_code) IAmiSSL->SSL_get_error(s, ret_code) 
#define SSL_get_version(s) IAmiSSL->SSL_get_version(s) 
#define SSL_CTX_set_ssl_version(ctx, meth) IAmiSSL->SSL_CTX_set_ssl_version(ctx, meth) 
#define SSLv2_method() IAmiSSL->SSLv2_method() 
#define SSLv2_server_method() IAmiSSL->SSLv2_server_method() 
#define SSLv2_client_method() IAmiSSL->SSLv2_client_method() 
#define SSLv3_method() IAmiSSL->SSLv3_method() 
#define SSLv3_server_method() IAmiSSL->SSLv3_server_method() 
#define SSLv3_client_method() IAmiSSL->SSLv3_client_method() 
#define SSLv23_method() IAmiSSL->SSLv23_method() 
#define SSLv23_server_method() IAmiSSL->SSLv23_server_method() 
#define SSLv23_client_method() IAmiSSL->SSLv23_client_method() 
#define TLSv1_method() IAmiSSL->TLSv1_method() 
#define TLSv1_server_method() IAmiSSL->TLSv1_server_method() 
#define TLSv1_client_method() IAmiSSL->TLSv1_client_method() 
#define SSL_get_ciphers(s) IAmiSSL->SSL_get_ciphers(s) 
#define SSL_do_handshake(s) IAmiSSL->SSL_do_handshake(s) 
#define SSL_renegotiate(s) IAmiSSL->SSL_renegotiate(s) 
#define SSL_shutdown(s) IAmiSSL->SSL_shutdown(s) 
#define SSL_get_ssl_method(s) IAmiSSL->SSL_get_ssl_method(s) 
#define SSL_set_ssl_method(s, method) IAmiSSL->SSL_set_ssl_method(s, method) 
#define SSL_alert_type_string_long(value) IAmiSSL->SSL_alert_type_string_long(value) 
#define SSL_alert_type_string(value) IAmiSSL->SSL_alert_type_string(value) 
#define SSL_alert_desc_string_long(value) IAmiSSL->SSL_alert_desc_string_long(value) 
#define SSL_alert_desc_string(value) IAmiSSL->SSL_alert_desc_string(value) 
#define SSL_set_client_CA_list(s, list) IAmiSSL->SSL_set_client_CA_list(s, list) 
#define SSL_CTX_set_client_CA_list(ctx, list) IAmiSSL->SSL_CTX_set_client_CA_list(ctx, list) 
#define SSL_get_client_CA_list(s) IAmiSSL->SSL_get_client_CA_list(s) 
#define SSL_CTX_get_client_CA_list(s) IAmiSSL->SSL_CTX_get_client_CA_list(s) 
#define SSL_add_client_CA(ssl, x) IAmiSSL->SSL_add_client_CA(ssl, x) 
#define SSL_CTX_add_client_CA(ctx, x) IAmiSSL->SSL_CTX_add_client_CA(ctx, x) 
#define SSL_set_connect_state(s) IAmiSSL->SSL_set_connect_state(s) 
#define SSL_set_accept_state(s) IAmiSSL->SSL_set_accept_state(s) 
#define SSL_get_default_timeout(s) IAmiSSL->SSL_get_default_timeout(s) 
#define SSL_library_init() IAmiSSL->SSL_library_init() 
#define SSL_CIPHER_description(a, buf, size) IAmiSSL->SSL_CIPHER_description(a, buf, size) 
#define SSL_dup_CA_list(sk) IAmiSSL->SSL_dup_CA_list(sk) 
#define SSL_dup(ssl) IAmiSSL->SSL_dup(ssl) 
#define SSL_get_certificate(ssl) IAmiSSL->SSL_get_certificate(ssl) 
#define SSL_get_privatekey(ssl) IAmiSSL->SSL_get_privatekey(ssl) 
#define SSL_CTX_set_quiet_shutdown(ctx, mode) IAmiSSL->SSL_CTX_set_quiet_shutdown(ctx, mode) 
#define SSL_CTX_get_quiet_shutdown(ctx) IAmiSSL->SSL_CTX_get_quiet_shutdown(ctx) 
#define SSL_set_quiet_shutdown(ssl, mode) IAmiSSL->SSL_set_quiet_shutdown(ssl, mode) 
#define SSL_get_quiet_shutdown(ssl) IAmiSSL->SSL_get_quiet_shutdown(ssl) 
#define SSL_set_shutdown(ssl, mode) IAmiSSL->SSL_set_shutdown(ssl, mode) 
#define SSL_get_shutdown(ssl) IAmiSSL->SSL_get_shutdown(ssl) 
#define SSL_version(ssl) IAmiSSL->SSL_version(ssl) 
#define SSL_CTX_set_default_verify_paths(ctx) IAmiSSL->SSL_CTX_set_default_verify_paths(ctx) 
#define SSL_CTX_load_verify_locations(ctx, CAfile, CApath) IAmiSSL->SSL_CTX_load_verify_locations(ctx, CAfile, CApath) 
#define SSL_get_session(ssl) IAmiSSL->SSL_get_session(ssl) 
#define SSL_get_SSL_CTX(ssl) IAmiSSL->SSL_get_SSL_CTX(ssl) 
#define SSL_set_info_callback(ssl, cb) IAmiSSL->SSL_set_info_callback(ssl, cb) 
#define SSL_get_info_callback(ssl) IAmiSSL->SSL_get_info_callback(ssl) 
#define SSL_state(ssl) IAmiSSL->SSL_state(ssl) 
#define SSL_set_verify_result(ssl, v) IAmiSSL->SSL_set_verify_result(ssl, v) 
#define SSL_get_verify_result(ssl) IAmiSSL->SSL_get_verify_result(ssl) 
#define SSL_set_ex_data(ssl, idx, data) IAmiSSL->SSL_set_ex_data(ssl, idx, data) 
#define SSL_get_ex_data(ssl, idx) IAmiSSL->SSL_get_ex_data(ssl, idx) 
#define SSL_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->SSL_get_ex_new_index(argl, argp, new_func, dup_func, free_func) 
#define SSL_SESSION_set_ex_data(ss, idx, data) IAmiSSL->SSL_SESSION_set_ex_data(ss, idx, data) 
#define SSL_SESSION_get_ex_data(ss, idx) IAmiSSL->SSL_SESSION_get_ex_data(ss, idx) 
#define SSL_SESSION_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->SSL_SESSION_get_ex_new_index(argl, argp, new_func, dup_func, free_func) 
#define SSL_CTX_set_ex_data(ssl, idx, data) IAmiSSL->SSL_CTX_set_ex_data(ssl, idx, data) 
#define SSL_CTX_get_ex_data(ssl, idx) IAmiSSL->SSL_CTX_get_ex_data(ssl, idx) 
#define SSL_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->SSL_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) 
#define SSL_get_ex_data_X509_STORE_CTX_idx() IAmiSSL->SSL_get_ex_data_X509_STORE_CTX_idx() 
#define SSL_CTX_set_tmp_rsa_callback(ctx, cb) IAmiSSL->SSL_CTX_set_tmp_rsa_callback(ctx, cb) 
#define SSL_set_tmp_rsa_callback(ssl, cb) IAmiSSL->SSL_set_tmp_rsa_callback(ssl, cb) 
#define SSL_CTX_set_tmp_dh_callback(ctx, dh) IAmiSSL->SSL_CTX_set_tmp_dh_callback(ctx, dh) 
#define SSL_set_tmp_dh_callback(ssl, dh) IAmiSSL->SSL_set_tmp_dh_callback(ssl, dh) 
#define SSL_COMP_add_compression_method(id, cm) IAmiSSL->SSL_COMP_add_compression_method(id, cm) 
#define sk_num(a) IAmiSSL->sk_num(a) 
#define sk_value(a, b) IAmiSSL->sk_value(a, b) 
#define sk_set(a, b, c) IAmiSSL->sk_set(a, b, c) 
#define sk_new(cmp) IAmiSSL->sk_new(cmp) 
#define sk_free(a) IAmiSSL->sk_free(a) 
#define sk_pop_free(st, func) IAmiSSL->sk_pop_free(st, func) 
#define sk_insert(sk, data, where) IAmiSSL->sk_insert(sk, data, where) 
#define sk_delete(st, loc) IAmiSSL->sk_delete(st, loc) 
#define sk_delete_ptr(st, p) IAmiSSL->sk_delete_ptr(st, p) 
#define sk_find(st, data) IAmiSSL->sk_find(st, data) 
#define sk_push(st, data) IAmiSSL->sk_push(st, data) 
#define sk_unshift(st, data) IAmiSSL->sk_unshift(st, data) 
#define sk_shift(st) IAmiSSL->sk_shift(st) 
#define sk_pop(st) IAmiSSL->sk_pop(st) 
#define sk_zero(st) IAmiSSL->sk_zero(st) 
#define sk_set_cmp_func(sk, c) IAmiSSL->sk_set_cmp_func(sk, c) 
#define sk_dup(st) IAmiSSL->sk_dup(st) 
#define ms_time_new() IAmiSSL->ms_time_new() 
#define ms_time_free(a) IAmiSSL->ms_time_free(a) 
#define ms_time_get(a) IAmiSSL->ms_time_get(a) 
#define ms_time_diff(start, end) IAmiSSL->ms_time_diff(start, end) 
#define ms_time_cmp(ap, bp) IAmiSSL->ms_time_cmp(ap, bp) 
#define TXT_DB_read(in, num) IAmiSSL->TXT_DB_read(in, num) 
#define TXT_DB_write(out, db) IAmiSSL->TXT_DB_write(out, db) 
#define TXT_DB_create_index(db, field, qual, hash, cmp) IAmiSSL->TXT_DB_create_index(db, field, qual, hash, cmp) 
#define TXT_DB_free(db) IAmiSSL->TXT_DB_free(db) 
#define TXT_DB_get_by_index(db, idx, value) IAmiSSL->TXT_DB_get_by_index(db, idx, value) 
#define TXT_DB_insert(db, value) IAmiSSL->TXT_DB_insert(db, value) 
#define ERR_load_X509V3_strings() IAmiSSL->ERR_load_X509V3_strings() 
#define i2d_BASIC_CONSTRAINTS(a, pp) IAmiSSL->i2d_BASIC_CONSTRAINTS(a, pp) 
#define d2i_BASIC_CONSTRAINTS(a, pp, length) IAmiSSL->d2i_BASIC_CONSTRAINTS(a, pp, length) 
#define BASIC_CONSTRAINTS_new() IAmiSSL->BASIC_CONSTRAINTS_new() 
#define BASIC_CONSTRAINTS_free(a) IAmiSSL->BASIC_CONSTRAINTS_free(a) 
#define i2d_GENERAL_NAME(a, pp) IAmiSSL->i2d_GENERAL_NAME(a, pp) 
#define d2i_GENERAL_NAME(a, pp, length) IAmiSSL->d2i_GENERAL_NAME(a, pp, length) 
#define GENERAL_NAME_new() IAmiSSL->GENERAL_NAME_new() 
#define GENERAL_NAME_free(a) IAmiSSL->GENERAL_NAME_free(a) 
#define i2v_GENERAL_NAME(method, gen, ret) IAmiSSL->i2v_GENERAL_NAME(method, gen, ret) 
#define i2d_SXNET(a, pp) IAmiSSL->i2d_SXNET(a, pp) 
#define d2i_SXNET(a, pp, length) IAmiSSL->d2i_SXNET(a, pp, length) 
#define SXNET_new() IAmiSSL->SXNET_new() 
#define SXNET_free(a) IAmiSSL->SXNET_free(a) 
#define i2d_SXNETID(a, pp) IAmiSSL->i2d_SXNETID(a, pp) 
#define d2i_SXNETID(a, pp, length) IAmiSSL->d2i_SXNETID(a, pp, length) 
#define SXNETID_new() IAmiSSL->SXNETID_new() 
#define SXNETID_free(a) IAmiSSL->SXNETID_free(a) 
#define SXNET_add_id_asc(psx, zone, user, userlen) IAmiSSL->SXNET_add_id_asc(psx, zone, user, userlen) 
#define SXNET_add_id_ulong(psx, lzone, user, userlen) IAmiSSL->SXNET_add_id_ulong(psx, lzone, user, userlen) 
#define SXNET_add_id_INTEGER(psx, izone, user, userlen) IAmiSSL->SXNET_add_id_INTEGER(psx, izone, user, userlen) 
#define SXNET_get_id_asc(sx, zone) IAmiSSL->SXNET_get_id_asc(sx, zone) 
#define SXNET_get_id_ulong(sx, lzone) IAmiSSL->SXNET_get_id_ulong(sx, lzone) 
#define SXNET_get_id_INTEGER(sx, zone) IAmiSSL->SXNET_get_id_INTEGER(sx, zone) 
#define i2d_AUTHORITY_KEYID(a, pp) IAmiSSL->i2d_AUTHORITY_KEYID(a, pp) 
#define d2i_AUTHORITY_KEYID(a, pp, length) IAmiSSL->d2i_AUTHORITY_KEYID(a, pp, length) 
#define AUTHORITY_KEYID_new() IAmiSSL->AUTHORITY_KEYID_new() 
#define AUTHORITY_KEYID_free(a) IAmiSSL->AUTHORITY_KEYID_free(a) 
#define i2d_PKEY_USAGE_PERIOD(a, pp) IAmiSSL->i2d_PKEY_USAGE_PERIOD(a, pp) 
#define d2i_PKEY_USAGE_PERIOD(a, pp, length) IAmiSSL->d2i_PKEY_USAGE_PERIOD(a, pp, length) 
#define PKEY_USAGE_PERIOD_new() IAmiSSL->PKEY_USAGE_PERIOD_new() 
#define PKEY_USAGE_PERIOD_free(a) IAmiSSL->PKEY_USAGE_PERIOD_free(a) 
#define GENERAL_NAMES_new() IAmiSSL->GENERAL_NAMES_new() 
#define GENERAL_NAMES_free(a) IAmiSSL->GENERAL_NAMES_free(a) 
#define d2i_GENERAL_NAMES(a, pp, length) IAmiSSL->d2i_GENERAL_NAMES(a, pp, length) 
#define i2d_GENERAL_NAMES(a, pp) IAmiSSL->i2d_GENERAL_NAMES(a, pp) 
#define i2v_GENERAL_NAMES(method, gen, extlist) IAmiSSL->i2v_GENERAL_NAMES(method, gen, extlist) 
#define v2i_GENERAL_NAMES(method, ctx, nval) IAmiSSL->v2i_GENERAL_NAMES(method, ctx, nval) 
#define i2s_ASN1_OCTET_STRING(method, ia5) IAmiSSL->i2s_ASN1_OCTET_STRING(method, ia5) 
#define s2i_ASN1_OCTET_STRING(method, ctx, str) IAmiSSL->s2i_ASN1_OCTET_STRING(method, ctx, str) 
#define i2d_ext_ku(a, pp) IAmiSSL->i2d_ext_ku(a, pp) 
#define d2i_ext_ku(a, pp, length) IAmiSSL->d2i_ext_ku(a, pp, length) 
#define ext_ku_free(a) IAmiSSL->ext_ku_free(a) 
#define ext_ku_new() IAmiSSL->ext_ku_new() 
#define i2d_CERTIFICATEPOLICIES(a, pp) IAmiSSL->i2d_CERTIFICATEPOLICIES(a, pp) 
#define CERTIFICATEPOLICIES_new() IAmiSSL->CERTIFICATEPOLICIES_new() 
#define CERTIFICATEPOLICIES_free(a) IAmiSSL->CERTIFICATEPOLICIES_free(a) 
#define d2i_CERTIFICATEPOLICIES(a, pp, length) IAmiSSL->d2i_CERTIFICATEPOLICIES(a, pp, length) 
#define i2d_POLICYINFO(a, pp) IAmiSSL->i2d_POLICYINFO(a, pp) 
#define POLICYINFO_new() IAmiSSL->POLICYINFO_new() 
#define d2i_POLICYINFO(a, pp, length) IAmiSSL->d2i_POLICYINFO(a, pp, length) 
#define POLICYINFO_free(a) IAmiSSL->POLICYINFO_free(a) 
#define i2d_POLICYQUALINFO(a, pp) IAmiSSL->i2d_POLICYQUALINFO(a, pp) 
#define POLICYQUALINFO_new() IAmiSSL->POLICYQUALINFO_new() 
#define d2i_POLICYQUALINFO(a, pp, length) IAmiSSL->d2i_POLICYQUALINFO(a, pp, length) 
#define POLICYQUALINFO_free(a) IAmiSSL->POLICYQUALINFO_free(a) 
#define i2d_USERNOTICE(a, pp) IAmiSSL->i2d_USERNOTICE(a, pp) 
#define USERNOTICE_new() IAmiSSL->USERNOTICE_new() 
#define d2i_USERNOTICE(a, pp, length) IAmiSSL->d2i_USERNOTICE(a, pp, length) 
#define USERNOTICE_free(a) IAmiSSL->USERNOTICE_free(a) 
#define i2d_NOTICEREF(a, pp) IAmiSSL->i2d_NOTICEREF(a, pp) 
#define NOTICEREF_new() IAmiSSL->NOTICEREF_new() 
#define d2i_NOTICEREF(a, pp, length) IAmiSSL->d2i_NOTICEREF(a, pp, length) 
#define NOTICEREF_free(a) IAmiSSL->NOTICEREF_free(a) 
#define i2d_CRL_DIST_POINTS(a, pp) IAmiSSL->i2d_CRL_DIST_POINTS(a, pp) 
#define CRL_DIST_POINTS_new() IAmiSSL->CRL_DIST_POINTS_new() 
#define CRL_DIST_POINTS_free(a) IAmiSSL->CRL_DIST_POINTS_free(a) 
#define d2i_CRL_DIST_POINTS(a, pp, length) IAmiSSL->d2i_CRL_DIST_POINTS(a, pp, length) 
#define i2d_DIST_POINT(a, pp) IAmiSSL->i2d_DIST_POINT(a, pp) 
#define DIST_POINT_new() IAmiSSL->DIST_POINT_new() 
#define d2i_DIST_POINT(a, pp, length) IAmiSSL->d2i_DIST_POINT(a, pp, length) 
#define DIST_POINT_free(a) IAmiSSL->DIST_POINT_free(a) 
#define i2d_DIST_POINT_NAME(a, pp) IAmiSSL->i2d_DIST_POINT_NAME(a, pp) 
#define DIST_POINT_NAME_new() IAmiSSL->DIST_POINT_NAME_new() 
#define DIST_POINT_NAME_free(a) IAmiSSL->DIST_POINT_NAME_free(a) 
#define d2i_DIST_POINT_NAME(a, pp, length) IAmiSSL->d2i_DIST_POINT_NAME(a, pp, length) 
#define v2i_GENERAL_NAME(method, ctx, cnf) IAmiSSL->v2i_GENERAL_NAME(method, ctx, cnf) 
#define X509V3_conf_free(val) IAmiSSL->X509V3_conf_free(val) 
#define X509V3_EXT_conf_nid(conf, ctx, ext_nid, value) IAmiSSL->X509V3_EXT_conf_nid(conf, ctx, ext_nid, value) 
#define X509V3_EXT_conf(conf, ctx, name, value) IAmiSSL->X509V3_EXT_conf(conf, ctx, name, value) 
#define X509V3_EXT_add_conf(conf, ctx, section, cert) IAmiSSL->X509V3_EXT_add_conf(conf, ctx, section, cert) 
#define X509V3_EXT_CRL_add_conf(conf, ctx, section, crl) IAmiSSL->X509V3_EXT_CRL_add_conf(conf, ctx, section, crl) 
#define X509V3_add_value_bool_nf(name, asn1_bool, extlist) IAmiSSL->X509V3_add_value_bool_nf(name, asn1_bool, extlist) 
#define X509V3_get_value_bool(value, asn1_bool) IAmiSSL->X509V3_get_value_bool(value, asn1_bool) 
#define X509V3_get_value_int(value, aint) IAmiSSL->X509V3_get_value_int(value, aint) 
#define X509V3_set_conf_lhash(ctx, lhash) IAmiSSL->X509V3_set_conf_lhash(ctx, lhash) 
#define X509V3_get_string(ctx, name, section) IAmiSSL->X509V3_get_string(ctx, name, section) 
#define X509V3_get_section(ctx, section) IAmiSSL->X509V3_get_section(ctx, section) 
#define X509V3_string_free(ctx, str) IAmiSSL->X509V3_string_free(ctx, str) 
#define X509V3_section_free(ctx, section) IAmiSSL->X509V3_section_free(ctx, section) 
#define X509V3_set_ctx(ctx, issuer, subject, req, crl, flags) IAmiSSL->X509V3_set_ctx(ctx, issuer, subject, req, crl, flags) 
#define X509V3_add_value(name, value, extlist) IAmiSSL->X509V3_add_value(name, value, extlist) 
#define X509V3_add_value_uchar(name, value, extlist) IAmiSSL->X509V3_add_value_uchar(name, value, extlist) 
#define X509V3_add_value_bool(name, asn1_bool, extlist) IAmiSSL->X509V3_add_value_bool(name, asn1_bool, extlist) 
#define X509V3_add_value_int(name, aint, extlist) IAmiSSL->X509V3_add_value_int(name, aint, extlist) 
#define i2s_ASN1_INTEGER(meth, aint) IAmiSSL->i2s_ASN1_INTEGER(meth, aint) 
#define s2i_ASN1_INTEGER(meth, value) IAmiSSL->s2i_ASN1_INTEGER(meth, value) 
#define i2s_ASN1_ENUMERATED(meth, aint) IAmiSSL->i2s_ASN1_ENUMERATED(meth, aint) 
#define i2s_ASN1_ENUMERATED_TABLE(meth, aint) IAmiSSL->i2s_ASN1_ENUMERATED_TABLE(meth, aint) 
#define X509V3_EXT_add(ext) IAmiSSL->X509V3_EXT_add(ext) 
#define X509V3_EXT_add_list(extlist) IAmiSSL->X509V3_EXT_add_list(extlist) 
#define X509V3_EXT_add_alias(nid_to, nid_from) IAmiSSL->X509V3_EXT_add_alias(nid_to, nid_from) 
#define X509V3_EXT_cleanup() IAmiSSL->X509V3_EXT_cleanup() 
#define X509V3_EXT_get(ext) IAmiSSL->X509V3_EXT_get(ext) 
#define X509V3_EXT_get_nid(nid) IAmiSSL->X509V3_EXT_get_nid(nid) 
#define X509V3_add_standard_extensions() IAmiSSL->X509V3_add_standard_extensions() 
#define X509V3_parse_list(line) IAmiSSL->X509V3_parse_list(line) 
#define X509V3_EXT_d2i(ext) IAmiSSL->X509V3_EXT_d2i(ext) 
#define X509V3_EXT_i2d(ext_nid, crit, ext_struc) IAmiSSL->X509V3_EXT_i2d(ext_nid, crit, ext_struc) 
#define hex_to_string(buffer, len) IAmiSSL->hex_to_string(buffer, len) 
#define string_to_hex(str, len) IAmiSSL->string_to_hex(str, len) 
#define name_cmp(name, cmp) IAmiSSL->name_cmp(name, cmp) 
#define X509V3_EXT_val_prn(out, val, indent, ml) IAmiSSL->X509V3_EXT_val_prn(out, val, indent, ml) 
#define X509V3_EXT_print(out, ext, flag, indent) IAmiSSL->X509V3_EXT_print(out, ext, flag, indent) 
#define X509_verify(a, r) IAmiSSL->X509_verify(a, r) 
#define X509_verify_cert_error_string(n) IAmiSSL->X509_verify_cert_error_string(n) 
#define X509_REQ_verify(a, r) IAmiSSL->X509_REQ_verify(a, r) 
#define X509_CRL_verify(a, r) IAmiSSL->X509_CRL_verify(a, r) 
#define NETSCAPE_SPKI_verify(a, r) IAmiSSL->NETSCAPE_SPKI_verify(a, r) 
#define X509_sign(x, pkey, md) IAmiSSL->X509_sign(x, pkey, md) 
#define X509_REQ_sign(x, pkey, md) IAmiSSL->X509_REQ_sign(x, pkey, md) 
#define X509_CRL_sign(x, pkey, md) IAmiSSL->X509_CRL_sign(x, pkey, md) 
#define NETSCAPE_SPKI_sign(x, pkey, md) IAmiSSL->NETSCAPE_SPKI_sign(x, pkey, md) 
#define X509_digest(data, type, md, len) IAmiSSL->X509_digest(data, type, md, len) 
#define X509_NAME_digest(data, type, md, len) IAmiSSL->X509_NAME_digest(data, type, md, len) 
#define d2i_X509_bio(bp, x509) IAmiSSL->d2i_X509_bio(bp, x509) 
#define i2d_X509_bio(bp, x509) IAmiSSL->i2d_X509_bio(bp, x509) 
#define d2i_X509_CRL_bio(bp, crl) IAmiSSL->d2i_X509_CRL_bio(bp, crl) 
#define i2d_X509_CRL_bio(bp, crl) IAmiSSL->i2d_X509_CRL_bio(bp, crl) 
#define d2i_X509_REQ_bio(bp, req) IAmiSSL->d2i_X509_REQ_bio(bp, req) 
#define i2d_X509_REQ_bio(bp, req) IAmiSSL->i2d_X509_REQ_bio(bp, req) 
#define d2i_RSAPrivateKey_bio(bp, rsa) IAmiSSL->d2i_RSAPrivateKey_bio(bp, rsa) 
#define i2d_RSAPrivateKey_bio(bp, rsa) IAmiSSL->i2d_RSAPrivateKey_bio(bp, rsa) 
#define d2i_RSAPublicKey_bio(bp, rsa) IAmiSSL->d2i_RSAPublicKey_bio(bp, rsa) 
#define i2d_RSAPublicKey_bio(bp, rsa) IAmiSSL->i2d_RSAPublicKey_bio(bp, rsa) 
#define d2i_DSAPrivateKey_bio(bp, dsa) IAmiSSL->d2i_DSAPrivateKey_bio(bp, dsa) 
#define i2d_DSAPrivateKey_bio(bp, dsa) IAmiSSL->i2d_DSAPrivateKey_bio(bp, dsa) 
#define X509_dup(x509) IAmiSSL->X509_dup(x509) 
#define X509_ATTRIBUTE_dup(xa) IAmiSSL->X509_ATTRIBUTE_dup(xa) 
#define X509_EXTENSION_dup(ex) IAmiSSL->X509_EXTENSION_dup(ex) 
#define X509_CRL_dup(crl) IAmiSSL->X509_CRL_dup(crl) 
#define X509_REQ_dup(req) IAmiSSL->X509_REQ_dup(req) 
#define X509_ALGOR_dup(xn) IAmiSSL->X509_ALGOR_dup(xn) 
#define X509_NAME_dup(xn) IAmiSSL->X509_NAME_dup(xn) 
#define X509_NAME_ENTRY_dup(ne) IAmiSSL->X509_NAME_ENTRY_dup(ne) 
#define RSAPublicKey_dup(rsa) IAmiSSL->RSAPublicKey_dup(rsa) 
#define RSAPrivateKey_dup(rsa) IAmiSSL->RSAPrivateKey_dup(rsa) 
#define X509_cmp_current_time(s) IAmiSSL->X509_cmp_current_time(s) 
#define X509_gmtime_adj(s, adj) IAmiSSL->X509_gmtime_adj(s, adj) 
#define X509_get_default_cert_area() IAmiSSL->X509_get_default_cert_area() 
#define X509_get_default_cert_dir() IAmiSSL->X509_get_default_cert_dir() 
#define X509_get_default_cert_file() IAmiSSL->X509_get_default_cert_file() 
#define X509_get_default_cert_dir_env() IAmiSSL->X509_get_default_cert_dir_env() 
#define X509_get_default_cert_file_env() IAmiSSL->X509_get_default_cert_file_env() 
#define X509_get_default_private_dir() IAmiSSL->X509_get_default_private_dir() 
#define X509_to_X509_REQ(x, pkey, md) IAmiSSL->X509_to_X509_REQ(x, pkey, md) 
#define X509_REQ_to_X509(r, days, pkey) IAmiSSL->X509_REQ_to_X509(r, days, pkey) 
#define ERR_load_X509_strings() IAmiSSL->ERR_load_X509_strings() 
#define X509_ALGOR_new() IAmiSSL->X509_ALGOR_new() 
#define X509_ALGOR_free(a) IAmiSSL->X509_ALGOR_free(a) 
#define i2d_X509_ALGOR(a, pp) IAmiSSL->i2d_X509_ALGOR(a, pp) 
#define d2i_X509_ALGOR(a, pp, length) IAmiSSL->d2i_X509_ALGOR(a, pp, length) 
#define X509_VAL_new() IAmiSSL->X509_VAL_new() 
#define X509_VAL_free(a) IAmiSSL->X509_VAL_free(a) 
#define i2d_X509_VAL(a, pp) IAmiSSL->i2d_X509_VAL(a, pp) 
#define d2i_X509_VAL(a, pp, length) IAmiSSL->d2i_X509_VAL(a, pp, length) 
#define X509_PUBKEY_new() IAmiSSL->X509_PUBKEY_new() 
#define X509_PUBKEY_free(a) IAmiSSL->X509_PUBKEY_free(a) 
#define i2d_X509_PUBKEY(a, pp) IAmiSSL->i2d_X509_PUBKEY(a, pp) 
#define d2i_X509_PUBKEY(a, pp, length) IAmiSSL->d2i_X509_PUBKEY(a, pp, length) 
#define X509_PUBKEY_set(x, pkey) IAmiSSL->X509_PUBKEY_set(x, pkey) 
#define X509_PUBKEY_get(key) IAmiSSL->X509_PUBKEY_get(key) 
#define X509_get_pubkey_parameters(pkey, chain) IAmiSSL->X509_get_pubkey_parameters(pkey, chain) 
#define X509_SIG_new() IAmiSSL->X509_SIG_new() 
#define X509_SIG_free(a) IAmiSSL->X509_SIG_free(a) 
#define i2d_X509_SIG(a, pp) IAmiSSL->i2d_X509_SIG(a, pp) 
#define d2i_X509_SIG(a, pp, length) IAmiSSL->d2i_X509_SIG(a, pp, length) 
#define X509_REQ_INFO_new() IAmiSSL->X509_REQ_INFO_new() 
#define X509_REQ_INFO_free(a) IAmiSSL->X509_REQ_INFO_free(a) 
#define i2d_X509_REQ_INFO(a, pp) IAmiSSL->i2d_X509_REQ_INFO(a, pp) 
#define d2i_X509_REQ_INFO(a, pp, length) IAmiSSL->d2i_X509_REQ_INFO(a, pp, length) 
#define X509_REQ_new() IAmiSSL->X509_REQ_new() 
#define X509_REQ_free(a) IAmiSSL->X509_REQ_free(a) 
#define i2d_X509_REQ(a, pp) IAmiSSL->i2d_X509_REQ(a, pp) 
#define d2i_X509_REQ(a, pp, length) IAmiSSL->d2i_X509_REQ(a, pp, length) 
#define X509_ATTRIBUTE_new() IAmiSSL->X509_ATTRIBUTE_new() 
#define X509_ATTRIBUTE_free(a) IAmiSSL->X509_ATTRIBUTE_free(a) 
#define i2d_X509_ATTRIBUTE(a, pp) IAmiSSL->i2d_X509_ATTRIBUTE(a, pp) 
#define d2i_X509_ATTRIBUTE(a, pp, length) IAmiSSL->d2i_X509_ATTRIBUTE(a, pp, length) 
#define X509_ATTRIBUTE_create(nid, atrtype, value) IAmiSSL->X509_ATTRIBUTE_create(nid, atrtype, value) 
#define X509_EXTENSION_new() IAmiSSL->X509_EXTENSION_new() 
#define X509_EXTENSION_free(a) IAmiSSL->X509_EXTENSION_free(a) 
#define i2d_X509_EXTENSION(a, pp) IAmiSSL->i2d_X509_EXTENSION(a, pp) 
#define d2i_X509_EXTENSION(a, pp, length) IAmiSSL->d2i_X509_EXTENSION(a, pp, length) 
#define X509_NAME_ENTRY_new() IAmiSSL->X509_NAME_ENTRY_new() 
#define X509_NAME_ENTRY_free(a) IAmiSSL->X509_NAME_ENTRY_free(a) 
#define i2d_X509_NAME_ENTRY(a, pp) IAmiSSL->i2d_X509_NAME_ENTRY(a, pp) 
#define d2i_X509_NAME_ENTRY(a, pp, length) IAmiSSL->d2i_X509_NAME_ENTRY(a, pp, length) 
#define X509_NAME_new() IAmiSSL->X509_NAME_new() 
#define X509_NAME_free(a) IAmiSSL->X509_NAME_free(a) 
#define i2d_X509_NAME(a, pp) IAmiSSL->i2d_X509_NAME(a, pp) 
#define d2i_X509_NAME(a, pp, length) IAmiSSL->d2i_X509_NAME(a, pp, length) 
#define X509_NAME_set(xn, name) IAmiSSL->X509_NAME_set(xn, name) 
#define X509_CINF_new() IAmiSSL->X509_CINF_new() 
#define X509_CINF_free(a) IAmiSSL->X509_CINF_free(a) 
#define i2d_X509_CINF(a, pp) IAmiSSL->i2d_X509_CINF(a, pp) 
#define d2i_X509_CINF(a, pp, length) IAmiSSL->d2i_X509_CINF(a, pp, length) 
#define X509_new() IAmiSSL->X509_new() 
#define X509_free(a) IAmiSSL->X509_free(a) 
#define i2d_X509(a, pp) IAmiSSL->i2d_X509(a, pp) 
#define d2i_X509(a, pp, length) IAmiSSL->d2i_X509(a, pp, length) 
#define X509_REVOKED_new() IAmiSSL->X509_REVOKED_new() 
#define X509_REVOKED_free(a) IAmiSSL->X509_REVOKED_free(a) 
#define i2d_X509_REVOKED(a, pp) IAmiSSL->i2d_X509_REVOKED(a, pp) 
#define d2i_X509_REVOKED(a, pp, length) IAmiSSL->d2i_X509_REVOKED(a, pp, length) 
#define X509_CRL_INFO_new() IAmiSSL->X509_CRL_INFO_new() 
#define X509_CRL_INFO_free(a) IAmiSSL->X509_CRL_INFO_free(a) 
#define i2d_X509_CRL_INFO(a, pp) IAmiSSL->i2d_X509_CRL_INFO(a, pp) 
#define d2i_X509_CRL_INFO(a, pp, length) IAmiSSL->d2i_X509_CRL_INFO(a, pp, length) 
#define X509_CRL_new() IAmiSSL->X509_CRL_new() 
#define X509_CRL_free(a) IAmiSSL->X509_CRL_free(a) 
#define i2d_X509_CRL(a, pp) IAmiSSL->i2d_X509_CRL(a, pp) 
#define d2i_X509_CRL(a, pp, length) IAmiSSL->d2i_X509_CRL(a, pp, length) 
#define X509_PKEY_new() IAmiSSL->X509_PKEY_new() 
#define X509_PKEY_free(a) IAmiSSL->X509_PKEY_free(a) 
#define i2d_X509_PKEY(a, pp) IAmiSSL->i2d_X509_PKEY(a, pp) 
#define d2i_X509_PKEY(a, pp, length) IAmiSSL->d2i_X509_PKEY(a, pp, length) 
#define NETSCAPE_SPKI_new() IAmiSSL->NETSCAPE_SPKI_new() 
#define NETSCAPE_SPKI_free(a) IAmiSSL->NETSCAPE_SPKI_free(a) 
#define i2d_NETSCAPE_SPKI(a, pp) IAmiSSL->i2d_NETSCAPE_SPKI(a, pp) 
#define d2i_NETSCAPE_SPKI(a, pp, length) IAmiSSL->d2i_NETSCAPE_SPKI(a, pp, length) 
#define NETSCAPE_SPKAC_new() IAmiSSL->NETSCAPE_SPKAC_new() 
#define NETSCAPE_SPKAC_free(a) IAmiSSL->NETSCAPE_SPKAC_free(a) 
#define i2d_NETSCAPE_SPKAC(a, pp) IAmiSSL->i2d_NETSCAPE_SPKAC(a, pp) 
#define d2i_NETSCAPE_SPKAC(a, pp, length) IAmiSSL->d2i_NETSCAPE_SPKAC(a, pp, length) 
#define i2d_NETSCAPE_CERT_SEQUENCE(a, pp) IAmiSSL->i2d_NETSCAPE_CERT_SEQUENCE(a, pp) 
#define NETSCAPE_CERT_SEQUENCE_new() IAmiSSL->NETSCAPE_CERT_SEQUENCE_new() 
#define d2i_NETSCAPE_CERT_SEQUENCE(a, pp, length) IAmiSSL->d2i_NETSCAPE_CERT_SEQUENCE(a, pp, length) 
#define NETSCAPE_CERT_SEQUENCE_free(a) IAmiSSL->NETSCAPE_CERT_SEQUENCE_free(a) 
#define X509_INFO_new() IAmiSSL->X509_INFO_new() 
#define X509_INFO_free(a) IAmiSSL->X509_INFO_free(a) 
#define X509_NAME_oneline(a, buf, size) IAmiSSL->X509_NAME_oneline(a, buf, size) 
#define ASN1_verify(i2d, algor1, signature, data, pkey) IAmiSSL->ASN1_verify(i2d, algor1, signature, data, pkey) 
#define ASN1_digest(i2d, type, data, md, len) IAmiSSL->ASN1_digest(i2d, type, data, md, len) 
#define ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type) IAmiSSL->ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type) 
#define X509_set_version(x, version) IAmiSSL->X509_set_version(x, version) 
#define X509_set_serialNumber(x, serial) IAmiSSL->X509_set_serialNumber(x, serial) 
#define X509_get_serialNumber(x) IAmiSSL->X509_get_serialNumber(x) 
#define X509_set_issuer_name(x, name) IAmiSSL->X509_set_issuer_name(x, name) 
#define X509_get_issuer_name(a) IAmiSSL->X509_get_issuer_name(a) 
#define X509_set_subject_name(x, name) IAmiSSL->X509_set_subject_name(x, name) 
#define X509_get_subject_name(a) IAmiSSL->X509_get_subject_name(a) 
#define X509_set_notBefore(x, tm) IAmiSSL->X509_set_notBefore(x, tm) 
#define X509_set_notAfter(x, tm) IAmiSSL->X509_set_notAfter(x, tm) 
#define X509_set_pubkey(x, pkey) IAmiSSL->X509_set_pubkey(x, pkey) 
#define X509_get_pubkey(x) IAmiSSL->X509_get_pubkey(x) 
#define X509_certificate_type(x, pubkey) IAmiSSL->X509_certificate_type(x, pubkey) 
#define X509_REQ_set_version(x, version) IAmiSSL->X509_REQ_set_version(x, version) 
#define X509_REQ_set_subject_name(req, name) IAmiSSL->X509_REQ_set_subject_name(req, name) 
#define X509_REQ_set_pubkey(x, pkey) IAmiSSL->X509_REQ_set_pubkey(x, pkey) 
#define X509_REQ_get_pubkey(req) IAmiSSL->X509_REQ_get_pubkey(req) 
#define X509_check_private_key(x509, pkey) IAmiSSL->X509_check_private_key(x509, pkey) 
#define X509_issuer_and_serial_cmp(a, b) IAmiSSL->X509_issuer_and_serial_cmp(a, b) 
#define X509_issuer_and_serial_hash(a) IAmiSSL->X509_issuer_and_serial_hash(a) 
#define X509_issuer_name_cmp(a, b) IAmiSSL->X509_issuer_name_cmp(a, b) 
#define X509_issuer_name_hash(a) IAmiSSL->X509_issuer_name_hash(a) 
#define X509_subject_name_cmp(a, b) IAmiSSL->X509_subject_name_cmp(a, b) 
#define X509_subject_name_hash(x) IAmiSSL->X509_subject_name_hash(x) 
#define X509_NAME_cmp(a, b) IAmiSSL->X509_NAME_cmp(a, b) 
#define X509_NAME_hash(x) IAmiSSL->X509_NAME_hash(x) 
#define X509_CRL_cmp(a, b) IAmiSSL->X509_CRL_cmp(a, b) 
#define X509_NAME_print(bp, name, obase) IAmiSSL->X509_NAME_print(bp, name, obase) 
#define X509_print(bp, x) IAmiSSL->X509_print(bp, x) 
#define X509_CRL_print(bp, x) IAmiSSL->X509_CRL_print(bp, x) 
#define X509_REQ_print(bp, req) IAmiSSL->X509_REQ_print(bp, req) 
#define X509_NAME_entry_count(name) IAmiSSL->X509_NAME_entry_count(name) 
#define X509_NAME_get_text_by_NID(name, nid, buf, len) IAmiSSL->X509_NAME_get_text_by_NID(name, nid, buf, len) 
#define X509_NAME_get_text_by_OBJ(name, obj, buf, len) IAmiSSL->X509_NAME_get_text_by_OBJ(name, obj, buf, len) 
#define X509_NAME_get_index_by_NID(name, nid, lastpos) IAmiSSL->X509_NAME_get_index_by_NID(name, nid, lastpos) 
#define X509_NAME_get_index_by_OBJ(name, obj, lastpos) IAmiSSL->X509_NAME_get_index_by_OBJ(name, obj, lastpos) 
#define X509_NAME_get_entry(name, loc) IAmiSSL->X509_NAME_get_entry(name, loc) 
#define X509_NAME_delete_entry(name, loc) IAmiSSL->X509_NAME_delete_entry(name, loc) 
#define X509_NAME_add_entry(name, ne, loc, set) IAmiSSL->X509_NAME_add_entry(name, ne, loc, set) 
#define X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len) 
#define X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len) 
#define X509_NAME_ENTRY_set_object(ne, obj) IAmiSSL->X509_NAME_ENTRY_set_object(ne, obj) 
#define X509_NAME_ENTRY_set_data(ne, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_set_data(ne, type, bytes, len) 
#define X509_NAME_ENTRY_get_object(ne) IAmiSSL->X509_NAME_ENTRY_get_object(ne) 
#define X509_NAME_ENTRY_get_data(ne) IAmiSSL->X509_NAME_ENTRY_get_data(ne) 
#define X509v3_get_ext_count(x) IAmiSSL->X509v3_get_ext_count(x) 
#define X509v3_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509v3_get_ext_by_NID(x, nid, lastpos) 
#define X509v3_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509v3_get_ext_by_OBJ(x, obj, lastpos) 
#define X509v3_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509v3_get_ext_by_critical(x, crit, lastpos) 
#define X509v3_get_ext(x, loc) IAmiSSL->X509v3_get_ext(x, loc) 
#define X509v3_delete_ext(x, loc) IAmiSSL->X509v3_delete_ext(x, loc) 
#define X509v3_add_ext(x, ex, loc) IAmiSSL->X509v3_add_ext(x, ex, loc) 
#define X509_get_ext_count(x) IAmiSSL->X509_get_ext_count(x) 
#define X509_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_get_ext_by_NID(x, nid, lastpos) 
#define X509_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_get_ext_by_OBJ(x, obj, lastpos) 
#define X509_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_get_ext_by_critical(x, crit, lastpos) 
#define X509_get_ext(x, loc) IAmiSSL->X509_get_ext(x, loc) 
#define X509_delete_ext(x, loc) IAmiSSL->X509_delete_ext(x, loc) 
#define X509_add_ext(x, ex, loc) IAmiSSL->X509_add_ext(x, ex, loc) 
#define X509_CRL_get_ext_count(x) IAmiSSL->X509_CRL_get_ext_count(x) 
#define X509_CRL_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_CRL_get_ext_by_NID(x, nid, lastpos) 
#define X509_CRL_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_CRL_get_ext_by_OBJ(x, obj, lastpos) 
#define X509_CRL_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_CRL_get_ext_by_critical(x, crit, lastpos) 
#define X509_CRL_get_ext(x, loc) IAmiSSL->X509_CRL_get_ext(x, loc) 
#define X509_CRL_delete_ext(x, loc) IAmiSSL->X509_CRL_delete_ext(x, loc) 
#define X509_CRL_add_ext(x, ex, loc) IAmiSSL->X509_CRL_add_ext(x, ex, loc) 
#define X509_REVOKED_get_ext_count(x) IAmiSSL->X509_REVOKED_get_ext_count(x) 
#define X509_REVOKED_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_NID(x, nid, lastpos) 
#define X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos) 
#define X509_REVOKED_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_critical(x, crit, lastpos) 
#define X509_REVOKED_get_ext(x, loc) IAmiSSL->X509_REVOKED_get_ext(x, loc) 
#define X509_REVOKED_delete_ext(x, loc) IAmiSSL->X509_REVOKED_delete_ext(x, loc) 
#define X509_REVOKED_add_ext(x, ex, loc) IAmiSSL->X509_REVOKED_add_ext(x, ex, loc) 
#define X509_EXTENSION_create_by_NID(ex, nid, crit, data) IAmiSSL->X509_EXTENSION_create_by_NID(ex, nid, crit, data) 
#define X509_EXTENSION_create_by_OBJ(ex, obj, crit, data) IAmiSSL->X509_EXTENSION_create_by_OBJ(ex, obj, crit, data) 
#define X509_EXTENSION_set_object(ex, obj) IAmiSSL->X509_EXTENSION_set_object(ex, obj) 
#define X509_EXTENSION_set_critical(ex, crit) IAmiSSL->X509_EXTENSION_set_critical(ex, crit) 
#define X509_EXTENSION_set_data(ex, data) IAmiSSL->X509_EXTENSION_set_data(ex, data) 
#define X509_EXTENSION_get_object(ex) IAmiSSL->X509_EXTENSION_get_object(ex) 
#define X509_EXTENSION_get_data(ne) IAmiSSL->X509_EXTENSION_get_data(ne) 
#define X509_EXTENSION_get_critical(ex) IAmiSSL->X509_EXTENSION_get_critical(ex) 
#define X509_verify_cert(ctx) IAmiSSL->X509_verify_cert(ctx) 
#define X509_find_by_issuer_and_serial(sk, name, serial) IAmiSSL->X509_find_by_issuer_and_serial(sk, name, serial) 
#define X509_find_by_subject(sk, name) IAmiSSL->X509_find_by_subject(sk, name) 
#define i2d_PBEPARAM(a, pp) IAmiSSL->i2d_PBEPARAM(a, pp) 
#define PBEPARAM_new() IAmiSSL->PBEPARAM_new() 
#define d2i_PBEPARAM(a, pp, length) IAmiSSL->d2i_PBEPARAM(a, pp, length) 
#define PBEPARAM_free(a) IAmiSSL->PBEPARAM_free(a) 
#define PKCS5_pbe_set(alg, iter, salt, saltlen) IAmiSSL->PKCS5_pbe_set(alg, iter, salt, saltlen) 
#define i2d_PBKDF2PARAM(a, pp) IAmiSSL->i2d_PBKDF2PARAM(a, pp) 
#define PBKDF2PARAM_new() IAmiSSL->PBKDF2PARAM_new() 
#define d2i_PBKDF2PARAM(a, pp, length) IAmiSSL->d2i_PBKDF2PARAM(a, pp, length) 
#define PBKDF2PARAM_free(a) IAmiSSL->PBKDF2PARAM_free(a) 
#define i2d_PBE2PARAM(a, pp) IAmiSSL->i2d_PBE2PARAM(a, pp) 
#define PBE2PARAM_new() IAmiSSL->PBE2PARAM_new() 
#define d2i_PBE2PARAM(a, pp, length) IAmiSSL->d2i_PBE2PARAM(a, pp, length) 
#define PBE2PARAM_free(a) IAmiSSL->PBE2PARAM_free(a) 
#define i2d_PKCS8_PRIV_KEY_INFO(a, pp) IAmiSSL->i2d_PKCS8_PRIV_KEY_INFO(a, pp) 
#define PKCS8_PRIV_KEY_INFO_new() IAmiSSL->PKCS8_PRIV_KEY_INFO_new() 
#define d2i_PKCS8_PRIV_KEY_INFO(a, pp, length) IAmiSSL->d2i_PKCS8_PRIV_KEY_INFO(a, pp, length) 
#define PKCS8_PRIV_KEY_INFO_free(a) IAmiSSL->PKCS8_PRIV_KEY_INFO_free(a) 
#define EVP_PKCS82PKEY(p8) IAmiSSL->EVP_PKCS82PKEY(p8) 
#define EVP_PKEY2PKCS8(pkey) IAmiSSL->EVP_PKEY2PKCS8(pkey) 
#define PKCS8_set_broken(p8, broken) IAmiSSL->PKCS8_set_broken(p8, broken) 
#define X509_OBJECT_retrieve_by_subject(h, type, name) IAmiSSL->X509_OBJECT_retrieve_by_subject(h, type, name) 
#define X509_OBJECT_up_ref_count(a) IAmiSSL->X509_OBJECT_up_ref_count(a) 
#define X509_OBJECT_free_contents(a) IAmiSSL->X509_OBJECT_free_contents(a) 
#define X509_STORE_new() IAmiSSL->X509_STORE_new() 
#define X509_STORE_free(v) IAmiSSL->X509_STORE_free(v) 
#define X509_STORE_CTX_init(ctx, store, x509, chain) IAmiSSL->X509_STORE_CTX_init(ctx, store, x509, chain) 
#define X509_STORE_CTX_cleanup(ctx) IAmiSSL->X509_STORE_CTX_cleanup(ctx) 
#define X509_STORE_add_lookup(v, m) IAmiSSL->X509_STORE_add_lookup(v, m) 
#define X509_LOOKUP_hash_dir() IAmiSSL->X509_LOOKUP_hash_dir() 
#define X509_LOOKUP_file() IAmiSSL->X509_LOOKUP_file() 
#define X509_STORE_add_cert(ctx, x) IAmiSSL->X509_STORE_add_cert(ctx, x) 
#define X509_STORE_add_crl(ctx, x) IAmiSSL->X509_STORE_add_crl(ctx, x) 
#define X509_STORE_get_by_subject(vs, type, name, ret) IAmiSSL->X509_STORE_get_by_subject(vs, type, name, ret) 
#define X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret) IAmiSSL->X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret) 
#define X509_load_cert_file(ctx, file, type) IAmiSSL->X509_load_cert_file(ctx, file, type) 
#define X509_load_crl_file(ctx, file, type) IAmiSSL->X509_load_crl_file(ctx, file, type) 
#define X509_LOOKUP_new(method) IAmiSSL->X509_LOOKUP_new(method) 
#define X509_LOOKUP_free(ctx) IAmiSSL->X509_LOOKUP_free(ctx) 
#define X509_LOOKUP_init(ctx) IAmiSSL->X509_LOOKUP_init(ctx) 
#define X509_LOOKUP_by_subject(ctx, type, name, ret) IAmiSSL->X509_LOOKUP_by_subject(ctx, type, name, ret) 
#define X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret) IAmiSSL->X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret) 
#define X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret) IAmiSSL->X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret) 
#define X509_LOOKUP_by_alias(ctx, type, str, len, ret) IAmiSSL->X509_LOOKUP_by_alias(ctx, type, str, len, ret) 
#define X509_LOOKUP_shutdown(ctx) IAmiSSL->X509_LOOKUP_shutdown(ctx) 
#define X509_STORE_load_locations(ctx, file, dir) IAmiSSL->X509_STORE_load_locations(ctx, file, dir) 
#define X509_STORE_set_default_paths(ctx) IAmiSSL->X509_STORE_set_default_paths(ctx) 
#define X509_STORE_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->X509_STORE_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) 
#define X509_STORE_CTX_set_ex_data(ctx, idx, data) IAmiSSL->X509_STORE_CTX_set_ex_data(ctx, idx, data) 
#define X509_STORE_CTX_get_ex_data(ctx, idx) IAmiSSL->X509_STORE_CTX_get_ex_data(ctx, idx) 
#define X509_STORE_CTX_get_error(ctx) IAmiSSL->X509_STORE_CTX_get_error(ctx) 
#define X509_STORE_CTX_set_error(ctx, s) IAmiSSL->X509_STORE_CTX_set_error(ctx, s) 
#define X509_STORE_CTX_get_error_depth(ctx) IAmiSSL->X509_STORE_CTX_get_error_depth(ctx) 
#define X509_STORE_CTX_get_current_cert(ctx) IAmiSSL->X509_STORE_CTX_get_current_cert(ctx) 
#define X509_STORE_CTX_get_chain(ctx) IAmiSSL->X509_STORE_CTX_get_chain(ctx) 
#define X509_STORE_CTX_set_cert(c, x) IAmiSSL->X509_STORE_CTX_set_cert(c, x) 
#define X509_STORE_CTX_set_chain(c, sk) IAmiSSL->X509_STORE_CTX_set_chain(c, sk) 
#define BIO_ctrl_pending(b) IAmiSSL->BIO_ctrl_pending(b) 
#define BIO_ctrl_wpending(b) IAmiSSL->BIO_ctrl_wpending(b) 
#define BIO_ctrl_get_write_guarantee(b) IAmiSSL->BIO_ctrl_get_write_guarantee(b) 
#define BIO_ctrl_get_read_request(b) IAmiSSL->BIO_ctrl_get_read_request(b) 
#define BIO_s_bio() IAmiSSL->BIO_s_bio() 
#define BIO_new_bio_pair(bio1, writebuf1, bio2, writebuf2) IAmiSSL->BIO_new_bio_pair(bio1, writebuf1, bio2, writebuf2) 
#define CRYPTO_num_locks() IAmiSSL->CRYPTO_num_locks() 
#define DSA_dup_DH(r) IAmiSSL->DSA_dup_DH(r) 
#define PKCS5_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) IAmiSSL->PKCS5_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) 
#define PKCS5_PBKDF2_HMAC_SHA1(pass, passlen, salt, saltlen, iter, keylen, out) IAmiSSL->PKCS5_PBKDF2_HMAC_SHA1(pass, passlen, salt, saltlen, iter, keylen, out) 
#define PKCS5_v2_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) IAmiSSL->PKCS5_v2_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) 
#define PKCS5_PBE_add() IAmiSSL->PKCS5_PBE_add() 
#define EVP_PBE_CipherInit(pbe_obj, pass, passlen, param, ctx, en_de) IAmiSSL->EVP_PBE_CipherInit(pbe_obj, pass, passlen, param, ctx, en_de) 
#define EVP_PBE_alg_add(nid, cipher, md, keygen) IAmiSSL->EVP_PBE_alg_add(nid, cipher, md, keygen) 
#define EVP_PBE_cleanup() IAmiSSL->EVP_PBE_cleanup() 
#define OBJ_obj2txt(buf, buf_len, a, no_name) IAmiSSL->OBJ_obj2txt(buf, buf_len, a, no_name) 
#define PKCS7_signatureVerify(bio, p7, si, x509) IAmiSSL->PKCS7_signatureVerify(bio, p7, si, x509) 
#define RSA_check_key(rsa) IAmiSSL->RSA_check_key(rsa) 
#define RSA_get_default_method() IAmiSSL->RSA_get_default_method() 
#define RSA_get_method(rsa) IAmiSSL->RSA_get_method(rsa) 
#define RSA_set_method(rsa, meth) IAmiSSL->RSA_set_method(rsa, meth) 
#define sk_sort(st) IAmiSSL->sk_sort(st) 
#define SSL_CTX_set_default_passwd_cb_userdata(ctx, u) IAmiSSL->SSL_CTX_set_default_passwd_cb_userdata(ctx, u) 
#define d2i_PKCS8_bio(bp, p8) IAmiSSL->d2i_PKCS8_bio(bp, p8) 
#define i2d_PKCS8_bio(bp, p8) IAmiSSL->i2d_PKCS8_bio(bp, p8) 
#define d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) IAmiSSL->d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) 
#define i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) IAmiSSL->i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) 
#define PKCS5_pbe2_set(cipher, iter, salt, saltlen) IAmiSSL->PKCS5_pbe2_set(cipher, iter, salt, saltlen) 
#define PKCS12_PBE_keyivgen(ctx, pass, passlen, param, cipher, md_type, en_de) IAmiSSL->PKCS12_PBE_keyivgen(ctx, pass, passlen, param, cipher, md_type, en_de) 
#define PEM_read_bio_PKCS8(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS8(bp, x, cb, u) 
#define PEM_read_bio_PKCS8_PRIV_KEY_INFO(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS8_PRIV_KEY_INFO(bp, x, cb, u) 
#define PEM_write_bio_PKCS8(bp, x) IAmiSSL->PEM_write_bio_PKCS8(bp, x) 
#define PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp, x) IAmiSSL->PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp, x) 
#define PEM_write_bio_PKCS8PrivateKey(fp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PKCS8PrivateKey(fp, x, enc, kstr, klen, cb, u) 
#define CONF_load_bio(conf, bp, eline) IAmiSSL->CONF_load_bio(conf, bp, eline) 

#endif /* INLINE4_AMISSL_H */
