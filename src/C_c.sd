##stringtype C
##shortstrings
/***************************************************************************

 YAM - Yet Another Mailer
 Copyright (C) 1995-2000 by Marcel Beck <mbeck@yam.ch>
 Copyright (C) 2000-2006 by YAM Open Source Team

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 YAM Official Support Site :  http://www.yam.ch
 YAM OpenSource project    :  http://sourceforge.net/projects/yamos/

 $Id$

***************************************************************************/

 /*
  * If this file is named 'YAM_locale.c' it is automatically
  * generated by 'FlexCat' from C_c.sd. PLEASE DO NOT EDIT!!!
  */

#include <proto/dos.h>
#include <proto/locale.h>

#include "YAM.h"

#include "Debug.h"

struct FC_Type { const long ID; const char * const Str; };

const struct FC_Type _%i = { %d, %s };

/*** Catalog functions ***/
/// GetStr()
const char *GetStr(const void *fcstr)
{
  const char *defaultstr = ((struct FC_Type *)fcstr)->Str;

  if(G->Catalog)
    return GetCatalogStr(G->Catalog, ((struct FC_Type *)fcstr)->ID, (STRPTR)defaultstr);

  return defaultstr;
}
///
/// GetStripStr()
// function that will strip out the special menusigns
const char *GetStripStr(const void *fcstr)
{
  const char *loc_str = GetStr(fcstr);

  return (loc_str[1] == 0 ? &loc_str[2] : loc_str);
}
///
/// Close%bCatalog()
void Close%bCatalog(void)
{
  ENTER();

  if(G->Catalog != NULL)
  {
    CloseCatalog(G->Catalog);
    G->Catalog = NULL;
  }

  LEAVE();
}
///
/// Open%bCatalog()
BOOL Open%bCatalog(void)
{
  BOOL success = TRUE;

  ENTER();

  // now we try to open the catalog
  if(LocaleBase && G->Catalog == NULL)
  {
    // try to open the catalog file in its
    // specified version.
    G->Catalog = OpenCatalogA(NULL, (STRPTR)"%b.catalog", NULL);

    // check if an error occurred.
    if(G->Catalog)
    {
      // now we check if the opened catalog has the correct version or not
      // and we don't care about revisions here.
      if(G->Catalog->cat_Version != %v)
      {
        struct EasyStruct ErrReq;

        ErrReq.es_StructSize = sizeof(struct EasyStruct);
        ErrReq.es_Flags      = 0;

        ErrReq.es_Title        = (STRPTR)"%b.catalog version incompatible!";
        ErrReq.es_TextFormat   = (STRPTR)"YAM has found a translation catalog file in\\n"
                                         "your native language to be available. However,\\n"
                                         "it couldn't be activated as its version is\\n"
                                         "incompatible to version %v which YAM requires.\\n"
                                         "\\n"
                                         "Please check if there is a version %v of your\\n"
                                         "native catalog available or remove the old one.";
        ErrReq.es_GadgetFormat = (STRPTR)"Continue|Exit";

        DisplayBeep(NULL);
        success = EasyRequestArgs(NULL, &ErrReq, NULL, NULL);

        // close the catalog immediately again
        // so that we fallback to the internal language
        CloseCatalog(G->Catalog);
        G->Catalog = NULL;
      }
    }
  }

  RETURN(success);
  return success;
}
///
