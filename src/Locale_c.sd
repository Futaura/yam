##stringtype C
##shortstrings
/***************************************************************************

 YAM - Yet Another Mailer
 Copyright (C) 1995-2000 Marcel Beck
 Copyright (C) 2000-2014 YAM Open Source Team

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 YAM Official Support Site :  http://www.yam.ch
 YAM OpenSource project    :  http://sourceforge.net/projects/yamos/

 $Id$

***************************************************************************/

// If this file is named 'Locale.c' it is automatically
// generated by 'FlexCat' from Locale_c.sd.
// PLEASE DO NOT EDIT!!!

#include <proto/dos.h>
#include <proto/locale.h>

#if !defined(__amigaos4__)
#include <proto/codesets.h>
#endif

#include "Locale.h"
#include "YAM.h"

#include "Debug.h"

struct fcstr %b_Strings[%n] =
{ 
  { %s, NULL, %d }%(,) 
};

/*** Catalog functions ***/
/// Close%bCatalog()
void Close%bCatalog(void)
{
  ENTER();

  #if !defined(__amigaos4__)
  if(G->Catalog != NULL)
  {
    int i;
    struct fcstr *fc;

    for(i=0, fc = (struct fcstr *)%b_Strings;  i < %n;  i++, fc++)
    {
      if(fc->msg != NULL)
      {
        CodesetsFreeA((STRPTR)fc->msg, NULL);
        fc->msg = NULL;
      }
    }
  }
  #endif
 
  if(G->Locale != NULL && G->Catalog != NULL)
  {
    CloseCatalog(G->Catalog);
    G->Catalog = NULL;
  }

  LEAVE();
}
///
/// Open%bCatalog()
BOOL Open%bCatalog(void)
{
  BOOL success = TRUE;

  ENTER();

  // now we try to open the catalog
  if(G->Locale != NULL && G->Catalog == NULL)
  {
    struct fcstr *fc;
    int i;

    // try to open the catalog file in its
    // specified version.
    if(G->NoCatalogTranslation == FALSE)
    {
      G->Catalog = OpenCatalog(NULL, 
                               (STRPTR)"%b.catalog", 
                               OC_BuiltInLanguage, "english",
                               OC_BuiltInCodeSet, 4, // 4 = iso-8859-1
                               #if defined(__amigaos4__)
                               OC_BuiltInVersion, %v,
                               OC_PreferExternal, TRUE,
                               #endif
                               TAG_END);
    }

    // check if an error occurred.
    if(G->Catalog != NULL)
    {
      // now we check if the opened catalog has the correct version or not
      // and we don't care about revisions here.
      if(G->Catalog->cat_Version != %v)
      {
        struct EasyStruct ErrReq;

        W(DBF_STARTUP, "Catalog version (%%%d) != required version (%v). Warning user!", G->Catalog->cat_Version);

        ErrReq.es_StructSize = sizeof(struct EasyStruct);
        ErrReq.es_Flags      = 0;

        ErrReq.es_Title        = (STRPTR)"%b.catalog version incompatible!";
        ErrReq.es_TextFormat   = (STRPTR)"YAM has found a translation catalog file in\\n"
                                         "your native language to be available. However,\\n"
                                         "it couldn't be activated as its version is\\n"
                                         "incompatible to version %v which YAM requires.\\n"
                                         "\\n"
                                         "Please check if there is a version %v of your\\n"
                                         "native catalog available or remove the old one.";
        ErrReq.es_GadgetFormat = (STRPTR)"Continue|Exit";

        DisplayBeep(NULL);
        success = EasyRequestArgs(NULL, &ErrReq, NULL, NULL);

        // close the catalog immediately again
        // so that we fallback to the internal language
        CloseCatalog(G->Catalog);
        G->Catalog = NULL;
      }
      else
        D(DBF_STARTUP, "successfully opened %b.catalog v%%%d.%%%d (language: '%%%s', codeset: %%%d)", G->Catalog->cat_Version, G->Catalog->cat_Revision, G->Catalog->cat_Language, G->Catalog->cat_CodeSet);
    }
    else if(G->NoCatalogTranslation == FALSE)
    {
      // now we check the error state
      if(IoErr() != 0)
        W(DBF_STARTUP, "could not open '%b.catalog': IoErr: %%%d", IoErr());
      else
        W(DBF_STARTUP, "could not open '%b.catalog': builtin strings can be used");
    }
 
    // retrieve the translated catalog strings and store them into fc->msg
    // G->Catalog might be NULL here which means the original strings will be
    // converted by GetCatalogStr() (e.g. conversion from UTF-8 -> local charset)
    for(i=0, fc = (struct fcstr *)%b_Strings;  i < %n;  i++, fc++)
    {
      const char *cs = GetCatalogStr(G->Catalog, fc->id, (STRPTR)fc->defmsg);

      #if !defined(__amigaos4__)
      if(G->Catalog != NULL && cs != NULL)
        fc->msg = CodesetsUTF8ToStr(CSA_Source, cs, TAG_DONE);
      else
        fc->msg = cs;
      #else
      fc->msg = cs;
      #endif
    }
  }
  else
    W(DBF_STARTUP, "locale.library was not open, skipping catalog opening.");

  RETURN(success);
  return success;
}
///
