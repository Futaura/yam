#ifndef INLINE4_AMISSL_H
#define INLINE4_AMISSL_H

/*
** This file was auto generated by idltool 53.13.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif
#include <interfaces/amissl.h>

/* Inline macros for Interface "main" */
#define InternalInitAmiSSL(amisslinit) IAmiSSL->InternalInitAmiSSL((amisslinit)) 
#define InitAmiSSLA(tagList) IAmiSSL->InitAmiSSLA((tagList)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define InitAmiSSL(...) IAmiSSL->InitAmiSSL(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define InitAmiSSL(...) IAmiSSL->InitAmiSSL(## vargs) 
#endif
#define CleanupAmiSSLA(tagList) IAmiSSL->CleanupAmiSSLA((tagList)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define CleanupAmiSSL(...) IAmiSSL->CleanupAmiSSL(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define CleanupAmiSSL(...) IAmiSSL->CleanupAmiSSL(## vargs) 
#endif
#define ASN1_TYPE_new() IAmiSSL->ASN1_TYPE_new() 
#define ASN1_TYPE_free(a) IAmiSSL->ASN1_TYPE_free((a)) 
#define d2i_ASN1_TYPE(a, in, len) IAmiSSL->d2i_ASN1_TYPE((a), (in), (len)) 
#define i2d_ASN1_TYPE(a, out) IAmiSSL->i2d_ASN1_TYPE((a), (out)) 
#define ASN1_ANY_it() IAmiSSL->ASN1_ANY_it() 
#define ASN1_TYPE_get(a) IAmiSSL->ASN1_TYPE_get((a)) 
#define ASN1_TYPE_set(a, type, value) IAmiSSL->ASN1_TYPE_set((a), (type), (value)) 
#define ASN1_OBJECT_new() IAmiSSL->ASN1_OBJECT_new() 
#define ASN1_OBJECT_free(a) IAmiSSL->ASN1_OBJECT_free((a)) 
#define i2d_ASN1_OBJECT(a, pp) IAmiSSL->i2d_ASN1_OBJECT((a), (pp)) 
#define c2i_ASN1_OBJECT(a, pp, length) IAmiSSL->c2i_ASN1_OBJECT((a), (pp), (length)) 
#define d2i_ASN1_OBJECT(a, pp, length) IAmiSSL->d2i_ASN1_OBJECT((a), (pp), (length)) 
#define ASN1_OBJECT_it() IAmiSSL->ASN1_OBJECT_it() 
#define ASN1_STRING_new() IAmiSSL->ASN1_STRING_new() 
#define ASN1_STRING_free(a) IAmiSSL->ASN1_STRING_free((a)) 
#define ASN1_STRING_dup(a) IAmiSSL->ASN1_STRING_dup((a)) 
#define ASN1_STRING_type_new(type) IAmiSSL->ASN1_STRING_type_new((type)) 
#define ASN1_STRING_cmp(a, b) IAmiSSL->ASN1_STRING_cmp((a), (b)) 
#define ASN1_STRING_set(str, data, len) IAmiSSL->ASN1_STRING_set((str), (data), (len)) 
#define ASN1_STRING_length(x) IAmiSSL->ASN1_STRING_length((x)) 
#define ASN1_STRING_length_set(x, n) IAmiSSL->ASN1_STRING_length_set((x), (n)) 
#define ASN1_STRING_type(x) IAmiSSL->ASN1_STRING_type((x)) 
#define ASN1_STRING_data(x) IAmiSSL->ASN1_STRING_data((x)) 
#define ASN1_BIT_STRING_new() IAmiSSL->ASN1_BIT_STRING_new() 
#define ASN1_BIT_STRING_free(a) IAmiSSL->ASN1_BIT_STRING_free((a)) 
#define d2i_ASN1_BIT_STRING(a, in, len) IAmiSSL->d2i_ASN1_BIT_STRING((a), (in), (len)) 
#define i2d_ASN1_BIT_STRING(a, out) IAmiSSL->i2d_ASN1_BIT_STRING((a), (out)) 
#define ASN1_BIT_STRING_it() IAmiSSL->ASN1_BIT_STRING_it() 
#define i2c_ASN1_BIT_STRING(a, pp) IAmiSSL->i2c_ASN1_BIT_STRING((a), (pp)) 
#define c2i_ASN1_BIT_STRING(a, pp, length) IAmiSSL->c2i_ASN1_BIT_STRING((a), (pp), (length)) 
#define ASN1_BIT_STRING_set(a, d, length) IAmiSSL->ASN1_BIT_STRING_set((a), (d), (length)) 
#define ASN1_BIT_STRING_set_bit(a, n, value) IAmiSSL->ASN1_BIT_STRING_set_bit((a), (n), (value)) 
#define ASN1_BIT_STRING_get_bit(a, n) IAmiSSL->ASN1_BIT_STRING_get_bit((a), (n)) 
#define ASN1_BIT_STRING_name_print(out, bs, tbl, indent) IAmiSSL->ASN1_BIT_STRING_name_print((out), (bs), (tbl), (indent)) 
#define ASN1_BIT_STRING_num_asc(name, tbl) IAmiSSL->ASN1_BIT_STRING_num_asc((name), (tbl)) 
#define ASN1_BIT_STRING_set_asc(bs, name, value, tbl) IAmiSSL->ASN1_BIT_STRING_set_asc((bs), (name), (value), (tbl)) 
#define i2d_ASN1_BOOLEAN(a, pp) IAmiSSL->i2d_ASN1_BOOLEAN((a), (pp)) 
#define d2i_ASN1_BOOLEAN(a, pp, length) IAmiSSL->d2i_ASN1_BOOLEAN((a), (pp), (length)) 
#define ASN1_INTEGER_new() IAmiSSL->ASN1_INTEGER_new() 
#define ASN1_INTEGER_free(a) IAmiSSL->ASN1_INTEGER_free((a)) 
#define d2i_ASN1_INTEGER(a, in, len) IAmiSSL->d2i_ASN1_INTEGER((a), (in), (len)) 
#define i2d_ASN1_INTEGER(a, out) IAmiSSL->i2d_ASN1_INTEGER((a), (out)) 
#define ASN1_INTEGER_it() IAmiSSL->ASN1_INTEGER_it() 
#define i2c_ASN1_INTEGER(a, pp) IAmiSSL->i2c_ASN1_INTEGER((a), (pp)) 
#define c2i_ASN1_INTEGER(a, pp, length) IAmiSSL->c2i_ASN1_INTEGER((a), (pp), (length)) 
#define d2i_ASN1_UINTEGER(a, pp, length) IAmiSSL->d2i_ASN1_UINTEGER((a), (pp), (length)) 
#define ASN1_INTEGER_dup(x) IAmiSSL->ASN1_INTEGER_dup((x)) 
#define ASN1_INTEGER_cmp(x, y) IAmiSSL->ASN1_INTEGER_cmp((x), (y)) 
#define ASN1_ENUMERATED_new() IAmiSSL->ASN1_ENUMERATED_new() 
#define ASN1_ENUMERATED_free(a) IAmiSSL->ASN1_ENUMERATED_free((a)) 
#define d2i_ASN1_ENUMERATED(a, in, len) IAmiSSL->d2i_ASN1_ENUMERATED((a), (in), (len)) 
#define i2d_ASN1_ENUMERATED(a, out) IAmiSSL->i2d_ASN1_ENUMERATED((a), (out)) 
#define ASN1_ENUMERATED_it() IAmiSSL->ASN1_ENUMERATED_it() 
#define ASN1_UTCTIME_check(a) IAmiSSL->ASN1_UTCTIME_check((a)) 
#define ASN1_UTCTIME_set(s, t) IAmiSSL->ASN1_UTCTIME_set((s), (t)) 
#define ASN1_UTCTIME_set_string(s, str) IAmiSSL->ASN1_UTCTIME_set_string((s), (str)) 
#define ASN1_UTCTIME_cmp_time_t(s, t) IAmiSSL->ASN1_UTCTIME_cmp_time_t((s), (t)) 
#define ASN1_GENERALIZEDTIME_check(a) IAmiSSL->ASN1_GENERALIZEDTIME_check((a)) 
#define ASN1_GENERALIZEDTIME_set(s, t) IAmiSSL->ASN1_GENERALIZEDTIME_set((s), (t)) 
#define ASN1_GENERALIZEDTIME_set_string(s, str) IAmiSSL->ASN1_GENERALIZEDTIME_set_string((s), (str)) 
#define ASN1_OCTET_STRING_new() IAmiSSL->ASN1_OCTET_STRING_new() 
#define ASN1_OCTET_STRING_free(a) IAmiSSL->ASN1_OCTET_STRING_free((a)) 
#define d2i_ASN1_OCTET_STRING(a, in, len) IAmiSSL->d2i_ASN1_OCTET_STRING((a), (in), (len)) 
#define i2d_ASN1_OCTET_STRING(a, out) IAmiSSL->i2d_ASN1_OCTET_STRING((a), (out)) 
#define ASN1_OCTET_STRING_it() IAmiSSL->ASN1_OCTET_STRING_it() 
#define ASN1_OCTET_STRING_dup(a) IAmiSSL->ASN1_OCTET_STRING_dup((a)) 
#define ASN1_OCTET_STRING_cmp(a, b) IAmiSSL->ASN1_OCTET_STRING_cmp((a), (b)) 
#define ASN1_OCTET_STRING_set(str, data, len) IAmiSSL->ASN1_OCTET_STRING_set((str), (data), (len)) 
#define ASN1_VISIBLESTRING_new() IAmiSSL->ASN1_VISIBLESTRING_new() 
#define ASN1_VISIBLESTRING_free(a) IAmiSSL->ASN1_VISIBLESTRING_free((a)) 
#define d2i_ASN1_VISIBLESTRING(a, in, len) IAmiSSL->d2i_ASN1_VISIBLESTRING((a), (in), (len)) 
#define i2d_ASN1_VISIBLESTRING(a, out) IAmiSSL->i2d_ASN1_VISIBLESTRING((a), (out)) 
#define ASN1_VISIBLESTRING_it() IAmiSSL->ASN1_VISIBLESTRING_it() 
#define ASN1_UNIVERSALSTRING_new() IAmiSSL->ASN1_UNIVERSALSTRING_new() 
#define ASN1_UNIVERSALSTRING_free(a) IAmiSSL->ASN1_UNIVERSALSTRING_free((a)) 
#define d2i_ASN1_UNIVERSALSTRING(a, in, len) IAmiSSL->d2i_ASN1_UNIVERSALSTRING((a), (in), (len)) 
#define i2d_ASN1_UNIVERSALSTRING(a, out) IAmiSSL->i2d_ASN1_UNIVERSALSTRING((a), (out)) 
#define ASN1_UNIVERSALSTRING_it() IAmiSSL->ASN1_UNIVERSALSTRING_it() 
#define ASN1_UTF8STRING_new() IAmiSSL->ASN1_UTF8STRING_new() 
#define ASN1_UTF8STRING_free(a) IAmiSSL->ASN1_UTF8STRING_free((a)) 
#define d2i_ASN1_UTF8STRING(a, in, len) IAmiSSL->d2i_ASN1_UTF8STRING((a), (in), (len)) 
#define i2d_ASN1_UTF8STRING(a, out) IAmiSSL->i2d_ASN1_UTF8STRING((a), (out)) 
#define ASN1_UTF8STRING_it() IAmiSSL->ASN1_UTF8STRING_it() 
#define ASN1_NULL_new() IAmiSSL->ASN1_NULL_new() 
#define ASN1_NULL_free(a) IAmiSSL->ASN1_NULL_free((a)) 
#define d2i_ASN1_NULL(a, in, len) IAmiSSL->d2i_ASN1_NULL((a), (in), (len)) 
#define i2d_ASN1_NULL(a, out) IAmiSSL->i2d_ASN1_NULL((a), (out)) 
#define ASN1_NULL_it() IAmiSSL->ASN1_NULL_it() 
#define ASN1_BMPSTRING_new() IAmiSSL->ASN1_BMPSTRING_new() 
#define ASN1_BMPSTRING_free(a) IAmiSSL->ASN1_BMPSTRING_free((a)) 
#define d2i_ASN1_BMPSTRING(a, in, len) IAmiSSL->d2i_ASN1_BMPSTRING((a), (in), (len)) 
#define i2d_ASN1_BMPSTRING(a, out) IAmiSSL->i2d_ASN1_BMPSTRING((a), (out)) 
#define ASN1_BMPSTRING_it() IAmiSSL->ASN1_BMPSTRING_it() 
#define UTF8_getc(str, len, val) IAmiSSL->UTF8_getc((str), (len), (val)) 
#define UTF8_putc(str, len, value) IAmiSSL->UTF8_putc((str), (len), (value)) 
#define ASN1_PRINTABLE_new() IAmiSSL->ASN1_PRINTABLE_new() 
#define ASN1_PRINTABLE_free(a) IAmiSSL->ASN1_PRINTABLE_free((a)) 
#define d2i_ASN1_PRINTABLE(a, in, len) IAmiSSL->d2i_ASN1_PRINTABLE((a), (in), (len)) 
#define i2d_ASN1_PRINTABLE(a, out) IAmiSSL->i2d_ASN1_PRINTABLE((a), (out)) 
#define ASN1_PRINTABLE_it() IAmiSSL->ASN1_PRINTABLE_it() 
#define DIRECTORYSTRING_new() IAmiSSL->DIRECTORYSTRING_new() 
#define DIRECTORYSTRING_free(a) IAmiSSL->DIRECTORYSTRING_free((a)) 
#define d2i_DIRECTORYSTRING(a, in, len) IAmiSSL->d2i_DIRECTORYSTRING((a), (in), (len)) 
#define i2d_DIRECTORYSTRING(a, out) IAmiSSL->i2d_DIRECTORYSTRING((a), (out)) 
#define DIRECTORYSTRING_it() IAmiSSL->DIRECTORYSTRING_it() 
#define DISPLAYTEXT_new() IAmiSSL->DISPLAYTEXT_new() 
#define DISPLAYTEXT_free(a) IAmiSSL->DISPLAYTEXT_free((a)) 
#define d2i_DISPLAYTEXT(a, in, len) IAmiSSL->d2i_DISPLAYTEXT((a), (in), (len)) 
#define i2d_DISPLAYTEXT(a, out) IAmiSSL->i2d_DISPLAYTEXT((a), (out)) 
#define DISPLAYTEXT_it() IAmiSSL->DISPLAYTEXT_it() 
#define ASN1_PRINTABLESTRING_new() IAmiSSL->ASN1_PRINTABLESTRING_new() 
#define ASN1_PRINTABLESTRING_free(a) IAmiSSL->ASN1_PRINTABLESTRING_free((a)) 
#define d2i_ASN1_PRINTABLESTRING(a, in, len) IAmiSSL->d2i_ASN1_PRINTABLESTRING((a), (in), (len)) 
#define i2d_ASN1_PRINTABLESTRING(a, out) IAmiSSL->i2d_ASN1_PRINTABLESTRING((a), (out)) 
#define ASN1_PRINTABLESTRING_it() IAmiSSL->ASN1_PRINTABLESTRING_it() 
#define ASN1_T61STRING_new() IAmiSSL->ASN1_T61STRING_new() 
#define ASN1_T61STRING_free(a) IAmiSSL->ASN1_T61STRING_free((a)) 
#define d2i_ASN1_T61STRING(a, in, len) IAmiSSL->d2i_ASN1_T61STRING((a), (in), (len)) 
#define i2d_ASN1_T61STRING(a, out) IAmiSSL->i2d_ASN1_T61STRING((a), (out)) 
#define ASN1_T61STRING_it() IAmiSSL->ASN1_T61STRING_it() 
#define ASN1_IA5STRING_new() IAmiSSL->ASN1_IA5STRING_new() 
#define ASN1_IA5STRING_free(a) IAmiSSL->ASN1_IA5STRING_free((a)) 
#define d2i_ASN1_IA5STRING(a, in, len) IAmiSSL->d2i_ASN1_IA5STRING((a), (in), (len)) 
#define i2d_ASN1_IA5STRING(a, out) IAmiSSL->i2d_ASN1_IA5STRING((a), (out)) 
#define ASN1_IA5STRING_it() IAmiSSL->ASN1_IA5STRING_it() 
#define ASN1_GENERALSTRING_new() IAmiSSL->ASN1_GENERALSTRING_new() 
#define ASN1_GENERALSTRING_free(a) IAmiSSL->ASN1_GENERALSTRING_free((a)) 
#define d2i_ASN1_GENERALSTRING(a, in, len) IAmiSSL->d2i_ASN1_GENERALSTRING((a), (in), (len)) 
#define i2d_ASN1_GENERALSTRING(a, out) IAmiSSL->i2d_ASN1_GENERALSTRING((a), (out)) 
#define ASN1_GENERALSTRING_it() IAmiSSL->ASN1_GENERALSTRING_it() 
#define ASN1_UTCTIME_new() IAmiSSL->ASN1_UTCTIME_new() 
#define ASN1_UTCTIME_free(a) IAmiSSL->ASN1_UTCTIME_free((a)) 
#define d2i_ASN1_UTCTIME(a, in, len) IAmiSSL->d2i_ASN1_UTCTIME((a), (in), (len)) 
#define i2d_ASN1_UTCTIME(a, out) IAmiSSL->i2d_ASN1_UTCTIME((a), (out)) 
#define ASN1_UTCTIME_it() IAmiSSL->ASN1_UTCTIME_it() 
#define ASN1_GENERALIZEDTIME_new() IAmiSSL->ASN1_GENERALIZEDTIME_new() 
#define ASN1_GENERALIZEDTIME_free(a) IAmiSSL->ASN1_GENERALIZEDTIME_free((a)) 
#define d2i_ASN1_GENERALIZEDTIME(a, in, len) IAmiSSL->d2i_ASN1_GENERALIZEDTIME((a), (in), (len)) 
#define i2d_ASN1_GENERALIZEDTIME(a, out) IAmiSSL->i2d_ASN1_GENERALIZEDTIME((a), (out)) 
#define ASN1_GENERALIZEDTIME_it() IAmiSSL->ASN1_GENERALIZEDTIME_it() 
#define ASN1_TIME_new() IAmiSSL->ASN1_TIME_new() 
#define ASN1_TIME_free(a) IAmiSSL->ASN1_TIME_free((a)) 
#define d2i_ASN1_TIME(a, in, len) IAmiSSL->d2i_ASN1_TIME((a), (in), (len)) 
#define i2d_ASN1_TIME(a, out) IAmiSSL->i2d_ASN1_TIME((a), (out)) 
#define ASN1_TIME_it() IAmiSSL->ASN1_TIME_it() 
#define ASN1_TIME_set(s, t) IAmiSSL->ASN1_TIME_set((s), (t)) 
#define ASN1_TIME_check(t) IAmiSSL->ASN1_TIME_check((t)) 
#define ASN1_TIME_to_generalizedtime(t, out) IAmiSSL->ASN1_TIME_to_generalizedtime((t), (out)) 
#define i2d_ASN1_SET(a, pp, i2d, ex_tag, ex_class, is_set) IAmiSSL->i2d_ASN1_SET((a), (pp), (i2d), (ex_tag), (ex_class), (is_set)) 
#define d2i_ASN1_SET(a, pp, length, d2i, free_func, ex_tag, ex_class) IAmiSSL->d2i_ASN1_SET((a), (pp), (length), (d2i), (free_func), (ex_tag), (ex_class)) 
#define i2a_ASN1_INTEGER(bp, a) IAmiSSL->i2a_ASN1_INTEGER((bp), (a)) 
#define a2i_ASN1_INTEGER(bp, bs, buf, size) IAmiSSL->a2i_ASN1_INTEGER((bp), (bs), (buf), (size)) 
#define i2a_ASN1_ENUMERATED(bp, a) IAmiSSL->i2a_ASN1_ENUMERATED((bp), (a)) 
#define a2i_ASN1_ENUMERATED(bp, bs, buf, size) IAmiSSL->a2i_ASN1_ENUMERATED((bp), (bs), (buf), (size)) 
#define i2a_ASN1_OBJECT(bp, a) IAmiSSL->i2a_ASN1_OBJECT((bp), (a)) 
#define a2i_ASN1_STRING(bp, bs, buf, size) IAmiSSL->a2i_ASN1_STRING((bp), (bs), (buf), (size)) 
#define i2a_ASN1_STRING(bp, a, type) IAmiSSL->i2a_ASN1_STRING((bp), (a), (type)) 
#define i2t_ASN1_OBJECT(buf, buf_len, a) IAmiSSL->i2t_ASN1_OBJECT((buf), (buf_len), (a)) 
#define a2d_ASN1_OBJECT(out, olen, buf, num) IAmiSSL->a2d_ASN1_OBJECT((out), (olen), (buf), (num)) 
#define ASN1_OBJECT_create(nid, data, len, sn, ln) IAmiSSL->ASN1_OBJECT_create((nid), (data), (len), (sn), (ln)) 
#define ASN1_INTEGER_set(a, v) IAmiSSL->ASN1_INTEGER_set((a), (v)) 
#define ASN1_INTEGER_get(a) IAmiSSL->ASN1_INTEGER_get((a)) 
#define BN_to_ASN1_INTEGER(bn, ai) IAmiSSL->BN_to_ASN1_INTEGER((bn), (ai)) 
#define ASN1_INTEGER_to_BN(ai, bn) IAmiSSL->ASN1_INTEGER_to_BN((ai), (bn)) 
#define ASN1_ENUMERATED_set(a, v) IAmiSSL->ASN1_ENUMERATED_set((a), (v)) 
#define ASN1_ENUMERATED_get(a) IAmiSSL->ASN1_ENUMERATED_get((a)) 
#define BN_to_ASN1_ENUMERATED(bn, ai) IAmiSSL->BN_to_ASN1_ENUMERATED((bn), (ai)) 
#define ASN1_ENUMERATED_to_BN(ai, bn) IAmiSSL->ASN1_ENUMERATED_to_BN((ai), (bn)) 
#define ASN1_PRINTABLE_type(s, max) IAmiSSL->ASN1_PRINTABLE_type((s), (max)) 
#define i2d_ASN1_bytes(a, pp, tag, xclass) IAmiSSL->i2d_ASN1_bytes((a), (pp), (tag), (xclass)) 
#define d2i_ASN1_bytes(a, pp, length, Ptag, Pclass) IAmiSSL->d2i_ASN1_bytes((a), (pp), (length), (Ptag), (Pclass)) 
#define ASN1_tag2bit(tag) IAmiSSL->ASN1_tag2bit((tag)) 
#define d2i_ASN1_type_bytes(a, pp, length, type) IAmiSSL->d2i_ASN1_type_bytes((a), (pp), (length), (type)) 
#define asn1_Finish(c) IAmiSSL->asn1_Finish((c)) 
#define ASN1_get_object(pp, plength, ptag, pclass, omax) IAmiSSL->ASN1_get_object((pp), (plength), (ptag), (pclass), (omax)) 
#define ASN1_check_infinite_end(p, len) IAmiSSL->ASN1_check_infinite_end((p), (len)) 
#define ASN1_put_object(pp, constructed, length, tag, xclass) IAmiSSL->ASN1_put_object((pp), (constructed), (length), (tag), (xclass)) 
#define ASN1_object_size(constructed, length, tag) IAmiSSL->ASN1_object_size((constructed), (length), (tag)) 
#define ASN1_dup(i2d, d2i, x) IAmiSSL->ASN1_dup((i2d), (d2i), (x)) 
#define ASN1_item_dup(it, x) IAmiSSL->ASN1_item_dup((it), (x)) 
#define ASN1_STRING_to_UTF8(out, in) IAmiSSL->ASN1_STRING_to_UTF8((out), (in)) 
#define ASN1_d2i_bio(xnew, d2i, in, x) IAmiSSL->ASN1_d2i_bio((xnew), (d2i), (in), (x)) 
#define ASN1_item_d2i_bio(it, in, x) IAmiSSL->ASN1_item_d2i_bio((it), (in), (x)) 
#define ASN1_i2d_bio(i2d, out, x) IAmiSSL->ASN1_i2d_bio((i2d), (out), (x)) 
#define ASN1_item_i2d_bio(it, out, x) IAmiSSL->ASN1_item_i2d_bio((it), (out), (x)) 
#define ASN1_UTCTIME_print(fp, a) IAmiSSL->ASN1_UTCTIME_print((fp), (a)) 
#define ASN1_GENERALIZEDTIME_print(fp, a) IAmiSSL->ASN1_GENERALIZEDTIME_print((fp), (a)) 
#define ASN1_TIME_print(fp, a) IAmiSSL->ASN1_TIME_print((fp), (a)) 
#define ASN1_STRING_print(bp, v) IAmiSSL->ASN1_STRING_print((bp), (v)) 
#define ASN1_STRING_print_ex(out, str, flags) IAmiSSL->ASN1_STRING_print_ex((out), (str), (flags)) 
#define ASN1_parse(bp, pp, len, indent) IAmiSSL->ASN1_parse((bp), (pp), (len), (indent)) 
#define ASN1_parse_dump(bp, pp, len, indent, dump) IAmiSSL->ASN1_parse_dump((bp), (pp), (len), (indent), (dump)) 
#define ASN1_tag2str(tag) IAmiSSL->ASN1_tag2str((tag)) 
#define ASN1_UNIVERSALSTRING_to_string(s) IAmiSSL->ASN1_UNIVERSALSTRING_to_string((s)) 
#define ASN1_TYPE_set_octetstring(a, data, len) IAmiSSL->ASN1_TYPE_set_octetstring((a), (data), (len)) 
#define ASN1_TYPE_get_octetstring(a, data, max_len) IAmiSSL->ASN1_TYPE_get_octetstring((a), (data), (max_len)) 
#define ASN1_TYPE_set_int_octetstring(a, num, data, len) IAmiSSL->ASN1_TYPE_set_int_octetstring((a), (num), (data), (len)) 
#define ASN1_TYPE_get_int_octetstring(a, num, data, max_len) IAmiSSL->ASN1_TYPE_get_int_octetstring((a), (num), (data), (max_len)) 
#define ASN1_seq_unpack(buf, len, d2i, free_func) IAmiSSL->ASN1_seq_unpack((buf), (len), (d2i), (free_func)) 
#define ASN1_seq_pack(safes, i2d, buf, len) IAmiSSL->ASN1_seq_pack((safes), (i2d), (buf), (len)) 
#define ASN1_unpack_string(oct, d2i) IAmiSSL->ASN1_unpack_string((oct), (d2i)) 
#define ASN1_item_unpack(oct, it) IAmiSSL->ASN1_item_unpack((oct), (it)) 
#define ASN1_pack_string(obj, i2d, oct) IAmiSSL->ASN1_pack_string((obj), (i2d), (oct)) 
#define ASN1_item_pack(obj, it, oct) IAmiSSL->ASN1_item_pack((obj), (it), (oct)) 
#define ASN1_STRING_set_default_mask(mask) IAmiSSL->ASN1_STRING_set_default_mask((mask)) 
#define ASN1_STRING_set_default_mask_asc(p) IAmiSSL->ASN1_STRING_set_default_mask_asc((p)) 
#define ASN1_STRING_get_default_mask() IAmiSSL->ASN1_STRING_get_default_mask() 
#define ASN1_mbstring_copy(out, in, len, inform, mask) IAmiSSL->ASN1_mbstring_copy((out), (in), (len), (inform), (mask)) 
#define ASN1_mbstring_ncopy(out, in, len, inform, mask, minsize, maxsize) IAmiSSL->ASN1_mbstring_ncopy((out), (in), (len), (inform), (mask), (minsize), (maxsize)) 
#define ASN1_STRING_set_by_NID(out, in, inlen, inform, nid) IAmiSSL->ASN1_STRING_set_by_NID((out), (in), (inlen), (inform), (nid)) 
#define ASN1_STRING_TABLE_get(nid) IAmiSSL->ASN1_STRING_TABLE_get((nid)) 
#define ASN1_STRING_TABLE_add(a, b, c, d, e) IAmiSSL->ASN1_STRING_TABLE_add((a), (b), (c), (d), (e)) 
#define ASN1_STRING_TABLE_cleanup() IAmiSSL->ASN1_STRING_TABLE_cleanup() 
#define ASN1_item_new(it) IAmiSSL->ASN1_item_new((it)) 
#define ASN1_item_free(val, it) IAmiSSL->ASN1_item_free((val), (it)) 
#define ASN1_item_d2i(val, in, len, it) IAmiSSL->ASN1_item_d2i((val), (in), (len), (it)) 
#define ASN1_item_i2d(val, out, it) IAmiSSL->ASN1_item_i2d((val), (out), (it)) 
#define ASN1_add_oid_module() IAmiSSL->ASN1_add_oid_module() 
#define ERR_load_ASN1_strings() IAmiSSL->ERR_load_ASN1_strings() 
#define asn1_GetSequence(c, length) IAmiSSL->asn1_GetSequence((c), (length)) 
#define asn1_add_error(address, offset) IAmiSSL->asn1_add_error((address), (offset)) 
#define ASN1_BOOLEAN_it() IAmiSSL->ASN1_BOOLEAN_it() 
#define ASN1_TBOOLEAN_it() IAmiSSL->ASN1_TBOOLEAN_it() 
#define ASN1_FBOOLEAN_it() IAmiSSL->ASN1_FBOOLEAN_it() 
#define ASN1_SEQUENCE_it() IAmiSSL->ASN1_SEQUENCE_it() 
#define CBIGNUM_it() IAmiSSL->CBIGNUM_it() 
#define BIGNUM_it() IAmiSSL->BIGNUM_it() 
#define LONG_it() IAmiSSL->LONG_it() 
#define ZLONG_it() IAmiSSL->ZLONG_it() 
#define ASN1_item_ex_new(pval, it) IAmiSSL->ASN1_item_ex_new((pval), (it)) 
#define ASN1_item_ex_free(pval, it) IAmiSSL->ASN1_item_ex_free((pval), (it)) 
#define ASN1_template_new(pval, tt) IAmiSSL->ASN1_template_new((pval), (tt)) 
#define ASN1_primitive_new(pval, it) IAmiSSL->ASN1_primitive_new((pval), (it)) 
#define ASN1_template_free(pval, tt) IAmiSSL->ASN1_template_free((pval), (tt)) 
#define ASN1_template_d2i(pval, in, len, tt) IAmiSSL->ASN1_template_d2i((pval), (in), (len), (tt)) 
#define ASN1_item_ex_d2i(pval, in, len, it, tag, aclass, opt, ctx) IAmiSSL->ASN1_item_ex_d2i((pval), (in), (len), (it), (tag), (aclass), (opt), (ctx)) 
#define ASN1_item_ex_i2d(pval, out, it, tag, aclass) IAmiSSL->ASN1_item_ex_i2d((pval), (out), (it), (tag), (aclass)) 
#define ASN1_template_i2d(pval, out, tt) IAmiSSL->ASN1_template_i2d((pval), (out), (tt)) 
#define ASN1_primitive_free(pval, it) IAmiSSL->ASN1_primitive_free((pval), (it)) 
#define asn1_ex_i2c(pval, cont, putype, it) IAmiSSL->asn1_ex_i2c((pval), (cont), (putype), (it)) 
#define asn1_ex_c2i(pval, cont, len, utype, free_cont, it) IAmiSSL->asn1_ex_c2i((pval), (cont), (len), (utype), (free_cont), (it)) 
#define asn1_get_choice_selector(pval, it) IAmiSSL->asn1_get_choice_selector((pval), (it)) 
#define asn1_set_choice_selector(pval, value, it) IAmiSSL->asn1_set_choice_selector((pval), (value), (it)) 
#define asn1_get_field_ptr(pval, tt) IAmiSSL->asn1_get_field_ptr((pval), (tt)) 
#define asn1_do_adb(pval, tt, nullerr) IAmiSSL->asn1_do_adb((pval), (tt), (nullerr)) 
#define asn1_do_lock(pval, op, it) IAmiSSL->asn1_do_lock((pval), (op), (it)) 
#define asn1_enc_init(pval, it) IAmiSSL->asn1_enc_init((pval), (it)) 
#define asn1_enc_free(pval, it) IAmiSSL->asn1_enc_free((pval), (it)) 
#define asn1_enc_restore(len, out, pval, it) IAmiSSL->asn1_enc_restore((len), (out), (pval), (it)) 
#define asn1_enc_save(pval, in, inlen, it) IAmiSSL->asn1_enc_save((pval), (in), (inlen), (it)) 
#define BIO_ctrl_pending(b) IAmiSSL->BIO_ctrl_pending((b)) 
#define BIO_ctrl_wpending(b) IAmiSSL->BIO_ctrl_wpending((b)) 
#define BIO_ctrl_get_write_guarantee(b) IAmiSSL->BIO_ctrl_get_write_guarantee((b)) 
#define BIO_ctrl_get_read_request(b) IAmiSSL->BIO_ctrl_get_read_request((b)) 
#define BIO_ctrl_reset_read_request(b) IAmiSSL->BIO_ctrl_reset_read_request((b)) 
#define BIO_set_ex_data(bio, idx, data) IAmiSSL->BIO_set_ex_data((bio), (idx), (data)) 
#define BIO_get_ex_data(bio, idx) IAmiSSL->BIO_get_ex_data((bio), (idx)) 
#define BIO_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->BIO_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define BIO_number_read(bio) IAmiSSL->BIO_number_read((bio)) 
#define BIO_number_written(bio) IAmiSSL->BIO_number_written((bio)) 
#define BIO_s_file() IAmiSSL->BIO_s_file() 
#define BIO_new_file(filename, mode) IAmiSSL->BIO_new_file((filename), (mode)) 
#define BIO_new_fp_amiga(stream, close_flag) IAmiSSL->BIO_new_fp_amiga((stream), (close_flag)) 
#define BIO_new(type) IAmiSSL->BIO_new((type)) 
#define BIO_set(a, type) IAmiSSL->BIO_set((a), (type)) 
#define BIO_free(a) IAmiSSL->BIO_free((a)) 
#define BIO_vfree(a) IAmiSSL->BIO_vfree((a)) 
#define BIO_read(b, data, len) IAmiSSL->BIO_read((b), (data), (len)) 
#define BIO_gets(bp, buf, size) IAmiSSL->BIO_gets((bp), (buf), (size)) 
#define BIO_write(b, data, len) IAmiSSL->BIO_write((b), (data), (len)) 
#define BIO_puts(bp, buf) IAmiSSL->BIO_puts((bp), (buf)) 
#define BIO_indent(b, indent, max) IAmiSSL->BIO_indent((b), (indent), (max)) 
#define BIO_ctrl(bp, cmd, larg, parg) IAmiSSL->BIO_ctrl((bp), (cmd), (larg), (parg)) 
#define BIO_callback_ctrl(b, cmd, fp) IAmiSSL->BIO_callback_ctrl((b), (cmd), (fp)) 
#define BIO_ptr_ctrl(bp, cmd, larg) IAmiSSL->BIO_ptr_ctrl((bp), (cmd), (larg)) 
#define BIO_int_ctrl(bp, cmd, larg, iarg) IAmiSSL->BIO_int_ctrl((bp), (cmd), (larg), (iarg)) 
#define BIO_push(b, append) IAmiSSL->BIO_push((b), (append)) 
#define BIO_pop(b) IAmiSSL->BIO_pop((b)) 
#define BIO_free_all(a) IAmiSSL->BIO_free_all((a)) 
#define BIO_find_type(b, bio_type) IAmiSSL->BIO_find_type((b), (bio_type)) 
#define BIO_next(b) IAmiSSL->BIO_next((b)) 
#define BIO_get_retry_BIO(bio, reason) IAmiSSL->BIO_get_retry_BIO((bio), (reason)) 
#define BIO_get_retry_reason(bio) IAmiSSL->BIO_get_retry_reason((bio)) 
#define BIO_dup_chain(in) IAmiSSL->BIO_dup_chain((in)) 
#define BIO_nread0(bio, buf) IAmiSSL->BIO_nread0((bio), (buf)) 
#define BIO_nread(bio, buf, num) IAmiSSL->BIO_nread((bio), (buf), (num)) 
#define BIO_nwrite0(bio, buf) IAmiSSL->BIO_nwrite0((bio), (buf)) 
#define BIO_nwrite(bio, buf, num) IAmiSSL->BIO_nwrite((bio), (buf), (num)) 
#define BIO_debug_callback(bio, cmd, argp, argi, argl, ret) IAmiSSL->BIO_debug_callback((bio), (cmd), (argp), (argi), (argl), (ret)) 
#define BIO_s_mem() IAmiSSL->BIO_s_mem() 
#define BIO_new_mem_buf(buf, len) IAmiSSL->BIO_new_mem_buf((buf), (len)) 
#define BIO_s_socket() IAmiSSL->BIO_s_socket() 
#define BIO_s_connect() IAmiSSL->BIO_s_connect() 
#define BIO_s_accept() IAmiSSL->BIO_s_accept() 
#define BIO_s_fd() IAmiSSL->BIO_s_fd() 
#define BIO_s_log() IAmiSSL->BIO_s_log() 
#define BIO_s_bio() IAmiSSL->BIO_s_bio() 
#define BIO_s_null() IAmiSSL->BIO_s_null() 
#define BIO_f_null() IAmiSSL->BIO_f_null() 
#define BIO_f_buffer() IAmiSSL->BIO_f_buffer() 
#define BIO_f_nbio_test() IAmiSSL->BIO_f_nbio_test() 
#define BIO_sock_should_retry(i) IAmiSSL->BIO_sock_should_retry((i)) 
#define BIO_sock_non_fatal_error(error) IAmiSSL->BIO_sock_non_fatal_error((error)) 
#define BIO_fd_should_retry(i) IAmiSSL->BIO_fd_should_retry((i)) 
#define BIO_fd_non_fatal_error(error) IAmiSSL->BIO_fd_non_fatal_error((error)) 
#define BIO_dump(b, bytes, len) IAmiSSL->BIO_dump((b), (bytes), (len)) 
#define BIO_dump_indent(b, bytes, len, indent) IAmiSSL->BIO_dump_indent((b), (bytes), (len), (indent)) 
#define BIO_gethostbyname(name) IAmiSSL->BIO_gethostbyname((name)) 
#define BIO_sock_error(sock) IAmiSSL->BIO_sock_error((sock)) 
#define BIO_socket_ioctl(fd, type, arg) IAmiSSL->BIO_socket_ioctl((fd), (type), (arg)) 
#define BIO_socket_nbio(fd, mode) IAmiSSL->BIO_socket_nbio((fd), (mode)) 
#define BIO_get_port(str, port_ptr) IAmiSSL->BIO_get_port((str), (port_ptr)) 
#define BIO_get_host_ip(str, ip) IAmiSSL->BIO_get_host_ip((str), (ip)) 
#define BIO_get_accept_socket(host_port, mode) IAmiSSL->BIO_get_accept_socket((host_port), (mode)) 
#define BIO_accept(sock, ip_port) IAmiSSL->BIO_accept((sock), (ip_port)) 
#define BIO_sock_init() IAmiSSL->BIO_sock_init() 
#define BIO_sock_cleanup() IAmiSSL->BIO_sock_cleanup() 
#define BIO_set_tcp_ndelay(sock, turn_on) IAmiSSL->BIO_set_tcp_ndelay((sock), (turn_on)) 
#define BIO_new_socket(sock, close_flag) IAmiSSL->BIO_new_socket((sock), (close_flag)) 
#define BIO_new_fd(fd, close_flag) IAmiSSL->BIO_new_fd((fd), (close_flag)) 
#define BIO_new_connect(host_port) IAmiSSL->BIO_new_connect((host_port)) 
#define BIO_new_accept(host_port) IAmiSSL->BIO_new_accept((host_port)) 
#define BIO_new_bio_pair(bio1, writebuf1, bio2, writebuf2) IAmiSSL->BIO_new_bio_pair((bio1), (writebuf1), (bio2), (writebuf2)) 
#define BIO_copy_next_retry(b) IAmiSSL->BIO_copy_next_retry((b)) 
#define BIO_vprintf(bio, format, args) IAmiSSL->BIO_vprintf((bio), (format), (args)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define BIO_printf(bio, ...) IAmiSSL->BIO_printf((bio), __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define BIO_printf(bio, vargs...) IAmiSSL->BIO_printf(bio, ## vargs) 
#endif
#define BIO_vsnprintf(buf, n, format, args) IAmiSSL->BIO_vsnprintf((buf), (n), (format), (args)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define BIO_snprintf(buf, n, ...) IAmiSSL->BIO_snprintf((buf), (n), __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define BIO_snprintf(buf, n, vargs...) IAmiSSL->BIO_snprintf(buf, n, ## vargs) 
#endif
#define ERR_load_BIO_strings() IAmiSSL->ERR_load_BIO_strings() 
#define BN_value_one() IAmiSSL->BN_value_one() 
#define BN_options() IAmiSSL->BN_options() 
#define BN_CTX_new() IAmiSSL->BN_CTX_new() 
#define BN_CTX_init(c) IAmiSSL->BN_CTX_init((c)) 
#define BN_CTX_free(c) IAmiSSL->BN_CTX_free((c)) 
#define BN_CTX_start(ctx) IAmiSSL->BN_CTX_start((ctx)) 
#define BN_CTX_get(ctx) IAmiSSL->BN_CTX_get((ctx)) 
#define BN_CTX_end(ctx) IAmiSSL->BN_CTX_end((ctx)) 
#define BN_rand(rnd, bits, top, bottom) IAmiSSL->BN_rand((rnd), (bits), (top), (bottom)) 
#define BN_pseudo_rand(rnd, bits, top, bottom) IAmiSSL->BN_pseudo_rand((rnd), (bits), (top), (bottom)) 
#define BN_rand_range(rnd, range) IAmiSSL->BN_rand_range((rnd), (range)) 
#define BN_pseudo_rand_range(rnd, range) IAmiSSL->BN_pseudo_rand_range((rnd), (range)) 
#define BN_num_bits(a) IAmiSSL->BN_num_bits((a)) 
#define BN_num_bits_word(a) IAmiSSL->BN_num_bits_word((a)) 
#define BN_new() IAmiSSL->BN_new() 
#define BN_init(a) IAmiSSL->BN_init((a)) 
#define BN_clear_free(a) IAmiSSL->BN_clear_free((a)) 
#define BN_copy(a, b) IAmiSSL->BN_copy((a), (b)) 
#define BN_swap(a, b) IAmiSSL->BN_swap((a), (b)) 
#define BN_bin2bn(s, len, ret) IAmiSSL->BN_bin2bn((s), (len), (ret)) 
#define BN_bn2bin(a, to) IAmiSSL->BN_bn2bin((a), (to)) 
#define BN_mpi2bn(s, len, ret) IAmiSSL->BN_mpi2bn((s), (len), (ret)) 
#define BN_bn2mpi(a, to) IAmiSSL->BN_bn2mpi((a), (to)) 
#define BN_sub(r, a, b) IAmiSSL->BN_sub((r), (a), (b)) 
#define BN_usub(r, a, b) IAmiSSL->BN_usub((r), (a), (b)) 
#define BN_uadd(r, a, b) IAmiSSL->BN_uadd((r), (a), (b)) 
#define BN_add(r, a, b) IAmiSSL->BN_add((r), (a), (b)) 
#define BN_mul(r, a, b, ctx) IAmiSSL->BN_mul((r), (a), (b), (ctx)) 
#define BN_sqr(r, a, ctx) IAmiSSL->BN_sqr((r), (a), (ctx)) 
#define BN_div(dv, rem, m, d, ctx) IAmiSSL->BN_div((dv), (rem), (m), (d), (ctx)) 
#define BN_nnmod(r, m, d, ctx) IAmiSSL->BN_nnmod((r), (m), (d), (ctx)) 
#define BN_mod_add(r, a, b, m, ctx) IAmiSSL->BN_mod_add((r), (a), (b), (m), (ctx)) 
#define BN_mod_add_quick(r, a, b, m) IAmiSSL->BN_mod_add_quick((r), (a), (b), (m)) 
#define BN_mod_sub(r, a, b, m, ctx) IAmiSSL->BN_mod_sub((r), (a), (b), (m), (ctx)) 
#define BN_mod_sub_quick(r, a, b, m) IAmiSSL->BN_mod_sub_quick((r), (a), (b), (m)) 
#define BN_mod_mul(r, a, b, m, ctx) IAmiSSL->BN_mod_mul((r), (a), (b), (m), (ctx)) 
#define BN_mod_sqr(r, a, m, ctx) IAmiSSL->BN_mod_sqr((r), (a), (m), (ctx)) 
#define BN_mod_lshift1(r, a, m, ctx) IAmiSSL->BN_mod_lshift1((r), (a), (m), (ctx)) 
#define BN_mod_lshift1_quick(r, a, m) IAmiSSL->BN_mod_lshift1_quick((r), (a), (m)) 
#define BN_mod_lshift(r, a, n, m, ctx) IAmiSSL->BN_mod_lshift((r), (a), (n), (m), (ctx)) 
#define BN_mod_lshift_quick(r, a, n, m) IAmiSSL->BN_mod_lshift_quick((r), (a), (n), (m)) 
#define BN_mod_word(a, w) IAmiSSL->BN_mod_word((a), (w)) 
#define BN_div_word(a, w) IAmiSSL->BN_div_word((a), (w)) 
#define BN_mul_word(a, w) IAmiSSL->BN_mul_word((a), (w)) 
#define BN_add_word(a, w) IAmiSSL->BN_add_word((a), (w)) 
#define BN_sub_word(a, w) IAmiSSL->BN_sub_word((a), (w)) 
#define BN_set_word(a, w) IAmiSSL->BN_set_word((a), (w)) 
#define BN_get_word(a) IAmiSSL->BN_get_word((a)) 
#define BN_cmp(a, b) IAmiSSL->BN_cmp((a), (b)) 
#define BN_free(a) IAmiSSL->BN_free((a)) 
#define BN_is_bit_set(a, n) IAmiSSL->BN_is_bit_set((a), (n)) 
#define BN_lshift(r, a, n) IAmiSSL->BN_lshift((r), (a), (n)) 
#define BN_lshift1(r, a) IAmiSSL->BN_lshift1((r), (a)) 
#define BN_exp(r, a, p, ctx) IAmiSSL->BN_exp((r), (a), (p), (ctx)) 
#define BN_mod_exp(r, a, p, m, ctx) IAmiSSL->BN_mod_exp((r), (a), (p), (m), (ctx)) 
#define BN_mod_exp_mont(r, a, p, m, ctx, m_ctx) IAmiSSL->BN_mod_exp_mont((r), (a), (p), (m), (ctx), (m_ctx)) 
#define BN_mod_exp_mont_word(r, a, p, m, ctx, m_ctx) IAmiSSL->BN_mod_exp_mont_word((r), (a), (p), (m), (ctx), (m_ctx)) 
#define BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx) IAmiSSL->BN_mod_exp2_mont((r), (a1), (p1), (a2), (p2), (m), (ctx), (m_ctx)) 
#define BN_mod_exp_simple(r, a, p, m, ctx) IAmiSSL->BN_mod_exp_simple((r), (a), (p), (m), (ctx)) 
#define BN_mask_bits(a, n) IAmiSSL->BN_mask_bits((a), (n)) 
#define BN_print(fp, a) IAmiSSL->BN_print((fp), (a)) 
#define BN_reciprocal(r, m, len, ctx) IAmiSSL->BN_reciprocal((r), (m), (len), (ctx)) 
#define BN_rshift(r, a, n) IAmiSSL->BN_rshift((r), (a), (n)) 
#define BN_rshift1(r, a) IAmiSSL->BN_rshift1((r), (a)) 
#define BN_clear(a) IAmiSSL->BN_clear((a)) 
#define BN_dup(a) IAmiSSL->BN_dup((a)) 
#define BN_ucmp(a, b) IAmiSSL->BN_ucmp((a), (b)) 
#define BN_set_bit(a, n) IAmiSSL->BN_set_bit((a), (n)) 
#define BN_clear_bit(a, n) IAmiSSL->BN_clear_bit((a), (n)) 
#define BN_bn2hex(a) IAmiSSL->BN_bn2hex((a)) 
#define BN_bn2dec(a) IAmiSSL->BN_bn2dec((a)) 
#define BN_hex2bn(a, str) IAmiSSL->BN_hex2bn((a), (str)) 
#define BN_dec2bn(a, str) IAmiSSL->BN_dec2bn((a), (str)) 
#define BN_gcd(r, a, b, ctx) IAmiSSL->BN_gcd((r), (a), (b), (ctx)) 
#define BN_kronecker(a, b, ctx) IAmiSSL->BN_kronecker((a), (b), (ctx)) 
#define BN_mod_inverse(ret, a, n, ctx) IAmiSSL->BN_mod_inverse((ret), (a), (n), (ctx)) 
#define BN_mod_sqrt(ret, a, n, ctx) IAmiSSL->BN_mod_sqrt((ret), (a), (n), (ctx)) 
#define BN_generate_prime(ret, bits, safe, add, rem, callback, cb_arg) IAmiSSL->BN_generate_prime((ret), (bits), (safe), (add), (rem), (callback), (cb_arg)) 
#define BN_is_prime(p, nchecks, callback, ctx, cb_arg) IAmiSSL->BN_is_prime((p), (nchecks), (callback), (ctx), (cb_arg)) 
#define BN_is_prime_fasttest(p, nchecks, callback, ctx, cb_arg, do_trial_division) IAmiSSL->BN_is_prime_fasttest((p), (nchecks), (callback), (ctx), (cb_arg), (do_trial_division)) 
#define BN_MONT_CTX_new() IAmiSSL->BN_MONT_CTX_new() 
#define BN_MONT_CTX_init(ctx) IAmiSSL->BN_MONT_CTX_init((ctx)) 
#define BN_mod_mul_montgomery(r, a, b, mont, ctx) IAmiSSL->BN_mod_mul_montgomery((r), (a), (b), (mont), (ctx)) 
#define BN_from_montgomery(r, a, mont, ctx) IAmiSSL->BN_from_montgomery((r), (a), (mont), (ctx)) 
#define BN_MONT_CTX_free(mont) IAmiSSL->BN_MONT_CTX_free((mont)) 
#define BN_MONT_CTX_set(mont, mod, ctx) IAmiSSL->BN_MONT_CTX_set((mont), (mod), (ctx)) 
#define BN_MONT_CTX_copy(to, from) IAmiSSL->BN_MONT_CTX_copy((to), (from)) 
#define BN_BLINDING_new(A, Ai, mod) IAmiSSL->BN_BLINDING_new((A), (Ai), (mod)) 
#define BN_BLINDING_free(b) IAmiSSL->BN_BLINDING_free((b)) 
#define BN_BLINDING_update(b, ctx) IAmiSSL->BN_BLINDING_update((b), (ctx)) 
#define BN_BLINDING_convert(n, r, ctx) IAmiSSL->BN_BLINDING_convert((n), (r), (ctx)) 
#define BN_BLINDING_invert(n, b, ctx) IAmiSSL->BN_BLINDING_invert((n), (b), (ctx)) 
#define BN_set_params(mul, high, low, mont) IAmiSSL->BN_set_params((mul), (high), (low), (mont)) 
#define BN_get_params(which) IAmiSSL->BN_get_params((which)) 
#define BN_RECP_CTX_init(recp) IAmiSSL->BN_RECP_CTX_init((recp)) 
#define BN_RECP_CTX_new() IAmiSSL->BN_RECP_CTX_new() 
#define BN_RECP_CTX_free(recp) IAmiSSL->BN_RECP_CTX_free((recp)) 
#define BN_RECP_CTX_set(recp, rdiv, ctx) IAmiSSL->BN_RECP_CTX_set((recp), (rdiv), (ctx)) 
#define BN_mod_mul_reciprocal(r, x, y, recp, ctx) IAmiSSL->BN_mod_mul_reciprocal((r), (x), (y), (recp), (ctx)) 
#define BN_mod_exp_recp(r, a, p, m, ctx) IAmiSSL->BN_mod_exp_recp((r), (a), (p), (m), (ctx)) 
#define BN_div_recp(dv, rem, m, recp, ctx) IAmiSSL->BN_div_recp((dv), (rem), (m), (recp), (ctx)) 
#define bn_expand2(a, words) IAmiSSL->bn_expand2((a), (words)) 
#define bn_dup_expand(a, words) IAmiSSL->bn_dup_expand((a), (words)) 
#define bn_mul_add_words(rp, ap, num, w) IAmiSSL->bn_mul_add_words((rp), (ap), (num), (w)) 
#define bn_mul_words(rp, ap, num, w) IAmiSSL->bn_mul_words((rp), (ap), (num), (w)) 
#define bn_sqr_words(rp, ap, num) IAmiSSL->bn_sqr_words((rp), (ap), (num)) 
#define bn_div_words(h, l, d) IAmiSSL->bn_div_words((h), (l), (d)) 
#define bn_add_words(rp, ap, bp, num) IAmiSSL->bn_add_words((rp), (ap), (bp), (num)) 
#define bn_sub_words(rp, ap, bp, num) IAmiSSL->bn_sub_words((rp), (ap), (bp), (num)) 
#define BN_bntest_rand(rnd, bits, top, bottom) IAmiSSL->BN_bntest_rand((rnd), (bits), (top), (bottom)) 
#define ERR_load_BN_strings() IAmiSSL->ERR_load_BN_strings() 
#define BUF_MEM_new() IAmiSSL->BUF_MEM_new() 
#define BUF_MEM_free(a) IAmiSSL->BUF_MEM_free((a)) 
#define BUF_MEM_grow(str, len) IAmiSSL->BUF_MEM_grow((str), (len)) 
#define BUF_MEM_grow_clean(str, len) IAmiSSL->BUF_MEM_grow_clean((str), (len)) 
#define BUF_strdup(str) IAmiSSL->BUF_strdup((str)) 
#define BUF_strlcpy(dst, src, siz) IAmiSSL->BUF_strlcpy((dst), (src), (siz)) 
#define BUF_strlcat(dst, src, siz) IAmiSSL->BUF_strlcat((dst), (src), (siz)) 
#define ERR_load_BUF_strings() IAmiSSL->ERR_load_BUF_strings() 
#define COMP_CTX_new(meth) IAmiSSL->COMP_CTX_new((meth)) 
#define COMP_CTX_free(ctx) IAmiSSL->COMP_CTX_free((ctx)) 
#define COMP_compress_block(ctx, out, olen, in, ilen) IAmiSSL->COMP_compress_block((ctx), (out), (olen), (in), (ilen)) 
#define COMP_expand_block(ctx, out, olen, in, ilen) IAmiSSL->COMP_expand_block((ctx), (out), (olen), (in), (ilen)) 
#define COMP_rle() IAmiSSL->COMP_rle() 
#define COMP_zlib() IAmiSSL->COMP_zlib() 
#define ERR_load_COMP_strings() IAmiSSL->ERR_load_COMP_strings() 
#define CONF_set_default_method(meth) IAmiSSL->CONF_set_default_method((meth)) 
#define CONF_set_nconf(conf, hash) IAmiSSL->CONF_set_nconf((conf), (hash)) 
#define CONF_load(conf, file, eline) IAmiSSL->CONF_load((conf), (file), (eline)) 
#define CONF_load_bio(conf, bp, eline) IAmiSSL->CONF_load_bio((conf), (bp), (eline)) 
#define CONF_get_section(conf, section) IAmiSSL->CONF_get_section((conf), (section)) 
#define CONF_get_string(conf, group, name) IAmiSSL->CONF_get_string((conf), (group), (name)) 
#define CONF_get_number(conf, group, name) IAmiSSL->CONF_get_number((conf), (group), (name)) 
#define CONF_free(conf) IAmiSSL->CONF_free((conf)) 
#define CONF_dump_bio(conf, out) IAmiSSL->CONF_dump_bio((conf), (out)) 
#define OPENSSL_config(config_name) IAmiSSL->OPENSSL_config((config_name)) 
#define OPENSSL_no_config() IAmiSSL->OPENSSL_no_config() 
#define NCONF_new(meth) IAmiSSL->NCONF_new((meth)) 
#define NCONF_default() IAmiSSL->NCONF_default() 
#define NCONF_WIN32() IAmiSSL->NCONF_WIN32() 
#define NCONF_free(conf) IAmiSSL->NCONF_free((conf)) 
#define NCONF_free_data(conf) IAmiSSL->NCONF_free_data((conf)) 
#define NCONF_load(conf, file, eline) IAmiSSL->NCONF_load((conf), (file), (eline)) 
#define NCONF_load_bio(conf, bp, eline) IAmiSSL->NCONF_load_bio((conf), (bp), (eline)) 
#define NCONF_get_section(conf, section) IAmiSSL->NCONF_get_section((conf), (section)) 
#define NCONF_get_string(conf, group, name) IAmiSSL->NCONF_get_string((conf), (group), (name)) 
#define NCONF_get_number_e(conf, group, name, result) IAmiSSL->NCONF_get_number_e((conf), (group), (name), (result)) 
#define NCONF_dump_bio(conf, out) IAmiSSL->NCONF_dump_bio((conf), (out)) 
#define CONF_modules_load(cnf, appname, flags) IAmiSSL->CONF_modules_load((cnf), (appname), (flags)) 
#define CONF_modules_load_file(filename, appname, flags) IAmiSSL->CONF_modules_load_file((filename), (appname), (flags)) 
#define CONF_modules_unload(all) IAmiSSL->CONF_modules_unload((all)) 
#define CONF_modules_finish() IAmiSSL->CONF_modules_finish() 
#define CONF_modules_free() IAmiSSL->CONF_modules_free() 
#define CONF_module_add(name, ifunc, ffunc) IAmiSSL->CONF_module_add((name), (ifunc), (ffunc)) 
#define CONF_imodule_get_name(md) IAmiSSL->CONF_imodule_get_name((md)) 
#define CONF_imodule_get_value(md) IAmiSSL->CONF_imodule_get_value((md)) 
#define CONF_imodule_get_usr_data(md) IAmiSSL->CONF_imodule_get_usr_data((md)) 
#define CONF_imodule_set_usr_data(md, usr_data) IAmiSSL->CONF_imodule_set_usr_data((md), (usr_data)) 
#define CONF_imodule_get_module(md) IAmiSSL->CONF_imodule_get_module((md)) 
#define CONF_imodule_get_flags(md) IAmiSSL->CONF_imodule_get_flags((md)) 
#define CONF_imodule_set_flags(md, flags) IAmiSSL->CONF_imodule_set_flags((md), (flags)) 
#define CONF_module_get_usr_data(pmod) IAmiSSL->CONF_module_get_usr_data((pmod)) 
#define CONF_module_set_usr_data(pmod, usr_data) IAmiSSL->CONF_module_set_usr_data((pmod), (usr_data)) 
#define CONF_get1_default_config_file() IAmiSSL->CONF_get1_default_config_file() 
#define CONF_parse_list(list, sep, nospc, list_cb, arg) IAmiSSL->CONF_parse_list((list), (sep), (nospc), (list_cb), (arg)) 
#define OPENSSL_load_builtin_modules() IAmiSSL->OPENSSL_load_builtin_modules() 
#define ERR_load_CONF_strings() IAmiSSL->ERR_load_CONF_strings() 
#define _CONF_new_section(conf, section) IAmiSSL->_CONF_new_section((conf), (section)) 
#define _CONF_get_section(conf, section) IAmiSSL->_CONF_get_section((conf), (section)) 
#define _CONF_get_section_values(conf, section) IAmiSSL->_CONF_get_section_values((conf), (section)) 
#define _CONF_add_string(conf, section, value) IAmiSSL->_CONF_add_string((conf), (section), (value)) 
#define _CONF_get_string(conf, section, name) IAmiSSL->_CONF_get_string((conf), (section), (name)) 
#define _CONF_new_data(conf) IAmiSSL->_CONF_new_data((conf)) 
#define _CONF_free_data(conf) IAmiSSL->_CONF_free_data((conf)) 
#define CRYPTO_mem_ctrl(mode) IAmiSSL->CRYPTO_mem_ctrl((mode)) 
#define CRYPTO_is_mem_check_on() IAmiSSL->CRYPTO_is_mem_check_on() 
#define SSLeay_version(type) IAmiSSL->SSLeay_version((type)) 
#define SSLeay() IAmiSSL->SSLeay() 
#define OPENSSL_issetugid() IAmiSSL->OPENSSL_issetugid() 
#define CRYPTO_get_ex_data_implementation() IAmiSSL->CRYPTO_get_ex_data_implementation() 
#define CRYPTO_set_ex_data_implementation(i) IAmiSSL->CRYPTO_set_ex_data_implementation((i)) 
#define CRYPTO_ex_data_new_class() IAmiSSL->CRYPTO_ex_data_new_class() 
#define CRYPTO_get_ex_new_index(class_index, argl, argp, new_func, dup_func, free_func) IAmiSSL->CRYPTO_get_ex_new_index((class_index), (argl), (argp), (new_func), (dup_func), (free_func)) 
#define CRYPTO_new_ex_data(class_index, obj, ad) IAmiSSL->CRYPTO_new_ex_data((class_index), (obj), (ad)) 
#define CRYPTO_dup_ex_data(class_index, to, from) IAmiSSL->CRYPTO_dup_ex_data((class_index), (to), (from)) 
#define CRYPTO_free_ex_data(class_index, obj, ad) IAmiSSL->CRYPTO_free_ex_data((class_index), (obj), (ad)) 
#define CRYPTO_set_ex_data(ad, idx, val) IAmiSSL->CRYPTO_set_ex_data((ad), (idx), (val)) 
#define CRYPTO_get_ex_data(ad, idx) IAmiSSL->CRYPTO_get_ex_data((ad), (idx)) 
#define CRYPTO_cleanup_all_ex_data() IAmiSSL->CRYPTO_cleanup_all_ex_data() 
#define CRYPTO_get_new_lockid(name) IAmiSSL->CRYPTO_get_new_lockid((name)) 
#define CRYPTO_num_locks() IAmiSSL->CRYPTO_num_locks() 
#define CRYPTO_lock(mode, type, file, line) IAmiSSL->CRYPTO_lock((mode), (type), (file), (line)) 
#define CRYPTO_set_locking_callback(func) IAmiSSL->CRYPTO_set_locking_callback((func)) 
#define CRYPTO_get_locking_callback() IAmiSSL->CRYPTO_get_locking_callback() 
#define CRYPTO_set_add_lock_callback(func) IAmiSSL->CRYPTO_set_add_lock_callback((func)) 
#define CRYPTO_get_add_lock_callback() IAmiSSL->CRYPTO_get_add_lock_callback() 
#define CRYPTO_set_id_callback(func) IAmiSSL->CRYPTO_set_id_callback((func)) 
#define CRYPTO_get_id_callback() IAmiSSL->CRYPTO_get_id_callback() 
#define CRYPTO_thread_id() IAmiSSL->CRYPTO_thread_id() 
#define CRYPTO_get_lock_name(type) IAmiSSL->CRYPTO_get_lock_name((type)) 
#define CRYPTO_add_lock(pointer, amount, type, file, line) IAmiSSL->CRYPTO_add_lock((pointer), (amount), (type), (file), (line)) 
#define CRYPTO_get_new_dynlockid() IAmiSSL->CRYPTO_get_new_dynlockid() 
#define CRYPTO_destroy_dynlockid(i) IAmiSSL->CRYPTO_destroy_dynlockid((i)) 
#define CRYPTO_get_dynlock_value(i) IAmiSSL->CRYPTO_get_dynlock_value((i)) 
#define CRYPTO_set_dynlock_create_callback(dyn_create_function) IAmiSSL->CRYPTO_set_dynlock_create_callback((dyn_create_function)) 
#define CRYPTO_set_dynlock_lock_callback(dyn_lock_function) IAmiSSL->CRYPTO_set_dynlock_lock_callback((dyn_lock_function)) 
#define CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function) IAmiSSL->CRYPTO_set_dynlock_destroy_callback((dyn_destroy_function)) 
#define CRYPTO_get_dynlock_create_callback() IAmiSSL->CRYPTO_get_dynlock_create_callback() 
#define CRYPTO_get_dynlock_lock_callback() IAmiSSL->CRYPTO_get_dynlock_lock_callback() 
#define CRYPTO_get_dynlock_destroy_callback() IAmiSSL->CRYPTO_get_dynlock_destroy_callback() 
#define CRYPTO_set_mem_functions(m, r, f) IAmiSSL->CRYPTO_set_mem_functions((m), (r), (f)) 
#define CRYPTO_set_locked_mem_functions(m, free_func) IAmiSSL->CRYPTO_set_locked_mem_functions((m), (free_func)) 
#define CRYPTO_set_mem_ex_functions(m, r, f) IAmiSSL->CRYPTO_set_mem_ex_functions((m), (r), (f)) 
#define CRYPTO_set_locked_mem_ex_functions(m, free_func) IAmiSSL->CRYPTO_set_locked_mem_ex_functions((m), (free_func)) 
#define CRYPTO_set_mem_debug_functions(m, r, f, so, go) IAmiSSL->CRYPTO_set_mem_debug_functions((m), (r), (f), (so), (go)) 
#define CRYPTO_get_mem_functions(m, r, f) IAmiSSL->CRYPTO_get_mem_functions((m), (r), (f)) 
#define CRYPTO_get_locked_mem_functions(m, f) IAmiSSL->CRYPTO_get_locked_mem_functions((m), (f)) 
#define CRYPTO_get_mem_ex_functions(m, r, f) IAmiSSL->CRYPTO_get_mem_ex_functions((m), (r), (f)) 
#define CRYPTO_get_locked_mem_ex_functions(m, f) IAmiSSL->CRYPTO_get_locked_mem_ex_functions((m), (f)) 
#define CRYPTO_get_mem_debug_functions(m, r, f, so, go) IAmiSSL->CRYPTO_get_mem_debug_functions((m), (r), (f), (so), (go)) 
#define CRYPTO_malloc_locked(num, file, line) IAmiSSL->CRYPTO_malloc_locked((num), (file), (line)) 
#define CRYPTO_free_locked(a) IAmiSSL->CRYPTO_free_locked((a)) 
#define CRYPTO_malloc(num, file, line) IAmiSSL->CRYPTO_malloc((num), (file), (line)) 
#define CRYPTO_free(a) IAmiSSL->CRYPTO_free((a)) 
#define CRYPTO_realloc(addr, num, file, line) IAmiSSL->CRYPTO_realloc((addr), (num), (file), (line)) 
#define CRYPTO_realloc_clean(addr, old_num, num, file, line) IAmiSSL->CRYPTO_realloc_clean((addr), (old_num), (num), (file), (line)) 
#define CRYPTO_remalloc(addr, num, file, line) IAmiSSL->CRYPTO_remalloc((addr), (num), (file), (line)) 
#define OPENSSL_cleanse(ptr, len) IAmiSSL->OPENSSL_cleanse((ptr), (len)) 
#define CRYPTO_set_mem_debug_options(bits) IAmiSSL->CRYPTO_set_mem_debug_options((bits)) 
#define CRYPTO_get_mem_debug_options() IAmiSSL->CRYPTO_get_mem_debug_options() 
#define CRYPTO_push_info_(info, file, line) IAmiSSL->CRYPTO_push_info_((info), (file), (line)) 
#define CRYPTO_pop_info() IAmiSSL->CRYPTO_pop_info() 
#define CRYPTO_remove_all_info() IAmiSSL->CRYPTO_remove_all_info() 
#define CRYPTO_dbg_malloc(addr, num, file, line, before_p) IAmiSSL->CRYPTO_dbg_malloc((addr), (num), (file), (line), (before_p)) 
#define CRYPTO_dbg_realloc(addr1, addr2, num, file, line, before_p) IAmiSSL->CRYPTO_dbg_realloc((addr1), (addr2), (num), (file), (line), (before_p)) 
#define CRYPTO_dbg_free(addr, before_p) IAmiSSL->CRYPTO_dbg_free((addr), (before_p)) 
#define CRYPTO_dbg_set_options(bits) IAmiSSL->CRYPTO_dbg_set_options((bits)) 
#define CRYPTO_dbg_get_options() IAmiSSL->CRYPTO_dbg_get_options() 
#define CRYPTO_mem_leaks(bio) IAmiSSL->CRYPTO_mem_leaks((bio)) 
#define CRYPTO_mem_leaks_cb(cb) IAmiSSL->CRYPTO_mem_leaks_cb((cb)) 
#define OpenSSLDie(file, line, assertion) IAmiSSL->OpenSSLDie((file), (line), (assertion)) 
#define ERR_load_CRYPTO_strings() IAmiSSL->ERR_load_CRYPTO_strings() 
#define DSO_new() IAmiSSL->DSO_new() 
#define DSO_new_method(method) IAmiSSL->DSO_new_method((method)) 
#define DSO_free(dso) IAmiSSL->DSO_free((dso)) 
#define DSO_flags(dso) IAmiSSL->DSO_flags((dso)) 
#define DSO_up_ref(dso) IAmiSSL->DSO_up_ref((dso)) 
#define DSO_ctrl(dso, cmd, larg, parg) IAmiSSL->DSO_ctrl((dso), (cmd), (larg), (parg)) 
#define DSO_set_name_converter(dso, cb, oldcb) IAmiSSL->DSO_set_name_converter((dso), (cb), (oldcb)) 
#define DSO_get_filename(dso) IAmiSSL->DSO_get_filename((dso)) 
#define DSO_set_filename(dso, filename) IAmiSSL->DSO_set_filename((dso), (filename)) 
#define DSO_convert_filename(dso, filename) IAmiSSL->DSO_convert_filename((dso), (filename)) 
#define DSO_get_loaded_filename(dso) IAmiSSL->DSO_get_loaded_filename((dso)) 
#define DSO_set_default_method(meth) IAmiSSL->DSO_set_default_method((meth)) 
#define DSO_get_default_method() IAmiSSL->DSO_get_default_method() 
#define DSO_get_method(dso) IAmiSSL->DSO_get_method((dso)) 
#define DSO_set_method(dso, meth) IAmiSSL->DSO_set_method((dso), (meth)) 
#define DSO_load(dso, filename, meth, flags) IAmiSSL->DSO_load((dso), (filename), (meth), (flags)) 
#define DSO_bind_var(dso, symname) IAmiSSL->DSO_bind_var((dso), (symname)) 
#define DSO_bind_func(dso, symname) IAmiSSL->DSO_bind_func((dso), (symname)) 
#define DSO_METHOD_openssl() IAmiSSL->DSO_METHOD_openssl() 
#define DSO_METHOD_null() IAmiSSL->DSO_METHOD_null() 
#define DSO_METHOD_dlfcn() IAmiSSL->DSO_METHOD_dlfcn() 
#define DSO_METHOD_dl() IAmiSSL->DSO_METHOD_dl() 
#define DSO_METHOD_win32() IAmiSSL->DSO_METHOD_win32() 
#define DSO_METHOD_vms() IAmiSSL->DSO_METHOD_vms() 
#define ERR_load_DSO_strings() IAmiSSL->ERR_load_DSO_strings() 
#define EC_GFp_simple_method() IAmiSSL->EC_GFp_simple_method() 
#define EC_GFp_mont_method() IAmiSSL->EC_GFp_mont_method() 
#define EC_GROUP_new(a) IAmiSSL->EC_GROUP_new((a)) 
#define EC_GROUP_free(a) IAmiSSL->EC_GROUP_free((a)) 
#define EC_GROUP_clear_free(a) IAmiSSL->EC_GROUP_clear_free((a)) 
#define EC_GROUP_copy(a, b) IAmiSSL->EC_GROUP_copy((a), (b)) 
#define EC_GROUP_method_of(a) IAmiSSL->EC_GROUP_method_of((a)) 
#define EC_GROUP_set_curve_GFp(a1, p, a, b, a2) IAmiSSL->EC_GROUP_set_curve_GFp((a1), (p), (a), (b), (a2)) 
#define EC_GROUP_get_curve_GFp(a1, p, a, b, a2) IAmiSSL->EC_GROUP_get_curve_GFp((a1), (p), (a), (b), (a2)) 
#define EC_GROUP_new_curve_GFp(p, a, b, a1) IAmiSSL->EC_GROUP_new_curve_GFp((p), (a), (b), (a1)) 
#define EC_GROUP_set_generator(a1, generator, order, cofactor) IAmiSSL->EC_GROUP_set_generator((a1), (generator), (order), (cofactor)) 
#define EC_GROUP_get0_generator(a1) IAmiSSL->EC_GROUP_get0_generator((a1)) 
#define EC_GROUP_get_order(a1, order, a2) IAmiSSL->EC_GROUP_get_order((a1), (order), (a2)) 
#define EC_GROUP_get_cofactor(a1, cofactor, a2) IAmiSSL->EC_GROUP_get_cofactor((a1), (cofactor), (a2)) 
#define EC_POINT_new(a) IAmiSSL->EC_POINT_new((a)) 
#define EC_POINT_free(a) IAmiSSL->EC_POINT_free((a)) 
#define EC_POINT_clear_free(a) IAmiSSL->EC_POINT_clear_free((a)) 
#define EC_POINT_copy(a, b) IAmiSSL->EC_POINT_copy((a), (b)) 
#define EC_POINT_method_of(a) IAmiSSL->EC_POINT_method_of((a)) 
#define EC_POINT_set_to_infinity(a, b) IAmiSSL->EC_POINT_set_to_infinity((a), (b)) 
#define EC_POINT_set_Jprojective_coordinates_GFp(a1, a2, x, y, z, a3) IAmiSSL->EC_POINT_set_Jprojective_coordinates_GFp((a1), (a2), (x), (y), (z), (a3)) 
#define EC_POINT_get_Jprojective_coordinates_GFp(a1, a2, x, y, z, a3) IAmiSSL->EC_POINT_get_Jprojective_coordinates_GFp((a1), (a2), (x), (y), (z), (a3)) 
#define EC_POINT_set_affine_coordinates_GFp(a1, a2, x, y, a3) IAmiSSL->EC_POINT_set_affine_coordinates_GFp((a1), (a2), (x), (y), (a3)) 
#define EC_POINT_get_affine_coordinates_GFp(a1, a2, x, y, a3) IAmiSSL->EC_POINT_get_affine_coordinates_GFp((a1), (a2), (x), (y), (a3)) 
#define EC_POINT_set_compressed_coordinates_GFp(a1, a2, x, y_bit, a3) IAmiSSL->EC_POINT_set_compressed_coordinates_GFp((a1), (a2), (x), (y_bit), (a3)) 
#define EC_POINT_point2oct(a1, a2, form, buf, len, a3) IAmiSSL->EC_POINT_point2oct((a1), (a2), (form), (buf), (len), (a3)) 
#define EC_POINT_oct2point(a1, a2, buf, len, a3) IAmiSSL->EC_POINT_oct2point((a1), (a2), (buf), (len), (a3)) 
#define EC_POINT_add(a1, r, a, b, a2) IAmiSSL->EC_POINT_add((a1), (r), (a), (b), (a2)) 
#define EC_POINT_dbl(a1, r, a, a2) IAmiSSL->EC_POINT_dbl((a1), (r), (a), (a2)) 
#define EC_POINT_invert(a1, a2, a3) IAmiSSL->EC_POINT_invert((a1), (a2), (a3)) 
#define EC_POINT_is_at_infinity(a, b) IAmiSSL->EC_POINT_is_at_infinity((a), (b)) 
#define EC_POINT_is_on_curve(a, b, c) IAmiSSL->EC_POINT_is_on_curve((a), (b), (c)) 
#define EC_POINT_cmp(a1, a, b, a2) IAmiSSL->EC_POINT_cmp((a1), (a), (b), (a2)) 
#define EC_POINT_make_affine(a, b, c) IAmiSSL->EC_POINT_make_affine((a), (b), (c)) 
#define EC_POINTs_make_affine(a1, num, a2, a3) IAmiSSL->EC_POINTs_make_affine((a1), (num), (a2), (a3)) 
#define EC_POINTs_mul(a1, r, a2, num, a3, a4, a5) IAmiSSL->EC_POINTs_mul((a1), (r), (a2), (num), (a3), (a4), (a5)) 
#define EC_POINT_mul(a1, r, a2, a3, a4, a5) IAmiSSL->EC_POINT_mul((a1), (r), (a2), (a3), (a4), (a5)) 
#define EC_GROUP_precompute_mult(a, b) IAmiSSL->EC_GROUP_precompute_mult((a), (b)) 
#define ERR_load_EC_strings() IAmiSSL->ERR_load_EC_strings() 
#define ERR_put_error(lib, func, reason, file, line) IAmiSSL->ERR_put_error((lib), (func), (reason), (file), (line)) 
#define ERR_set_error_data(data, flags) IAmiSSL->ERR_set_error_data((data), (flags)) 
#define ERR_get_error() IAmiSSL->ERR_get_error() 
#define ERR_get_error_line(file, line) IAmiSSL->ERR_get_error_line((file), (line)) 
#define ERR_get_error_line_data(file, line, data, flags) IAmiSSL->ERR_get_error_line_data((file), (line), (data), (flags)) 
#define ERR_peek_error() IAmiSSL->ERR_peek_error() 
#define ERR_peek_error_line(file, line) IAmiSSL->ERR_peek_error_line((file), (line)) 
#define ERR_peek_error_line_data(file, line, data, flags) IAmiSSL->ERR_peek_error_line_data((file), (line), (data), (flags)) 
#define ERR_peek_last_error() IAmiSSL->ERR_peek_last_error() 
#define ERR_peek_last_error_line(file, line) IAmiSSL->ERR_peek_last_error_line((file), (line)) 
#define ERR_peek_last_error_line_data(file, line, data, flags) IAmiSSL->ERR_peek_last_error_line_data((file), (line), (data), (flags)) 
#define ERR_clear_error() IAmiSSL->ERR_clear_error() 
#define ERR_error_string(e, buf) IAmiSSL->ERR_error_string((e), (buf)) 
#define ERR_error_string_n(e, buf, len) IAmiSSL->ERR_error_string_n((e), (buf), (len)) 
#define ERR_lib_error_string(e) IAmiSSL->ERR_lib_error_string((e)) 
#define ERR_func_error_string(e) IAmiSSL->ERR_func_error_string((e)) 
#define ERR_reason_error_string(e) IAmiSSL->ERR_reason_error_string((e)) 
#define ERR_print_errors_cb(cb, u) IAmiSSL->ERR_print_errors_cb((cb), (u)) 
#define ERR_print_errors(bp) IAmiSSL->ERR_print_errors((bp)) 
#define ERR_add_error_vdata(num, args) IAmiSSL->ERR_add_error_vdata((num), (args)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ERR_add_error_data(...) IAmiSSL->ERR_add_error_data(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ERR_add_error_data(vargs...) IAmiSSL->ERR_add_error_data(## vargs) 
#endif
#define ERR_load_strings(lib, str) IAmiSSL->ERR_load_strings((lib), (str)) 
#define ERR_unload_strings(lib, str) IAmiSSL->ERR_unload_strings((lib), (str)) 
#define ERR_load_ERR_strings() IAmiSSL->ERR_load_ERR_strings() 
#define ERR_load_crypto_strings() IAmiSSL->ERR_load_crypto_strings() 
#define ERR_free_strings() IAmiSSL->ERR_free_strings() 
#define ERR_remove_state(pid) IAmiSSL->ERR_remove_state((pid)) 
#define ERR_get_state() IAmiSSL->ERR_get_state() 
#define ERR_get_string_table() IAmiSSL->ERR_get_string_table() 
#define ERR_get_err_state_table() IAmiSSL->ERR_get_err_state_table() 
#define ERR_release_err_state_table(hash) IAmiSSL->ERR_release_err_state_table((hash)) 
#define ERR_get_next_error_library() IAmiSSL->ERR_get_next_error_library() 
#define ERR_get_implementation() IAmiSSL->ERR_get_implementation() 
#define ERR_set_implementation(fns) IAmiSSL->ERR_set_implementation((fns)) 
#define EVP_MD_CTX_init(ctx) IAmiSSL->EVP_MD_CTX_init((ctx)) 
#define EVP_MD_CTX_cleanup(ctx) IAmiSSL->EVP_MD_CTX_cleanup((ctx)) 
#define EVP_MD_CTX_create() IAmiSSL->EVP_MD_CTX_create() 
#define EVP_MD_CTX_destroy(ctx) IAmiSSL->EVP_MD_CTX_destroy((ctx)) 
#define EVP_MD_CTX_copy_ex(out, in) IAmiSSL->EVP_MD_CTX_copy_ex((out), (in)) 
#define EVP_DigestInit_ex(ctx, type, impl) IAmiSSL->EVP_DigestInit_ex((ctx), (type), (impl)) 
#define EVP_DigestUpdate(ctx, d, cnt) IAmiSSL->EVP_DigestUpdate((ctx), (d), (cnt)) 
#define EVP_DigestFinal_ex(ctx, md, s) IAmiSSL->EVP_DigestFinal_ex((ctx), (md), (s)) 
#define EVP_Digest(data, count, md, size, type, impl) IAmiSSL->EVP_Digest((data), (count), (md), (size), (type), (impl)) 
#define EVP_MD_CTX_copy(out, in) IAmiSSL->EVP_MD_CTX_copy((out), (in)) 
#define EVP_DigestInit(ctx, type) IAmiSSL->EVP_DigestInit((ctx), (type)) 
#define EVP_DigestFinal(ctx, md, s) IAmiSSL->EVP_DigestFinal((ctx), (md), (s)) 
#define EVP_read_pw_string(buf, length, prompt, verify) IAmiSSL->EVP_read_pw_string((buf), (length), (prompt), (verify)) 
#define EVP_set_pw_prompt(prompt) IAmiSSL->EVP_set_pw_prompt((prompt)) 
#define EVP_get_pw_prompt() IAmiSSL->EVP_get_pw_prompt() 
#define EVP_BytesToKey(type, md, salt, data, datal, count, key, iv) IAmiSSL->EVP_BytesToKey((type), (md), (salt), (data), (datal), (count), (key), (iv)) 
#define EVP_EncryptInit(ctx, cipher, key, iv) IAmiSSL->EVP_EncryptInit((ctx), (cipher), (key), (iv)) 
#define EVP_EncryptInit_ex(ctx, cipher, impl, key, iv) IAmiSSL->EVP_EncryptInit_ex((ctx), (cipher), (impl), (key), (iv)) 
#define EVP_EncryptUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_EncryptUpdate((ctx), (out), (outl), (in), (inl)) 
#define EVP_EncryptFinal_ex(ctx, out, outl) IAmiSSL->EVP_EncryptFinal_ex((ctx), (out), (outl)) 
#define EVP_EncryptFinal(ctx, out, outl) IAmiSSL->EVP_EncryptFinal((ctx), (out), (outl)) 
#define EVP_DecryptInit(ctx, cipher, key, iv) IAmiSSL->EVP_DecryptInit((ctx), (cipher), (key), (iv)) 
#define EVP_DecryptInit_ex(ctx, cipher, impl, key, iv) IAmiSSL->EVP_DecryptInit_ex((ctx), (cipher), (impl), (key), (iv)) 
#define EVP_DecryptUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_DecryptUpdate((ctx), (out), (outl), (in), (inl)) 
#define EVP_DecryptFinal(ctx, outm, outl) IAmiSSL->EVP_DecryptFinal((ctx), (outm), (outl)) 
#define EVP_DecryptFinal_ex(ctx, outm, outl) IAmiSSL->EVP_DecryptFinal_ex((ctx), (outm), (outl)) 
#define EVP_CipherInit(ctx, cipher, key, iv, enc) IAmiSSL->EVP_CipherInit((ctx), (cipher), (key), (iv), (enc)) 
#define EVP_CipherInit_ex(ctx, cipher, impl, key, iv, enc) IAmiSSL->EVP_CipherInit_ex((ctx), (cipher), (impl), (key), (iv), (enc)) 
#define EVP_CipherUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_CipherUpdate((ctx), (out), (outl), (in), (inl)) 
#define EVP_CipherFinal(ctx, outm, outl) IAmiSSL->EVP_CipherFinal((ctx), (outm), (outl)) 
#define EVP_CipherFinal_ex(ctx, outm, outl) IAmiSSL->EVP_CipherFinal_ex((ctx), (outm), (outl)) 
#define EVP_SignFinal(ctx, md, s, pkey) IAmiSSL->EVP_SignFinal((ctx), (md), (s), (pkey)) 
#define EVP_VerifyFinal(ctx, sigbuf, siglen, pkey) IAmiSSL->EVP_VerifyFinal((ctx), (sigbuf), (siglen), (pkey)) 
#define EVP_OpenInit(ctx, type, ek, ekl, iv, priv) IAmiSSL->EVP_OpenInit((ctx), (type), (ek), (ekl), (iv), (priv)) 
#define EVP_OpenFinal(ctx, out, outl) IAmiSSL->EVP_OpenFinal((ctx), (out), (outl)) 
#define EVP_SealInit(ctx, type, ek, ekl, iv, pubk, npubk) IAmiSSL->EVP_SealInit((ctx), (type), (ek), (ekl), (iv), (pubk), (npubk)) 
#define EVP_SealFinal(ctx, out, outl) IAmiSSL->EVP_SealFinal((ctx), (out), (outl)) 
#define EVP_EncodeInit(ctx) IAmiSSL->EVP_EncodeInit((ctx)) 
#define EVP_EncodeUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_EncodeUpdate((ctx), (out), (outl), (in), (inl)) 
#define EVP_EncodeFinal(ctx, out, outl) IAmiSSL->EVP_EncodeFinal((ctx), (out), (outl)) 
#define EVP_EncodeBlock(t, f, n) IAmiSSL->EVP_EncodeBlock((t), (f), (n)) 
#define EVP_DecodeInit(ctx) IAmiSSL->EVP_DecodeInit((ctx)) 
#define EVP_DecodeUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_DecodeUpdate((ctx), (out), (outl), (in), (inl)) 
#define EVP_DecodeFinal(ctx, out, outl) IAmiSSL->EVP_DecodeFinal((ctx), (out), (outl)) 
#define EVP_DecodeBlock(t, f, n) IAmiSSL->EVP_DecodeBlock((t), (f), (n)) 
#define EVP_CIPHER_CTX_init(a) IAmiSSL->EVP_CIPHER_CTX_init((a)) 
#define EVP_CIPHER_CTX_cleanup(a) IAmiSSL->EVP_CIPHER_CTX_cleanup((a)) 
#define EVP_CIPHER_CTX_set_key_length(x, keylen) IAmiSSL->EVP_CIPHER_CTX_set_key_length((x), (keylen)) 
#define EVP_CIPHER_CTX_set_padding(c, pad) IAmiSSL->EVP_CIPHER_CTX_set_padding((c), (pad)) 
#define EVP_CIPHER_CTX_ctrl(ctx, type, arg, ptr) IAmiSSL->EVP_CIPHER_CTX_ctrl((ctx), (type), (arg), (ptr)) 
#define BIO_f_md() IAmiSSL->BIO_f_md() 
#define BIO_f_base64() IAmiSSL->BIO_f_base64() 
#define BIO_f_cipher() IAmiSSL->BIO_f_cipher() 
#define BIO_f_reliable() IAmiSSL->BIO_f_reliable() 
#define BIO_set_cipher(b, c, k, i, enc) IAmiSSL->BIO_set_cipher((b), (c), (k), (i), (enc)) 
#define EVP_md_null() IAmiSSL->EVP_md_null() 
#define EVP_md2() IAmiSSL->EVP_md2() 
#define EVP_md4() IAmiSSL->EVP_md4() 
#define EVP_md5() IAmiSSL->EVP_md5() 
#define EVP_sha() IAmiSSL->EVP_sha() 
#define EVP_sha1() IAmiSSL->EVP_sha1() 
#define EVP_dss() IAmiSSL->EVP_dss() 
#define EVP_dss1() IAmiSSL->EVP_dss1() 
#define EVP_mdc2() IAmiSSL->EVP_mdc2() 
#define EVP_ripemd160() IAmiSSL->EVP_ripemd160() 
#define EVP_enc_null() IAmiSSL->EVP_enc_null() 
#define EVP_des_ecb() IAmiSSL->EVP_des_ecb() 
#define EVP_des_ede() IAmiSSL->EVP_des_ede() 
#define EVP_des_ede3() IAmiSSL->EVP_des_ede3() 
#define EVP_des_ede_ecb() IAmiSSL->EVP_des_ede_ecb() 
#define EVP_des_ede3_ecb() IAmiSSL->EVP_des_ede3_ecb() 
#define EVP_des_cfb64() IAmiSSL->EVP_des_cfb64() 
#define EVP_des_cfb1() IAmiSSL->EVP_des_cfb1() 
#define EVP_des_cfb8() IAmiSSL->EVP_des_cfb8() 
#define EVP_des_ede_cfb64() IAmiSSL->EVP_des_ede_cfb64() 
#define EVP_des_ede3_cfb64() IAmiSSL->EVP_des_ede3_cfb64() 
#define EVP_des_ede3_cfb1() IAmiSSL->EVP_des_ede3_cfb1() 
#define EVP_des_ede3_cfb8() IAmiSSL->EVP_des_ede3_cfb8() 
#define EVP_des_ofb() IAmiSSL->EVP_des_ofb() 
#define EVP_des_ede_ofb() IAmiSSL->EVP_des_ede_ofb() 
#define EVP_des_ede3_ofb() IAmiSSL->EVP_des_ede3_ofb() 
#define EVP_des_cbc() IAmiSSL->EVP_des_cbc() 
#define EVP_des_ede_cbc() IAmiSSL->EVP_des_ede_cbc() 
#define EVP_des_ede3_cbc() IAmiSSL->EVP_des_ede3_cbc() 
#define EVP_desx_cbc() IAmiSSL->EVP_desx_cbc() 
#define EVP_rc4() IAmiSSL->EVP_rc4() 
#define EVP_rc4_40() IAmiSSL->EVP_rc4_40() 
#define EVP_idea_ecb() IAmiSSL->EVP_idea_ecb() 
#define EVP_idea_cfb64() IAmiSSL->EVP_idea_cfb64() 
#define EVP_idea_ofb() IAmiSSL->EVP_idea_ofb() 
#define EVP_idea_cbc() IAmiSSL->EVP_idea_cbc() 
#define EVP_rc2_ecb() IAmiSSL->EVP_rc2_ecb() 
#define EVP_rc2_cbc() IAmiSSL->EVP_rc2_cbc() 
#define EVP_rc2_40_cbc() IAmiSSL->EVP_rc2_40_cbc() 
#define EVP_rc2_64_cbc() IAmiSSL->EVP_rc2_64_cbc() 
#define EVP_rc2_cfb64() IAmiSSL->EVP_rc2_cfb64() 
#define EVP_rc2_ofb() IAmiSSL->EVP_rc2_ofb() 
#define EVP_bf_ecb() IAmiSSL->EVP_bf_ecb() 
#define EVP_bf_cbc() IAmiSSL->EVP_bf_cbc() 
#define EVP_bf_cfb64() IAmiSSL->EVP_bf_cfb64() 
#define EVP_bf_ofb() IAmiSSL->EVP_bf_ofb() 
#define EVP_cast5_ecb() IAmiSSL->EVP_cast5_ecb() 
#define EVP_cast5_cbc() IAmiSSL->EVP_cast5_cbc() 
#define EVP_cast5_cfb64() IAmiSSL->EVP_cast5_cfb64() 
#define EVP_cast5_ofb() IAmiSSL->EVP_cast5_ofb() 
#define EVP_rc5_32_12_16_cbc() IAmiSSL->EVP_rc5_32_12_16_cbc() 
#define EVP_rc5_32_12_16_ecb() IAmiSSL->EVP_rc5_32_12_16_ecb() 
#define EVP_rc5_32_12_16_cfb64() IAmiSSL->EVP_rc5_32_12_16_cfb64() 
#define EVP_rc5_32_12_16_ofb() IAmiSSL->EVP_rc5_32_12_16_ofb() 
#define EVP_aes_128_ecb() IAmiSSL->EVP_aes_128_ecb() 
#define EVP_aes_128_cbc() IAmiSSL->EVP_aes_128_cbc() 
#define EVP_aes_128_cfb1() IAmiSSL->EVP_aes_128_cfb1() 
#define EVP_aes_128_cfb8() IAmiSSL->EVP_aes_128_cfb8() 
#define EVP_aes_128_cfb128() IAmiSSL->EVP_aes_128_cfb128() 
#define EVP_aes_128_ofb() IAmiSSL->EVP_aes_128_ofb() 
#define EVP_aes_192_ecb() IAmiSSL->EVP_aes_192_ecb() 
#define EVP_aes_192_cbc() IAmiSSL->EVP_aes_192_cbc() 
#define EVP_aes_192_cfb1() IAmiSSL->EVP_aes_192_cfb1() 
#define EVP_aes_192_cfb8() IAmiSSL->EVP_aes_192_cfb8() 
#define EVP_aes_192_cfb128() IAmiSSL->EVP_aes_192_cfb128() 
#define EVP_aes_192_ofb() IAmiSSL->EVP_aes_192_ofb() 
#define EVP_aes_256_ecb() IAmiSSL->EVP_aes_256_ecb() 
#define EVP_aes_256_cbc() IAmiSSL->EVP_aes_256_cbc() 
#define EVP_aes_256_cfb1() IAmiSSL->EVP_aes_256_cfb1() 
#define EVP_aes_256_cfb8() IAmiSSL->EVP_aes_256_cfb8() 
#define EVP_aes_256_cfb128() IAmiSSL->EVP_aes_256_cfb128() 
#define EVP_aes_256_ofb() IAmiSSL->EVP_aes_256_ofb() 
#define OPENSSL_add_all_algorithms_noconf() IAmiSSL->OPENSSL_add_all_algorithms_noconf() 
#define OPENSSL_add_all_algorithms_conf() IAmiSSL->OPENSSL_add_all_algorithms_conf() 
#define OpenSSL_add_all_ciphers() IAmiSSL->OpenSSL_add_all_ciphers() 
#define OpenSSL_add_all_digests() IAmiSSL->OpenSSL_add_all_digests() 
#define EVP_add_cipher(cipher) IAmiSSL->EVP_add_cipher((cipher)) 
#define EVP_add_digest(digest) IAmiSSL->EVP_add_digest((digest)) 
#define EVP_get_cipherbyname(name) IAmiSSL->EVP_get_cipherbyname((name)) 
#define EVP_get_digestbyname(name) IAmiSSL->EVP_get_digestbyname((name)) 
#define EVP_cleanup() IAmiSSL->EVP_cleanup() 
#define EVP_PKEY_decrypt(ctx, out, outlen, in, inlen) IAmiSSL->EVP_PKEY_decrypt((ctx), (out), (outlen), (in), (inlen)) 
#define EVP_PKEY_encrypt(ctx, out, outlen, in, inlen) IAmiSSL->EVP_PKEY_encrypt((ctx), (out), (outlen), (in), (inlen)) 
#define EVP_PKEY_type(type) IAmiSSL->EVP_PKEY_type((type)) 
#define EVP_PKEY_bits(pkey) IAmiSSL->EVP_PKEY_bits((pkey)) 
#define EVP_PKEY_size(pkey) IAmiSSL->EVP_PKEY_size((pkey)) 
#define EVP_PKEY_assign(pkey, type, key) IAmiSSL->EVP_PKEY_assign((pkey), (type), (key)) 
#define EVP_PKEY_set1_RSA(pkey, key) IAmiSSL->EVP_PKEY_set1_RSA((pkey), (key)) 
#define EVP_PKEY_get1_RSA(pkey) IAmiSSL->EVP_PKEY_get1_RSA((pkey)) 
#define EVP_PKEY_set1_DSA(pkey, key) IAmiSSL->EVP_PKEY_set1_DSA((pkey), (key)) 
#define EVP_PKEY_get1_DSA(pkey) IAmiSSL->EVP_PKEY_get1_DSA((pkey)) 
#define EVP_PKEY_set1_DH(pkey, key) IAmiSSL->EVP_PKEY_set1_DH((pkey), (key)) 
#define EVP_PKEY_get1_DH(pkey) IAmiSSL->EVP_PKEY_get1_DH((pkey)) 
#define EVP_PKEY_new() IAmiSSL->EVP_PKEY_new() 
#define EVP_PKEY_free(pkey) IAmiSSL->EVP_PKEY_free((pkey)) 
#define d2i_PublicKey(type, a, pp, length) IAmiSSL->d2i_PublicKey((type), (a), (pp), (length)) 
#define i2d_PublicKey(a, pp) IAmiSSL->i2d_PublicKey((a), (pp)) 
#define d2i_PrivateKey(type, a, pp, length) IAmiSSL->d2i_PrivateKey((type), (a), (pp), (length)) 
#define d2i_AutoPrivateKey(a, pp, length) IAmiSSL->d2i_AutoPrivateKey((a), (pp), (length)) 
#define i2d_PrivateKey(a, pp) IAmiSSL->i2d_PrivateKey((a), (pp)) 
#define EVP_PKEY_copy_parameters(to, from) IAmiSSL->EVP_PKEY_copy_parameters((to), (from)) 
#define EVP_PKEY_missing_parameters(pkey) IAmiSSL->EVP_PKEY_missing_parameters((pkey)) 
#define EVP_PKEY_save_parameters(pkey, mode) IAmiSSL->EVP_PKEY_save_parameters((pkey), (mode)) 
#define EVP_PKEY_cmp_parameters(a, b) IAmiSSL->EVP_PKEY_cmp_parameters((a), (b)) 
#define EVP_CIPHER_type(ctx) IAmiSSL->EVP_CIPHER_type((ctx)) 
#define EVP_CIPHER_param_to_asn1(c, type) IAmiSSL->EVP_CIPHER_param_to_asn1((c), (type)) 
#define EVP_CIPHER_asn1_to_param(c, type) IAmiSSL->EVP_CIPHER_asn1_to_param((c), (type)) 
#define EVP_CIPHER_set_asn1_iv(c, type) IAmiSSL->EVP_CIPHER_set_asn1_iv((c), (type)) 
#define EVP_CIPHER_get_asn1_iv(c, type) IAmiSSL->EVP_CIPHER_get_asn1_iv((c), (type)) 
#define PKCS5_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) IAmiSSL->PKCS5_PBE_keyivgen((ctx), (pass), (passlen), (param), (cipher), (md), (en_de)) 
#define PKCS5_PBKDF2_HMAC_SHA1(pass, passlen, salt, saltlen, iter, keylen, out) IAmiSSL->PKCS5_PBKDF2_HMAC_SHA1((pass), (passlen), (salt), (saltlen), (iter), (keylen), (out)) 
#define PKCS5_v2_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) IAmiSSL->PKCS5_v2_PBE_keyivgen((ctx), (pass), (passlen), (param), (cipher), (md), (en_de)) 
#define PKCS5_PBE_add() IAmiSSL->PKCS5_PBE_add() 
#define EVP_PBE_CipherInit(pbe_obj, pass, passlen, param, ctx, en_de) IAmiSSL->EVP_PBE_CipherInit((pbe_obj), (pass), (passlen), (param), (ctx), (en_de)) 
#define EVP_PBE_alg_add(nid, cipher, md, keygen) IAmiSSL->EVP_PBE_alg_add((nid), (cipher), (md), (keygen)) 
#define EVP_PBE_cleanup() IAmiSSL->EVP_PBE_cleanup() 
#define ERR_load_EVP_strings() IAmiSSL->ERR_load_EVP_strings() 
#define HMAC_CTX_init(ctx) IAmiSSL->HMAC_CTX_init((ctx)) 
#define HMAC_CTX_cleanup(ctx) IAmiSSL->HMAC_CTX_cleanup((ctx)) 
#define HMAC_Init(ctx, key, len, md) IAmiSSL->HMAC_Init((ctx), (key), (len), (md)) 
#define HMAC_Init_ex(ctx, key, len, md, impl) IAmiSSL->HMAC_Init_ex((ctx), (key), (len), (md), (impl)) 
#define HMAC_Update(ctx, data, len) IAmiSSL->HMAC_Update((ctx), (data), (len)) 
#define HMAC_Final(ctx, md, len) IAmiSSL->HMAC_Final((ctx), (md), (len)) 
#define HMAC(evp_md, key, key_len, d, n, md, md_len) IAmiSSL->HMAC((evp_md), (key), (key_len), (d), (n), (md), (md_len)) 
#define KRB5_ENCDATA_new() IAmiSSL->KRB5_ENCDATA_new() 
#define KRB5_ENCDATA_free(a) IAmiSSL->KRB5_ENCDATA_free((a)) 
#define d2i_KRB5_ENCDATA(a, in, len) IAmiSSL->d2i_KRB5_ENCDATA((a), (in), (len)) 
#define i2d_KRB5_ENCDATA(a, out) IAmiSSL->i2d_KRB5_ENCDATA((a), (out)) 
#define KRB5_ENCDATA_it() IAmiSSL->KRB5_ENCDATA_it() 
#define KRB5_PRINCNAME_new() IAmiSSL->KRB5_PRINCNAME_new() 
#define KRB5_PRINCNAME_free(a) IAmiSSL->KRB5_PRINCNAME_free((a)) 
#define d2i_KRB5_PRINCNAME(a, in, len) IAmiSSL->d2i_KRB5_PRINCNAME((a), (in), (len)) 
#define i2d_KRB5_PRINCNAME(a, out) IAmiSSL->i2d_KRB5_PRINCNAME((a), (out)) 
#define KRB5_PRINCNAME_it() IAmiSSL->KRB5_PRINCNAME_it() 
#define KRB5_TKTBODY_new() IAmiSSL->KRB5_TKTBODY_new() 
#define KRB5_TKTBODY_free(a) IAmiSSL->KRB5_TKTBODY_free((a)) 
#define d2i_KRB5_TKTBODY(a, in, len) IAmiSSL->d2i_KRB5_TKTBODY((a), (in), (len)) 
#define i2d_KRB5_TKTBODY(a, out) IAmiSSL->i2d_KRB5_TKTBODY((a), (out)) 
#define KRB5_TKTBODY_it() IAmiSSL->KRB5_TKTBODY_it() 
#define KRB5_APREQBODY_new() IAmiSSL->KRB5_APREQBODY_new() 
#define KRB5_APREQBODY_free(a) IAmiSSL->KRB5_APREQBODY_free((a)) 
#define d2i_KRB5_APREQBODY(a, in, len) IAmiSSL->d2i_KRB5_APREQBODY((a), (in), (len)) 
#define i2d_KRB5_APREQBODY(a, out) IAmiSSL->i2d_KRB5_APREQBODY((a), (out)) 
#define KRB5_APREQBODY_it() IAmiSSL->KRB5_APREQBODY_it() 
#define KRB5_TICKET_new() IAmiSSL->KRB5_TICKET_new() 
#define KRB5_TICKET_free(a) IAmiSSL->KRB5_TICKET_free((a)) 
#define d2i_KRB5_TICKET(a, in, len) IAmiSSL->d2i_KRB5_TICKET((a), (in), (len)) 
#define i2d_KRB5_TICKET(a, out) IAmiSSL->i2d_KRB5_TICKET((a), (out)) 
#define KRB5_TICKET_it() IAmiSSL->KRB5_TICKET_it() 
#define KRB5_APREQ_new() IAmiSSL->KRB5_APREQ_new() 
#define KRB5_APREQ_free(a) IAmiSSL->KRB5_APREQ_free((a)) 
#define d2i_KRB5_APREQ(a, in, len) IAmiSSL->d2i_KRB5_APREQ((a), (in), (len)) 
#define i2d_KRB5_APREQ(a, out) IAmiSSL->i2d_KRB5_APREQ((a), (out)) 
#define KRB5_APREQ_it() IAmiSSL->KRB5_APREQ_it() 
#define KRB5_CHECKSUM_new() IAmiSSL->KRB5_CHECKSUM_new() 
#define KRB5_CHECKSUM_free(a) IAmiSSL->KRB5_CHECKSUM_free((a)) 
#define d2i_KRB5_CHECKSUM(a, in, len) IAmiSSL->d2i_KRB5_CHECKSUM((a), (in), (len)) 
#define i2d_KRB5_CHECKSUM(a, out) IAmiSSL->i2d_KRB5_CHECKSUM((a), (out)) 
#define KRB5_CHECKSUM_it() IAmiSSL->KRB5_CHECKSUM_it() 
#define KRB5_ENCKEY_new() IAmiSSL->KRB5_ENCKEY_new() 
#define KRB5_ENCKEY_free(a) IAmiSSL->KRB5_ENCKEY_free((a)) 
#define d2i_KRB5_ENCKEY(a, in, len) IAmiSSL->d2i_KRB5_ENCKEY((a), (in), (len)) 
#define i2d_KRB5_ENCKEY(a, out) IAmiSSL->i2d_KRB5_ENCKEY((a), (out)) 
#define KRB5_ENCKEY_it() IAmiSSL->KRB5_ENCKEY_it() 
#define KRB5_AUTHDATA_new() IAmiSSL->KRB5_AUTHDATA_new() 
#define KRB5_AUTHDATA_free(a) IAmiSSL->KRB5_AUTHDATA_free((a)) 
#define d2i_KRB5_AUTHDATA(a, in, len) IAmiSSL->d2i_KRB5_AUTHDATA((a), (in), (len)) 
#define i2d_KRB5_AUTHDATA(a, out) IAmiSSL->i2d_KRB5_AUTHDATA((a), (out)) 
#define KRB5_AUTHDATA_it() IAmiSSL->KRB5_AUTHDATA_it() 
#define KRB5_AUTHENTBODY_new() IAmiSSL->KRB5_AUTHENTBODY_new() 
#define KRB5_AUTHENTBODY_free(a) IAmiSSL->KRB5_AUTHENTBODY_free((a)) 
#define d2i_KRB5_AUTHENTBODY(a, in, len) IAmiSSL->d2i_KRB5_AUTHENTBODY((a), (in), (len)) 
#define i2d_KRB5_AUTHENTBODY(a, out) IAmiSSL->i2d_KRB5_AUTHENTBODY((a), (out)) 
#define KRB5_AUTHENTBODY_it() IAmiSSL->KRB5_AUTHENTBODY_it() 
#define KRB5_AUTHENT_new() IAmiSSL->KRB5_AUTHENT_new() 
#define KRB5_AUTHENT_free(a) IAmiSSL->KRB5_AUTHENT_free((a)) 
#define d2i_KRB5_AUTHENT(a, in, len) IAmiSSL->d2i_KRB5_AUTHENT((a), (in), (len)) 
#define i2d_KRB5_AUTHENT(a, out) IAmiSSL->i2d_KRB5_AUTHENT((a), (out)) 
#define KRB5_AUTHENT_it() IAmiSSL->KRB5_AUTHENT_it() 
#define lh_new(h, c) IAmiSSL->lh_new((h), (c)) 
#define lh_free(lh) IAmiSSL->lh_free((lh)) 
#define lh_insert(lh, data) IAmiSSL->lh_insert((lh), (data)) 
#define lh_delete(lh, data) IAmiSSL->lh_delete((lh), (data)) 
#define lh_retrieve(lh, data) IAmiSSL->lh_retrieve((lh), (data)) 
#define lh_doall(lh, func) IAmiSSL->lh_doall((lh), (func)) 
#define lh_doall_arg(lh, func, arg) IAmiSSL->lh_doall_arg((lh), (func), (arg)) 
#define lh_strhash(c) IAmiSSL->lh_strhash((c)) 
#define lh_num_items(lh) IAmiSSL->lh_num_items((lh)) 
#define lh_stats_bio(lh, out) IAmiSSL->lh_stats_bio((lh), (out)) 
#define lh_node_stats_bio(lh, out) IAmiSSL->lh_node_stats_bio((lh), (out)) 
#define lh_node_usage_stats_bio(lh, out) IAmiSSL->lh_node_usage_stats_bio((lh), (out)) 
#define OBJ_NAME_init() IAmiSSL->OBJ_NAME_init() 
#define OBJ_NAME_new_index(hash_func, cmp_func, free_func) IAmiSSL->OBJ_NAME_new_index((hash_func), (cmp_func), (free_func)) 
#define OBJ_NAME_get(name, type) IAmiSSL->OBJ_NAME_get((name), (type)) 
#define OBJ_NAME_add(name, type, data) IAmiSSL->OBJ_NAME_add((name), (type), (data)) 
#define OBJ_NAME_remove(name, type) IAmiSSL->OBJ_NAME_remove((name), (type)) 
#define OBJ_NAME_cleanup(type) IAmiSSL->OBJ_NAME_cleanup((type)) 
#define OBJ_NAME_do_all(type, fn, arg) IAmiSSL->OBJ_NAME_do_all((type), (fn), (arg)) 
#define OBJ_NAME_do_all_sorted(type, fn, arg) IAmiSSL->OBJ_NAME_do_all_sorted((type), (fn), (arg)) 
#define OBJ_dup(o) IAmiSSL->OBJ_dup((o)) 
#define OBJ_nid2obj(n) IAmiSSL->OBJ_nid2obj((n)) 
#define OBJ_nid2ln(n) IAmiSSL->OBJ_nid2ln((n)) 
#define OBJ_nid2sn(n) IAmiSSL->OBJ_nid2sn((n)) 
#define OBJ_obj2nid(o) IAmiSSL->OBJ_obj2nid((o)) 
#define OBJ_txt2obj(s, no_name) IAmiSSL->OBJ_txt2obj((s), (no_name)) 
#define OBJ_obj2txt(buf, buf_len, a, no_name) IAmiSSL->OBJ_obj2txt((buf), (buf_len), (a), (no_name)) 
#define OBJ_txt2nid(s) IAmiSSL->OBJ_txt2nid((s)) 
#define OBJ_ln2nid(s) IAmiSSL->OBJ_ln2nid((s)) 
#define OBJ_sn2nid(s) IAmiSSL->OBJ_sn2nid((s)) 
#define OBJ_cmp(a, b) IAmiSSL->OBJ_cmp((a), (b)) 
#define OBJ_new_nid(num) IAmiSSL->OBJ_new_nid((num)) 
#define OBJ_add_object(obj) IAmiSSL->OBJ_add_object((obj)) 
#define OBJ_create(oid, sn, ln) IAmiSSL->OBJ_create((oid), (sn), (ln)) 
#define OBJ_cleanup() IAmiSSL->OBJ_cleanup() 
#define OBJ_create_objects(in) IAmiSSL->OBJ_create_objects((in)) 
#define ERR_load_OBJ_strings() IAmiSSL->ERR_load_OBJ_strings() 
#define OCSP_sendreq_bio(b, path, req) IAmiSSL->OCSP_sendreq_bio((b), (path), (req)) 
#define OCSP_cert_to_id(dgst, subject, issuer) IAmiSSL->OCSP_cert_to_id((dgst), (subject), (issuer)) 
#define OCSP_cert_id_new(dgst, issuerName, issuerKey, serialNumber) IAmiSSL->OCSP_cert_id_new((dgst), (issuerName), (issuerKey), (serialNumber)) 
#define OCSP_request_add0_id(req, cid) IAmiSSL->OCSP_request_add0_id((req), (cid)) 
#define OCSP_request_add1_nonce(req, val, len) IAmiSSL->OCSP_request_add1_nonce((req), (val), (len)) 
#define OCSP_basic_add1_nonce(resp, val, len) IAmiSSL->OCSP_basic_add1_nonce((resp), (val), (len)) 
#define OCSP_check_nonce(req, bs) IAmiSSL->OCSP_check_nonce((req), (bs)) 
#define OCSP_copy_nonce(resp, req) IAmiSSL->OCSP_copy_nonce((resp), (req)) 
#define OCSP_request_set1_name(req, nm) IAmiSSL->OCSP_request_set1_name((req), (nm)) 
#define OCSP_request_add1_cert(req, cert) IAmiSSL->OCSP_request_add1_cert((req), (cert)) 
#define OCSP_request_sign(req, signer, key, dgst, certs, flags) IAmiSSL->OCSP_request_sign((req), (signer), (key), (dgst), (certs), (flags)) 
#define OCSP_response_status(resp) IAmiSSL->OCSP_response_status((resp)) 
#define OCSP_response_get1_basic(resp) IAmiSSL->OCSP_response_get1_basic((resp)) 
#define OCSP_resp_count(bs) IAmiSSL->OCSP_resp_count((bs)) 
#define OCSP_resp_get0(bs, idx) IAmiSSL->OCSP_resp_get0((bs), (idx)) 
#define OCSP_resp_find(bs, id, last) IAmiSSL->OCSP_resp_find((bs), (id), (last)) 
#define OCSP_single_get0_status(single, reason, revtime, thisupd, nextupd) IAmiSSL->OCSP_single_get0_status((single), (reason), (revtime), (thisupd), (nextupd)) 
#define OCSP_resp_find_status(bs, id, status, reason, revtime, thisupd, nextupd) IAmiSSL->OCSP_resp_find_status((bs), (id), (status), (reason), (revtime), (thisupd), (nextupd)) 
#define OCSP_check_validity(thisupd, nextupd, sec, maxsec) IAmiSSL->OCSP_check_validity((thisupd), (nextupd), (sec), (maxsec)) 
#define OCSP_request_verify(req, certs, store, flags) IAmiSSL->OCSP_request_verify((req), (certs), (store), (flags)) 
#define OCSP_parse_url(url, phost, pport, ppath, pssl) IAmiSSL->OCSP_parse_url((url), (phost), (pport), (ppath), (pssl)) 
#define OCSP_id_issuer_cmp(a, b) IAmiSSL->OCSP_id_issuer_cmp((a), (b)) 
#define OCSP_id_cmp(a, b) IAmiSSL->OCSP_id_cmp((a), (b)) 
#define OCSP_request_onereq_count(req) IAmiSSL->OCSP_request_onereq_count((req)) 
#define OCSP_request_onereq_get0(req, i) IAmiSSL->OCSP_request_onereq_get0((req), (i)) 
#define OCSP_onereq_get0_id(one) IAmiSSL->OCSP_onereq_get0_id((one)) 
#define OCSP_id_get0_info(piNameHash, pmd, pikeyHash, pserial, cid) IAmiSSL->OCSP_id_get0_info((piNameHash), (pmd), (pikeyHash), (pserial), (cid)) 
#define OCSP_request_is_signed(req) IAmiSSL->OCSP_request_is_signed((req)) 
#define OCSP_response_create(status, bs) IAmiSSL->OCSP_response_create((status), (bs)) 
#define OCSP_basic_add1_status(rsp, cid, status, reason, revtime, thisupd, nextupd) IAmiSSL->OCSP_basic_add1_status((rsp), (cid), (status), (reason), (revtime), (thisupd), (nextupd)) 
#define OCSP_basic_add1_cert(resp, cert) IAmiSSL->OCSP_basic_add1_cert((resp), (cert)) 
#define OCSP_basic_sign(brsp, signer, key, dgst, certs, flags) IAmiSSL->OCSP_basic_sign((brsp), (signer), (key), (dgst), (certs), (flags)) 
#define OCSP_crlID_new(url, n, tim) IAmiSSL->OCSP_crlID_new((url), (n), (tim)) 
#define OCSP_accept_responses_new(oids) IAmiSSL->OCSP_accept_responses_new((oids)) 
#define OCSP_archive_cutoff_new(tim) IAmiSSL->OCSP_archive_cutoff_new((tim)) 
#define OCSP_url_svcloc_new(issuer, urls) IAmiSSL->OCSP_url_svcloc_new((issuer), (urls)) 
#define OCSP_REQUEST_get_ext_count(x) IAmiSSL->OCSP_REQUEST_get_ext_count((x)) 
#define OCSP_REQUEST_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_REQUEST_get_ext_by_NID((x), (nid), (lastpos)) 
#define OCSP_REQUEST_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_REQUEST_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define OCSP_REQUEST_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_REQUEST_get_ext_by_critical((x), (crit), (lastpos)) 
#define OCSP_REQUEST_get_ext(x, loc) IAmiSSL->OCSP_REQUEST_get_ext((x), (loc)) 
#define OCSP_REQUEST_delete_ext(x, loc) IAmiSSL->OCSP_REQUEST_delete_ext((x), (loc)) 
#define OCSP_REQUEST_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_REQUEST_get1_ext_d2i((x), (nid), (crit), (idx)) 
#define OCSP_REQUEST_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_REQUEST_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define OCSP_REQUEST_add_ext(x, ex, loc) IAmiSSL->OCSP_REQUEST_add_ext((x), (ex), (loc)) 
#define OCSP_ONEREQ_get_ext_count(x) IAmiSSL->OCSP_ONEREQ_get_ext_count((x)) 
#define OCSP_ONEREQ_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_ONEREQ_get_ext_by_NID((x), (nid), (lastpos)) 
#define OCSP_ONEREQ_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_ONEREQ_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define OCSP_ONEREQ_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_ONEREQ_get_ext_by_critical((x), (crit), (lastpos)) 
#define OCSP_ONEREQ_get_ext(x, loc) IAmiSSL->OCSP_ONEREQ_get_ext((x), (loc)) 
#define OCSP_ONEREQ_delete_ext(x, loc) IAmiSSL->OCSP_ONEREQ_delete_ext((x), (loc)) 
#define OCSP_ONEREQ_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_ONEREQ_get1_ext_d2i((x), (nid), (crit), (idx)) 
#define OCSP_ONEREQ_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_ONEREQ_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define OCSP_ONEREQ_add_ext(x, ex, loc) IAmiSSL->OCSP_ONEREQ_add_ext((x), (ex), (loc)) 
#define OCSP_BASICRESP_get_ext_count(x) IAmiSSL->OCSP_BASICRESP_get_ext_count((x)) 
#define OCSP_BASICRESP_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_BASICRESP_get_ext_by_NID((x), (nid), (lastpos)) 
#define OCSP_BASICRESP_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_BASICRESP_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define OCSP_BASICRESP_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_BASICRESP_get_ext_by_critical((x), (crit), (lastpos)) 
#define OCSP_BASICRESP_get_ext(x, loc) IAmiSSL->OCSP_BASICRESP_get_ext((x), (loc)) 
#define OCSP_BASICRESP_delete_ext(x, loc) IAmiSSL->OCSP_BASICRESP_delete_ext((x), (loc)) 
#define OCSP_BASICRESP_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_BASICRESP_get1_ext_d2i((x), (nid), (crit), (idx)) 
#define OCSP_BASICRESP_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_BASICRESP_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define OCSP_BASICRESP_add_ext(x, ex, loc) IAmiSSL->OCSP_BASICRESP_add_ext((x), (ex), (loc)) 
#define OCSP_SINGLERESP_get_ext_count(x) IAmiSSL->OCSP_SINGLERESP_get_ext_count((x)) 
#define OCSP_SINGLERESP_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_SINGLERESP_get_ext_by_NID((x), (nid), (lastpos)) 
#define OCSP_SINGLERESP_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_SINGLERESP_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define OCSP_SINGLERESP_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_SINGLERESP_get_ext_by_critical((x), (crit), (lastpos)) 
#define OCSP_SINGLERESP_get_ext(x, loc) IAmiSSL->OCSP_SINGLERESP_get_ext((x), (loc)) 
#define OCSP_SINGLERESP_delete_ext(x, loc) IAmiSSL->OCSP_SINGLERESP_delete_ext((x), (loc)) 
#define OCSP_SINGLERESP_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_SINGLERESP_get1_ext_d2i((x), (nid), (crit), (idx)) 
#define OCSP_SINGLERESP_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_SINGLERESP_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define OCSP_SINGLERESP_add_ext(x, ex, loc) IAmiSSL->OCSP_SINGLERESP_add_ext((x), (ex), (loc)) 
#define OCSP_SINGLERESP_new() IAmiSSL->OCSP_SINGLERESP_new() 
#define OCSP_SINGLERESP_free(a) IAmiSSL->OCSP_SINGLERESP_free((a)) 
#define d2i_OCSP_SINGLERESP(a, in, len) IAmiSSL->d2i_OCSP_SINGLERESP((a), (in), (len)) 
#define i2d_OCSP_SINGLERESP(a, out) IAmiSSL->i2d_OCSP_SINGLERESP((a), (out)) 
#define OCSP_SINGLERESP_it() IAmiSSL->OCSP_SINGLERESP_it() 
#define OCSP_CERTSTATUS_new() IAmiSSL->OCSP_CERTSTATUS_new() 
#define OCSP_CERTSTATUS_free(a) IAmiSSL->OCSP_CERTSTATUS_free((a)) 
#define d2i_OCSP_CERTSTATUS(a, in, len) IAmiSSL->d2i_OCSP_CERTSTATUS((a), (in), (len)) 
#define i2d_OCSP_CERTSTATUS(a, out) IAmiSSL->i2d_OCSP_CERTSTATUS((a), (out)) 
#define OCSP_CERTSTATUS_it() IAmiSSL->OCSP_CERTSTATUS_it() 
#define OCSP_REVOKEDINFO_new() IAmiSSL->OCSP_REVOKEDINFO_new() 
#define OCSP_REVOKEDINFO_free(a) IAmiSSL->OCSP_REVOKEDINFO_free((a)) 
#define d2i_OCSP_REVOKEDINFO(a, in, len) IAmiSSL->d2i_OCSP_REVOKEDINFO((a), (in), (len)) 
#define i2d_OCSP_REVOKEDINFO(a, out) IAmiSSL->i2d_OCSP_REVOKEDINFO((a), (out)) 
#define OCSP_REVOKEDINFO_it() IAmiSSL->OCSP_REVOKEDINFO_it() 
#define OCSP_BASICRESP_new() IAmiSSL->OCSP_BASICRESP_new() 
#define OCSP_BASICRESP_free(a) IAmiSSL->OCSP_BASICRESP_free((a)) 
#define d2i_OCSP_BASICRESP(a, in, len) IAmiSSL->d2i_OCSP_BASICRESP((a), (in), (len)) 
#define i2d_OCSP_BASICRESP(a, out) IAmiSSL->i2d_OCSP_BASICRESP((a), (out)) 
#define OCSP_BASICRESP_it() IAmiSSL->OCSP_BASICRESP_it() 
#define OCSP_RESPDATA_new() IAmiSSL->OCSP_RESPDATA_new() 
#define OCSP_RESPDATA_free(a) IAmiSSL->OCSP_RESPDATA_free((a)) 
#define d2i_OCSP_RESPDATA(a, in, len) IAmiSSL->d2i_OCSP_RESPDATA((a), (in), (len)) 
#define i2d_OCSP_RESPDATA(a, out) IAmiSSL->i2d_OCSP_RESPDATA((a), (out)) 
#define OCSP_RESPDATA_it() IAmiSSL->OCSP_RESPDATA_it() 
#define OCSP_RESPID_new() IAmiSSL->OCSP_RESPID_new() 
#define OCSP_RESPID_free(a) IAmiSSL->OCSP_RESPID_free((a)) 
#define d2i_OCSP_RESPID(a, in, len) IAmiSSL->d2i_OCSP_RESPID((a), (in), (len)) 
#define i2d_OCSP_RESPID(a, out) IAmiSSL->i2d_OCSP_RESPID((a), (out)) 
#define OCSP_RESPID_it() IAmiSSL->OCSP_RESPID_it() 
#define OCSP_RESPONSE_new() IAmiSSL->OCSP_RESPONSE_new() 
#define OCSP_RESPONSE_free(a) IAmiSSL->OCSP_RESPONSE_free((a)) 
#define d2i_OCSP_RESPONSE(a, in, len) IAmiSSL->d2i_OCSP_RESPONSE((a), (in), (len)) 
#define i2d_OCSP_RESPONSE(a, out) IAmiSSL->i2d_OCSP_RESPONSE((a), (out)) 
#define OCSP_RESPONSE_it() IAmiSSL->OCSP_RESPONSE_it() 
#define OCSP_RESPBYTES_new() IAmiSSL->OCSP_RESPBYTES_new() 
#define OCSP_RESPBYTES_free(a) IAmiSSL->OCSP_RESPBYTES_free((a)) 
#define d2i_OCSP_RESPBYTES(a, in, len) IAmiSSL->d2i_OCSP_RESPBYTES((a), (in), (len)) 
#define i2d_OCSP_RESPBYTES(a, out) IAmiSSL->i2d_OCSP_RESPBYTES((a), (out)) 
#define OCSP_RESPBYTES_it() IAmiSSL->OCSP_RESPBYTES_it() 
#define OCSP_ONEREQ_new() IAmiSSL->OCSP_ONEREQ_new() 
#define OCSP_ONEREQ_free(a) IAmiSSL->OCSP_ONEREQ_free((a)) 
#define d2i_OCSP_ONEREQ(a, in, len) IAmiSSL->d2i_OCSP_ONEREQ((a), (in), (len)) 
#define i2d_OCSP_ONEREQ(a, out) IAmiSSL->i2d_OCSP_ONEREQ((a), (out)) 
#define OCSP_ONEREQ_it() IAmiSSL->OCSP_ONEREQ_it() 
#define OCSP_CERTID_new() IAmiSSL->OCSP_CERTID_new() 
#define OCSP_CERTID_free(a) IAmiSSL->OCSP_CERTID_free((a)) 
#define d2i_OCSP_CERTID(a, in, len) IAmiSSL->d2i_OCSP_CERTID((a), (in), (len)) 
#define i2d_OCSP_CERTID(a, out) IAmiSSL->i2d_OCSP_CERTID((a), (out)) 
#define OCSP_CERTID_it() IAmiSSL->OCSP_CERTID_it() 
#define OCSP_REQUEST_new() IAmiSSL->OCSP_REQUEST_new() 
#define OCSP_REQUEST_free(a) IAmiSSL->OCSP_REQUEST_free((a)) 
#define d2i_OCSP_REQUEST(a, in, len) IAmiSSL->d2i_OCSP_REQUEST((a), (in), (len)) 
#define i2d_OCSP_REQUEST(a, out) IAmiSSL->i2d_OCSP_REQUEST((a), (out)) 
#define OCSP_REQUEST_it() IAmiSSL->OCSP_REQUEST_it() 
#define OCSP_SIGNATURE_new() IAmiSSL->OCSP_SIGNATURE_new() 
#define OCSP_SIGNATURE_free(a) IAmiSSL->OCSP_SIGNATURE_free((a)) 
#define d2i_OCSP_SIGNATURE(a, in, len) IAmiSSL->d2i_OCSP_SIGNATURE((a), (in), (len)) 
#define i2d_OCSP_SIGNATURE(a, out) IAmiSSL->i2d_OCSP_SIGNATURE((a), (out)) 
#define OCSP_SIGNATURE_it() IAmiSSL->OCSP_SIGNATURE_it() 
#define OCSP_REQINFO_new() IAmiSSL->OCSP_REQINFO_new() 
#define OCSP_REQINFO_free(a) IAmiSSL->OCSP_REQINFO_free((a)) 
#define d2i_OCSP_REQINFO(a, in, len) IAmiSSL->d2i_OCSP_REQINFO((a), (in), (len)) 
#define i2d_OCSP_REQINFO(a, out) IAmiSSL->i2d_OCSP_REQINFO((a), (out)) 
#define OCSP_REQINFO_it() IAmiSSL->OCSP_REQINFO_it() 
#define OCSP_CRLID_new() IAmiSSL->OCSP_CRLID_new() 
#define OCSP_CRLID_free(a) IAmiSSL->OCSP_CRLID_free((a)) 
#define d2i_OCSP_CRLID(a, in, len) IAmiSSL->d2i_OCSP_CRLID((a), (in), (len)) 
#define i2d_OCSP_CRLID(a, out) IAmiSSL->i2d_OCSP_CRLID((a), (out)) 
#define OCSP_CRLID_it() IAmiSSL->OCSP_CRLID_it() 
#define OCSP_SERVICELOC_new() IAmiSSL->OCSP_SERVICELOC_new() 
#define OCSP_SERVICELOC_free(a) IAmiSSL->OCSP_SERVICELOC_free((a)) 
#define d2i_OCSP_SERVICELOC(a, in, len) IAmiSSL->d2i_OCSP_SERVICELOC((a), (in), (len)) 
#define i2d_OCSP_SERVICELOC(a, out) IAmiSSL->i2d_OCSP_SERVICELOC((a), (out)) 
#define OCSP_SERVICELOC_it() IAmiSSL->OCSP_SERVICELOC_it() 
#define OCSP_response_status_str(s) IAmiSSL->OCSP_response_status_str((s)) 
#define OCSP_cert_status_str(s) IAmiSSL->OCSP_cert_status_str((s)) 
#define OCSP_crl_reason_str(s) IAmiSSL->OCSP_crl_reason_str((s)) 
#define OCSP_REQUEST_print(bp, a, flags) IAmiSSL->OCSP_REQUEST_print((bp), (a), (flags)) 
#define OCSP_RESPONSE_print(bp, o, flags) IAmiSSL->OCSP_RESPONSE_print((bp), (o), (flags)) 
#define OCSP_basic_verify(bs, certs, st, flags) IAmiSSL->OCSP_basic_verify((bs), (certs), (st), (flags)) 
#define ERR_load_OCSP_strings() IAmiSSL->ERR_load_OCSP_strings() 
#define PEM_get_EVP_CIPHER_INFO(header, cipher) IAmiSSL->PEM_get_EVP_CIPHER_INFO((header), (cipher)) 
#define PEM_do_header(cipher, data, len, callback, u) IAmiSSL->PEM_do_header((cipher), (data), (len), (callback), (u)) 
#define PEM_read_bio(bp, name, header, data, len) IAmiSSL->PEM_read_bio((bp), (name), (header), (data), (len)) 
#define PEM_write_bio(bp, name, hdr, data, len) IAmiSSL->PEM_write_bio((bp), (name), (hdr), (data), (len)) 
#define PEM_bytes_read_bio(pdata, plen, pnm, name, bp, cb, u) IAmiSSL->PEM_bytes_read_bio((pdata), (plen), (pnm), (name), (bp), (cb), (u)) 
#define PEM_ASN1_read_bio(d2i, name, bp, x, cb, u) IAmiSSL->PEM_ASN1_read_bio((d2i), (name), (bp), (x), (cb), (u)) 
#define PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_ASN1_write_bio((i2d), (name), (bp), (x), (enc), (kstr), (klen), (cb), (u)) 
#define PEM_X509_INFO_read_bio(bp, sk, cb, u) IAmiSSL->PEM_X509_INFO_read_bio((bp), (sk), (cb), (u)) 
#define PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cd, u) IAmiSSL->PEM_X509_INFO_write_bio((bp), (xi), (enc), (kstr), (klen), (cd), (u)) 
#define PEM_SealInit(ctx, type, md_type, ek, ekl, iv, pubk, npubk) IAmiSSL->PEM_SealInit((ctx), (type), (md_type), (ek), (ekl), (iv), (pubk), (npubk)) 
#define PEM_SealUpdate(ctx, out, outl, in, inl) IAmiSSL->PEM_SealUpdate((ctx), (out), (outl), (in), (inl)) 
#define PEM_SealFinal(ctx, sig, sigl, out, outl, priv) IAmiSSL->PEM_SealFinal((ctx), (sig), (sigl), (out), (outl), (priv)) 
#define PEM_SignInit(ctx, type) IAmiSSL->PEM_SignInit((ctx), (type)) 
#define PEM_SignUpdate(ctx, d, cnt) IAmiSSL->PEM_SignUpdate((ctx), (d), (cnt)) 
#define PEM_SignFinal(ctx, sigret, siglen, pkey) IAmiSSL->PEM_SignFinal((ctx), (sigret), (siglen), (pkey)) 
#define PEM_def_callback(buf, num, w, key) IAmiSSL->PEM_def_callback((buf), (num), (w), (key)) 
#define PEM_proc_type(buf, type) IAmiSSL->PEM_proc_type((buf), (type)) 
#define PEM_dek_info(buf, type, len, str) IAmiSSL->PEM_dek_info((buf), (type), (len), (str)) 
#define PEM_read_bio_X509(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509((bp), (x), (cb), (u)) 
#define PEM_write_bio_X509(bp, x) IAmiSSL->PEM_write_bio_X509((bp), (x)) 
#define PEM_read_bio_X509_AUX(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_AUX((bp), (x), (cb), (u)) 
#define PEM_write_bio_X509_AUX(bp, x) IAmiSSL->PEM_write_bio_X509_AUX((bp), (x)) 
#define PEM_read_bio_X509_REQ(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_REQ((bp), (x), (cb), (u)) 
#define PEM_write_bio_X509_REQ(bp, x) IAmiSSL->PEM_write_bio_X509_REQ((bp), (x)) 
#define PEM_write_bio_X509_REQ_NEW(bp, x) IAmiSSL->PEM_write_bio_X509_REQ_NEW((bp), (x)) 
#define PEM_read_bio_X509_CRL(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_CRL((bp), (x), (cb), (u)) 
#define PEM_write_bio_X509_CRL(bp, x) IAmiSSL->PEM_write_bio_X509_CRL((bp), (x)) 
#define PEM_read_bio_PKCS7(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS7((bp), (x), (cb), (u)) 
#define PEM_write_bio_PKCS7(bp, x) IAmiSSL->PEM_write_bio_PKCS7((bp), (x)) 
#define PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bp, x, cb, u) IAmiSSL->PEM_read_bio_NETSCAPE_CERT_SEQUENCE((bp), (x), (cb), (u)) 
#define PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bp, x) IAmiSSL->PEM_write_bio_NETSCAPE_CERT_SEQUENCE((bp), (x)) 
#define PEM_read_bio_PKCS8(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS8((bp), (x), (cb), (u)) 
#define PEM_write_bio_PKCS8(bp, x) IAmiSSL->PEM_write_bio_PKCS8((bp), (x)) 
#define PEM_read_bio_PKCS8_PRIV_KEY_INFO(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS8_PRIV_KEY_INFO((bp), (x), (cb), (u)) 
#define PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp, x) IAmiSSL->PEM_write_bio_PKCS8_PRIV_KEY_INFO((bp), (x)) 
#define PEM_read_bio_RSAPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSAPrivateKey((bp), (x), (cb), (u)) 
#define PEM_write_bio_RSAPrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_RSAPrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u)) 
#define PEM_read_bio_RSAPublicKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSAPublicKey((bp), (x), (cb), (u)) 
#define PEM_write_bio_RSAPublicKey(bp, x) IAmiSSL->PEM_write_bio_RSAPublicKey((bp), (x)) 
#define PEM_read_bio_RSA_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSA_PUBKEY((bp), (x), (cb), (u)) 
#define PEM_write_bio_RSA_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_RSA_PUBKEY((bp), (x)) 
#define PEM_read_bio_DSAPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSAPrivateKey((bp), (x), (cb), (u)) 
#define PEM_write_bio_DSAPrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_DSAPrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u)) 
#define PEM_read_bio_DSA_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSA_PUBKEY((bp), (x), (cb), (u)) 
#define PEM_write_bio_DSA_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_DSA_PUBKEY((bp), (x)) 
#define PEM_read_bio_DSAparams(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSAparams((bp), (x), (cb), (u)) 
#define PEM_write_bio_DSAparams(bp, x) IAmiSSL->PEM_write_bio_DSAparams((bp), (x)) 
#define PEM_read_bio_DHparams(bp, x, cb, u) IAmiSSL->PEM_read_bio_DHparams((bp), (x), (cb), (u)) 
#define PEM_write_bio_DHparams(bp, x) IAmiSSL->PEM_write_bio_DHparams((bp), (x)) 
#define PEM_read_bio_PrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_PrivateKey((bp), (x), (cb), (u)) 
#define PEM_write_bio_PrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u)) 
#define PEM_read_bio_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_PUBKEY((bp), (x), (cb), (u)) 
#define PEM_write_bio_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_PUBKEY((bp), (x)) 
#define PEM_write_bio_PKCS8PrivateKey_nid(bp, x, nid, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PKCS8PrivateKey_nid((bp), (x), (nid), (kstr), (klen), (cb), (u)) 
#define PEM_write_bio_PKCS8PrivateKey(a, b, c, d, a1, e, f) IAmiSSL->PEM_write_bio_PKCS8PrivateKey((a), (b), (c), (d), (a1), (e), (f)) 
#define i2d_PKCS8PrivateKey_bio(bp, x, enc, kstr, klen, cb, u) IAmiSSL->i2d_PKCS8PrivateKey_bio((bp), (x), (enc), (kstr), (klen), (cb), (u)) 
#define i2d_PKCS8PrivateKey_nid_bio(bp, x, nid, kstr, klen, cb, u) IAmiSSL->i2d_PKCS8PrivateKey_nid_bio((bp), (x), (nid), (kstr), (klen), (cb), (u)) 
#define d2i_PKCS8PrivateKey_bio(bp, x, cb, u) IAmiSSL->d2i_PKCS8PrivateKey_bio((bp), (x), (cb), (u)) 
#define ERR_load_PEM_strings() IAmiSSL->ERR_load_PEM_strings() 
#define PKCS12_x5092certbag(x509) IAmiSSL->PKCS12_x5092certbag((x509)) 
#define PKCS12_x509crl2certbag(crl) IAmiSSL->PKCS12_x509crl2certbag((crl)) 
#define PKCS12_certbag2x509(bag) IAmiSSL->PKCS12_certbag2x509((bag)) 
#define PKCS12_certbag2x509crl(bag) IAmiSSL->PKCS12_certbag2x509crl((bag)) 
#define PKCS12_item_pack_safebag(obj, it, nid1, nid2) IAmiSSL->PKCS12_item_pack_safebag((obj), (it), (nid1), (nid2)) 
#define PKCS12_MAKE_KEYBAG(p8) IAmiSSL->PKCS12_MAKE_KEYBAG((p8)) 
#define PKCS8_decrypt(p8, pass, passlen) IAmiSSL->PKCS8_decrypt((p8), (pass), (passlen)) 
#define PKCS12_decrypt_skey(bag, pass, passlen) IAmiSSL->PKCS12_decrypt_skey((bag), (pass), (passlen)) 
#define PKCS8_encrypt(pbe_nid, cipher, pass, passlen, salt, saltlen, iter, p8) IAmiSSL->PKCS8_encrypt((pbe_nid), (cipher), (pass), (passlen), (salt), (saltlen), (iter), (p8)) 
#define PKCS12_MAKE_SHKEYBAG(pbe_nid, pass, passlen, salt, saltlen, iter, p8) IAmiSSL->PKCS12_MAKE_SHKEYBAG((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (p8)) 
#define PKCS12_pack_p7data(sk) IAmiSSL->PKCS12_pack_p7data((sk)) 
#define PKCS12_unpack_p7data(p7) IAmiSSL->PKCS12_unpack_p7data((p7)) 
#define PKCS12_pack_p7encdata(pbe_nid, pass, passlen, salt, saltlen, iter, bags) IAmiSSL->PKCS12_pack_p7encdata((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (bags)) 
#define PKCS12_unpack_p7encdata(p7, pass, passlen) IAmiSSL->PKCS12_unpack_p7encdata((p7), (pass), (passlen)) 
#define PKCS12_pack_authsafes(p12, safes) IAmiSSL->PKCS12_pack_authsafes((p12), (safes)) 
#define PKCS12_unpack_authsafes(p12) IAmiSSL->PKCS12_unpack_authsafes((p12)) 
#define PKCS12_add_localkeyid(bag, name, namelen) IAmiSSL->PKCS12_add_localkeyid((bag), (name), (namelen)) 
#define PKCS12_add_friendlyname_asc(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_asc((bag), (name), (namelen)) 
#define PKCS12_add_CSPName_asc(bag, name, namelen) IAmiSSL->PKCS12_add_CSPName_asc((bag), (name), (namelen)) 
#define PKCS12_add_friendlyname_uni(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_uni((bag), (name), (namelen)) 
#define PKCS8_add_keyusage(p8, usage) IAmiSSL->PKCS8_add_keyusage((p8), (usage)) 
#define PKCS12_get_attr_gen(attrs, attr_nid) IAmiSSL->PKCS12_get_attr_gen((attrs), (attr_nid)) 
#define PKCS12_get_friendlyname(bag) IAmiSSL->PKCS12_get_friendlyname((bag)) 
#define PKCS12_pbe_crypt(algor, pass, passlen, in, inlen, data, datalen, en_de) IAmiSSL->PKCS12_pbe_crypt((algor), (pass), (passlen), (in), (inlen), (data), (datalen), (en_de)) 
#define PKCS12_item_decrypt_d2i(algor, it, pass, passlen, oct, zbuf) IAmiSSL->PKCS12_item_decrypt_d2i((algor), (it), (pass), (passlen), (oct), (zbuf)) 
#define PKCS12_item_i2d_encrypt(algor, it, pass, passlen, obj, zbuf) IAmiSSL->PKCS12_item_i2d_encrypt((algor), (it), (pass), (passlen), (obj), (zbuf)) 
#define PKCS12_init(mode) IAmiSSL->PKCS12_init((mode)) 
#define PKCS12_key_gen_asc(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_asc((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type)) 
#define PKCS12_key_gen_uni(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_uni((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type)) 
#define PKCS12_PBE_keyivgen(ctx, pass, passlen, param, cipher, md_type, en_de) IAmiSSL->PKCS12_PBE_keyivgen((ctx), (pass), (passlen), (param), (cipher), (md_type), (en_de)) 
#define PKCS12_gen_mac(p12, pass, passlen, mac, maclen) IAmiSSL->PKCS12_gen_mac((p12), (pass), (passlen), (mac), (maclen)) 
#define PKCS12_verify_mac(p12, pass, passlen) IAmiSSL->PKCS12_verify_mac((p12), (pass), (passlen)) 
#define PKCS12_set_mac(p12, pass, passlen, salt, saltlen, iter, md_type) IAmiSSL->PKCS12_set_mac((p12), (pass), (passlen), (salt), (saltlen), (iter), (md_type)) 
#define PKCS12_setup_mac(p12, iter, salt, saltlen, md_type) IAmiSSL->PKCS12_setup_mac((p12), (iter), (salt), (saltlen), (md_type)) 
#define OPENSSL_asc2uni(asc, asclen, uni, unilen) IAmiSSL->OPENSSL_asc2uni((asc), (asclen), (uni), (unilen)) 
#define OPENSSL_uni2asc(uni, unilen) IAmiSSL->OPENSSL_uni2asc((uni), (unilen)) 
#define PKCS12_new() IAmiSSL->PKCS12_new() 
#define PKCS12_free(a) IAmiSSL->PKCS12_free((a)) 
#define d2i_PKCS12(a, in, len) IAmiSSL->d2i_PKCS12((a), (in), (len)) 
#define i2d_PKCS12(a, out) IAmiSSL->i2d_PKCS12((a), (out)) 
#define PKCS12_it() IAmiSSL->PKCS12_it() 
#define PKCS12_MAC_DATA_new() IAmiSSL->PKCS12_MAC_DATA_new() 
#define PKCS12_MAC_DATA_free(a) IAmiSSL->PKCS12_MAC_DATA_free((a)) 
#define d2i_PKCS12_MAC_DATA(a, in, len) IAmiSSL->d2i_PKCS12_MAC_DATA((a), (in), (len)) 
#define i2d_PKCS12_MAC_DATA(a, out) IAmiSSL->i2d_PKCS12_MAC_DATA((a), (out)) 
#define PKCS12_MAC_DATA_it() IAmiSSL->PKCS12_MAC_DATA_it() 
#define PKCS12_SAFEBAG_new() IAmiSSL->PKCS12_SAFEBAG_new() 
#define PKCS12_SAFEBAG_free(a) IAmiSSL->PKCS12_SAFEBAG_free((a)) 
#define d2i_PKCS12_SAFEBAG(a, in, len) IAmiSSL->d2i_PKCS12_SAFEBAG((a), (in), (len)) 
#define i2d_PKCS12_SAFEBAG(a, out) IAmiSSL->i2d_PKCS12_SAFEBAG((a), (out)) 
#define PKCS12_SAFEBAG_it() IAmiSSL->PKCS12_SAFEBAG_it() 
#define PKCS12_BAGS_new() IAmiSSL->PKCS12_BAGS_new() 
#define PKCS12_BAGS_free(a) IAmiSSL->PKCS12_BAGS_free((a)) 
#define d2i_PKCS12_BAGS(a, in, len) IAmiSSL->d2i_PKCS12_BAGS((a), (in), (len)) 
#define i2d_PKCS12_BAGS(a, out) IAmiSSL->i2d_PKCS12_BAGS((a), (out)) 
#define PKCS12_BAGS_it() IAmiSSL->PKCS12_BAGS_it() 
#define PKCS12_SAFEBAGS_it() IAmiSSL->PKCS12_SAFEBAGS_it() 
#define PKCS12_AUTHSAFES_it() IAmiSSL->PKCS12_AUTHSAFES_it() 
#define PKCS12_PBE_add() IAmiSSL->PKCS12_PBE_add() 
#define PKCS12_parse(p12, pass, pkey, cert, ca) IAmiSSL->PKCS12_parse((p12), (pass), (pkey), (cert), (ca)) 
#define PKCS12_create(pass, name, pkey, cert, ca, nid_key, nid_cert, iter, mac_iter, keytype) IAmiSSL->PKCS12_create((pass), (name), (pkey), (cert), (ca), (nid_key), (nid_cert), (iter), (mac_iter), (keytype)) 
#define i2d_PKCS12_bio(bp, p12) IAmiSSL->i2d_PKCS12_bio((bp), (p12)) 
#define d2i_PKCS12_bio(bp, p12) IAmiSSL->d2i_PKCS12_bio((bp), (p12)) 
#define PKCS12_newpass(p12, oldpass, newpass) IAmiSSL->PKCS12_newpass((p12), (oldpass), (newpass)) 
#define ERR_load_PKCS12_strings() IAmiSSL->ERR_load_PKCS12_strings() 
#define PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len) IAmiSSL->PKCS7_ISSUER_AND_SERIAL_digest((data), (type), (md), (len)) 
#define PKCS7_dup(p7) IAmiSSL->PKCS7_dup((p7)) 
#define d2i_PKCS7_bio(bp, p7) IAmiSSL->d2i_PKCS7_bio((bp), (p7)) 
#define i2d_PKCS7_bio(bp, p7) IAmiSSL->i2d_PKCS7_bio((bp), (p7)) 
#define PKCS7_ISSUER_AND_SERIAL_new() IAmiSSL->PKCS7_ISSUER_AND_SERIAL_new() 
#define PKCS7_ISSUER_AND_SERIAL_free(a) IAmiSSL->PKCS7_ISSUER_AND_SERIAL_free((a)) 
#define d2i_PKCS7_ISSUER_AND_SERIAL(a, in, len) IAmiSSL->d2i_PKCS7_ISSUER_AND_SERIAL((a), (in), (len)) 
#define i2d_PKCS7_ISSUER_AND_SERIAL(a, out) IAmiSSL->i2d_PKCS7_ISSUER_AND_SERIAL((a), (out)) 
#define PKCS7_ISSUER_AND_SERIAL_it() IAmiSSL->PKCS7_ISSUER_AND_SERIAL_it() 
#define PKCS7_SIGNER_INFO_new() IAmiSSL->PKCS7_SIGNER_INFO_new() 
#define PKCS7_SIGNER_INFO_free(a) IAmiSSL->PKCS7_SIGNER_INFO_free((a)) 
#define d2i_PKCS7_SIGNER_INFO(a, in, len) IAmiSSL->d2i_PKCS7_SIGNER_INFO((a), (in), (len)) 
#define i2d_PKCS7_SIGNER_INFO(a, out) IAmiSSL->i2d_PKCS7_SIGNER_INFO((a), (out)) 
#define PKCS7_SIGNER_INFO_it() IAmiSSL->PKCS7_SIGNER_INFO_it() 
#define PKCS7_RECIP_INFO_new() IAmiSSL->PKCS7_RECIP_INFO_new() 
#define PKCS7_RECIP_INFO_free(a) IAmiSSL->PKCS7_RECIP_INFO_free((a)) 
#define d2i_PKCS7_RECIP_INFO(a, in, len) IAmiSSL->d2i_PKCS7_RECIP_INFO((a), (in), (len)) 
#define i2d_PKCS7_RECIP_INFO(a, out) IAmiSSL->i2d_PKCS7_RECIP_INFO((a), (out)) 
#define PKCS7_RECIP_INFO_it() IAmiSSL->PKCS7_RECIP_INFO_it() 
#define PKCS7_SIGNED_new() IAmiSSL->PKCS7_SIGNED_new() 
#define PKCS7_SIGNED_free(a) IAmiSSL->PKCS7_SIGNED_free((a)) 
#define d2i_PKCS7_SIGNED(a, in, len) IAmiSSL->d2i_PKCS7_SIGNED((a), (in), (len)) 
#define i2d_PKCS7_SIGNED(a, out) IAmiSSL->i2d_PKCS7_SIGNED((a), (out)) 
#define PKCS7_SIGNED_it() IAmiSSL->PKCS7_SIGNED_it() 
#define PKCS7_ENC_CONTENT_new() IAmiSSL->PKCS7_ENC_CONTENT_new() 
#define PKCS7_ENC_CONTENT_free(a) IAmiSSL->PKCS7_ENC_CONTENT_free((a)) 
#define d2i_PKCS7_ENC_CONTENT(a, in, len) IAmiSSL->d2i_PKCS7_ENC_CONTENT((a), (in), (len)) 
#define i2d_PKCS7_ENC_CONTENT(a, out) IAmiSSL->i2d_PKCS7_ENC_CONTENT((a), (out)) 
#define PKCS7_ENC_CONTENT_it() IAmiSSL->PKCS7_ENC_CONTENT_it() 
#define PKCS7_ENVELOPE_new() IAmiSSL->PKCS7_ENVELOPE_new() 
#define PKCS7_ENVELOPE_free(a) IAmiSSL->PKCS7_ENVELOPE_free((a)) 
#define d2i_PKCS7_ENVELOPE(a, in, len) IAmiSSL->d2i_PKCS7_ENVELOPE((a), (in), (len)) 
#define i2d_PKCS7_ENVELOPE(a, out) IAmiSSL->i2d_PKCS7_ENVELOPE((a), (out)) 
#define PKCS7_ENVELOPE_it() IAmiSSL->PKCS7_ENVELOPE_it() 
#define PKCS7_SIGN_ENVELOPE_new() IAmiSSL->PKCS7_SIGN_ENVELOPE_new() 
#define PKCS7_SIGN_ENVELOPE_free(a) IAmiSSL->PKCS7_SIGN_ENVELOPE_free((a)) 
#define d2i_PKCS7_SIGN_ENVELOPE(a, in, len) IAmiSSL->d2i_PKCS7_SIGN_ENVELOPE((a), (in), (len)) 
#define i2d_PKCS7_SIGN_ENVELOPE(a, out) IAmiSSL->i2d_PKCS7_SIGN_ENVELOPE((a), (out)) 
#define PKCS7_SIGN_ENVELOPE_it() IAmiSSL->PKCS7_SIGN_ENVELOPE_it() 
#define PKCS7_DIGEST_new() IAmiSSL->PKCS7_DIGEST_new() 
#define PKCS7_DIGEST_free(a) IAmiSSL->PKCS7_DIGEST_free((a)) 
#define d2i_PKCS7_DIGEST(a, in, len) IAmiSSL->d2i_PKCS7_DIGEST((a), (in), (len)) 
#define i2d_PKCS7_DIGEST(a, out) IAmiSSL->i2d_PKCS7_DIGEST((a), (out)) 
#define PKCS7_DIGEST_it() IAmiSSL->PKCS7_DIGEST_it() 
#define PKCS7_ENCRYPT_new() IAmiSSL->PKCS7_ENCRYPT_new() 
#define PKCS7_ENCRYPT_free(a) IAmiSSL->PKCS7_ENCRYPT_free((a)) 
#define d2i_PKCS7_ENCRYPT(a, in, len) IAmiSSL->d2i_PKCS7_ENCRYPT((a), (in), (len)) 
#define i2d_PKCS7_ENCRYPT(a, out) IAmiSSL->i2d_PKCS7_ENCRYPT((a), (out)) 
#define PKCS7_ENCRYPT_it() IAmiSSL->PKCS7_ENCRYPT_it() 
#define PKCS7_new() IAmiSSL->PKCS7_new() 
#define PKCS7_free(a) IAmiSSL->PKCS7_free((a)) 
#define d2i_PKCS7(a, in, len) IAmiSSL->d2i_PKCS7((a), (in), (len)) 
#define i2d_PKCS7(a, out) IAmiSSL->i2d_PKCS7((a), (out)) 
#define PKCS7_it() IAmiSSL->PKCS7_it() 
#define PKCS7_ATTR_SIGN_it() IAmiSSL->PKCS7_ATTR_SIGN_it() 
#define PKCS7_ATTR_VERIFY_it() IAmiSSL->PKCS7_ATTR_VERIFY_it() 
#define PKCS7_ctrl(p7, cmd, larg, parg) IAmiSSL->PKCS7_ctrl((p7), (cmd), (larg), (parg)) 
#define PKCS7_set_type(p7, type) IAmiSSL->PKCS7_set_type((p7), (type)) 
#define PKCS7_set_content(p7, p7_data) IAmiSSL->PKCS7_set_content((p7), (p7_data)) 
#define PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst) IAmiSSL->PKCS7_SIGNER_INFO_set((p7i), (x509), (pkey), (dgst)) 
#define PKCS7_add_signer(p7, p7i) IAmiSSL->PKCS7_add_signer((p7), (p7i)) 
#define PKCS7_add_certificate(p7, x509) IAmiSSL->PKCS7_add_certificate((p7), (x509)) 
#define PKCS7_add_crl(p7, x509) IAmiSSL->PKCS7_add_crl((p7), (x509)) 
#define PKCS7_content_new(p7, nid) IAmiSSL->PKCS7_content_new((p7), (nid)) 
#define PKCS7_dataVerify(cert_store, ctx, bio, p7, si) IAmiSSL->PKCS7_dataVerify((cert_store), (ctx), (bio), (p7), (si)) 
#define PKCS7_signatureVerify(bio, p7, si, x509) IAmiSSL->PKCS7_signatureVerify((bio), (p7), (si), (x509)) 
#define PKCS7_dataInit(p7, bio) IAmiSSL->PKCS7_dataInit((p7), (bio)) 
#define PKCS7_dataFinal(p7, bio) IAmiSSL->PKCS7_dataFinal((p7), (bio)) 
#define PKCS7_dataDecode(p7, pkey, in_bio, pcert) IAmiSSL->PKCS7_dataDecode((p7), (pkey), (in_bio), (pcert)) 
#define PKCS7_add_signature(p7, x509, pkey, dgst) IAmiSSL->PKCS7_add_signature((p7), (x509), (pkey), (dgst)) 
#define PKCS7_cert_from_signer_info(p7, si) IAmiSSL->PKCS7_cert_from_signer_info((p7), (si)) 
#define PKCS7_get_signer_info(p7) IAmiSSL->PKCS7_get_signer_info((p7)) 
#define PKCS7_add_recipient(p7, x509) IAmiSSL->PKCS7_add_recipient((p7), (x509)) 
#define PKCS7_add_recipient_info(p7, ri) IAmiSSL->PKCS7_add_recipient_info((p7), (ri)) 
#define PKCS7_RECIP_INFO_set(p7i, x509) IAmiSSL->PKCS7_RECIP_INFO_set((p7i), (x509)) 
#define PKCS7_set_cipher(p7, cipher) IAmiSSL->PKCS7_set_cipher((p7), (cipher)) 
#define PKCS7_get_issuer_and_serial(p7, idx) IAmiSSL->PKCS7_get_issuer_and_serial((p7), (idx)) 
#define PKCS7_digest_from_attributes(sk) IAmiSSL->PKCS7_digest_from_attributes((sk)) 
#define PKCS7_add_signed_attribute(p7si, nid, type, data) IAmiSSL->PKCS7_add_signed_attribute((p7si), (nid), (type), (data)) 
#define PKCS7_add_attribute(p7si, nid, atrtype, value) IAmiSSL->PKCS7_add_attribute((p7si), (nid), (atrtype), (value)) 
#define PKCS7_get_attribute(si, nid) IAmiSSL->PKCS7_get_attribute((si), (nid)) 
#define PKCS7_get_signed_attribute(si, nid) IAmiSSL->PKCS7_get_signed_attribute((si), (nid)) 
#define PKCS7_set_signed_attributes(p7si, sk) IAmiSSL->PKCS7_set_signed_attributes((p7si), (sk)) 
#define PKCS7_set_attributes(p7si, sk) IAmiSSL->PKCS7_set_attributes((p7si), (sk)) 
#define PKCS7_sign(signcert, pkey, certs, data, flags) IAmiSSL->PKCS7_sign((signcert), (pkey), (certs), (data), (flags)) 
#define PKCS7_verify(p7, certs, store, indata, out, flags) IAmiSSL->PKCS7_verify((p7), (certs), (store), (indata), (out), (flags)) 
#define PKCS7_get0_signers(p7, certs, flags) IAmiSSL->PKCS7_get0_signers((p7), (certs), (flags)) 
#define PKCS7_encrypt(certs, in, cipher, flags) IAmiSSL->PKCS7_encrypt((certs), (in), (cipher), (flags)) 
#define PKCS7_decrypt(p7, pkey, cert, data, flags) IAmiSSL->PKCS7_decrypt((p7), (pkey), (cert), (data), (flags)) 
#define PKCS7_add_attrib_smimecap(si, cap) IAmiSSL->PKCS7_add_attrib_smimecap((si), (cap)) 
#define PKCS7_get_smimecap(si) IAmiSSL->PKCS7_get_smimecap((si)) 
#define PKCS7_simple_smimecap(sk, nid, arg) IAmiSSL->PKCS7_simple_smimecap((sk), (nid), (arg)) 
#define SMIME_write_PKCS7(bio, p7, data, flags) IAmiSSL->SMIME_write_PKCS7((bio), (p7), (data), (flags)) 
#define SMIME_read_PKCS7(bio, bcont) IAmiSSL->SMIME_read_PKCS7((bio), (bcont)) 
#define SMIME_crlf_copy(in, out, flags) IAmiSSL->SMIME_crlf_copy((in), (out), (flags)) 
#define SMIME_text(in, out) IAmiSSL->SMIME_text((in), (out)) 
#define ERR_load_PKCS7_strings() IAmiSSL->ERR_load_PKCS7_strings() 
#define RAND_set_rand_method(meth) IAmiSSL->RAND_set_rand_method((meth)) 
#define RAND_get_rand_method() IAmiSSL->RAND_get_rand_method() 
#define RAND_SSLeay() IAmiSSL->RAND_SSLeay() 
#define RAND_cleanup() IAmiSSL->RAND_cleanup() 
#define RAND_bytes(buf, num) IAmiSSL->RAND_bytes((buf), (num)) 
#define RAND_pseudo_bytes(buf, num) IAmiSSL->RAND_pseudo_bytes((buf), (num)) 
#define RAND_seed(buf, num) IAmiSSL->RAND_seed((buf), (num)) 
#define RAND_add(buf, num, entropy) IAmiSSL->RAND_add((buf), (num), (entropy)) 
#define RAND_load_file(file, max_bytes) IAmiSSL->RAND_load_file((file), (max_bytes)) 
#define RAND_write_file(file) IAmiSSL->RAND_write_file((file)) 
#define RAND_file_name(file, num) IAmiSSL->RAND_file_name((file), (num)) 
#define RAND_status() IAmiSSL->RAND_status() 
#define RAND_query_egd_bytes(path, buf, bytes) IAmiSSL->RAND_query_egd_bytes((path), (buf), (bytes)) 
#define RAND_egd(path) IAmiSSL->RAND_egd((path)) 
#define RAND_egd_bytes(path, bytes) IAmiSSL->RAND_egd_bytes((path), (bytes)) 
#define RAND_poll() IAmiSSL->RAND_poll() 
#define ERR_load_RAND_strings() IAmiSSL->ERR_load_RAND_strings() 
#define SSL_CTX_set_msg_callback(ctx, cb) IAmiSSL->SSL_CTX_set_msg_callback((ctx), (cb)) 
#define SSL_set_msg_callback(ssl, cb) IAmiSSL->SSL_set_msg_callback((ssl), (cb)) 
#define SSL_CTX_sessions(ctx) IAmiSSL->SSL_CTX_sessions((ctx)) 
#define SSL_get_finished(s, buf, count) IAmiSSL->SSL_get_finished((s), (buf), (count)) 
#define SSL_get_peer_finished(s, buf, count) IAmiSSL->SSL_get_peer_finished((s), (buf), (count)) 
#define BIO_f_ssl() IAmiSSL->BIO_f_ssl() 
#define BIO_new_ssl(ctx, client) IAmiSSL->BIO_new_ssl((ctx), (client)) 
#define BIO_new_ssl_connect(ctx) IAmiSSL->BIO_new_ssl_connect((ctx)) 
#define BIO_new_buffer_ssl_connect(ctx) IAmiSSL->BIO_new_buffer_ssl_connect((ctx)) 
#define BIO_ssl_copy_session_id(to, from) IAmiSSL->BIO_ssl_copy_session_id((to), (from)) 
#define BIO_ssl_shutdown(ssl_bio) IAmiSSL->BIO_ssl_shutdown((ssl_bio)) 
#define SSL_CTX_set_cipher_list(a, str) IAmiSSL->SSL_CTX_set_cipher_list((a), (str)) 
#define SSL_CTX_new(meth) IAmiSSL->SSL_CTX_new((meth)) 
#define SSL_CTX_free(a) IAmiSSL->SSL_CTX_free((a)) 
#define SSL_CTX_set_timeout(ctx, t) IAmiSSL->SSL_CTX_set_timeout((ctx), (t)) 
#define SSL_CTX_get_timeout(ctx) IAmiSSL->SSL_CTX_get_timeout((ctx)) 
#define SSL_CTX_get_cert_store(a) IAmiSSL->SSL_CTX_get_cert_store((a)) 
#define SSL_CTX_set_cert_store(a, b) IAmiSSL->SSL_CTX_set_cert_store((a), (b)) 
#define SSL_want(s) IAmiSSL->SSL_want((s)) 
#define SSL_clear(s) IAmiSSL->SSL_clear((s)) 
#define SSL_CTX_flush_sessions(ctx, tm) IAmiSSL->SSL_CTX_flush_sessions((ctx), (tm)) 
#define SSL_get_current_cipher(s) IAmiSSL->SSL_get_current_cipher((s)) 
#define SSL_CIPHER_get_bits(c, alg_bits) IAmiSSL->SSL_CIPHER_get_bits((c), (alg_bits)) 
#define SSL_CIPHER_get_version(c) IAmiSSL->SSL_CIPHER_get_version((c)) 
#define SSL_CIPHER_get_name(c) IAmiSSL->SSL_CIPHER_get_name((c)) 
#define SSL_CIPHER_get_mac(cipher) IAmiSSL->SSL_CIPHER_get_mac((cipher)) 
#define SSL_CIPHER_get_encryption(cipher) IAmiSSL->SSL_CIPHER_get_encryption((cipher)) 
#define SSL_CIPHER_get_authentication(cipher) IAmiSSL->SSL_CIPHER_get_authentication((cipher)) 
#define SSL_CIPHER_get_key_exchange(cipher) IAmiSSL->SSL_CIPHER_get_key_exchange((cipher)) 
#define SSL_CIPHER_get_export(cipher) IAmiSSL->SSL_CIPHER_get_export((cipher)) 
#define SSL_get_fd(s) IAmiSSL->SSL_get_fd((s)) 
#define SSL_get_rfd(s) IAmiSSL->SSL_get_rfd((s)) 
#define SSL_get_wfd(s) IAmiSSL->SSL_get_wfd((s)) 
#define SSL_get_cipher_list(s, n) IAmiSSL->SSL_get_cipher_list((s), (n)) 
#define SSL_get_shared_ciphers(s, buf, len) IAmiSSL->SSL_get_shared_ciphers((s), (buf), (len)) 
#define SSL_get_read_ahead(s) IAmiSSL->SSL_get_read_ahead((s)) 
#define SSL_pending(s) IAmiSSL->SSL_pending((s)) 
#define SSL_set_fd(s, fd) IAmiSSL->SSL_set_fd((s), (fd)) 
#define SSL_set_rfd(s, fd) IAmiSSL->SSL_set_rfd((s), (fd)) 
#define SSL_set_wfd(s, fd) IAmiSSL->SSL_set_wfd((s), (fd)) 
#define SSL_set_bio(s, rbio, wbio) IAmiSSL->SSL_set_bio((s), (rbio), (wbio)) 
#define SSL_get_rbio(s) IAmiSSL->SSL_get_rbio((s)) 
#define SSL_get_wbio(s) IAmiSSL->SSL_get_wbio((s)) 
#define SSL_set_cipher_list(s, str) IAmiSSL->SSL_set_cipher_list((s), (str)) 
#define SSL_set_read_ahead(s, yes) IAmiSSL->SSL_set_read_ahead((s), (yes)) 
#define SSL_get_verify_mode(s) IAmiSSL->SSL_get_verify_mode((s)) 
#define SSL_get_verify_depth(s) IAmiSSL->SSL_get_verify_depth((s)) 
#define SSL_get_verify_callback(s) IAmiSSL->SSL_get_verify_callback((s)) 
#define SSL_set_verify(s, mode, callback) IAmiSSL->SSL_set_verify((s), (mode), (callback)) 
#define SSL_set_verify_depth(s, depth) IAmiSSL->SSL_set_verify_depth((s), (depth)) 
#define SSL_use_RSAPrivateKey(ssl, rsa) IAmiSSL->SSL_use_RSAPrivateKey((ssl), (rsa)) 
#define SSL_use_RSAPrivateKey_ASN1(ssl, d, len) IAmiSSL->SSL_use_RSAPrivateKey_ASN1((ssl), (d), (len)) 
#define SSL_use_PrivateKey(ssl, pkey) IAmiSSL->SSL_use_PrivateKey((ssl), (pkey)) 
#define SSL_use_PrivateKey_ASN1(pk, ssl, d, len) IAmiSSL->SSL_use_PrivateKey_ASN1((pk), (ssl), (d), (len)) 
#define SSL_use_certificate(ssl, x) IAmiSSL->SSL_use_certificate((ssl), (x)) 
#define SSL_use_certificate_ASN1(ssl, d, len) IAmiSSL->SSL_use_certificate_ASN1((ssl), (d), (len)) 
#define SSL_use_RSAPrivateKey_file(ssl, file, type) IAmiSSL->SSL_use_RSAPrivateKey_file((ssl), (file), (type)) 
#define SSL_use_PrivateKey_file(ssl, file, type) IAmiSSL->SSL_use_PrivateKey_file((ssl), (file), (type)) 
#define SSL_use_certificate_file(ssl, file, type) IAmiSSL->SSL_use_certificate_file((ssl), (file), (type)) 
#define SSL_CTX_use_RSAPrivateKey_file(ctx, file, type) IAmiSSL->SSL_CTX_use_RSAPrivateKey_file((ctx), (file), (type)) 
#define SSL_CTX_use_PrivateKey_file(ctx, file, type) IAmiSSL->SSL_CTX_use_PrivateKey_file((ctx), (file), (type)) 
#define SSL_CTX_use_certificate_file(ctx, file, type) IAmiSSL->SSL_CTX_use_certificate_file((ctx), (file), (type)) 
#define SSL_CTX_use_certificate_chain_file(ctx, file) IAmiSSL->SSL_CTX_use_certificate_chain_file((ctx), (file)) 
#define SSL_load_client_CA_file(file) IAmiSSL->SSL_load_client_CA_file((file)) 
#define SSL_add_file_cert_subjects_to_stack(stackCAs, file) IAmiSSL->SSL_add_file_cert_subjects_to_stack((stackCAs), (file)) 
#define SSL_add_dir_cert_subjects_to_stack(stackCAs, dir) IAmiSSL->SSL_add_dir_cert_subjects_to_stack((stackCAs), (dir)) 
#define SSL_load_error_strings() IAmiSSL->SSL_load_error_strings() 
#define SSL_state_string(s) IAmiSSL->SSL_state_string((s)) 
#define SSL_rstate_string(s) IAmiSSL->SSL_rstate_string((s)) 
#define SSL_state_string_long(s) IAmiSSL->SSL_state_string_long((s)) 
#define SSL_rstate_string_long(s) IAmiSSL->SSL_rstate_string_long((s)) 
#define SSL_SESSION_get_time(s) IAmiSSL->SSL_SESSION_get_time((s)) 
#define SSL_SESSION_set_time(s, t) IAmiSSL->SSL_SESSION_set_time((s), (t)) 
#define SSL_SESSION_get_timeout(s) IAmiSSL->SSL_SESSION_get_timeout((s)) 
#define SSL_SESSION_set_timeout(s, t) IAmiSSL->SSL_SESSION_set_timeout((s), (t)) 
#define SSL_copy_session_id(to, from) IAmiSSL->SSL_copy_session_id((to), (from)) 
#define SSL_SESSION_new() IAmiSSL->SSL_SESSION_new() 
#define SSL_SESSION_print(fp, ses) IAmiSSL->SSL_SESSION_print((fp), (ses)) 
#define SSL_SESSION_free(ses) IAmiSSL->SSL_SESSION_free((ses)) 
#define i2d_SSL_SESSION(in, pp) IAmiSSL->i2d_SSL_SESSION((in), (pp)) 
#define SSL_set_session(to, session) IAmiSSL->SSL_set_session((to), (session)) 
#define SSL_CTX_add_session(s, c) IAmiSSL->SSL_CTX_add_session((s), (c)) 
#define SSL_CTX_remove_session(a1, c) IAmiSSL->SSL_CTX_remove_session((a1), (c)) 
#define SSL_CTX_set_generate_session_id(a, b) IAmiSSL->SSL_CTX_set_generate_session_id((a), (b)) 
#define SSL_set_generate_session_id(a, b) IAmiSSL->SSL_set_generate_session_id((a), (b)) 
#define SSL_has_matching_session_id(ssl, id, id_len) IAmiSSL->SSL_has_matching_session_id((ssl), (id), (id_len)) 
#define d2i_SSL_SESSION(a, pp, length) IAmiSSL->d2i_SSL_SESSION((a), (pp), (length)) 
#define SSL_get_peer_certificate(s) IAmiSSL->SSL_get_peer_certificate((s)) 
#define SSL_get_peer_cert_chain(s) IAmiSSL->SSL_get_peer_cert_chain((s)) 
#define SSL_CTX_get_verify_mode(ctx) IAmiSSL->SSL_CTX_get_verify_mode((ctx)) 
#define SSL_CTX_get_verify_depth(ctx) IAmiSSL->SSL_CTX_get_verify_depth((ctx)) 
#define SSL_CTX_get_verify_callback(ctx) IAmiSSL->SSL_CTX_get_verify_callback((ctx)) 
#define SSL_CTX_set_verify(ctx, mode, callback) IAmiSSL->SSL_CTX_set_verify((ctx), (mode), (callback)) 
#define SSL_CTX_set_verify_depth(ctx, depth) IAmiSSL->SSL_CTX_set_verify_depth((ctx), (depth)) 
#define SSL_CTX_set_cert_verify_callback(ctx, cb, arg) IAmiSSL->SSL_CTX_set_cert_verify_callback((ctx), (cb), (arg)) 
#define SSL_CTX_use_RSAPrivateKey(ctx, rsa) IAmiSSL->SSL_CTX_use_RSAPrivateKey((ctx), (rsa)) 
#define SSL_CTX_use_RSAPrivateKey_ASN1(ctx, d, len) IAmiSSL->SSL_CTX_use_RSAPrivateKey_ASN1((ctx), (d), (len)) 
#define SSL_CTX_use_PrivateKey(ctx, pkey) IAmiSSL->SSL_CTX_use_PrivateKey((ctx), (pkey)) 
#define SSL_CTX_use_PrivateKey_ASN1(pk, ctx, d, len) IAmiSSL->SSL_CTX_use_PrivateKey_ASN1((pk), (ctx), (d), (len)) 
#define SSL_CTX_use_certificate(ctx, x) IAmiSSL->SSL_CTX_use_certificate((ctx), (x)) 
#define SSL_CTX_use_certificate_ASN1(ctx, len, d) IAmiSSL->SSL_CTX_use_certificate_ASN1((ctx), (len), (d)) 
#define SSL_CTX_set_default_passwd_cb(ctx, cb) IAmiSSL->SSL_CTX_set_default_passwd_cb((ctx), (cb)) 
#define SSL_CTX_set_default_passwd_cb_userdata(ctx, u) IAmiSSL->SSL_CTX_set_default_passwd_cb_userdata((ctx), (u)) 
#define SSL_CTX_check_private_key(ctx) IAmiSSL->SSL_CTX_check_private_key((ctx)) 
#define SSL_check_private_key(ctx) IAmiSSL->SSL_check_private_key((ctx)) 
#define SSL_CTX_set_session_id_context(ctx, sid_ctx, sid_ctx_len) IAmiSSL->SSL_CTX_set_session_id_context((ctx), (sid_ctx), (sid_ctx_len)) 
#define SSL_new(ctx) IAmiSSL->SSL_new((ctx)) 
#define SSL_set_session_id_context(ssl, sid_ctx, sid_ctx_len) IAmiSSL->SSL_set_session_id_context((ssl), (sid_ctx), (sid_ctx_len)) 
#define SSL_CTX_set_purpose(s, purpose) IAmiSSL->SSL_CTX_set_purpose((s), (purpose)) 
#define SSL_set_purpose(s, purpose) IAmiSSL->SSL_set_purpose((s), (purpose)) 
#define SSL_CTX_set_trust(s, trust) IAmiSSL->SSL_CTX_set_trust((s), (trust)) 
#define SSL_set_trust(s, trust) IAmiSSL->SSL_set_trust((s), (trust)) 
#define SSL_free(ssl) IAmiSSL->SSL_free((ssl)) 
#define SSL_accept(ssl) IAmiSSL->SSL_accept((ssl)) 
#define SSL_connect(ssl) IAmiSSL->SSL_connect((ssl)) 
#define SSL_read(ssl, buf, num) IAmiSSL->SSL_read((ssl), (buf), (num)) 
#define SSL_peek(ssl, buf, num) IAmiSSL->SSL_peek((ssl), (buf), (num)) 
#define SSL_write(ssl, buf, num) IAmiSSL->SSL_write((ssl), (buf), (num)) 
#define SSL_ctrl(ssl, cmd, larg, parg) IAmiSSL->SSL_ctrl((ssl), (cmd), (larg), (parg)) 
#define SSL_callback_ctrl(a, a1, b) IAmiSSL->SSL_callback_ctrl((a), (a1), (b)) 
#define SSL_CTX_ctrl(ctx, cmd, larg, parg) IAmiSSL->SSL_CTX_ctrl((ctx), (cmd), (larg), (parg)) 
#define SSL_CTX_callback_ctrl(a1, a2, a3) IAmiSSL->SSL_CTX_callback_ctrl((a1), (a2), (a3)) 
#define SSL_get_error(s, ret_code) IAmiSSL->SSL_get_error((s), (ret_code)) 
#define SSL_get_version(s) IAmiSSL->SSL_get_version((s)) 
#define SSL_CTX_set_ssl_version(ctx, meth) IAmiSSL->SSL_CTX_set_ssl_version((ctx), (meth)) 
#define SSLv2_method() IAmiSSL->SSLv2_method() 
#define SSLv2_server_method() IAmiSSL->SSLv2_server_method() 
#define SSLv2_client_method() IAmiSSL->SSLv2_client_method() 
#define SSLv3_method() IAmiSSL->SSLv3_method() 
#define SSLv3_server_method() IAmiSSL->SSLv3_server_method() 
#define SSLv3_client_method() IAmiSSL->SSLv3_client_method() 
#define SSLv23_method() IAmiSSL->SSLv23_method() 
#define SSLv23_server_method() IAmiSSL->SSLv23_server_method() 
#define SSLv23_client_method() IAmiSSL->SSLv23_client_method() 
#define TLSv1_method() IAmiSSL->TLSv1_method() 
#define TLSv1_server_method() IAmiSSL->TLSv1_server_method() 
#define TLSv1_client_method() IAmiSSL->TLSv1_client_method() 
#define SSL_get_ciphers(s) IAmiSSL->SSL_get_ciphers((s)) 
#define SSL_do_handshake(s) IAmiSSL->SSL_do_handshake((s)) 
#define SSL_renegotiate(s) IAmiSSL->SSL_renegotiate((s)) 
#define SSL_renegotiate_pending(s) IAmiSSL->SSL_renegotiate_pending((s)) 
#define SSL_shutdown(s) IAmiSSL->SSL_shutdown((s)) 
#define SSL_get_ssl_method(s) IAmiSSL->SSL_get_ssl_method((s)) 
#define SSL_set_ssl_method(s, method) IAmiSSL->SSL_set_ssl_method((s), (method)) 
#define SSL_alert_type_string_long(value) IAmiSSL->SSL_alert_type_string_long((value)) 
#define SSL_alert_type_string(value) IAmiSSL->SSL_alert_type_string((value)) 
#define SSL_alert_desc_string_long(value) IAmiSSL->SSL_alert_desc_string_long((value)) 
#define SSL_alert_desc_string(value) IAmiSSL->SSL_alert_desc_string((value)) 
#define SSL_set_client_CA_list(s, name_list) IAmiSSL->SSL_set_client_CA_list((s), (name_list)) 
#define SSL_CTX_set_client_CA_list(ctx, name_list) IAmiSSL->SSL_CTX_set_client_CA_list((ctx), (name_list)) 
#define SSL_get_client_CA_list(s) IAmiSSL->SSL_get_client_CA_list((s)) 
#define SSL_CTX_get_client_CA_list(s) IAmiSSL->SSL_CTX_get_client_CA_list((s)) 
#define SSL_add_client_CA(ssl, x) IAmiSSL->SSL_add_client_CA((ssl), (x)) 
#define SSL_CTX_add_client_CA(ctx, x) IAmiSSL->SSL_CTX_add_client_CA((ctx), (x)) 
#define SSL_set_connect_state(s) IAmiSSL->SSL_set_connect_state((s)) 
#define SSL_set_accept_state(s) IAmiSSL->SSL_set_accept_state((s)) 
#define SSL_get_default_timeout(s) IAmiSSL->SSL_get_default_timeout((s)) 
#define SSL_library_init() IAmiSSL->SSL_library_init() 
#define SSL_CIPHER_description(a1, buf, size) IAmiSSL->SSL_CIPHER_description((a1), (buf), (size)) 
#define SSL_dup_CA_list(sk) IAmiSSL->SSL_dup_CA_list((sk)) 
#define SSL_dup(ssl) IAmiSSL->SSL_dup((ssl)) 
#define SSL_get_certificate(ssl) IAmiSSL->SSL_get_certificate((ssl)) 
#define SSL_get_privatekey(ssl) IAmiSSL->SSL_get_privatekey((ssl)) 
#define SSL_CTX_set_quiet_shutdown(ctx, mode) IAmiSSL->SSL_CTX_set_quiet_shutdown((ctx), (mode)) 
#define SSL_CTX_get_quiet_shutdown(ctx) IAmiSSL->SSL_CTX_get_quiet_shutdown((ctx)) 
#define SSL_set_quiet_shutdown(ssl, mode) IAmiSSL->SSL_set_quiet_shutdown((ssl), (mode)) 
#define SSL_get_quiet_shutdown(ssl) IAmiSSL->SSL_get_quiet_shutdown((ssl)) 
#define SSL_set_shutdown(ssl, mode) IAmiSSL->SSL_set_shutdown((ssl), (mode)) 
#define SSL_get_shutdown(ssl) IAmiSSL->SSL_get_shutdown((ssl)) 
#define SSL_version(ssl) IAmiSSL->SSL_version((ssl)) 
#define SSL_CTX_set_default_verify_paths(ctx) IAmiSSL->SSL_CTX_set_default_verify_paths((ctx)) 
#define SSL_CTX_load_verify_locations(ctx, CAfile, CApath) IAmiSSL->SSL_CTX_load_verify_locations((ctx), (CAfile), (CApath)) 
#define SSL_get_session(ssl) IAmiSSL->SSL_get_session((ssl)) 
#define SSL_get1_session(ssl) IAmiSSL->SSL_get1_session((ssl)) 
#define SSL_get_SSL_CTX(ssl) IAmiSSL->SSL_get_SSL_CTX((ssl)) 
#define SSL_set_info_callback(ssl, cb) IAmiSSL->SSL_set_info_callback((ssl), (cb)) 
#define SSL_get_info_callback(ssl) IAmiSSL->SSL_get_info_callback((ssl)) 
#define SSL_state(ssl) IAmiSSL->SSL_state((ssl)) 
#define SSL_set_verify_result(ssl, v) IAmiSSL->SSL_set_verify_result((ssl), (v)) 
#define SSL_get_verify_result(ssl) IAmiSSL->SSL_get_verify_result((ssl)) 
#define SSL_set_ex_data(ssl, idx, data) IAmiSSL->SSL_set_ex_data((ssl), (idx), (data)) 
#define SSL_get_ex_data(ssl, idx) IAmiSSL->SSL_get_ex_data((ssl), (idx)) 
#define SSL_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->SSL_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define SSL_SESSION_set_ex_data(ss, idx, data) IAmiSSL->SSL_SESSION_set_ex_data((ss), (idx), (data)) 
#define SSL_SESSION_get_ex_data(ss, idx) IAmiSSL->SSL_SESSION_get_ex_data((ss), (idx)) 
#define SSL_SESSION_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->SSL_SESSION_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define SSL_CTX_set_ex_data(ssl, idx, data) IAmiSSL->SSL_CTX_set_ex_data((ssl), (idx), (data)) 
#define SSL_CTX_get_ex_data(ssl, idx) IAmiSSL->SSL_CTX_get_ex_data((ssl), (idx)) 
#define SSL_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->SSL_CTX_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define SSL_get_ex_data_X509_STORE_CTX_idx() IAmiSSL->SSL_get_ex_data_X509_STORE_CTX_idx() 
#define SSL_CTX_set_tmp_rsa_callback(ctx, cb) IAmiSSL->SSL_CTX_set_tmp_rsa_callback((ctx), (cb)) 
#define SSL_set_tmp_rsa_callback(ssl, cb) IAmiSSL->SSL_set_tmp_rsa_callback((ssl), (cb)) 
#define SSL_CTX_set_tmp_dh_callback(ctx, dh) IAmiSSL->SSL_CTX_set_tmp_dh_callback((ctx), (dh)) 
#define SSL_set_tmp_dh_callback(ssl, dh) IAmiSSL->SSL_set_tmp_dh_callback((ssl), (dh)) 
#define SSL_COMP_add_compression_method(id, cm) IAmiSSL->SSL_COMP_add_compression_method((id), (cm)) 
#define ERR_load_SSL_strings() IAmiSSL->ERR_load_SSL_strings() 
#define sk_num(a) IAmiSSL->sk_num((a)) 
#define sk_value(a, b) IAmiSSL->sk_value((a), (b)) 
#define sk_set(a, b, c) IAmiSSL->sk_set((a), (b), (c)) 
#define sk_new(cmp) IAmiSSL->sk_new((cmp)) 
#define sk_new_null() IAmiSSL->sk_new_null() 
#define sk_free(a) IAmiSSL->sk_free((a)) 
#define sk_pop_free(st, func) IAmiSSL->sk_pop_free((st), (func)) 
#define sk_insert(sk, data, where) IAmiSSL->sk_insert((sk), (data), (where)) 
#define sk_delete(st, loc) IAmiSSL->sk_delete((st), (loc)) 
#define sk_delete_ptr(st, p) IAmiSSL->sk_delete_ptr((st), (p)) 
#define sk_find(st, data) IAmiSSL->sk_find((st), (data)) 
#define sk_push(st, data) IAmiSSL->sk_push((st), (data)) 
#define sk_unshift(st, data) IAmiSSL->sk_unshift((st), (data)) 
#define sk_shift(st) IAmiSSL->sk_shift((st)) 
#define sk_pop(st) IAmiSSL->sk_pop((st)) 
#define sk_zero(st) IAmiSSL->sk_zero((st)) 
#define sk_set_cmp_func(sk, c) IAmiSSL->sk_set_cmp_func((sk), (c)) 
#define sk_dup(st) IAmiSSL->sk_dup((st)) 
#define sk_sort(st) IAmiSSL->sk_sort((st)) 
#define FIPS_mode() IAmiSSL->FIPS_mode() 
#define sk_is_sorted(st) IAmiSSL->sk_is_sorted((st)) 
#define TXT_DB_read(in, num) IAmiSSL->TXT_DB_read((in), (num)) 
#define TXT_DB_write(out, db) IAmiSSL->TXT_DB_write((out), (db)) 
#define TXT_DB_create_index(db, field, qual, hash, cmp) IAmiSSL->TXT_DB_create_index((db), (field), (qual), (hash), (cmp)) 
#define TXT_DB_free(db) IAmiSSL->TXT_DB_free((db)) 
#define TXT_DB_get_by_index(db, idx, value) IAmiSSL->TXT_DB_get_by_index((db), (idx), (value)) 
#define TXT_DB_insert(db, value) IAmiSSL->TXT_DB_insert((db), (value)) 
#define UI_new() IAmiSSL->UI_new() 
#define UI_new_method(method) IAmiSSL->UI_new_method((method)) 
#define UI_free(ui) IAmiSSL->UI_free((ui)) 
#define UI_add_input_string(ui, prompt, flags, result_buf, minsize, maxsize) IAmiSSL->UI_add_input_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize)) 
#define UI_dup_input_string(ui, prompt, flags, result_buf, minsize, maxsize) IAmiSSL->UI_dup_input_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize)) 
#define UI_add_verify_string(ui, prompt, flags, result_buf, minsize, maxsize, test_buf) IAmiSSL->UI_add_verify_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize), (test_buf)) 
#define UI_dup_verify_string(ui, prompt, flags, result_buf, minsize, maxsize, test_buf) IAmiSSL->UI_dup_verify_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize), (test_buf)) 
#define UI_add_input_boolean(ui, prompt, action_desc, ok_chars, cancel_chars, flags, result_buf) IAmiSSL->UI_add_input_boolean((ui), (prompt), (action_desc), (ok_chars), (cancel_chars), (flags), (result_buf)) 
#define UI_dup_input_boolean(ui, prompt, action_desc, ok_chars, cancel_chars, flags, result_buf) IAmiSSL->UI_dup_input_boolean((ui), (prompt), (action_desc), (ok_chars), (cancel_chars), (flags), (result_buf)) 
#define UI_add_info_string(ui, text) IAmiSSL->UI_add_info_string((ui), (text)) 
#define UI_dup_info_string(ui, text) IAmiSSL->UI_dup_info_string((ui), (text)) 
#define UI_add_error_string(ui, text) IAmiSSL->UI_add_error_string((ui), (text)) 
#define UI_dup_error_string(ui, text) IAmiSSL->UI_dup_error_string((ui), (text)) 
#define UI_construct_prompt(ui_method, object_desc, object_name) IAmiSSL->UI_construct_prompt((ui_method), (object_desc), (object_name)) 
#define UI_add_user_data(ui, user_data) IAmiSSL->UI_add_user_data((ui), (user_data)) 
#define UI_get0_user_data(ui) IAmiSSL->UI_get0_user_data((ui)) 
#define UI_get0_result(ui, i) IAmiSSL->UI_get0_result((ui), (i)) 
#define UI_process(ui) IAmiSSL->UI_process((ui)) 
#define UI_ctrl(ui, cmd, i, p, f) IAmiSSL->UI_ctrl((ui), (cmd), (i), (p), (f)) 
#define UI_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->UI_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define UI_set_ex_data(r, idx, arg) IAmiSSL->UI_set_ex_data((r), (idx), (arg)) 
#define UI_get_ex_data(r, idx) IAmiSSL->UI_get_ex_data((r), (idx)) 
#define UI_set_default_method(meth) IAmiSSL->UI_set_default_method((meth)) 
#define UI_get_default_method() IAmiSSL->UI_get_default_method() 
#define UI_get_method(ui) IAmiSSL->UI_get_method((ui)) 
#define UI_set_method(ui, meth) IAmiSSL->UI_set_method((ui), (meth)) 
#define UI_OpenSSL() IAmiSSL->UI_OpenSSL() 
#define UI_create_method(name) IAmiSSL->UI_create_method((name)) 
#define UI_destroy_method(ui_method) IAmiSSL->UI_destroy_method((ui_method)) 
#define UI_method_set_opener(method, opener) IAmiSSL->UI_method_set_opener((method), (opener)) 
#define UI_method_set_writer(method, writer) IAmiSSL->UI_method_set_writer((method), (writer)) 
#define UI_method_set_flusher(method, flusher) IAmiSSL->UI_method_set_flusher((method), (flusher)) 
#define UI_method_set_reader(method, reader) IAmiSSL->UI_method_set_reader((method), (reader)) 
#define UI_method_set_closer(method, closer) IAmiSSL->UI_method_set_closer((method), (closer)) 
#define UI_method_get_opener(method) IAmiSSL->UI_method_get_opener((method)) 
#define UI_method_get_writer(method) IAmiSSL->UI_method_get_writer((method)) 
#define UI_method_get_flusher(method) IAmiSSL->UI_method_get_flusher((method)) 
#define UI_method_get_reader(method) IAmiSSL->UI_method_get_reader((method)) 
#define UI_method_get_closer(method) IAmiSSL->UI_method_get_closer((method)) 
#define UI_get_string_type(uis) IAmiSSL->UI_get_string_type((uis)) 
#define UI_get_input_flags(uis) IAmiSSL->UI_get_input_flags((uis)) 
#define UI_get0_output_string(uis) IAmiSSL->UI_get0_output_string((uis)) 
#define UI_get0_action_string(uis) IAmiSSL->UI_get0_action_string((uis)) 
#define UI_get0_result_string(uis) IAmiSSL->UI_get0_result_string((uis)) 
#define UI_get0_test_string(uis) IAmiSSL->UI_get0_test_string((uis)) 
#define UI_get_result_minsize(uis) IAmiSSL->UI_get_result_minsize((uis)) 
#define UI_get_result_maxsize(uis) IAmiSSL->UI_get_result_maxsize((uis)) 
#define UI_set_result(ui, uis, result) IAmiSSL->UI_set_result((ui), (uis), (result)) 
#define UI_UTIL_read_pw_string(buf, length, prompt, verify) IAmiSSL->UI_UTIL_read_pw_string((buf), (length), (prompt), (verify)) 
#define UI_UTIL_read_pw(buf, buff, size, prompt, verify) IAmiSSL->UI_UTIL_read_pw((buf), (buff), (size), (prompt), (verify)) 
#define ERR_load_UI_strings() IAmiSSL->ERR_load_UI_strings() 
#define _ossl_old_des_read_pw_string(buf, length, prompt, verify) IAmiSSL->_ossl_old_des_read_pw_string((buf), (length), (prompt), (verify)) 
#define _ossl_old_des_read_pw(buf, buff, size, prompt, verify) IAmiSSL->_ossl_old_des_read_pw((buf), (buff), (size), (prompt), (verify)) 
#define X509_verify_cert_error_string(n) IAmiSSL->X509_verify_cert_error_string((n)) 
#define X509_verify(a, r) IAmiSSL->X509_verify((a), (r)) 
#define X509_REQ_verify(a, r) IAmiSSL->X509_REQ_verify((a), (r)) 
#define X509_CRL_verify(a, r) IAmiSSL->X509_CRL_verify((a), (r)) 
#define NETSCAPE_SPKI_verify(a, r) IAmiSSL->NETSCAPE_SPKI_verify((a), (r)) 
#define NETSCAPE_SPKI_b64_decode(str, len) IAmiSSL->NETSCAPE_SPKI_b64_decode((str), (len)) 
#define NETSCAPE_SPKI_b64_encode(x) IAmiSSL->NETSCAPE_SPKI_b64_encode((x)) 
#define NETSCAPE_SPKI_get_pubkey(x) IAmiSSL->NETSCAPE_SPKI_get_pubkey((x)) 
#define NETSCAPE_SPKI_set_pubkey(x, pkey) IAmiSSL->NETSCAPE_SPKI_set_pubkey((x), (pkey)) 
#define NETSCAPE_SPKI_print(out, spki) IAmiSSL->NETSCAPE_SPKI_print((out), (spki)) 
#define X509_signature_print(bp, alg, sig) IAmiSSL->X509_signature_print((bp), (alg), (sig)) 
#define X509_sign(x, pkey, md) IAmiSSL->X509_sign((x), (pkey), (md)) 
#define X509_REQ_sign(x, pkey, md) IAmiSSL->X509_REQ_sign((x), (pkey), (md)) 
#define X509_CRL_sign(x, pkey, md) IAmiSSL->X509_CRL_sign((x), (pkey), (md)) 
#define NETSCAPE_SPKI_sign(x, pkey, md) IAmiSSL->NETSCAPE_SPKI_sign((x), (pkey), (md)) 
#define X509_pubkey_digest(data, type, md, len) IAmiSSL->X509_pubkey_digest((data), (type), (md), (len)) 
#define X509_digest(data, type, md, len) IAmiSSL->X509_digest((data), (type), (md), (len)) 
#define X509_CRL_digest(data, type, md, len) IAmiSSL->X509_CRL_digest((data), (type), (md), (len)) 
#define X509_REQ_digest(data, type, md, len) IAmiSSL->X509_REQ_digest((data), (type), (md), (len)) 
#define X509_NAME_digest(data, type, md, len) IAmiSSL->X509_NAME_digest((data), (type), (md), (len)) 
#define d2i_X509_bio(bp, x509) IAmiSSL->d2i_X509_bio((bp), (x509)) 
#define i2d_X509_bio(bp, x509) IAmiSSL->i2d_X509_bio((bp), (x509)) 
#define d2i_X509_CRL_bio(bp, crl) IAmiSSL->d2i_X509_CRL_bio((bp), (crl)) 
#define i2d_X509_CRL_bio(bp, crl) IAmiSSL->i2d_X509_CRL_bio((bp), (crl)) 
#define d2i_X509_REQ_bio(bp, req) IAmiSSL->d2i_X509_REQ_bio((bp), (req)) 
#define i2d_X509_REQ_bio(bp, req) IAmiSSL->i2d_X509_REQ_bio((bp), (req)) 
#define d2i_RSAPrivateKey_bio(bp, rsa) IAmiSSL->d2i_RSAPrivateKey_bio((bp), (rsa)) 
#define i2d_RSAPrivateKey_bio(bp, rsa) IAmiSSL->i2d_RSAPrivateKey_bio((bp), (rsa)) 
#define d2i_RSAPublicKey_bio(bp, rsa) IAmiSSL->d2i_RSAPublicKey_bio((bp), (rsa)) 
#define i2d_RSAPublicKey_bio(bp, rsa) IAmiSSL->i2d_RSAPublicKey_bio((bp), (rsa)) 
#define d2i_RSA_PUBKEY_bio(bp, rsa) IAmiSSL->d2i_RSA_PUBKEY_bio((bp), (rsa)) 
#define i2d_RSA_PUBKEY_bio(bp, rsa) IAmiSSL->i2d_RSA_PUBKEY_bio((bp), (rsa)) 
#define d2i_DSA_PUBKEY_bio(bp, dsa) IAmiSSL->d2i_DSA_PUBKEY_bio((bp), (dsa)) 
#define i2d_DSA_PUBKEY_bio(bp, dsa) IAmiSSL->i2d_DSA_PUBKEY_bio((bp), (dsa)) 
#define d2i_DSAPrivateKey_bio(bp, dsa) IAmiSSL->d2i_DSAPrivateKey_bio((bp), (dsa)) 
#define i2d_DSAPrivateKey_bio(bp, dsa) IAmiSSL->i2d_DSAPrivateKey_bio((bp), (dsa)) 
#define d2i_PKCS8_bio(bp, p8) IAmiSSL->d2i_PKCS8_bio((bp), (p8)) 
#define i2d_PKCS8_bio(bp, p8) IAmiSSL->i2d_PKCS8_bio((bp), (p8)) 
#define d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) IAmiSSL->d2i_PKCS8_PRIV_KEY_INFO_bio((bp), (p8inf)) 
#define i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) IAmiSSL->i2d_PKCS8_PRIV_KEY_INFO_bio((bp), (p8inf)) 
#define i2d_PKCS8PrivateKeyInfo_bio(bp, key) IAmiSSL->i2d_PKCS8PrivateKeyInfo_bio((bp), (key)) 
#define i2d_PrivateKey_bio(bp, pkey) IAmiSSL->i2d_PrivateKey_bio((bp), (pkey)) 
#define d2i_PrivateKey_bio(bp, a) IAmiSSL->d2i_PrivateKey_bio((bp), (a)) 
#define i2d_PUBKEY_bio(bp, pkey) IAmiSSL->i2d_PUBKEY_bio((bp), (pkey)) 
#define d2i_PUBKEY_bio(bp, a) IAmiSSL->d2i_PUBKEY_bio((bp), (a)) 
#define X509_dup(x509) IAmiSSL->X509_dup((x509)) 
#define X509_ATTRIBUTE_dup(xa) IAmiSSL->X509_ATTRIBUTE_dup((xa)) 
#define X509_EXTENSION_dup(ex) IAmiSSL->X509_EXTENSION_dup((ex)) 
#define X509_CRL_dup(crl) IAmiSSL->X509_CRL_dup((crl)) 
#define X509_REQ_dup(req) IAmiSSL->X509_REQ_dup((req)) 
#define X509_ALGOR_dup(xn) IAmiSSL->X509_ALGOR_dup((xn)) 
#define X509_NAME_dup(xn) IAmiSSL->X509_NAME_dup((xn)) 
#define X509_NAME_ENTRY_dup(ne) IAmiSSL->X509_NAME_ENTRY_dup((ne)) 
#define X509_cmp_time(s, t) IAmiSSL->X509_cmp_time((s), (t)) 
#define X509_cmp_current_time(s) IAmiSSL->X509_cmp_current_time((s)) 
#define X509_time_adj(s, adj, t) IAmiSSL->X509_time_adj((s), (adj), (t)) 
#define X509_gmtime_adj(s, adj) IAmiSSL->X509_gmtime_adj((s), (adj)) 
#define X509_get_default_cert_area() IAmiSSL->X509_get_default_cert_area() 
#define X509_get_default_cert_dir() IAmiSSL->X509_get_default_cert_dir() 
#define X509_get_default_cert_file() IAmiSSL->X509_get_default_cert_file() 
#define X509_get_default_cert_dir_env() IAmiSSL->X509_get_default_cert_dir_env() 
#define X509_get_default_cert_file_env() IAmiSSL->X509_get_default_cert_file_env() 
#define X509_get_default_private_dir() IAmiSSL->X509_get_default_private_dir() 
#define X509_to_X509_REQ(x, pkey, md) IAmiSSL->X509_to_X509_REQ((x), (pkey), (md)) 
#define X509_REQ_to_X509(r, days, pkey) IAmiSSL->X509_REQ_to_X509((r), (days), (pkey)) 
#define X509_ALGOR_new() IAmiSSL->X509_ALGOR_new() 
#define X509_ALGOR_free(a) IAmiSSL->X509_ALGOR_free((a)) 
#define d2i_X509_ALGOR(a, in, len) IAmiSSL->d2i_X509_ALGOR((a), (in), (len)) 
#define i2d_X509_ALGOR(a, out) IAmiSSL->i2d_X509_ALGOR((a), (out)) 
#define X509_ALGOR_it() IAmiSSL->X509_ALGOR_it() 
#define X509_VAL_new() IAmiSSL->X509_VAL_new() 
#define X509_VAL_free(a) IAmiSSL->X509_VAL_free((a)) 
#define d2i_X509_VAL(a, in, len) IAmiSSL->d2i_X509_VAL((a), (in), (len)) 
#define i2d_X509_VAL(a, out) IAmiSSL->i2d_X509_VAL((a), (out)) 
#define X509_VAL_it() IAmiSSL->X509_VAL_it() 
#define X509_PUBKEY_new() IAmiSSL->X509_PUBKEY_new() 
#define X509_PUBKEY_free(a) IAmiSSL->X509_PUBKEY_free((a)) 
#define d2i_X509_PUBKEY(a, in, len) IAmiSSL->d2i_X509_PUBKEY((a), (in), (len)) 
#define i2d_X509_PUBKEY(a, out) IAmiSSL->i2d_X509_PUBKEY((a), (out)) 
#define X509_PUBKEY_it() IAmiSSL->X509_PUBKEY_it() 
#define X509_PUBKEY_set(x, pkey) IAmiSSL->X509_PUBKEY_set((x), (pkey)) 
#define X509_PUBKEY_get(key) IAmiSSL->X509_PUBKEY_get((key)) 
#define X509_get_pubkey_parameters(pkey, chain) IAmiSSL->X509_get_pubkey_parameters((pkey), (chain)) 
#define i2d_PUBKEY(a, pp) IAmiSSL->i2d_PUBKEY((a), (pp)) 
#define d2i_PUBKEY(a, pp, length) IAmiSSL->d2i_PUBKEY((a), (pp), (length)) 
#define i2d_RSA_PUBKEY(a, pp) IAmiSSL->i2d_RSA_PUBKEY((a), (pp)) 
#define d2i_RSA_PUBKEY(a, pp, length) IAmiSSL->d2i_RSA_PUBKEY((a), (pp), (length)) 
#define i2d_DSA_PUBKEY(a, pp) IAmiSSL->i2d_DSA_PUBKEY((a), (pp)) 
#define d2i_DSA_PUBKEY(a, pp, length) IAmiSSL->d2i_DSA_PUBKEY((a), (pp), (length)) 
#define X509_SIG_new() IAmiSSL->X509_SIG_new() 
#define X509_SIG_free(a) IAmiSSL->X509_SIG_free((a)) 
#define d2i_X509_SIG(a, in, len) IAmiSSL->d2i_X509_SIG((a), (in), (len)) 
#define i2d_X509_SIG(a, out) IAmiSSL->i2d_X509_SIG((a), (out)) 
#define X509_SIG_it() IAmiSSL->X509_SIG_it() 
#define X509_REQ_INFO_new() IAmiSSL->X509_REQ_INFO_new() 
#define X509_REQ_INFO_free(a) IAmiSSL->X509_REQ_INFO_free((a)) 
#define d2i_X509_REQ_INFO(a, in, len) IAmiSSL->d2i_X509_REQ_INFO((a), (in), (len)) 
#define i2d_X509_REQ_INFO(a, out) IAmiSSL->i2d_X509_REQ_INFO((a), (out)) 
#define X509_REQ_INFO_it() IAmiSSL->X509_REQ_INFO_it() 
#define X509_REQ_new() IAmiSSL->X509_REQ_new() 
#define X509_REQ_free(a) IAmiSSL->X509_REQ_free((a)) 
#define d2i_X509_REQ(a, in, len) IAmiSSL->d2i_X509_REQ((a), (in), (len)) 
#define i2d_X509_REQ(a, out) IAmiSSL->i2d_X509_REQ((a), (out)) 
#define X509_REQ_it() IAmiSSL->X509_REQ_it() 
#define X509_ATTRIBUTE_new() IAmiSSL->X509_ATTRIBUTE_new() 
#define X509_ATTRIBUTE_free(a) IAmiSSL->X509_ATTRIBUTE_free((a)) 
#define d2i_X509_ATTRIBUTE(a, in, len) IAmiSSL->d2i_X509_ATTRIBUTE((a), (in), (len)) 
#define i2d_X509_ATTRIBUTE(a, out) IAmiSSL->i2d_X509_ATTRIBUTE((a), (out)) 
#define X509_ATTRIBUTE_it() IAmiSSL->X509_ATTRIBUTE_it() 
#define X509_ATTRIBUTE_create(nid, atrtype, value) IAmiSSL->X509_ATTRIBUTE_create((nid), (atrtype), (value)) 
#define X509_EXTENSION_new() IAmiSSL->X509_EXTENSION_new() 
#define X509_EXTENSION_free(a) IAmiSSL->X509_EXTENSION_free((a)) 
#define d2i_X509_EXTENSION(a, in, len) IAmiSSL->d2i_X509_EXTENSION((a), (in), (len)) 
#define i2d_X509_EXTENSION(a, out) IAmiSSL->i2d_X509_EXTENSION((a), (out)) 
#define X509_EXTENSION_it() IAmiSSL->X509_EXTENSION_it() 
#define X509_NAME_ENTRY_new() IAmiSSL->X509_NAME_ENTRY_new() 
#define X509_NAME_ENTRY_free(a) IAmiSSL->X509_NAME_ENTRY_free((a)) 
#define d2i_X509_NAME_ENTRY(a, in, len) IAmiSSL->d2i_X509_NAME_ENTRY((a), (in), (len)) 
#define i2d_X509_NAME_ENTRY(a, out) IAmiSSL->i2d_X509_NAME_ENTRY((a), (out)) 
#define X509_NAME_ENTRY_it() IAmiSSL->X509_NAME_ENTRY_it() 
#define X509_NAME_new() IAmiSSL->X509_NAME_new() 
#define X509_NAME_free(a) IAmiSSL->X509_NAME_free((a)) 
#define d2i_X509_NAME(a, in, len) IAmiSSL->d2i_X509_NAME((a), (in), (len)) 
#define i2d_X509_NAME(a, out) IAmiSSL->i2d_X509_NAME((a), (out)) 
#define X509_NAME_it() IAmiSSL->X509_NAME_it() 
#define X509_NAME_set(xn, name) IAmiSSL->X509_NAME_set((xn), (name)) 
#define X509_CINF_new() IAmiSSL->X509_CINF_new() 
#define X509_CINF_free(a) IAmiSSL->X509_CINF_free((a)) 
#define d2i_X509_CINF(a, in, len) IAmiSSL->d2i_X509_CINF((a), (in), (len)) 
#define i2d_X509_CINF(a, out) IAmiSSL->i2d_X509_CINF((a), (out)) 
#define X509_CINF_it() IAmiSSL->X509_CINF_it() 
#define X509_new() IAmiSSL->X509_new() 
#define X509_free(a) IAmiSSL->X509_free((a)) 
#define d2i_X509(a, in, len) IAmiSSL->d2i_X509((a), (in), (len)) 
#define i2d_X509(a, out) IAmiSSL->i2d_X509((a), (out)) 
#define X509_it() IAmiSSL->X509_it() 
#define X509_CERT_AUX_new() IAmiSSL->X509_CERT_AUX_new() 
#define X509_CERT_AUX_free(a) IAmiSSL->X509_CERT_AUX_free((a)) 
#define d2i_X509_CERT_AUX(a, in, len) IAmiSSL->d2i_X509_CERT_AUX((a), (in), (len)) 
#define i2d_X509_CERT_AUX(a, out) IAmiSSL->i2d_X509_CERT_AUX((a), (out)) 
#define X509_CERT_AUX_it() IAmiSSL->X509_CERT_AUX_it() 
#define X509_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->X509_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define X509_set_ex_data(r, idx, arg) IAmiSSL->X509_set_ex_data((r), (idx), (arg)) 
#define X509_get_ex_data(r, idx) IAmiSSL->X509_get_ex_data((r), (idx)) 
#define i2d_X509_AUX(a, pp) IAmiSSL->i2d_X509_AUX((a), (pp)) 
#define d2i_X509_AUX(a, pp, length) IAmiSSL->d2i_X509_AUX((a), (pp), (length)) 
#define X509_alias_set1(x, name, len) IAmiSSL->X509_alias_set1((x), (name), (len)) 
#define X509_keyid_set1(x, id, len) IAmiSSL->X509_keyid_set1((x), (id), (len)) 
#define X509_alias_get0(x, len) IAmiSSL->X509_alias_get0((x), (len)) 
#define X509_TRUST_set_default(trust) IAmiSSL->X509_TRUST_set_default((trust)) 
#define X509_TRUST_set(t, trust) IAmiSSL->X509_TRUST_set((t), (trust)) 
#define X509_add1_trust_object(x, obj) IAmiSSL->X509_add1_trust_object((x), (obj)) 
#define X509_add1_reject_object(x, obj) IAmiSSL->X509_add1_reject_object((x), (obj)) 
#define X509_trust_clear(x) IAmiSSL->X509_trust_clear((x)) 
#define X509_reject_clear(x) IAmiSSL->X509_reject_clear((x)) 
#define X509_REVOKED_new() IAmiSSL->X509_REVOKED_new() 
#define X509_REVOKED_free(a) IAmiSSL->X509_REVOKED_free((a)) 
#define d2i_X509_REVOKED(a, in, len) IAmiSSL->d2i_X509_REVOKED((a), (in), (len)) 
#define i2d_X509_REVOKED(a, out) IAmiSSL->i2d_X509_REVOKED((a), (out)) 
#define X509_REVOKED_it() IAmiSSL->X509_REVOKED_it() 
#define X509_CRL_INFO_new() IAmiSSL->X509_CRL_INFO_new() 
#define X509_CRL_INFO_free(a) IAmiSSL->X509_CRL_INFO_free((a)) 
#define d2i_X509_CRL_INFO(a, in, len) IAmiSSL->d2i_X509_CRL_INFO((a), (in), (len)) 
#define i2d_X509_CRL_INFO(a, out) IAmiSSL->i2d_X509_CRL_INFO((a), (out)) 
#define X509_CRL_INFO_it() IAmiSSL->X509_CRL_INFO_it() 
#define X509_CRL_new() IAmiSSL->X509_CRL_new() 
#define X509_CRL_free(a) IAmiSSL->X509_CRL_free((a)) 
#define d2i_X509_CRL(a, in, len) IAmiSSL->d2i_X509_CRL((a), (in), (len)) 
#define i2d_X509_CRL(a, out) IAmiSSL->i2d_X509_CRL((a), (out)) 
#define X509_CRL_it() IAmiSSL->X509_CRL_it() 
#define X509_CRL_add0_revoked(crl, rev) IAmiSSL->X509_CRL_add0_revoked((crl), (rev)) 
#define X509_PKEY_new() IAmiSSL->X509_PKEY_new() 
#define X509_PKEY_free(a) IAmiSSL->X509_PKEY_free((a)) 
#define i2d_X509_PKEY(a, pp) IAmiSSL->i2d_X509_PKEY((a), (pp)) 
#define d2i_X509_PKEY(a, pp, length) IAmiSSL->d2i_X509_PKEY((a), (pp), (length)) 
#define NETSCAPE_SPKI_new() IAmiSSL->NETSCAPE_SPKI_new() 
#define NETSCAPE_SPKI_free(a) IAmiSSL->NETSCAPE_SPKI_free((a)) 
#define d2i_NETSCAPE_SPKI(a, in, len) IAmiSSL->d2i_NETSCAPE_SPKI((a), (in), (len)) 
#define i2d_NETSCAPE_SPKI(a, out) IAmiSSL->i2d_NETSCAPE_SPKI((a), (out)) 
#define NETSCAPE_SPKI_it() IAmiSSL->NETSCAPE_SPKI_it() 
#define NETSCAPE_SPKAC_new() IAmiSSL->NETSCAPE_SPKAC_new() 
#define NETSCAPE_SPKAC_free(a) IAmiSSL->NETSCAPE_SPKAC_free((a)) 
#define d2i_NETSCAPE_SPKAC(a, in, len) IAmiSSL->d2i_NETSCAPE_SPKAC((a), (in), (len)) 
#define i2d_NETSCAPE_SPKAC(a, out) IAmiSSL->i2d_NETSCAPE_SPKAC((a), (out)) 
#define NETSCAPE_SPKAC_it() IAmiSSL->NETSCAPE_SPKAC_it() 
#define NETSCAPE_CERT_SEQUENCE_new() IAmiSSL->NETSCAPE_CERT_SEQUENCE_new() 
#define NETSCAPE_CERT_SEQUENCE_free(a) IAmiSSL->NETSCAPE_CERT_SEQUENCE_free((a)) 
#define d2i_NETSCAPE_CERT_SEQUENCE(a, in, len) IAmiSSL->d2i_NETSCAPE_CERT_SEQUENCE((a), (in), (len)) 
#define i2d_NETSCAPE_CERT_SEQUENCE(a, out) IAmiSSL->i2d_NETSCAPE_CERT_SEQUENCE((a), (out)) 
#define NETSCAPE_CERT_SEQUENCE_it() IAmiSSL->NETSCAPE_CERT_SEQUENCE_it() 
#define X509_INFO_new() IAmiSSL->X509_INFO_new() 
#define X509_INFO_free(a) IAmiSSL->X509_INFO_free((a)) 
#define X509_NAME_oneline(a, buf, size) IAmiSSL->X509_NAME_oneline((a), (buf), (size)) 
#define ASN1_verify(i2d, algor1, signature, data, pkey) IAmiSSL->ASN1_verify((i2d), (algor1), (signature), (data), (pkey)) 
#define ASN1_digest(i2d, type, data, md, len) IAmiSSL->ASN1_digest((i2d), (type), (data), (md), (len)) 
#define ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type) IAmiSSL->ASN1_sign((i2d), (algor1), (algor2), (signature), (data), (pkey), (type)) 
#define ASN1_item_digest(it, type, data, md, len) IAmiSSL->ASN1_item_digest((it), (type), (data), (md), (len)) 
#define ASN1_item_verify(it, algor1, signature, data, pkey) IAmiSSL->ASN1_item_verify((it), (algor1), (signature), (data), (pkey)) 
#define ASN1_item_sign(it, algor1, algor2, signature, data, pkey, type) IAmiSSL->ASN1_item_sign((it), (algor1), (algor2), (signature), (data), (pkey), (type)) 
#define X509_set_version(x, version) IAmiSSL->X509_set_version((x), (version)) 
#define X509_set_serialNumber(x, serial) IAmiSSL->X509_set_serialNumber((x), (serial)) 
#define X509_get_serialNumber(x) IAmiSSL->X509_get_serialNumber((x)) 
#define X509_set_issuer_name(x, name) IAmiSSL->X509_set_issuer_name((x), (name)) 
#define X509_get_issuer_name(a) IAmiSSL->X509_get_issuer_name((a)) 
#define X509_set_subject_name(x, name) IAmiSSL->X509_set_subject_name((x), (name)) 
#define X509_get_subject_name(a) IAmiSSL->X509_get_subject_name((a)) 
#define X509_set_notBefore(x, tm) IAmiSSL->X509_set_notBefore((x), (tm)) 
#define X509_set_notAfter(x, tm) IAmiSSL->X509_set_notAfter((x), (tm)) 
#define X509_set_pubkey(x, pkey) IAmiSSL->X509_set_pubkey((x), (pkey)) 
#define X509_get_pubkey(x) IAmiSSL->X509_get_pubkey((x)) 
#define X509_get0_pubkey_bitstr(x) IAmiSSL->X509_get0_pubkey_bitstr((x)) 
#define X509_certificate_type(x, pubkey) IAmiSSL->X509_certificate_type((x), (pubkey)) 
#define X509_REQ_set_version(x, version) IAmiSSL->X509_REQ_set_version((x), (version)) 
#define X509_REQ_set_subject_name(req, name) IAmiSSL->X509_REQ_set_subject_name((req), (name)) 
#define X509_REQ_set_pubkey(x, pkey) IAmiSSL->X509_REQ_set_pubkey((x), (pkey)) 
#define X509_REQ_get_pubkey(req) IAmiSSL->X509_REQ_get_pubkey((req)) 
#define X509_REQ_extension_nid(nid) IAmiSSL->X509_REQ_extension_nid((nid)) 
#define X509_REQ_get_extension_nids() IAmiSSL->X509_REQ_get_extension_nids() 
#define X509_REQ_set_extension_nids(nids) IAmiSSL->X509_REQ_set_extension_nids((nids)) 
#define X509_REQ_get_extensions(req) IAmiSSL->X509_REQ_get_extensions((req)) 
#define X509_REQ_add_extensions_nid(req, exts, nid) IAmiSSL->X509_REQ_add_extensions_nid((req), (exts), (nid)) 
#define X509_REQ_add_extensions(req, exts) IAmiSSL->X509_REQ_add_extensions((req), (exts)) 
#define X509_REQ_get_attr_count(req) IAmiSSL->X509_REQ_get_attr_count((req)) 
#define X509_REQ_get_attr_by_NID(req, nid, lastpos) IAmiSSL->X509_REQ_get_attr_by_NID((req), (nid), (lastpos)) 
#define X509_REQ_get_attr_by_OBJ(req, obj, lastpos) IAmiSSL->X509_REQ_get_attr_by_OBJ((req), (obj), (lastpos)) 
#define X509_REQ_get_attr(req, loc) IAmiSSL->X509_REQ_get_attr((req), (loc)) 
#define X509_REQ_delete_attr(req, loc) IAmiSSL->X509_REQ_delete_attr((req), (loc)) 
#define X509_REQ_add1_attr(req, attr) IAmiSSL->X509_REQ_add1_attr((req), (attr)) 
#define X509_REQ_add1_attr_by_OBJ(req, obj, type, bytes, len) IAmiSSL->X509_REQ_add1_attr_by_OBJ((req), (obj), (type), (bytes), (len)) 
#define X509_REQ_add1_attr_by_NID(req, nid, type, bytes, len) IAmiSSL->X509_REQ_add1_attr_by_NID((req), (nid), (type), (bytes), (len)) 
#define X509_REQ_add1_attr_by_txt(req, attrname, type, bytes, len) IAmiSSL->X509_REQ_add1_attr_by_txt((req), (attrname), (type), (bytes), (len)) 
#define X509_CRL_set_version(x, version) IAmiSSL->X509_CRL_set_version((x), (version)) 
#define X509_CRL_set_issuer_name(x, name) IAmiSSL->X509_CRL_set_issuer_name((x), (name)) 
#define X509_CRL_set_lastUpdate(x, tm) IAmiSSL->X509_CRL_set_lastUpdate((x), (tm)) 
#define X509_CRL_set_nextUpdate(x, tm) IAmiSSL->X509_CRL_set_nextUpdate((x), (tm)) 
#define X509_CRL_sort(crl) IAmiSSL->X509_CRL_sort((crl)) 
#define X509_REVOKED_set_serialNumber(x, serial) IAmiSSL->X509_REVOKED_set_serialNumber((x), (serial)) 
#define X509_REVOKED_set_revocationDate(r, tm) IAmiSSL->X509_REVOKED_set_revocationDate((r), (tm)) 
#define X509_check_private_key(x509, pkey) IAmiSSL->X509_check_private_key((x509), (pkey)) 
#define X509_issuer_and_serial_cmp(a, b) IAmiSSL->X509_issuer_and_serial_cmp((a), (b)) 
#define X509_issuer_and_serial_hash(a) IAmiSSL->X509_issuer_and_serial_hash((a)) 
#define X509_issuer_name_cmp(a, b) IAmiSSL->X509_issuer_name_cmp((a), (b)) 
#define X509_issuer_name_hash(a) IAmiSSL->X509_issuer_name_hash((a)) 
#define X509_subject_name_cmp(a, b) IAmiSSL->X509_subject_name_cmp((a), (b)) 
#define X509_subject_name_hash(x) IAmiSSL->X509_subject_name_hash((x)) 
#define X509_cmp(a, b) IAmiSSL->X509_cmp((a), (b)) 
#define X509_NAME_cmp(a, b) IAmiSSL->X509_NAME_cmp((a), (b)) 
#define X509_NAME_hash(x) IAmiSSL->X509_NAME_hash((x)) 
#define X509_CRL_cmp(a, b) IAmiSSL->X509_CRL_cmp((a), (b)) 
#define X509_NAME_print(bp, name, obase) IAmiSSL->X509_NAME_print((bp), (name), (obase)) 
#define X509_NAME_print_ex(out, nm, indent, flags) IAmiSSL->X509_NAME_print_ex((out), (nm), (indent), (flags)) 
#define X509_print_ex(bp, x, nmflag, cflag) IAmiSSL->X509_print_ex((bp), (x), (nmflag), (cflag)) 
#define X509_print(bp, x) IAmiSSL->X509_print((bp), (x)) 
#define X509_ocspid_print(bp, x) IAmiSSL->X509_ocspid_print((bp), (x)) 
#define X509_CERT_AUX_print(bp, x, indent) IAmiSSL->X509_CERT_AUX_print((bp), (x), (indent)) 
#define X509_CRL_print(bp, x) IAmiSSL->X509_CRL_print((bp), (x)) 
#define X509_REQ_print_ex(bp, x, nmflag, cflag) IAmiSSL->X509_REQ_print_ex((bp), (x), (nmflag), (cflag)) 
#define X509_REQ_print(bp, req) IAmiSSL->X509_REQ_print((bp), (req)) 
#define X509_NAME_entry_count(name) IAmiSSL->X509_NAME_entry_count((name)) 
#define X509_NAME_get_text_by_NID(name, nid, buf, len) IAmiSSL->X509_NAME_get_text_by_NID((name), (nid), (buf), (len)) 
#define X509_NAME_get_text_by_OBJ(name, obj, buf, len) IAmiSSL->X509_NAME_get_text_by_OBJ((name), (obj), (buf), (len)) 
#define X509_NAME_get_index_by_NID(name, nid, lastpos) IAmiSSL->X509_NAME_get_index_by_NID((name), (nid), (lastpos)) 
#define X509_NAME_get_index_by_OBJ(name, obj, lastpos) IAmiSSL->X509_NAME_get_index_by_OBJ((name), (obj), (lastpos)) 
#define X509_NAME_get_entry(name, loc) IAmiSSL->X509_NAME_get_entry((name), (loc)) 
#define X509_NAME_delete_entry(name, loc) IAmiSSL->X509_NAME_delete_entry((name), (loc)) 
#define X509_NAME_add_entry(name, ne, loc, set) IAmiSSL->X509_NAME_add_entry((name), (ne), (loc), (set)) 
#define X509_NAME_add_entry_by_OBJ(name, obj, type, bytes, len, loc, set) IAmiSSL->X509_NAME_add_entry_by_OBJ((name), (obj), (type), (bytes), (len), (loc), (set)) 
#define X509_NAME_add_entry_by_NID(name, nid, type, bytes, len, loc, set) IAmiSSL->X509_NAME_add_entry_by_NID((name), (nid), (type), (bytes), (len), (loc), (set)) 
#define X509_NAME_ENTRY_create_by_txt(ne, field, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_txt((ne), (field), (type), (bytes), (len)) 
#define X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_NID((ne), (nid), (type), (bytes), (len)) 
#define X509_NAME_add_entry_by_txt(name, field, type, bytes, len, loc, set) IAmiSSL->X509_NAME_add_entry_by_txt((name), (field), (type), (bytes), (len), (loc), (set)) 
#define X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_OBJ((ne), (obj), (type), (bytes), (len)) 
#define X509_NAME_ENTRY_set_object(ne, obj) IAmiSSL->X509_NAME_ENTRY_set_object((ne), (obj)) 
#define X509_NAME_ENTRY_set_data(ne, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_set_data((ne), (type), (bytes), (len)) 
#define X509_NAME_ENTRY_get_object(ne) IAmiSSL->X509_NAME_ENTRY_get_object((ne)) 
#define X509_NAME_ENTRY_get_data(ne) IAmiSSL->X509_NAME_ENTRY_get_data((ne)) 
#define X509v3_get_ext_count(x) IAmiSSL->X509v3_get_ext_count((x)) 
#define X509v3_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509v3_get_ext_by_NID((x), (nid), (lastpos)) 
#define X509v3_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509v3_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define X509v3_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509v3_get_ext_by_critical((x), (crit), (lastpos)) 
#define X509v3_get_ext(x, loc) IAmiSSL->X509v3_get_ext((x), (loc)) 
#define X509v3_delete_ext(x, loc) IAmiSSL->X509v3_delete_ext((x), (loc)) 
#define X509v3_add_ext(x, ex, loc) IAmiSSL->X509v3_add_ext((x), (ex), (loc)) 
#define X509_get_ext_count(x) IAmiSSL->X509_get_ext_count((x)) 
#define X509_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_get_ext_by_NID((x), (nid), (lastpos)) 
#define X509_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define X509_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_get_ext_by_critical((x), (crit), (lastpos)) 
#define X509_get_ext(x, loc) IAmiSSL->X509_get_ext((x), (loc)) 
#define X509_delete_ext(x, loc) IAmiSSL->X509_delete_ext((x), (loc)) 
#define X509_add_ext(x, ex, loc) IAmiSSL->X509_add_ext((x), (ex), (loc)) 
#define X509_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_get_ext_d2i((x), (nid), (crit), (idx)) 
#define X509_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define X509_CRL_get_ext_count(x) IAmiSSL->X509_CRL_get_ext_count((x)) 
#define X509_CRL_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_CRL_get_ext_by_NID((x), (nid), (lastpos)) 
#define X509_CRL_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_CRL_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define X509_CRL_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_CRL_get_ext_by_critical((x), (crit), (lastpos)) 
#define X509_CRL_get_ext(x, loc) IAmiSSL->X509_CRL_get_ext((x), (loc)) 
#define X509_CRL_delete_ext(x, loc) IAmiSSL->X509_CRL_delete_ext((x), (loc)) 
#define X509_CRL_add_ext(x, ex, loc) IAmiSSL->X509_CRL_add_ext((x), (ex), (loc)) 
#define X509_CRL_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_CRL_get_ext_d2i((x), (nid), (crit), (idx)) 
#define X509_CRL_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_CRL_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define X509_REVOKED_get_ext_count(x) IAmiSSL->X509_REVOKED_get_ext_count((x)) 
#define X509_REVOKED_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_NID((x), (nid), (lastpos)) 
#define X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_OBJ((x), (obj), (lastpos)) 
#define X509_REVOKED_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_critical((x), (crit), (lastpos)) 
#define X509_REVOKED_get_ext(x, loc) IAmiSSL->X509_REVOKED_get_ext((x), (loc)) 
#define X509_REVOKED_delete_ext(x, loc) IAmiSSL->X509_REVOKED_delete_ext((x), (loc)) 
#define X509_REVOKED_add_ext(x, ex, loc) IAmiSSL->X509_REVOKED_add_ext((x), (ex), (loc)) 
#define X509_REVOKED_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_REVOKED_get_ext_d2i((x), (nid), (crit), (idx)) 
#define X509_REVOKED_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_REVOKED_add1_ext_i2d((x), (nid), (value), (crit), (flags)) 
#define X509_EXTENSION_create_by_NID(ex, nid, crit, data) IAmiSSL->X509_EXTENSION_create_by_NID((ex), (nid), (crit), (data)) 
#define X509_EXTENSION_create_by_OBJ(ex, obj, crit, data) IAmiSSL->X509_EXTENSION_create_by_OBJ((ex), (obj), (crit), (data)) 
#define X509_EXTENSION_set_object(ex, obj) IAmiSSL->X509_EXTENSION_set_object((ex), (obj)) 
#define X509_EXTENSION_set_critical(ex, crit) IAmiSSL->X509_EXTENSION_set_critical((ex), (crit)) 
#define X509_EXTENSION_set_data(ex, data) IAmiSSL->X509_EXTENSION_set_data((ex), (data)) 
#define X509_EXTENSION_get_object(ex) IAmiSSL->X509_EXTENSION_get_object((ex)) 
#define X509_EXTENSION_get_data(ne) IAmiSSL->X509_EXTENSION_get_data((ne)) 
#define X509_EXTENSION_get_critical(ex) IAmiSSL->X509_EXTENSION_get_critical((ex)) 
#define X509at_get_attr_count(x) IAmiSSL->X509at_get_attr_count((x)) 
#define X509at_get_attr_by_NID(x, nid, lastpos) IAmiSSL->X509at_get_attr_by_NID((x), (nid), (lastpos)) 
#define X509at_get_attr_by_OBJ(sk, obj, lastpos) IAmiSSL->X509at_get_attr_by_OBJ((sk), (obj), (lastpos)) 
#define X509at_get_attr(x, loc) IAmiSSL->X509at_get_attr((x), (loc)) 
#define X509at_delete_attr(x, loc) IAmiSSL->X509at_delete_attr((x), (loc)) 
#define X509at_add1_attr(x, attr) IAmiSSL->X509at_add1_attr((x), (attr)) 
#define X509at_add1_attr_by_OBJ(x, obj, type, bytes, len) IAmiSSL->X509at_add1_attr_by_OBJ((x), (obj), (type), (bytes), (len)) 
#define X509at_add1_attr_by_NID(x, nid, type, bytes, len) IAmiSSL->X509at_add1_attr_by_NID((x), (nid), (type), (bytes), (len)) 
#define X509at_add1_attr_by_txt(x, attrname, type, bytes, len) IAmiSSL->X509at_add1_attr_by_txt((x), (attrname), (type), (bytes), (len)) 
#define X509_ATTRIBUTE_create_by_NID(attr, nid, atrtype, data, len) IAmiSSL->X509_ATTRIBUTE_create_by_NID((attr), (nid), (atrtype), (data), (len)) 
#define X509_ATTRIBUTE_create_by_OBJ(attr, obj, atrtype, data, len) IAmiSSL->X509_ATTRIBUTE_create_by_OBJ((attr), (obj), (atrtype), (data), (len)) 
#define X509_ATTRIBUTE_create_by_txt(attr, atrname, type, bytes, len) IAmiSSL->X509_ATTRIBUTE_create_by_txt((attr), (atrname), (type), (bytes), (len)) 
#define X509_ATTRIBUTE_set1_object(attr, obj) IAmiSSL->X509_ATTRIBUTE_set1_object((attr), (obj)) 
#define X509_ATTRIBUTE_set1_data(attr, attrtype, data, len) IAmiSSL->X509_ATTRIBUTE_set1_data((attr), (attrtype), (data), (len)) 
#define X509_ATTRIBUTE_get0_data(attr, idx, atrtype, data) IAmiSSL->X509_ATTRIBUTE_get0_data((attr), (idx), (atrtype), (data)) 
#define X509_ATTRIBUTE_count(attr) IAmiSSL->X509_ATTRIBUTE_count((attr)) 
#define X509_ATTRIBUTE_get0_object(attr) IAmiSSL->X509_ATTRIBUTE_get0_object((attr)) 
#define X509_ATTRIBUTE_get0_type(attr, idx) IAmiSSL->X509_ATTRIBUTE_get0_type((attr), (idx)) 
#define X509_verify_cert(ctx) IAmiSSL->X509_verify_cert((ctx)) 
#define X509_find_by_issuer_and_serial(sk, name, serial) IAmiSSL->X509_find_by_issuer_and_serial((sk), (name), (serial)) 
#define X509_find_by_subject(sk, name) IAmiSSL->X509_find_by_subject((sk), (name)) 
#define PBEPARAM_new() IAmiSSL->PBEPARAM_new() 
#define PBEPARAM_free(a) IAmiSSL->PBEPARAM_free((a)) 
#define d2i_PBEPARAM(a, in, len) IAmiSSL->d2i_PBEPARAM((a), (in), (len)) 
#define i2d_PBEPARAM(a, out) IAmiSSL->i2d_PBEPARAM((a), (out)) 
#define PBEPARAM_it() IAmiSSL->PBEPARAM_it() 
#define PBE2PARAM_new() IAmiSSL->PBE2PARAM_new() 
#define PBE2PARAM_free(a) IAmiSSL->PBE2PARAM_free((a)) 
#define d2i_PBE2PARAM(a, in, len) IAmiSSL->d2i_PBE2PARAM((a), (in), (len)) 
#define i2d_PBE2PARAM(a, out) IAmiSSL->i2d_PBE2PARAM((a), (out)) 
#define PBE2PARAM_it() IAmiSSL->PBE2PARAM_it() 
#define PBKDF2PARAM_new() IAmiSSL->PBKDF2PARAM_new() 
#define PBKDF2PARAM_free(a) IAmiSSL->PBKDF2PARAM_free((a)) 
#define d2i_PBKDF2PARAM(a, in, len) IAmiSSL->d2i_PBKDF2PARAM((a), (in), (len)) 
#define i2d_PBKDF2PARAM(a, out) IAmiSSL->i2d_PBKDF2PARAM((a), (out)) 
#define PBKDF2PARAM_it() IAmiSSL->PBKDF2PARAM_it() 
#define PKCS5_pbe_set(alg, iter, salt, saltlen) IAmiSSL->PKCS5_pbe_set((alg), (iter), (salt), (saltlen)) 
#define PKCS5_pbe2_set(cipher, iter, salt, saltlen) IAmiSSL->PKCS5_pbe2_set((cipher), (iter), (salt), (saltlen)) 
#define PKCS8_PRIV_KEY_INFO_new() IAmiSSL->PKCS8_PRIV_KEY_INFO_new() 
#define PKCS8_PRIV_KEY_INFO_free(a) IAmiSSL->PKCS8_PRIV_KEY_INFO_free((a)) 
#define d2i_PKCS8_PRIV_KEY_INFO(a, in, len) IAmiSSL->d2i_PKCS8_PRIV_KEY_INFO((a), (in), (len)) 
#define i2d_PKCS8_PRIV_KEY_INFO(a, out) IAmiSSL->i2d_PKCS8_PRIV_KEY_INFO((a), (out)) 
#define PKCS8_PRIV_KEY_INFO_it() IAmiSSL->PKCS8_PRIV_KEY_INFO_it() 
#define EVP_PKCS82PKEY(p8) IAmiSSL->EVP_PKCS82PKEY((p8)) 
#define EVP_PKEY2PKCS8(pkey) IAmiSSL->EVP_PKEY2PKCS8((pkey)) 
#define EVP_PKEY2PKCS8_broken(pkey, broken) IAmiSSL->EVP_PKEY2PKCS8_broken((pkey), (broken)) 
#define PKCS8_set_broken(p8, broken) IAmiSSL->PKCS8_set_broken((p8), (broken)) 
#define X509_check_trust(x, id, flags) IAmiSSL->X509_check_trust((x), (id), (flags)) 
#define X509_TRUST_get_count() IAmiSSL->X509_TRUST_get_count() 
#define X509_TRUST_get0(idx) IAmiSSL->X509_TRUST_get0((idx)) 
#define X509_TRUST_get_by_id(id) IAmiSSL->X509_TRUST_get_by_id((id)) 
#define X509_TRUST_add(id, flags, ck, name, arg1, arg2) IAmiSSL->X509_TRUST_add((id), (flags), (ck), (name), (arg1), (arg2)) 
#define X509_TRUST_cleanup() IAmiSSL->X509_TRUST_cleanup() 
#define X509_TRUST_get_flags(xp) IAmiSSL->X509_TRUST_get_flags((xp)) 
#define X509_TRUST_get0_name(xp) IAmiSSL->X509_TRUST_get0_name((xp)) 
#define X509_TRUST_get_trust(xp) IAmiSSL->X509_TRUST_get_trust((xp)) 
#define ERR_load_X509_strings() IAmiSSL->ERR_load_X509_strings() 
#define X509_OBJECT_idx_by_subject(h, type, name) IAmiSSL->X509_OBJECT_idx_by_subject((h), (type), (name)) 
#define X509_OBJECT_retrieve_by_subject(h, type, name) IAmiSSL->X509_OBJECT_retrieve_by_subject((h), (type), (name)) 
#define X509_OBJECT_retrieve_match(h, x) IAmiSSL->X509_OBJECT_retrieve_match((h), (x)) 
#define X509_OBJECT_up_ref_count(a) IAmiSSL->X509_OBJECT_up_ref_count((a)) 
#define X509_OBJECT_free_contents(a) IAmiSSL->X509_OBJECT_free_contents((a)) 
#define X509_STORE_new() IAmiSSL->X509_STORE_new() 
#define X509_STORE_free(v) IAmiSSL->X509_STORE_free((v)) 
#define X509_STORE_set_flags(ctx, flags) IAmiSSL->X509_STORE_set_flags((ctx), (flags)) 
#define X509_STORE_set_purpose(ctx, purpose) IAmiSSL->X509_STORE_set_purpose((ctx), (purpose)) 
#define X509_STORE_set_trust(ctx, trust) IAmiSSL->X509_STORE_set_trust((ctx), (trust)) 
#define X509_STORE_CTX_new() IAmiSSL->X509_STORE_CTX_new() 
#define X509_STORE_CTX_get1_issuer(issuer, ctx, x) IAmiSSL->X509_STORE_CTX_get1_issuer((issuer), (ctx), (x)) 
#define X509_STORE_CTX_free(ctx) IAmiSSL->X509_STORE_CTX_free((ctx)) 
#define X509_STORE_CTX_init(ctx, store, x509, chain) IAmiSSL->X509_STORE_CTX_init((ctx), (store), (x509), (chain)) 
#define X509_STORE_CTX_trusted_stack(ctx, sk) IAmiSSL->X509_STORE_CTX_trusted_stack((ctx), (sk)) 
#define X509_STORE_CTX_cleanup(ctx) IAmiSSL->X509_STORE_CTX_cleanup((ctx)) 
#define X509_STORE_add_lookup(v, m) IAmiSSL->X509_STORE_add_lookup((v), (m)) 
#define X509_LOOKUP_hash_dir() IAmiSSL->X509_LOOKUP_hash_dir() 
#define X509_LOOKUP_file() IAmiSSL->X509_LOOKUP_file() 
#define X509_STORE_add_cert(ctx, x) IAmiSSL->X509_STORE_add_cert((ctx), (x)) 
#define X509_STORE_add_crl(ctx, x) IAmiSSL->X509_STORE_add_crl((ctx), (x)) 
#define X509_STORE_get_by_subject(vs, type, name, ret) IAmiSSL->X509_STORE_get_by_subject((vs), (type), (name), (ret)) 
#define X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret) IAmiSSL->X509_LOOKUP_ctrl((ctx), (cmd), (argc), (argl), (ret)) 
#define X509_load_cert_file(ctx, file, type) IAmiSSL->X509_load_cert_file((ctx), (file), (type)) 
#define X509_load_crl_file(ctx, file, type) IAmiSSL->X509_load_crl_file((ctx), (file), (type)) 
#define X509_load_cert_crl_file(ctx, file, type) IAmiSSL->X509_load_cert_crl_file((ctx), (file), (type)) 
#define X509_LOOKUP_new(method) IAmiSSL->X509_LOOKUP_new((method)) 
#define X509_LOOKUP_free(ctx) IAmiSSL->X509_LOOKUP_free((ctx)) 
#define X509_LOOKUP_init(ctx) IAmiSSL->X509_LOOKUP_init((ctx)) 
#define X509_LOOKUP_by_subject(ctx, type, name, ret) IAmiSSL->X509_LOOKUP_by_subject((ctx), (type), (name), (ret)) 
#define X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret) IAmiSSL->X509_LOOKUP_by_issuer_serial((ctx), (type), (name), (serial), (ret)) 
#define X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret) IAmiSSL->X509_LOOKUP_by_fingerprint((ctx), (type), (bytes), (len), (ret)) 
#define X509_LOOKUP_by_alias(ctx, type, str, len, ret) IAmiSSL->X509_LOOKUP_by_alias((ctx), (type), (str), (len), (ret)) 
#define X509_LOOKUP_shutdown(ctx) IAmiSSL->X509_LOOKUP_shutdown((ctx)) 
#define X509_STORE_load_locations(ctx, file, dir) IAmiSSL->X509_STORE_load_locations((ctx), (file), (dir)) 
#define X509_STORE_set_default_paths(ctx) IAmiSSL->X509_STORE_set_default_paths((ctx)) 
#define X509_STORE_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->X509_STORE_CTX_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define X509_STORE_CTX_set_ex_data(ctx, idx, data) IAmiSSL->X509_STORE_CTX_set_ex_data((ctx), (idx), (data)) 
#define X509_STORE_CTX_get_ex_data(ctx, idx) IAmiSSL->X509_STORE_CTX_get_ex_data((ctx), (idx)) 
#define X509_STORE_CTX_get_error(ctx) IAmiSSL->X509_STORE_CTX_get_error((ctx)) 
#define X509_STORE_CTX_set_error(ctx, s) IAmiSSL->X509_STORE_CTX_set_error((ctx), (s)) 
#define X509_STORE_CTX_get_error_depth(ctx) IAmiSSL->X509_STORE_CTX_get_error_depth((ctx)) 
#define X509_STORE_CTX_get_current_cert(ctx) IAmiSSL->X509_STORE_CTX_get_current_cert((ctx)) 
#define X509_STORE_CTX_get_chain(ctx) IAmiSSL->X509_STORE_CTX_get_chain((ctx)) 
#define X509_STORE_CTX_get1_chain(ctx) IAmiSSL->X509_STORE_CTX_get1_chain((ctx)) 
#define X509_STORE_CTX_set_cert(c, x) IAmiSSL->X509_STORE_CTX_set_cert((c), (x)) 
#define X509_STORE_CTX_set_chain(c, sk) IAmiSSL->X509_STORE_CTX_set_chain((c), (sk)) 
#define X509_STORE_CTX_set_purpose(ctx, purpose) IAmiSSL->X509_STORE_CTX_set_purpose((ctx), (purpose)) 
#define X509_STORE_CTX_set_trust(ctx, trust) IAmiSSL->X509_STORE_CTX_set_trust((ctx), (trust)) 
#define X509_STORE_CTX_purpose_inherit(ctx, def_purpose, purpose, trust) IAmiSSL->X509_STORE_CTX_purpose_inherit((ctx), (def_purpose), (purpose), (trust)) 
#define X509_STORE_CTX_set_flags(ctx, flags) IAmiSSL->X509_STORE_CTX_set_flags((ctx), (flags)) 
#define X509_STORE_CTX_set_time(ctx, flags, t) IAmiSSL->X509_STORE_CTX_set_time((ctx), (flags), (t)) 
#define X509_STORE_CTX_set_verify_cb(ctx, verify_cb) IAmiSSL->X509_STORE_CTX_set_verify_cb((ctx), (verify_cb)) 
#define BASIC_CONSTRAINTS_new() IAmiSSL->BASIC_CONSTRAINTS_new() 
#define BASIC_CONSTRAINTS_free(a) IAmiSSL->BASIC_CONSTRAINTS_free((a)) 
#define d2i_BASIC_CONSTRAINTS(a, in, len) IAmiSSL->d2i_BASIC_CONSTRAINTS((a), (in), (len)) 
#define i2d_BASIC_CONSTRAINTS(a, out) IAmiSSL->i2d_BASIC_CONSTRAINTS((a), (out)) 
#define BASIC_CONSTRAINTS_it() IAmiSSL->BASIC_CONSTRAINTS_it() 
#define SXNET_new() IAmiSSL->SXNET_new() 
#define SXNET_free(a) IAmiSSL->SXNET_free((a)) 
#define d2i_SXNET(a, in, len) IAmiSSL->d2i_SXNET((a), (in), (len)) 
#define i2d_SXNET(a, out) IAmiSSL->i2d_SXNET((a), (out)) 
#define SXNET_it() IAmiSSL->SXNET_it() 
#define SXNETID_new() IAmiSSL->SXNETID_new() 
#define SXNETID_free(a) IAmiSSL->SXNETID_free((a)) 
#define d2i_SXNETID(a, in, len) IAmiSSL->d2i_SXNETID((a), (in), (len)) 
#define i2d_SXNETID(a, out) IAmiSSL->i2d_SXNETID((a), (out)) 
#define SXNETID_it() IAmiSSL->SXNETID_it() 
#define SXNET_add_id_asc(psx, zone, user, userlen) IAmiSSL->SXNET_add_id_asc((psx), (zone), (user), (userlen)) 
#define SXNET_add_id_ulong(psx, lzone, user, userlen) IAmiSSL->SXNET_add_id_ulong((psx), (lzone), (user), (userlen)) 
#define SXNET_add_id_INTEGER(psx, izone, user, userlen) IAmiSSL->SXNET_add_id_INTEGER((psx), (izone), (user), (userlen)) 
#define SXNET_get_id_asc(sx, zone) IAmiSSL->SXNET_get_id_asc((sx), (zone)) 
#define SXNET_get_id_ulong(sx, lzone) IAmiSSL->SXNET_get_id_ulong((sx), (lzone)) 
#define SXNET_get_id_INTEGER(sx, zone) IAmiSSL->SXNET_get_id_INTEGER((sx), (zone)) 
#define AUTHORITY_KEYID_new() IAmiSSL->AUTHORITY_KEYID_new() 
#define AUTHORITY_KEYID_free(a) IAmiSSL->AUTHORITY_KEYID_free((a)) 
#define d2i_AUTHORITY_KEYID(a, in, len) IAmiSSL->d2i_AUTHORITY_KEYID((a), (in), (len)) 
#define i2d_AUTHORITY_KEYID(a, out) IAmiSSL->i2d_AUTHORITY_KEYID((a), (out)) 
#define AUTHORITY_KEYID_it() IAmiSSL->AUTHORITY_KEYID_it() 
#define PKEY_USAGE_PERIOD_new() IAmiSSL->PKEY_USAGE_PERIOD_new() 
#define PKEY_USAGE_PERIOD_free(a) IAmiSSL->PKEY_USAGE_PERIOD_free((a)) 
#define d2i_PKEY_USAGE_PERIOD(a, in, len) IAmiSSL->d2i_PKEY_USAGE_PERIOD((a), (in), (len)) 
#define i2d_PKEY_USAGE_PERIOD(a, out) IAmiSSL->i2d_PKEY_USAGE_PERIOD((a), (out)) 
#define PKEY_USAGE_PERIOD_it() IAmiSSL->PKEY_USAGE_PERIOD_it() 
#define GENERAL_NAME_new() IAmiSSL->GENERAL_NAME_new() 
#define GENERAL_NAME_free(a) IAmiSSL->GENERAL_NAME_free((a)) 
#define d2i_GENERAL_NAME(a, in, len) IAmiSSL->d2i_GENERAL_NAME((a), (in), (len)) 
#define i2d_GENERAL_NAME(a, out) IAmiSSL->i2d_GENERAL_NAME((a), (out)) 
#define GENERAL_NAME_it() IAmiSSL->GENERAL_NAME_it() 
#define i2v_GENERAL_NAME(method, gen, ret) IAmiSSL->i2v_GENERAL_NAME((method), (gen), (ret)) 
#define GENERAL_NAME_print(out, gen) IAmiSSL->GENERAL_NAME_print((out), (gen)) 
#define GENERAL_NAMES_new() IAmiSSL->GENERAL_NAMES_new() 
#define GENERAL_NAMES_free(a) IAmiSSL->GENERAL_NAMES_free((a)) 
#define d2i_GENERAL_NAMES(a, in, len) IAmiSSL->d2i_GENERAL_NAMES((a), (in), (len)) 
#define i2d_GENERAL_NAMES(a, out) IAmiSSL->i2d_GENERAL_NAMES((a), (out)) 
#define GENERAL_NAMES_it() IAmiSSL->GENERAL_NAMES_it() 
#define i2v_GENERAL_NAMES(method, gen, extlist) IAmiSSL->i2v_GENERAL_NAMES((method), (gen), (extlist)) 
#define v2i_GENERAL_NAMES(method, ctx, nval) IAmiSSL->v2i_GENERAL_NAMES((method), (ctx), (nval)) 
#define OTHERNAME_new() IAmiSSL->OTHERNAME_new() 
#define OTHERNAME_free(a) IAmiSSL->OTHERNAME_free((a)) 
#define d2i_OTHERNAME(a, in, len) IAmiSSL->d2i_OTHERNAME((a), (in), (len)) 
#define i2d_OTHERNAME(a, out) IAmiSSL->i2d_OTHERNAME((a), (out)) 
#define OTHERNAME_it() IAmiSSL->OTHERNAME_it() 
#define EDIPARTYNAME_new() IAmiSSL->EDIPARTYNAME_new() 
#define EDIPARTYNAME_free(a) IAmiSSL->EDIPARTYNAME_free((a)) 
#define d2i_EDIPARTYNAME(a, in, len) IAmiSSL->d2i_EDIPARTYNAME((a), (in), (len)) 
#define i2d_EDIPARTYNAME(a, out) IAmiSSL->i2d_EDIPARTYNAME((a), (out)) 
#define EDIPARTYNAME_it() IAmiSSL->EDIPARTYNAME_it() 
#define i2s_ASN1_OCTET_STRING(method, ia5) IAmiSSL->i2s_ASN1_OCTET_STRING((method), (ia5)) 
#define s2i_ASN1_OCTET_STRING(method, ctx, str) IAmiSSL->s2i_ASN1_OCTET_STRING((method), (ctx), (str)) 
#define EXTENDED_KEY_USAGE_new() IAmiSSL->EXTENDED_KEY_USAGE_new() 
#define EXTENDED_KEY_USAGE_free(a) IAmiSSL->EXTENDED_KEY_USAGE_free((a)) 
#define d2i_EXTENDED_KEY_USAGE(a, in, len) IAmiSSL->d2i_EXTENDED_KEY_USAGE((a), (in), (len)) 
#define i2d_EXTENDED_KEY_USAGE(a, out) IAmiSSL->i2d_EXTENDED_KEY_USAGE((a), (out)) 
#define EXTENDED_KEY_USAGE_it() IAmiSSL->EXTENDED_KEY_USAGE_it() 
#define i2a_ACCESS_DESCRIPTION(bp, a) IAmiSSL->i2a_ACCESS_DESCRIPTION((bp), (a)) 
#define CERTIFICATEPOLICIES_new() IAmiSSL->CERTIFICATEPOLICIES_new() 
#define CERTIFICATEPOLICIES_free(a) IAmiSSL->CERTIFICATEPOLICIES_free((a)) 
#define d2i_CERTIFICATEPOLICIES(a, in, len) IAmiSSL->d2i_CERTIFICATEPOLICIES((a), (in), (len)) 
#define i2d_CERTIFICATEPOLICIES(a, out) IAmiSSL->i2d_CERTIFICATEPOLICIES((a), (out)) 
#define CERTIFICATEPOLICIES_it() IAmiSSL->CERTIFICATEPOLICIES_it() 
#define POLICYINFO_new() IAmiSSL->POLICYINFO_new() 
#define POLICYINFO_free(a) IAmiSSL->POLICYINFO_free((a)) 
#define d2i_POLICYINFO(a, in, len) IAmiSSL->d2i_POLICYINFO((a), (in), (len)) 
#define i2d_POLICYINFO(a, out) IAmiSSL->i2d_POLICYINFO((a), (out)) 
#define POLICYINFO_it() IAmiSSL->POLICYINFO_it() 
#define POLICYQUALINFO_new() IAmiSSL->POLICYQUALINFO_new() 
#define POLICYQUALINFO_free(a) IAmiSSL->POLICYQUALINFO_free((a)) 
#define d2i_POLICYQUALINFO(a, in, len) IAmiSSL->d2i_POLICYQUALINFO((a), (in), (len)) 
#define i2d_POLICYQUALINFO(a, out) IAmiSSL->i2d_POLICYQUALINFO((a), (out)) 
#define POLICYQUALINFO_it() IAmiSSL->POLICYQUALINFO_it() 
#define USERNOTICE_new() IAmiSSL->USERNOTICE_new() 
#define USERNOTICE_free(a) IAmiSSL->USERNOTICE_free((a)) 
#define d2i_USERNOTICE(a, in, len) IAmiSSL->d2i_USERNOTICE((a), (in), (len)) 
#define i2d_USERNOTICE(a, out) IAmiSSL->i2d_USERNOTICE((a), (out)) 
#define USERNOTICE_it() IAmiSSL->USERNOTICE_it() 
#define NOTICEREF_new() IAmiSSL->NOTICEREF_new() 
#define NOTICEREF_free(a) IAmiSSL->NOTICEREF_free((a)) 
#define d2i_NOTICEREF(a, in, len) IAmiSSL->d2i_NOTICEREF((a), (in), (len)) 
#define i2d_NOTICEREF(a, out) IAmiSSL->i2d_NOTICEREF((a), (out)) 
#define NOTICEREF_it() IAmiSSL->NOTICEREF_it() 
#define CRL_DIST_POINTS_new() IAmiSSL->CRL_DIST_POINTS_new() 
#define CRL_DIST_POINTS_free(a) IAmiSSL->CRL_DIST_POINTS_free((a)) 
#define d2i_CRL_DIST_POINTS(a, in, len) IAmiSSL->d2i_CRL_DIST_POINTS((a), (in), (len)) 
#define i2d_CRL_DIST_POINTS(a, out) IAmiSSL->i2d_CRL_DIST_POINTS((a), (out)) 
#define CRL_DIST_POINTS_it() IAmiSSL->CRL_DIST_POINTS_it() 
#define DIST_POINT_new() IAmiSSL->DIST_POINT_new() 
#define DIST_POINT_free(a) IAmiSSL->DIST_POINT_free((a)) 
#define d2i_DIST_POINT(a, in, len) IAmiSSL->d2i_DIST_POINT((a), (in), (len)) 
#define i2d_DIST_POINT(a, out) IAmiSSL->i2d_DIST_POINT((a), (out)) 
#define DIST_POINT_it() IAmiSSL->DIST_POINT_it() 
#define DIST_POINT_NAME_new() IAmiSSL->DIST_POINT_NAME_new() 
#define DIST_POINT_NAME_free(a) IAmiSSL->DIST_POINT_NAME_free((a)) 
#define d2i_DIST_POINT_NAME(a, in, len) IAmiSSL->d2i_DIST_POINT_NAME((a), (in), (len)) 
#define i2d_DIST_POINT_NAME(a, out) IAmiSSL->i2d_DIST_POINT_NAME((a), (out)) 
#define DIST_POINT_NAME_it() IAmiSSL->DIST_POINT_NAME_it() 
#define ACCESS_DESCRIPTION_new() IAmiSSL->ACCESS_DESCRIPTION_new() 
#define ACCESS_DESCRIPTION_free(a) IAmiSSL->ACCESS_DESCRIPTION_free((a)) 
#define d2i_ACCESS_DESCRIPTION(a, in, len) IAmiSSL->d2i_ACCESS_DESCRIPTION((a), (in), (len)) 
#define i2d_ACCESS_DESCRIPTION(a, out) IAmiSSL->i2d_ACCESS_DESCRIPTION((a), (out)) 
#define ACCESS_DESCRIPTION_it() IAmiSSL->ACCESS_DESCRIPTION_it() 
#define AUTHORITY_INFO_ACCESS_new() IAmiSSL->AUTHORITY_INFO_ACCESS_new() 
#define AUTHORITY_INFO_ACCESS_free(a) IAmiSSL->AUTHORITY_INFO_ACCESS_free((a)) 
#define d2i_AUTHORITY_INFO_ACCESS(a, in, len) IAmiSSL->d2i_AUTHORITY_INFO_ACCESS((a), (in), (len)) 
#define i2d_AUTHORITY_INFO_ACCESS(a, out) IAmiSSL->i2d_AUTHORITY_INFO_ACCESS((a), (out)) 
#define AUTHORITY_INFO_ACCESS_it() IAmiSSL->AUTHORITY_INFO_ACCESS_it() 
#define v2i_GENERAL_NAME(method, ctx, cnf) IAmiSSL->v2i_GENERAL_NAME((method), (ctx), (cnf)) 
#define X509V3_conf_free(val) IAmiSSL->X509V3_conf_free((val)) 
#define X509V3_EXT_nconf_nid(conf, ctx, ext_nid, value) IAmiSSL->X509V3_EXT_nconf_nid((conf), (ctx), (ext_nid), (value)) 
#define X509V3_EXT_nconf(conf, ctx, name, value) IAmiSSL->X509V3_EXT_nconf((conf), (ctx), (name), (value)) 
#define X509V3_EXT_add_nconf_sk(conf, ctx, section, sk) IAmiSSL->X509V3_EXT_add_nconf_sk((conf), (ctx), (section), (sk)) 
#define X509V3_EXT_add_nconf(conf, ctx, section, cert) IAmiSSL->X509V3_EXT_add_nconf((conf), (ctx), (section), (cert)) 
#define X509V3_EXT_REQ_add_nconf(conf, ctx, section, req) IAmiSSL->X509V3_EXT_REQ_add_nconf((conf), (ctx), (section), (req)) 
#define X509V3_EXT_CRL_add_nconf(conf, ctx, section, crl) IAmiSSL->X509V3_EXT_CRL_add_nconf((conf), (ctx), (section), (crl)) 
#define X509V3_EXT_conf_nid(conf, ctx, ext_nid, value) IAmiSSL->X509V3_EXT_conf_nid((conf), (ctx), (ext_nid), (value)) 
#define X509V3_EXT_conf(conf, ctx, name, value) IAmiSSL->X509V3_EXT_conf((conf), (ctx), (name), (value)) 
#define X509V3_EXT_add_conf(conf, ctx, section, cert) IAmiSSL->X509V3_EXT_add_conf((conf), (ctx), (section), (cert)) 
#define X509V3_EXT_REQ_add_conf(conf, ctx, section, req) IAmiSSL->X509V3_EXT_REQ_add_conf((conf), (ctx), (section), (req)) 
#define X509V3_EXT_CRL_add_conf(conf, ctx, section, crl) IAmiSSL->X509V3_EXT_CRL_add_conf((conf), (ctx), (section), (crl)) 
#define X509V3_add_value_bool_nf(name, asn1_bool, extlist) IAmiSSL->X509V3_add_value_bool_nf((name), (asn1_bool), (extlist)) 
#define X509V3_get_value_bool(value, asn1_bool) IAmiSSL->X509V3_get_value_bool((value), (asn1_bool)) 
#define X509V3_get_value_int(value, aint) IAmiSSL->X509V3_get_value_int((value), (aint)) 
#define X509V3_set_nconf(ctx, conf) IAmiSSL->X509V3_set_nconf((ctx), (conf)) 
#define X509V3_set_conf_lhash(ctx, lhash) IAmiSSL->X509V3_set_conf_lhash((ctx), (lhash)) 
#define X509V3_get_string(ctx, name, section) IAmiSSL->X509V3_get_string((ctx), (name), (section)) 
#define X509V3_get_section(ctx, section) IAmiSSL->X509V3_get_section((ctx), (section)) 
#define X509V3_string_free(ctx, str) IAmiSSL->X509V3_string_free((ctx), (str)) 
#define X509V3_section_free(ctx, section) IAmiSSL->X509V3_section_free((ctx), (section)) 
#define X509V3_set_ctx(ctx, issuer, subject, req, crl, flags) IAmiSSL->X509V3_set_ctx((ctx), (issuer), (subject), (req), (crl), (flags)) 
#define X509V3_add_value(name, value, extlist) IAmiSSL->X509V3_add_value((name), (value), (extlist)) 
#define X509V3_add_value_uchar(name, value, extlist) IAmiSSL->X509V3_add_value_uchar((name), (value), (extlist)) 
#define X509V3_add_value_bool(name, asn1_bool, extlist) IAmiSSL->X509V3_add_value_bool((name), (asn1_bool), (extlist)) 
#define X509V3_add_value_int(name, aint, extlist) IAmiSSL->X509V3_add_value_int((name), (aint), (extlist)) 
#define i2s_ASN1_INTEGER(meth, aint) IAmiSSL->i2s_ASN1_INTEGER((meth), (aint)) 
#define s2i_ASN1_INTEGER(meth, value) IAmiSSL->s2i_ASN1_INTEGER((meth), (value)) 
#define i2s_ASN1_ENUMERATED(meth, aint) IAmiSSL->i2s_ASN1_ENUMERATED((meth), (aint)) 
#define i2s_ASN1_ENUMERATED_TABLE(meth, aint) IAmiSSL->i2s_ASN1_ENUMERATED_TABLE((meth), (aint)) 
#define X509V3_EXT_add(ext) IAmiSSL->X509V3_EXT_add((ext)) 
#define X509V3_EXT_add_list(extlist) IAmiSSL->X509V3_EXT_add_list((extlist)) 
#define X509V3_EXT_add_alias(nid_to, nid_from) IAmiSSL->X509V3_EXT_add_alias((nid_to), (nid_from)) 
#define X509V3_EXT_cleanup() IAmiSSL->X509V3_EXT_cleanup() 
#define X509V3_EXT_get(ext) IAmiSSL->X509V3_EXT_get((ext)) 
#define X509V3_EXT_get_nid(nid) IAmiSSL->X509V3_EXT_get_nid((nid)) 
#define X509V3_add_standard_extensions() IAmiSSL->X509V3_add_standard_extensions() 
#define X509V3_parse_list(line) IAmiSSL->X509V3_parse_list((line)) 
#define X509V3_EXT_d2i(ext) IAmiSSL->X509V3_EXT_d2i((ext)) 
#define X509V3_get_d2i(x, nid, crit, idx) IAmiSSL->X509V3_get_d2i((x), (nid), (crit), (idx)) 
#define X509V3_EXT_i2d(ext_nid, crit, ext_struc) IAmiSSL->X509V3_EXT_i2d((ext_nid), (crit), (ext_struc)) 
#define X509V3_add1_i2d(x, nid, value, crit, flags) IAmiSSL->X509V3_add1_i2d((x), (nid), (value), (crit), (flags)) 
#define hex_to_string(buffer, len) IAmiSSL->hex_to_string((buffer), (len)) 
#define string_to_hex(str, len) IAmiSSL->string_to_hex((str), (len)) 
#define name_cmp(name, cmp) IAmiSSL->name_cmp((name), (cmp)) 
#define X509V3_EXT_val_prn(out, val, indent, ml) IAmiSSL->X509V3_EXT_val_prn((out), (val), (indent), (ml)) 
#define X509V3_EXT_print(out, ext, flag, indent) IAmiSSL->X509V3_EXT_print((out), (ext), (flag), (indent)) 
#define X509V3_extensions_print(out, title, exts, flag, indent) IAmiSSL->X509V3_extensions_print((out), (title), (exts), (flag), (indent)) 
#define X509_check_purpose(x, id, ca) IAmiSSL->X509_check_purpose((x), (id), (ca)) 
#define X509_supported_extension(ex) IAmiSSL->X509_supported_extension((ex)) 
#define X509_PURPOSE_set(p, purpose) IAmiSSL->X509_PURPOSE_set((p), (purpose)) 
#define X509_check_issued(issuer, subject) IAmiSSL->X509_check_issued((issuer), (subject)) 
#define X509_PURPOSE_get_count() IAmiSSL->X509_PURPOSE_get_count() 
#define X509_PURPOSE_get0(idx) IAmiSSL->X509_PURPOSE_get0((idx)) 
#define X509_PURPOSE_get_by_sname(sname) IAmiSSL->X509_PURPOSE_get_by_sname((sname)) 
#define X509_PURPOSE_get_by_id(id) IAmiSSL->X509_PURPOSE_get_by_id((id)) 
#define X509_PURPOSE_add(id, trust, flags, ck, name, sname, arg) IAmiSSL->X509_PURPOSE_add((id), (trust), (flags), (ck), (name), (sname), (arg)) 
#define X509_PURPOSE_get0_name(xp) IAmiSSL->X509_PURPOSE_get0_name((xp)) 
#define X509_PURPOSE_get0_sname(xp) IAmiSSL->X509_PURPOSE_get0_sname((xp)) 
#define X509_PURPOSE_get_trust(xp) IAmiSSL->X509_PURPOSE_get_trust((xp)) 
#define X509_PURPOSE_cleanup() IAmiSSL->X509_PURPOSE_cleanup() 
#define X509_PURPOSE_get_id(a) IAmiSSL->X509_PURPOSE_get_id((a)) 
#define X509_get1_email(x) IAmiSSL->X509_get1_email((x)) 
#define X509_REQ_get1_email(x) IAmiSSL->X509_REQ_get1_email((x)) 
#define X509_email_free(sk) IAmiSSL->X509_email_free((sk)) 
#define ERR_load_X509V3_strings() IAmiSSL->ERR_load_X509V3_strings() 
#define AES_options() IAmiSSL->AES_options() 
#define AES_set_encrypt_key(userKey, bits, key) IAmiSSL->AES_set_encrypt_key((userKey), (bits), (key)) 
#define AES_set_decrypt_key(userKey, bits, key) IAmiSSL->AES_set_decrypt_key((userKey), (bits), (key)) 
#define AES_encrypt(in, out, key) IAmiSSL->AES_encrypt((in), (out), (key)) 
#define AES_decrypt(in, out, key) IAmiSSL->AES_decrypt((in), (out), (key)) 
#define AES_ecb_encrypt(in, out, key, enc) IAmiSSL->AES_ecb_encrypt((in), (out), (key), (enc)) 
#define AES_cbc_encrypt(in, out, length, key, ivec, enc) IAmiSSL->AES_cbc_encrypt((in), (out), (length), (key), (ivec), (enc)) 
#define AES_cfb128_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->AES_cfb128_encrypt((in), (out), (length), (key), (ivec), (num), (enc)) 
#define AES_cfb1_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->AES_cfb1_encrypt((in), (out), (length), (key), (ivec), (num), (enc)) 
#define AES_cfb8_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->AES_cfb8_encrypt((in), (out), (length), (key), (ivec), (num), (enc)) 
#define AES_ofb128_encrypt(in, out, length, key, ivec, num) IAmiSSL->AES_ofb128_encrypt((in), (out), (length), (key), (ivec), (num)) 
#define AES_ctr128_encrypt(in, out, length, key, ivec, ecount_buf, num) IAmiSSL->AES_ctr128_encrypt((in), (out), (length), (key), (ivec), (ecount_buf), (num)) 
#define BF_set_key(key, len, data) IAmiSSL->BF_set_key((key), (len), (data)) 
#define BF_encrypt(data, key) IAmiSSL->BF_encrypt((data), (key)) 
#define BF_decrypt(data, key) IAmiSSL->BF_decrypt((data), (key)) 
#define BF_ecb_encrypt(in, out, key, enc) IAmiSSL->BF_ecb_encrypt((in), (out), (key), (enc)) 
#define BF_cbc_encrypt(in, out, length, schedule, ivec, enc) IAmiSSL->BF_cbc_encrypt((in), (out), (length), (schedule), (ivec), (enc)) 
#define BF_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->BF_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc)) 
#define BF_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->BF_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num)) 
#define BF_options() IAmiSSL->BF_options() 
#define CAST_set_key(key, len, data) IAmiSSL->CAST_set_key((key), (len), (data)) 
#define CAST_ecb_encrypt(in, out, key, enc) IAmiSSL->CAST_ecb_encrypt((in), (out), (key), (enc)) 
#define CAST_encrypt(data, key) IAmiSSL->CAST_encrypt((data), (key)) 
#define CAST_decrypt(data, key) IAmiSSL->CAST_decrypt((data), (key)) 
#define CAST_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->CAST_cbc_encrypt((in), (out), (length), (ks), (iv), (enc)) 
#define CAST_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->CAST_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc)) 
#define CAST_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->CAST_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num)) 
#define DES_ecb3_encrypt(input, output, ks1, ks2, ks3, enc) IAmiSSL->DES_ecb3_encrypt((input), (output), (ks1), (ks2), (ks3), (enc)) 
#define DES_cbc_cksum(input, output, length, schedule, ivec) IAmiSSL->DES_cbc_cksum((input), (output), (length), (schedule), (ivec)) 
#define DES_cbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->DES_cbc_encrypt((input), (output), (length), (schedule), (ivec), (enc)) 
#define DES_ncbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->DES_ncbc_encrypt((input), (output), (length), (schedule), (ivec), (enc)) 
#define DES_xcbc_encrypt(input, output, length, schedule, ivec, inw, outw, enc) IAmiSSL->DES_xcbc_encrypt((input), (output), (length), (schedule), (ivec), (inw), (outw), (enc)) 
#define DES_cfb_encrypt(in, out, numbits, length, schedule, ivec, enc) IAmiSSL->DES_cfb_encrypt((in), (out), (numbits), (length), (schedule), (ivec), (enc)) 
#define DES_ecb_encrypt(input, output, ks, enc) IAmiSSL->DES_ecb_encrypt((input), (output), (ks), (enc)) 
#define DES_encrypt1(data, ks, enc) IAmiSSL->DES_encrypt1((data), (ks), (enc)) 
#define DES_encrypt2(data, ks, enc) IAmiSSL->DES_encrypt2((data), (ks), (enc)) 
#define DES_encrypt3(data, ks1, ks2, ks3) IAmiSSL->DES_encrypt3((data), (ks1), (ks2), (ks3)) 
#define DES_decrypt3(data, ks1, ks2, ks3) IAmiSSL->DES_decrypt3((data), (ks1), (ks2), (ks3)) 
#define DES_ede3_cbc_encrypt(input, output, length, ks1, ks2, ks3, ivec, enc) IAmiSSL->DES_ede3_cbc_encrypt((input), (output), (length), (ks1), (ks2), (ks3), (ivec), (enc)) 
#define DES_ede3_cbcm_encrypt(in, out, length, ks1, ks2, ks3, ivec1, ivec2, enc) IAmiSSL->DES_ede3_cbcm_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec1), (ivec2), (enc)) 
#define DES_ede3_cfb64_encrypt(in, out, length, ks1, ks2, ks3, ivec, num, enc) IAmiSSL->DES_ede3_cfb64_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec), (num), (enc)) 
#define DES_ede3_cfb_encrypt(in, out, numbits, length, ks1, ks2, ks3, ivec, enc) IAmiSSL->DES_ede3_cfb_encrypt((in), (out), (numbits), (length), (ks1), (ks2), (ks3), (ivec), (enc)) 
#define DES_ede3_ofb64_encrypt(in, out, length, ks1, ks2, ks3, ivec, num) IAmiSSL->DES_ede3_ofb64_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec), (num)) 
#define DES_enc_read(fd, buf, len, sched, iv) IAmiSSL->DES_enc_read((fd), (buf), (len), (sched), (iv)) 
#define DES_enc_write(fd, buf, len, sched, iv) IAmiSSL->DES_enc_write((fd), (buf), (len), (sched), (iv)) 
#define DES_fcrypt(buf, salt, ret) IAmiSSL->DES_fcrypt((buf), (salt), (ret)) 
#define DES_crypt(buf, salt) IAmiSSL->DES_crypt((buf), (salt)) 
#define DES_ofb_encrypt(in, out, numbits, length, schedule, ivec) IAmiSSL->DES_ofb_encrypt((in), (out), (numbits), (length), (schedule), (ivec)) 
#define DES_pcbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->DES_pcbc_encrypt((input), (output), (length), (schedule), (ivec), (enc)) 
#define DES_quad_cksum(input, output, length, out_count, seed) IAmiSSL->DES_quad_cksum((input), (output), (length), (out_count), (seed)) 
#define DES_random_key(ret) IAmiSSL->DES_random_key((ret)) 
#define DES_set_odd_parity(key) IAmiSSL->DES_set_odd_parity((key)) 
#define DES_check_key_parity(key) IAmiSSL->DES_check_key_parity((key)) 
#define DES_is_weak_key(key) IAmiSSL->DES_is_weak_key((key)) 
#define DES_set_key(key, schedule) IAmiSSL->DES_set_key((key), (schedule)) 
#define DES_key_sched(key, schedule) IAmiSSL->DES_key_sched((key), (schedule)) 
#define DES_set_key_checked(key, schedule) IAmiSSL->DES_set_key_checked((key), (schedule)) 
#define DES_set_key_unchecked(key, schedule) IAmiSSL->DES_set_key_unchecked((key), (schedule)) 
#define DES_string_to_key(str, key) IAmiSSL->DES_string_to_key((str), (key)) 
#define DES_string_to_2keys(str, key1, key2) IAmiSSL->DES_string_to_2keys((str), (key1), (key2)) 
#define DES_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->DES_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc)) 
#define DES_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->DES_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num)) 
#define DES_read_password(key, prompt, verify) IAmiSSL->DES_read_password((key), (prompt), (verify)) 
#define DES_read_2passwords(key1, key2, prompt, verify) IAmiSSL->DES_read_2passwords((key1), (key2), (prompt), (verify)) 
#define _ossl_old_des_options() IAmiSSL->_ossl_old_des_options() 
#define _ossl_old_des_ecb3_encrypt(input, output, ks1, ks2, ks3, enc) IAmiSSL->_ossl_old_des_ecb3_encrypt((input), (output), (ks1), (ks2), (ks3), (enc)) 
#define _ossl_old_des_cbc_cksum(input, output, length, schedule, ivec) IAmiSSL->_ossl_old_des_cbc_cksum((input), (output), (length), (schedule), (ivec)) 
#define _ossl_old_des_cbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->_ossl_old_des_cbc_encrypt((input), (output), (length), (schedule), (ivec), (enc)) 
#define _ossl_old_des_ncbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->_ossl_old_des_ncbc_encrypt((input), (output), (length), (schedule), (ivec), (enc)) 
#define _ossl_old_des_xcbc_encrypt(input, output, length, schedule, ivec, inw, outw, enc) IAmiSSL->_ossl_old_des_xcbc_encrypt((input), (output), (length), (schedule), (ivec), (inw), (outw), (enc)) 
#define _ossl_old_des_cfb_encrypt(in, out, numbits, length, schedule, ivec, enc) IAmiSSL->_ossl_old_des_cfb_encrypt((in), (out), (numbits), (length), (schedule), (ivec), (enc)) 
#define _ossl_old_des_ecb_encrypt(input, output, ks, enc) IAmiSSL->_ossl_old_des_ecb_encrypt((input), (output), (ks), (enc)) 
#define _ossl_old_des_encrypt(data, ks, enc) IAmiSSL->_ossl_old_des_encrypt((data), (ks), (enc)) 
#define _ossl_old_des_encrypt2(data, ks, enc) IAmiSSL->_ossl_old_des_encrypt2((data), (ks), (enc)) 
#define _ossl_old_des_encrypt3(data, ks1, ks2, ks3) IAmiSSL->_ossl_old_des_encrypt3((data), (ks1), (ks2), (ks3)) 
#define _ossl_old_des_decrypt3(data, ks1, ks2, ks3) IAmiSSL->_ossl_old_des_decrypt3((data), (ks1), (ks2), (ks3)) 
#define _ossl_old_des_ede3_cbc_encrypt(input, output, length, ks1, ks2, ks3, ivec, enc) IAmiSSL->_ossl_old_des_ede3_cbc_encrypt((input), (output), (length), (ks1), (ks2), (ks3), (ivec), (enc)) 
#define _ossl_old_des_ede3_cfb64_encrypt(in, out, length, ks1, ks2, ks3, ivec, num, enc) IAmiSSL->_ossl_old_des_ede3_cfb64_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec), (num), (enc)) 
#define _ossl_old_des_ede3_ofb64_encrypt(in, out, length, ks1, ks2, ks3, ivec, num) IAmiSSL->_ossl_old_des_ede3_ofb64_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec), (num)) 
#define _ossl_old_des_enc_read(fd, buf, len, sched, iv) IAmiSSL->_ossl_old_des_enc_read((fd), (buf), (len), (sched), (iv)) 
#define _ossl_old_des_enc_write(fd, buf, len, sched, iv) IAmiSSL->_ossl_old_des_enc_write((fd), (buf), (len), (sched), (iv)) 
#define _ossl_old_des_fcrypt(buf, salt, ret) IAmiSSL->_ossl_old_des_fcrypt((buf), (salt), (ret)) 
#define _ossl_old_des_crypt(buf, salt) IAmiSSL->_ossl_old_des_crypt((buf), (salt)) 
#define _ossl_old_crypt(buf, salt) IAmiSSL->_ossl_old_crypt((buf), (salt)) 
#define _ossl_old_des_ofb_encrypt(in, out, numbits, length, schedule, ivec) IAmiSSL->_ossl_old_des_ofb_encrypt((in), (out), (numbits), (length), (schedule), (ivec)) 
#define _ossl_old_des_pcbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->_ossl_old_des_pcbc_encrypt((input), (output), (length), (schedule), (ivec), (enc)) 
#define _ossl_old_des_quad_cksum(input, output, length, out_count, seed) IAmiSSL->_ossl_old_des_quad_cksum((input), (output), (length), (out_count), (seed)) 
#define _ossl_old_des_random_seed(key) IAmiSSL->_ossl_old_des_random_seed((key)) 
#define _ossl_old_des_random_key(ret) IAmiSSL->_ossl_old_des_random_key((ret)) 
#define _ossl_old_des_read_password(key, prompt, verify) IAmiSSL->_ossl_old_des_read_password((key), (prompt), (verify)) 
#define _ossl_old_des_read_2passwords(key1, key2, prompt, verify) IAmiSSL->_ossl_old_des_read_2passwords((key1), (key2), (prompt), (verify)) 
#define _ossl_old_des_set_odd_parity(key) IAmiSSL->_ossl_old_des_set_odd_parity((key)) 
#define _ossl_old_des_is_weak_key(key) IAmiSSL->_ossl_old_des_is_weak_key((key)) 
#define _ossl_old_des_set_key(key, schedule) IAmiSSL->_ossl_old_des_set_key((key), (schedule)) 
#define _ossl_old_des_key_sched(key, schedule) IAmiSSL->_ossl_old_des_key_sched((key), (schedule)) 
#define _ossl_old_des_string_to_key(str, key) IAmiSSL->_ossl_old_des_string_to_key((str), (key)) 
#define _ossl_old_des_string_to_2keys(str, key1, key2) IAmiSSL->_ossl_old_des_string_to_2keys((str), (key1), (key2)) 
#define _ossl_old_des_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->_ossl_old_des_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc)) 
#define _ossl_old_des_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->_ossl_old_des_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num)) 
#define _ossl_096_des_random_seed(key) IAmiSSL->_ossl_096_des_random_seed((key)) 
#define DH_OpenSSL() IAmiSSL->DH_OpenSSL() 
#define DH_set_default_method(meth) IAmiSSL->DH_set_default_method((meth)) 
#define DH_get_default_method() IAmiSSL->DH_get_default_method() 
#define DH_set_method(dh, meth) IAmiSSL->DH_set_method((dh), (meth)) 
#define DH_new_method(engine) IAmiSSL->DH_new_method((engine)) 
#define DH_new() IAmiSSL->DH_new() 
#define DH_free(dh) IAmiSSL->DH_free((dh)) 
#define DH_up_ref(dh) IAmiSSL->DH_up_ref((dh)) 
#define DH_size(dh) IAmiSSL->DH_size((dh)) 
#define DH_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->DH_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define DH_set_ex_data(d, idx, arg) IAmiSSL->DH_set_ex_data((d), (idx), (arg)) 
#define DH_get_ex_data(d, idx) IAmiSSL->DH_get_ex_data((d), (idx)) 
#define DH_generate_parameters(prime_len, generator, callback, cb_arg) IAmiSSL->DH_generate_parameters((prime_len), (generator), (callback), (cb_arg)) 
#define DH_check(dh, codes) IAmiSSL->DH_check((dh), (codes)) 
#define DH_generate_key(dh) IAmiSSL->DH_generate_key((dh)) 
#define DH_compute_key(key, pub_key, dh) IAmiSSL->DH_compute_key((key), (pub_key), (dh)) 
#define d2i_DHparams(a, pp, length) IAmiSSL->d2i_DHparams((a), (pp), (length)) 
#define i2d_DHparams(a, pp) IAmiSSL->i2d_DHparams((a), (pp)) 
#define DHparams_print(bp, x) IAmiSSL->DHparams_print((bp), (x)) 
#define ERR_load_DH_strings() IAmiSSL->ERR_load_DH_strings() 
#define DSA_SIG_new() IAmiSSL->DSA_SIG_new() 
#define DSA_SIG_free(sig) IAmiSSL->DSA_SIG_free((sig)) 
#define i2d_DSA_SIG(a, pp) IAmiSSL->i2d_DSA_SIG((a), (pp)) 
#define d2i_DSA_SIG(v, pp, length) IAmiSSL->d2i_DSA_SIG((v), (pp), (length)) 
#define DSA_do_sign(dgst, dlen, dsa) IAmiSSL->DSA_do_sign((dgst), (dlen), (dsa)) 
#define DSA_do_verify(dgst, dgst_len, sig, dsa) IAmiSSL->DSA_do_verify((dgst), (dgst_len), (sig), (dsa)) 
#define DSA_OpenSSL() IAmiSSL->DSA_OpenSSL() 
#define DSA_set_default_method(a) IAmiSSL->DSA_set_default_method((a)) 
#define DSA_get_default_method() IAmiSSL->DSA_get_default_method() 
#define DSA_set_method(dsa, a) IAmiSSL->DSA_set_method((dsa), (a)) 
#define DSA_new() IAmiSSL->DSA_new() 
#define DSA_new_method(engine) IAmiSSL->DSA_new_method((engine)) 
#define DSA_free(r) IAmiSSL->DSA_free((r)) 
#define DSA_up_ref(r) IAmiSSL->DSA_up_ref((r)) 
#define DSA_size(a) IAmiSSL->DSA_size((a)) 
#define DSA_sign_setup(dsa, ctx_in, kinvp, rp) IAmiSSL->DSA_sign_setup((dsa), (ctx_in), (kinvp), (rp)) 
#define DSA_sign(type, dgst, dlen, sig, siglen, dsa) IAmiSSL->DSA_sign((type), (dgst), (dlen), (sig), (siglen), (dsa)) 
#define DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa) IAmiSSL->DSA_verify((type), (dgst), (dgst_len), (sigbuf), (siglen), (dsa)) 
#define DSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->DSA_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define DSA_set_ex_data(d, idx, arg) IAmiSSL->DSA_set_ex_data((d), (idx), (arg)) 
#define DSA_get_ex_data(d, idx) IAmiSSL->DSA_get_ex_data((d), (idx)) 
#define d2i_DSAPublicKey(a, pp, length) IAmiSSL->d2i_DSAPublicKey((a), (pp), (length)) 
#define d2i_DSAPrivateKey(a, pp, length) IAmiSSL->d2i_DSAPrivateKey((a), (pp), (length)) 
#define d2i_DSAparams(a, pp, length) IAmiSSL->d2i_DSAparams((a), (pp), (length)) 
#define DSA_generate_parameters(bits, seed, seed_len, counter_ret, h_ret, callback, cb_arg) IAmiSSL->DSA_generate_parameters((bits), (seed), (seed_len), (counter_ret), (h_ret), (callback), (cb_arg)) 
#define DSA_generate_key(a) IAmiSSL->DSA_generate_key((a)) 
#define i2d_DSAPublicKey(a, pp) IAmiSSL->i2d_DSAPublicKey((a), (pp)) 
#define i2d_DSAPrivateKey(a, pp) IAmiSSL->i2d_DSAPrivateKey((a), (pp)) 
#define i2d_DSAparams(a, pp) IAmiSSL->i2d_DSAparams((a), (pp)) 
#define DSAparams_print(bp, x) IAmiSSL->DSAparams_print((bp), (x)) 
#define DSA_print(bp, x, off) IAmiSSL->DSA_print((bp), (x), (off)) 
#define DSA_dup_DH(r) IAmiSSL->DSA_dup_DH((r)) 
#define ERR_load_DSA_strings() IAmiSSL->ERR_load_DSA_strings() 
#define idea_options() IAmiSSL->idea_options() 
#define idea_ecb_encrypt(in, out, ks) IAmiSSL->idea_ecb_encrypt((in), (out), (ks)) 
#define idea_set_encrypt_key(key, ks) IAmiSSL->idea_set_encrypt_key((key), (ks)) 
#define idea_set_decrypt_key(ek, dk) IAmiSSL->idea_set_decrypt_key((ek), (dk)) 
#define idea_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->idea_cbc_encrypt((in), (out), (length), (ks), (iv), (enc)) 
#define idea_cfb64_encrypt(in, out, length, ks, iv, num, enc) IAmiSSL->idea_cfb64_encrypt((in), (out), (length), (ks), (iv), (num), (enc)) 
#define idea_ofb64_encrypt(in, out, length, ks, iv, num) IAmiSSL->idea_ofb64_encrypt((in), (out), (length), (ks), (iv), (num)) 
#define idea_encrypt(in, ks) IAmiSSL->idea_encrypt((in), (ks)) 
#define MD2_options() IAmiSSL->MD2_options() 
#define MD2_Init(c) IAmiSSL->MD2_Init((c)) 
#define MD2_Update(c, data, len) IAmiSSL->MD2_Update((c), (data), (len)) 
#define MD2_Final(md, c) IAmiSSL->MD2_Final((md), (c)) 
#define MD2(d, n, md) IAmiSSL->MD2((d), (n), (md)) 
#define MD4_Init(c) IAmiSSL->MD4_Init((c)) 
#define MD4_Update(c, data, len) IAmiSSL->MD4_Update((c), (data), (len)) 
#define MD4_Final(md, c) IAmiSSL->MD4_Final((md), (c)) 
#define MD4(d, n, md) IAmiSSL->MD4((d), (n), (md)) 
#define MD4_Transform(c, b) IAmiSSL->MD4_Transform((c), (b)) 
#define MD5_Init(c) IAmiSSL->MD5_Init((c)) 
#define MD5_Update(c, data, len) IAmiSSL->MD5_Update((c), (data), (len)) 
#define MD5_Final(md, c) IAmiSSL->MD5_Final((md), (c)) 
#define MD5(d, n, md) IAmiSSL->MD5((d), (n), (md)) 
#define MD5_Transform(c, b) IAmiSSL->MD5_Transform((c), (b)) 
#define MDC2_Init(c) IAmiSSL->MDC2_Init((c)) 
#define MDC2_Update(c, data, len) IAmiSSL->MDC2_Update((c), (data), (len)) 
#define MDC2_Final(md, c) IAmiSSL->MDC2_Final((md), (c)) 
#define MDC2(d, n, md) IAmiSSL->MDC2((d), (n), (md)) 
#define RC2_set_key(key, len, data, bits) IAmiSSL->RC2_set_key((key), (len), (data), (bits)) 
#define RC2_ecb_encrypt(in, out, key, enc) IAmiSSL->RC2_ecb_encrypt((in), (out), (key), (enc)) 
#define RC2_encrypt(data, key) IAmiSSL->RC2_encrypt((data), (key)) 
#define RC2_decrypt(data, key) IAmiSSL->RC2_decrypt((data), (key)) 
#define RC2_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->RC2_cbc_encrypt((in), (out), (length), (ks), (iv), (enc)) 
#define RC2_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->RC2_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc)) 
#define RC2_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->RC2_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num)) 
#define RC4_options() IAmiSSL->RC4_options() 
#define RC4_set_key(key, len, data) IAmiSSL->RC4_set_key((key), (len), (data)) 
#define RC4(key, len, indata, outdata) IAmiSSL->RC4((key), (len), (indata), (outdata)) 
#define RC5_32_set_key(key, len, data, rounds) IAmiSSL->RC5_32_set_key((key), (len), (data), (rounds)) 
#define RC5_32_ecb_encrypt(in, out, key, enc) IAmiSSL->RC5_32_ecb_encrypt((in), (out), (key), (enc)) 
#define RC5_32_encrypt(data, key) IAmiSSL->RC5_32_encrypt((data), (key)) 
#define RC5_32_decrypt(data, key) IAmiSSL->RC5_32_decrypt((data), (key)) 
#define RC5_32_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->RC5_32_cbc_encrypt((in), (out), (length), (ks), (iv), (enc)) 
#define RC5_32_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->RC5_32_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc)) 
#define RC5_32_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->RC5_32_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num)) 
#define RIPEMD160_Init(c) IAmiSSL->RIPEMD160_Init((c)) 
#define RIPEMD160_Update(c, data, len) IAmiSSL->RIPEMD160_Update((c), (data), (len)) 
#define RIPEMD160_Final(md, c) IAmiSSL->RIPEMD160_Final((md), (c)) 
#define RIPEMD160(d, n, md) IAmiSSL->RIPEMD160((d), (n), (md)) 
#define RIPEMD160_Transform(c, b) IAmiSSL->RIPEMD160_Transform((c), (b)) 
#define RSA_new() IAmiSSL->RSA_new() 
#define RSA_new_method(engine) IAmiSSL->RSA_new_method((engine)) 
#define RSA_size(a) IAmiSSL->RSA_size((a)) 
#define RSA_generate_key(bits, e, callback, cb_arg) IAmiSSL->RSA_generate_key((bits), (e), (callback), (cb_arg)) 
#define RSA_check_key(a) IAmiSSL->RSA_check_key((a)) 
#define RSA_public_encrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_public_encrypt((flen), (from), (to), (rsa), (padding)) 
#define RSA_private_encrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_private_encrypt((flen), (from), (to), (rsa), (padding)) 
#define RSA_public_decrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_public_decrypt((flen), (from), (to), (rsa), (padding)) 
#define RSA_private_decrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_private_decrypt((flen), (from), (to), (rsa), (padding)) 
#define RSA_free(r) IAmiSSL->RSA_free((r)) 
#define RSA_up_ref(r) IAmiSSL->RSA_up_ref((r)) 
#define RSA_flags(r) IAmiSSL->RSA_flags((r)) 
#define RSA_set_default_method(meth) IAmiSSL->RSA_set_default_method((meth)) 
#define RSA_get_default_method() IAmiSSL->RSA_get_default_method() 
#define RSA_get_method(rsa) IAmiSSL->RSA_get_method((rsa)) 
#define RSA_set_method(rsa, meth) IAmiSSL->RSA_set_method((rsa), (meth)) 
#define RSA_memory_lock(r) IAmiSSL->RSA_memory_lock((r)) 
#define RSA_PKCS1_SSLeay() IAmiSSL->RSA_PKCS1_SSLeay() 
#define RSA_null_method() IAmiSSL->RSA_null_method() 
#define d2i_RSAPublicKey(a, in, len) IAmiSSL->d2i_RSAPublicKey((a), (in), (len)) 
#define i2d_RSAPublicKey(a, out) IAmiSSL->i2d_RSAPublicKey((a), (out)) 
#define RSAPublicKey_it() IAmiSSL->RSAPublicKey_it() 
#define d2i_RSAPrivateKey(a, in, len) IAmiSSL->d2i_RSAPrivateKey((a), (in), (len)) 
#define i2d_RSAPrivateKey(a, out) IAmiSSL->i2d_RSAPrivateKey((a), (out)) 
#define RSAPrivateKey_it() IAmiSSL->RSAPrivateKey_it() 
#define RSA_print(bp, r, offset) IAmiSSL->RSA_print((bp), (r), (offset)) 
#define i2d_RSA_NET(a, pp, cb, sgckey) IAmiSSL->i2d_RSA_NET((a), (pp), (cb), (sgckey)) 
#define d2i_RSA_NET(a, pp, length, cb, sgckey) IAmiSSL->d2i_RSA_NET((a), (pp), (length), (cb), (sgckey)) 
#define i2d_Netscape_RSA(a, pp, cb) IAmiSSL->i2d_Netscape_RSA((a), (pp), (cb)) 
#define d2i_Netscape_RSA(a, pp, length, cb) IAmiSSL->d2i_Netscape_RSA((a), (pp), (length), (cb)) 
#define RSA_sign(type, m, m_length, sigret, siglen, rsa) IAmiSSL->RSA_sign((type), (m), (m_length), (sigret), (siglen), (rsa)) 
#define RSA_verify(type, m, m_length, sigbuf, siglen, rsa) IAmiSSL->RSA_verify((type), (m), (m_length), (sigbuf), (siglen), (rsa)) 
#define RSA_sign_ASN1_OCTET_STRING(type, m, m_length, sigret, siglen, rsa) IAmiSSL->RSA_sign_ASN1_OCTET_STRING((type), (m), (m_length), (sigret), (siglen), (rsa)) 
#define RSA_verify_ASN1_OCTET_STRING(type, m, m_length, sigbuf, siglen, rsa) IAmiSSL->RSA_verify_ASN1_OCTET_STRING((type), (m), (m_length), (sigbuf), (siglen), (rsa)) 
#define RSA_blinding_on(rsa, ctx) IAmiSSL->RSA_blinding_on((rsa), (ctx)) 
#define RSA_blinding_off(rsa) IAmiSSL->RSA_blinding_off((rsa)) 
#define RSA_padding_add_PKCS1_type_1(to, tlen, f, fl) IAmiSSL->RSA_padding_add_PKCS1_type_1((to), (tlen), (f), (fl)) 
#define RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_PKCS1_type_1((to), (tlen), (f), (fl), (rsa_len)) 
#define RSA_padding_add_PKCS1_type_2(to, tlen, f, fl) IAmiSSL->RSA_padding_add_PKCS1_type_2((to), (tlen), (f), (fl)) 
#define RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_PKCS1_type_2((to), (tlen), (f), (fl), (rsa_len)) 
#define RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl) IAmiSSL->RSA_padding_add_PKCS1_OAEP((to), (tlen), (f), (fl), (p), (pl)) 
#define RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl) IAmiSSL->RSA_padding_check_PKCS1_OAEP((to), (tlen), (f), (fl), (rsa_len), (p), (pl)) 
#define RSA_padding_add_SSLv23(to, tlen, f, fl) IAmiSSL->RSA_padding_add_SSLv23((to), (tlen), (f), (fl)) 
#define RSA_padding_check_SSLv23(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_SSLv23((to), (tlen), (f), (fl), (rsa_len)) 
#define RSA_padding_add_none(to, tlen, f, fl) IAmiSSL->RSA_padding_add_none((to), (tlen), (f), (fl)) 
#define RSA_padding_check_none(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_none((to), (tlen), (f), (fl), (rsa_len)) 
#define RSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->RSA_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define RSA_set_ex_data(r, idx, arg) IAmiSSL->RSA_set_ex_data((r), (idx), (arg)) 
#define RSA_get_ex_data(r, idx) IAmiSSL->RSA_get_ex_data((r), (idx)) 
#define RSAPublicKey_dup(rsa) IAmiSSL->RSAPublicKey_dup((rsa)) 
#define RSAPrivateKey_dup(rsa) IAmiSSL->RSAPrivateKey_dup((rsa)) 
#define ERR_load_RSA_strings() IAmiSSL->ERR_load_RSA_strings() 
#define SHA_Init(c) IAmiSSL->SHA_Init((c)) 
#define SHA_Update(c, data, len) IAmiSSL->SHA_Update((c), (data), (len)) 
#define SHA_Final(md, c) IAmiSSL->SHA_Final((md), (c)) 
#define SHA(d, n, md) IAmiSSL->SHA((d), (n), (md)) 
#define SHA_Transform(c, data) IAmiSSL->SHA_Transform((c), (data)) 
#define SHA1_Init(c) IAmiSSL->SHA1_Init((c)) 
#define SHA1_Update(c, data, len) IAmiSSL->SHA1_Update((c), (data), (len)) 
#define SHA1_Final(md, c) IAmiSSL->SHA1_Final((md), (c)) 
#define SHA1(d, n, md) IAmiSSL->SHA1((d), (n), (md)) 
#define SHA1_Transform(c, data) IAmiSSL->SHA1_Transform((c), (data)) 
#define UI_read_string_lib(ui, uis) IAmiSSL->UI_read_string_lib((ui), (uis)) 
#define UI_write_string_lib(ui, uis) IAmiSSL->UI_write_string_lib((ui), (uis)) 
#define HMAC_CTX_set_flags(ctx, flags) IAmiSSL->HMAC_CTX_set_flags((ctx), (flags)) 
#define private_RC4_set_key(key, len, data) IAmiSSL->private_RC4_set_key((key), (len), (data)) 
#define X509_check_ca(x) IAmiSSL->X509_check_ca((x)) 
#define PROXY_POLICY_new() IAmiSSL->PROXY_POLICY_new() 
#define PROXY_POLICY_free(a) IAmiSSL->PROXY_POLICY_free((a)) 
#define d2i_PROXY_POLICY(a, in, len) IAmiSSL->d2i_PROXY_POLICY((a), (in), (len)) 
#define i2d_PROXY_POLICY(a, out) IAmiSSL->i2d_PROXY_POLICY((a), (out)) 
#define PROXY_POLICY_it() IAmiSSL->PROXY_POLICY_it() 
#define PROXY_CERT_INFO_EXTENSION_new() IAmiSSL->PROXY_CERT_INFO_EXTENSION_new() 
#define PROXY_CERT_INFO_EXTENSION_free(a) IAmiSSL->PROXY_CERT_INFO_EXTENSION_free((a)) 
#define d2i_PROXY_CERT_INFO_EXTENSION(a, in, len) IAmiSSL->d2i_PROXY_CERT_INFO_EXTENSION((a), (in), (len)) 
#define i2d_PROXY_CERT_INFO_EXTENSION(a, out) IAmiSSL->i2d_PROXY_CERT_INFO_EXTENSION((a), (out)) 
#define PROXY_CERT_INFO_EXTENSION_it() IAmiSSL->PROXY_CERT_INFO_EXTENSION_it() 
#define BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont) IAmiSSL->BN_mod_exp_mont_consttime((rr), (a), (p), (m), (ctx), (in_mont)) 
#define BN_MONT_CTX_set_locked(pmont, lock, mod, ctx) IAmiSSL->BN_MONT_CTX_set_locked((pmont), (lock), (mod), (ctx)) 
#define PKCS1_MGF1(mask, len, seed, seedlen, dgst) IAmiSSL->PKCS1_MGF1((mask), (len), (seed), (seedlen), (dgst)) 
#define RSA_padding_add_X931(to, tlen, from, flen) IAmiSSL->RSA_padding_add_X931((to), (tlen), (from), (flen)) 
#define RSA_padding_check_X931(to, tlen, from, flen, num) IAmiSSL->RSA_padding_check_X931((to), (tlen), (from), (flen), (num)) 
#define RSA_X931_hash_id(nid) IAmiSSL->RSA_X931_hash_id((nid)) 
#define RSA_verify_PKCS1_PSS(rsa, mHash, Hash, EM, sLen) IAmiSSL->RSA_verify_PKCS1_PSS((rsa), (mHash), (Hash), (EM), (sLen)) 
#define RSA_padding_add_PKCS1_PSS(rsa, EM, mHash, Hash, sLen) IAmiSSL->RSA_padding_add_PKCS1_PSS((rsa), (EM), (mHash), (Hash), (sLen)) 
#define EVP_sha224() IAmiSSL->EVP_sha224() 
#define EVP_sha256() IAmiSSL->EVP_sha256() 
#define EVP_sha384() IAmiSSL->EVP_sha384() 
#define EVP_sha512() IAmiSSL->EVP_sha512() 
#define BN_GF2m_add(r, a, b) IAmiSSL->BN_GF2m_add((r), (a), (b)) 
#define BN_GF2m_arr2poly(p, a) IAmiSSL->BN_GF2m_arr2poly((p), (a)) 
#define BN_GF2m_mod(r, a, p) IAmiSSL->BN_GF2m_mod((r), (a), (p)) 
#define BN_GF2m_mod_mul(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_mul((r), (a), (b), (p), (ctx)) 
#define BN_GF2m_mod_sqr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqr((r), (a), (p), (ctx)) 
#define BN_GF2m_mod_inv(r, b, p, ctx) IAmiSSL->BN_GF2m_mod_inv((r), (b), (p), (ctx)) 
#define BN_GF2m_mod_div(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_div((r), (a), (b), (p), (ctx)) 
#define BN_GF2m_mod_exp(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_exp((r), (a), (b), (p), (ctx)) 
#define BN_GF2m_mod_sqrt(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqrt((r), (a), (p), (ctx)) 
#define BN_GF2m_mod_solve_quad(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_solve_quad((r), (a), (p), (ctx)) 
#define BN_generate_prime_ex(ret, bits, safe, add, rem, cb) IAmiSSL->BN_generate_prime_ex((ret), (bits), (safe), (add), (rem), (cb)) 
#define BN_is_prime_ex(p, nchecks, ctx, cb) IAmiSSL->BN_is_prime_ex((p), (nchecks), (ctx), (cb)) 
#define BN_set_negative(b, n) IAmiSSL->BN_set_negative((b), (n)) 
#define EC_GROUP_get_degree(group) IAmiSSL->EC_GROUP_get_degree((group)) 
#define EC_GF2m_simple_method() IAmiSSL->EC_GF2m_simple_method() 
#define EC_GROUP_set_curve_GF2m(group, p, a, b, ctx) IAmiSSL->EC_GROUP_set_curve_GF2m((group), (p), (a), (b), (ctx)) 
#define EC_GROUP_get_curve_GF2m(group, p, a, b, ctx) IAmiSSL->EC_GROUP_get_curve_GF2m((group), (p), (a), (b), (ctx)) 
#define EC_POINT_set_affine_coordinates_GF2m(group, point, x, y, ctx) IAmiSSL->EC_POINT_set_affine_coordinates_GF2m((group), (point), (x), (y), (ctx)) 
#define EC_POINT_get_affine_coordinates_GF2m(group, point, x, y, ctx) IAmiSSL->EC_POINT_get_affine_coordinates_GF2m((group), (point), (x), (y), (ctx)) 
#define EC_get_builtin_curves(r, nitems) IAmiSSL->EC_get_builtin_curves((r), (nitems)) 
#define EC_GROUP_new_by_curve_name(nid) IAmiSSL->EC_GROUP_new_by_curve_name((nid)) 
#define EC_GROUP_check(group, ctx) IAmiSSL->EC_GROUP_check((group), (ctx)) 
#define ENGINE_cleanup() IAmiSSL->ENGINE_cleanup() 
#define DSA_generate_parameters_ex(dsa, bits, seed, seed_len, counter_ret, h_ret, cb) IAmiSSL->DSA_generate_parameters_ex((dsa), (bits), (seed), (seed_len), (counter_ret), (h_ret), (cb)) 
#define EVP_ecdsa() IAmiSSL->EVP_ecdsa() 
#define EC_KEY_new_by_curve_name(nid) IAmiSSL->EC_KEY_new_by_curve_name((nid)) 
#define EC_KEY_generate_key(key) IAmiSSL->EC_KEY_generate_key((key)) 
#define EC_KEY_free(key) IAmiSSL->EC_KEY_free((key)) 
#define ECDSA_SIG_free(a) IAmiSSL->ECDSA_SIG_free((a)) 
#define ECDSA_do_sign(dgst, dlen, eckey) IAmiSSL->ECDSA_do_sign((dgst), (dlen), (eckey)) 
#define ECDSA_do_verify(dgst, dgst_len, sig, eckey) IAmiSSL->ECDSA_do_verify((dgst), (dgst_len), (sig), (eckey)) 
#define EC_KEY_new() IAmiSSL->EC_KEY_new() 
#define EC_KEY_set_group(eckey, group) IAmiSSL->EC_KEY_set_group((eckey), (group)) 
#define EC_KEY_get0_group(key) IAmiSSL->EC_KEY_get0_group((key)) 
#define EC_KEY_check_key(eckey) IAmiSSL->EC_KEY_check_key((eckey)) 
#define ECDSA_size(eckey) IAmiSSL->ECDSA_size((eckey)) 
#define ECDSA_sign(type, dgst, dgstlen, sig, siglen, eckey) IAmiSSL->ECDSA_sign((type), (dgst), (dgstlen), (sig), (siglen), (eckey)) 
#define ECDSA_verify(type, dgst, dgstlen, sig, siglen, eckey) IAmiSSL->ECDSA_verify((type), (dgst), (dgstlen), (sig), (siglen), (eckey)) 
#define d2i_ECDSA_SIG(v, pp, len) IAmiSSL->d2i_ECDSA_SIG((v), (pp), (len)) 
#define i2d_ECDSA_SIG(a, pp) IAmiSSL->i2d_ECDSA_SIG((a), (pp)) 
#define DH_generate_parameters_ex(ret, prime_len, generator, cb) IAmiSSL->DH_generate_parameters_ex((ret), (prime_len), (generator), (cb)) 
#define EC_METHOD_get_field_type(meth) IAmiSSL->EC_METHOD_get_field_type((meth)) 
#define EC_KEY_get0_public_key(eckey) IAmiSSL->EC_KEY_get0_public_key((eckey)) 
#define ECDH_compute_key(out, outlen, pub_key, ecdh, KDF) IAmiSSL->ECDH_compute_key((out), (outlen), (pub_key), (ecdh), (KDF)) 
#define EC_KEY_get0_private_key(eckey) IAmiSSL->EC_KEY_get0_private_key((eckey)) 
#define ENGINE_get_first() IAmiSSL->ENGINE_get_first() 
#define ENGINE_get_id(e) IAmiSSL->ENGINE_get_id((e)) 
#define ENGINE_get_name(e) IAmiSSL->ENGINE_get_name((e)) 
#define ENGINE_get_next(e) IAmiSSL->ENGINE_get_next((e)) 
#define ENGINE_free(e) IAmiSSL->ENGINE_free((e)) 
#define ENGINE_new() IAmiSSL->ENGINE_new() 
#define ENGINE_set_id(e, id) IAmiSSL->ENGINE_set_id((e), (id)) 
#define ENGINE_set_name(e, name) IAmiSSL->ENGINE_set_name((e), (name)) 
#define ENGINE_add(e) IAmiSSL->ENGINE_add((e)) 
#define ENGINE_remove(e) IAmiSSL->ENGINE_remove((e)) 
#define ENGINE_load_builtin_engines() IAmiSSL->ENGINE_load_builtin_engines() 
#define ENGINE_register_all_ciphers() IAmiSSL->ENGINE_register_all_ciphers() 
#define EVP_CIPHER_nid(cipher) IAmiSSL->EVP_CIPHER_nid((cipher)) 
#define EVP_MD_type(md) IAmiSSL->EVP_MD_type((md)) 
#define ENGINE_register_all_digests() IAmiSSL->ENGINE_register_all_digests() 
#define BIO_test_flags(b, flags) IAmiSSL->BIO_test_flags((b), (flags)) 
#define SSL_COMP_get_compression_methods() IAmiSSL->SSL_COMP_get_compression_methods() 
#define RSA_generate_key_ex(rsa, bits, e, cb) IAmiSSL->RSA_generate_key_ex((rsa), (bits), (e), (cb)) 
#define X509_VERIFY_PARAM_free(param) IAmiSSL->X509_VERIFY_PARAM_free((param)) 
#define X509_STORE_set1_param(ctx, pm) IAmiSSL->X509_STORE_set1_param((ctx), (pm)) 
#define ASN1_generate_nconf(str, nconf) IAmiSSL->ASN1_generate_nconf((str), (nconf)) 
#define PEM_read_bio_ECPKParameters(bp, x, cb, u) IAmiSSL->PEM_read_bio_ECPKParameters((bp), (x), (cb), (u)) 
#define EC_KEY_dup(ec_key) IAmiSSL->EC_KEY_dup((ec_key)) 
#define BIO_set_callback(b, callback) IAmiSSL->BIO_set_callback((b), (callback)) 
#define BIO_set_callback_arg(b, arg) IAmiSSL->BIO_set_callback_arg((b), (arg)) 
#define EVP_MD_CTX_set_flags(ctx, flags) IAmiSSL->EVP_MD_CTX_set_flags((ctx), (flags)) 
#define BIO_set_flags(b, flags) IAmiSSL->BIO_set_flags((b), (flags)) 
#define EVP_CIPHER_CTX_set_flags(ctx, flags) IAmiSSL->EVP_CIPHER_CTX_set_flags((ctx), (flags)) 
#define EVP_CIPHER_iv_length(cipher) IAmiSSL->EVP_CIPHER_iv_length((cipher)) 
#define X509_REQ_check_private_key(x509, pkey) IAmiSSL->X509_REQ_check_private_key((x509), (pkey)) 
#define PEM_read_bio_EC_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_EC_PUBKEY((bp), (x), (cb), (u)) 
#define PEM_read_bio_ECPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_ECPrivateKey((bp), (x), (cb), (u)) 
#define PEM_write_bio_EC_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_EC_PUBKEY((bp), (x)) 
#define d2i_EC_PUBKEY_bio(bp, eckey) IAmiSSL->d2i_EC_PUBKEY_bio((bp), (eckey)) 
#define EC_KEY_set_asn1_flag(key, flag) IAmiSSL->EC_KEY_set_asn1_flag((key), (flag)) 
#define EC_KEY_set_conv_form(key, cform) IAmiSSL->EC_KEY_set_conv_form((key), (cform)) 
#define EC_KEY_print(bp, x, off) IAmiSSL->EC_KEY_print((bp), (x), (off)) 
#define d2i_ECPrivateKey_bio(bp, eckey) IAmiSSL->d2i_ECPrivateKey_bio((bp), (eckey)) 
#define i2d_EC_PUBKEY_bio(bp, eckey) IAmiSSL->i2d_EC_PUBKEY_bio((bp), (eckey)) 
#define PEM_write_bio_ECPrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_ECPrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u)) 
#define PEM_write_bio_ECPKParameters(bp, x) IAmiSSL->PEM_write_bio_ECPKParameters((bp), (x)) 
#define i2d_ECPrivateKey_bio(bp, eckey) IAmiSSL->i2d_ECPrivateKey_bio((bp), (eckey)) 
#define i2d_ECPKParameters(a, out) IAmiSSL->i2d_ECPKParameters((a), (out)) 
#define EC_GROUP_set_asn1_flag(group, flag) IAmiSSL->EC_GROUP_set_asn1_flag((group), (flag)) 
#define EC_GROUP_set_point_conversion_form(group, form) IAmiSSL->EC_GROUP_set_point_conversion_form((group), (form)) 
#define EC_GROUP_get_point_conversion_form(group) IAmiSSL->EC_GROUP_get_point_conversion_form((group)) 
#define ECPKParameters_print(bp, x, off) IAmiSSL->ECPKParameters_print((bp), (x), (off)) 
#define EC_GROUP_set_seed(group, p, len) IAmiSSL->EC_GROUP_set_seed((group), (p), (len)) 
#define d2i_ECPKParameters(a, in, len) IAmiSSL->d2i_ECPKParameters((a), (in), (len)) 
#define EC_POINT_point2bn(group, point, form, ret, ctx) IAmiSSL->EC_POINT_point2bn((group), (point), (form), (ret), (ctx)) 
#define X509_get1_ocsp(x) IAmiSSL->X509_get1_ocsp((x)) 
#define SSL_get_servername(s, type) IAmiSSL->SSL_get_servername((s), (type)) 
#define SSL_set_SSL_CTX(ssl, ctx) IAmiSSL->SSL_set_SSL_CTX((ssl), (ctx)) 
#define SSL_CTX_set_cookie_generate_cb(ctx, app_gen_cookie_cb) IAmiSSL->SSL_CTX_set_cookie_generate_cb((ctx), (app_gen_cookie_cb)) 
#define SSL_CTX_set_cookie_verify_cb(ctx, app_verify_cookie_cb) IAmiSSL->SSL_CTX_set_cookie_verify_cb((ctx), (app_verify_cookie_cb)) 
#define SSL_CTX_set_info_callback(ctx, cb) IAmiSSL->SSL_CTX_set_info_callback((ctx), (cb)) 
#define DTLSv1_server_method() IAmiSSL->DTLSv1_server_method() 
#define BIO_new_dgram(fd, close_flag) IAmiSSL->BIO_new_dgram((fd), (close_flag)) 
#define SSL_get_servername_type(s) IAmiSSL->SSL_get_servername_type((s)) 
#define SSL_get_current_compression(s) IAmiSSL->SSL_get_current_compression((s)) 
#define SSL_get_current_expansion(s) IAmiSSL->SSL_get_current_expansion((s)) 
#define SSL_COMP_get_name(comp) IAmiSSL->SSL_COMP_get_name((comp)) 
#define ENGINE_by_id(id) IAmiSSL->ENGINE_by_id((id)) 
#define SSL_CTX_set_client_cert_engine(ctx, e) IAmiSSL->SSL_CTX_set_client_cert_engine((ctx), (e)) 
#define DTLSv1_client_method() IAmiSSL->DTLSv1_client_method() 
#define DTLSv1_method() IAmiSSL->DTLSv1_method() 
#define SHA256(d, n, md) IAmiSSL->SHA256((d), (n), (md)) 
#define SHA512(d, n, md) IAmiSSL->SHA512((d), (n), (md)) 
#define AES_ige_encrypt(in, out, length, key, ivec, enc) IAmiSSL->AES_ige_encrypt((in), (out), (length), (key), (ivec), (enc)) 
#define EC_KEY_precompute_mult(key, ctx) IAmiSSL->EC_KEY_precompute_mult((key), (ctx)) 
#define ENGINE_load_private_key(e, key_id, ui_method, callback_data) IAmiSSL->ENGINE_load_private_key((e), (key_id), (ui_method), (callback_data)) 
#define ENGINE_load_public_key(e, key_id, ui_method, callback_data) IAmiSSL->ENGINE_load_public_key((e), (key_id), (ui_method), (callback_data)) 
#define ENGINE_ctrl_cmd(e, cmd_name, i, p, f, cmd_optional) IAmiSSL->ENGINE_ctrl_cmd((e), (cmd_name), (i), (p), (f), (cmd_optional)) 
#define ENGINE_set_default(e, flags) IAmiSSL->ENGINE_set_default((e), (flags)) 
#define ENGINE_ctrl(e, cmd, i, p, f) IAmiSSL->ENGINE_ctrl((e), (cmd), (i), (p), (f)) 
#define ENGINE_register_all_complete() IAmiSSL->ENGINE_register_all_complete() 
#define ENGINE_ctrl_cmd_string(e, cmd_name, arg, cmd_optional) IAmiSSL->ENGINE_ctrl_cmd_string((e), (cmd_name), (arg), (cmd_optional)) 
#define X509_VERIFY_PARAM_add0_policy(param, policy) IAmiSSL->X509_VERIFY_PARAM_add0_policy((param), (policy)) 
#define X509_VERIFY_PARAM_set_purpose(param, purpose) IAmiSSL->X509_VERIFY_PARAM_set_purpose((param), (purpose)) 
#define X509_VERIFY_PARAM_set_flags(param, flags) IAmiSSL->X509_VERIFY_PARAM_set_flags((param), (flags)) 
#define X509_VERIFY_PARAM_new() IAmiSSL->X509_VERIFY_PARAM_new() 
#define X509_POLICY_NODE_print(out, node, indent) IAmiSSL->X509_POLICY_NODE_print((out), (node), (indent)) 
#define X509_STORE_CTX_get0_policy_tree(ctx) IAmiSSL->X509_STORE_CTX_get0_policy_tree((ctx)) 
#define X509_STORE_CTX_get_explicit_policy(ctx) IAmiSSL->X509_STORE_CTX_get_explicit_policy((ctx)) 
#define X509_policy_tree_get0_policies(tree) IAmiSSL->X509_policy_tree_get0_policies((tree)) 
#define X509_policy_tree_get0_user_policies(tree) IAmiSSL->X509_policy_tree_get0_user_policies((tree)) 
#define BIO_get_callback_arg(b) IAmiSSL->BIO_get_callback_arg((b)) 
#define EVP_PKEY_add1_attr_by_NID(key, nid, type, bytes, len) IAmiSSL->EVP_PKEY_add1_attr_by_NID((key), (nid), (type), (bytes), (len)) 
#define ENGINE_get_RSA(e) IAmiSSL->ENGINE_get_RSA((e)) 
#define ENGINE_get_DSA(e) IAmiSSL->ENGINE_get_DSA((e)) 
#define ENGINE_get_DH(e) IAmiSSL->ENGINE_get_DH((e)) 
#define ENGINE_get_RAND(e) IAmiSSL->ENGINE_get_RAND((e)) 
#define ENGINE_get_ciphers(e) IAmiSSL->ENGINE_get_ciphers((e)) 
#define ENGINE_get_digests(e) IAmiSSL->ENGINE_get_digests((e)) 
#define ENGINE_init(e) IAmiSSL->ENGINE_init((e)) 
#define ENGINE_finish(e) IAmiSSL->ENGINE_finish((e)) 
#define OCSP_sendreq_new(io, path, req, maxline) IAmiSSL->OCSP_sendreq_new((io), (path), (req), (maxline)) 
#define OCSP_sendreq_nbio(presp, rctx) IAmiSSL->OCSP_sendreq_nbio((presp), (rctx)) 
#define OCSP_REQ_CTX_free(rctx) IAmiSSL->OCSP_REQ_CTX_free((rctx)) 
#define SSL_CTX_use_psk_identity_hint(ctx, identity_hint) IAmiSSL->SSL_CTX_use_psk_identity_hint((ctx), (identity_hint)) 
#define SSL_CTX_set_psk_client_callback(ctx, psk_client_callback) IAmiSSL->SSL_CTX_set_psk_client_callback((ctx), (psk_client_callback)) 
#define SSL_get_psk_identity_hint(s) IAmiSSL->SSL_get_psk_identity_hint((s)) 
#define SSL_set_psk_server_callback(ssl, psk_server_callback) IAmiSSL->SSL_set_psk_server_callback((ssl), (psk_server_callback)) 
#define SSL_use_psk_identity_hint(s, identity_hint) IAmiSSL->SSL_use_psk_identity_hint((s), (identity_hint)) 
#define SSL_set_psk_client_callback(ssl, psk_client_callback) IAmiSSL->SSL_set_psk_client_callback((ssl), (psk_client_callback)) 
#define SSL_CTX_set_psk_server_callback(ctx, psk_server_callback) IAmiSSL->SSL_CTX_set_psk_server_callback((ctx), (psk_server_callback)) 
#define SSL_get_psk_identity(s) IAmiSSL->SSL_get_psk_identity((s)) 
#define SSL_set_session_ticket_ext(s, ext_data, ext_len) IAmiSSL->SSL_set_session_ticket_ext((s), (ext_data), (ext_len)) 
#define SSL_set_session_secret_cb(s, tls_session_secret_cb, arg) IAmiSSL->SSL_set_session_secret_cb((s), (tls_session_secret_cb), (arg)) 
#define SSL_set_session_ticket_ext_cb(s, cb, arg) IAmiSSL->SSL_set_session_ticket_ext_cb((s), (cb), (arg)) 
#define SSL_set1_param(ssl, vpm) IAmiSSL->SSL_set1_param((ssl), (vpm)) 
#define SSL_CTX_set1_param(ctx, vpm) IAmiSSL->SSL_CTX_set1_param((ctx), (vpm)) 
#define SSL_renegotiate_abbreviated(s) IAmiSSL->SSL_renegotiate_abbreviated((s)) 
#define TLSv1_1_method() IAmiSSL->TLSv1_1_method() 
#define TLSv1_1_client_method() IAmiSSL->TLSv1_1_client_method() 
#define TLSv1_1_server_method() IAmiSSL->TLSv1_1_server_method() 
#define SSL_CTX_set_srp_client_pwd_callback(ctx, cb) IAmiSSL->SSL_CTX_set_srp_client_pwd_callback((ctx), (cb)) 
#define SSL_get_srp_g(s) IAmiSSL->SSL_get_srp_g((s)) 
#define SSL_CTX_set_srp_username_callback(ctx, cb) IAmiSSL->SSL_CTX_set_srp_username_callback((ctx), (cb)) 
#define SSL_get_srp_userinfo(s) IAmiSSL->SSL_get_srp_userinfo((s)) 
#define SSL_set_srp_server_param(s, N, g, sa, v, info) IAmiSSL->SSL_set_srp_server_param((s), (N), (g), (sa), (v), (info)) 
#define SSL_set_srp_server_param_pw(s, user, pass, grp) IAmiSSL->SSL_set_srp_server_param_pw((s), (user), (pass), (grp)) 
#define SSL_get_srp_N(s) IAmiSSL->SSL_get_srp_N((s)) 
#define SSL_get_srp_username(s) IAmiSSL->SSL_get_srp_username((s)) 
#define SSL_CTX_set_srp_password(ctx, password) IAmiSSL->SSL_CTX_set_srp_password((ctx), (password)) 
#define SSL_CTX_set_srp_strength(ctx, strength) IAmiSSL->SSL_CTX_set_srp_strength((ctx), (strength)) 
#define SSL_CTX_set_srp_verify_param_callback(ctx, cb) IAmiSSL->SSL_CTX_set_srp_verify_param_callback((ctx), (cb)) 
#define SSL_CTX_set_srp_cb_arg(ctx, arg) IAmiSSL->SSL_CTX_set_srp_cb_arg((ctx), (arg)) 
#define SSL_CTX_set_srp_username(ctx, name) IAmiSSL->SSL_CTX_set_srp_username((ctx), (name)) 
#define SSL_CTX_SRP_CTX_init(ctx) IAmiSSL->SSL_CTX_SRP_CTX_init((ctx)) 
#define SRP_Calc_A_param(s) IAmiSSL->SRP_Calc_A_param((s)) 
#define SRP_generate_server_master_secret(s, master_key) IAmiSSL->SRP_generate_server_master_secret((s), (master_key)) 
#define SSL_CTX_SRP_CTX_free(ctx) IAmiSSL->SSL_CTX_SRP_CTX_free((ctx)) 
#define SRP_generate_client_master_secret(s, master_key) IAmiSSL->SRP_generate_client_master_secret((s), (master_key)) 
#define SSL_srp_server_param_with_username(s, ad) IAmiSSL->SSL_srp_server_param_with_username((s), (ad)) 
#define SSL_SRP_CTX_free(ctx) IAmiSSL->SSL_SRP_CTX_free((ctx)) 
#define SSL_set_debug(s, debug) IAmiSSL->SSL_set_debug((s), (debug)) 
#define SSL_SESSION_get0_peer(s) IAmiSSL->SSL_SESSION_get0_peer((s)) 
#define TLSv1_2_client_method() IAmiSSL->TLSv1_2_client_method() 
#define SSL_SESSION_set1_id_context(s, sid_ctx, sid_ctx_len) IAmiSSL->SSL_SESSION_set1_id_context((s), (sid_ctx), (sid_ctx_len)) 
#define TLSv1_2_server_method() IAmiSSL->TLSv1_2_server_method() 
#define SSL_cache_hit(s) IAmiSSL->SSL_cache_hit((s)) 
#define SSL_set_state(ssl, state) IAmiSSL->SSL_set_state((ssl), (state)) 
#define SSL_CIPHER_get_id(c) IAmiSSL->SSL_CIPHER_get_id((c)) 
#define TLSv1_2_method() IAmiSSL->TLSv1_2_method() 
#define SSL_export_keying_material(s, out, olen, label, llen, p, plen, use_context) IAmiSSL->SSL_export_keying_material((s), (out), (olen), (label), (llen), (p), (plen), (use_context)) 
#define SSL_set_tlsext_use_srtp(ctx, profiles) IAmiSSL->SSL_set_tlsext_use_srtp((ctx), (profiles)) 
#define SSL_CTX_set_next_protos_advertised_cb(s, cb, arg) IAmiSSL->SSL_CTX_set_next_protos_advertised_cb((s), (cb), (arg)) 
#define SSL_get0_next_proto_negotiated(s, data, len) IAmiSSL->SSL_get0_next_proto_negotiated((s), (data), (len)) 
#define SSL_get_selected_srtp_profile(s) IAmiSSL->SSL_get_selected_srtp_profile((s)) 
#define SSL_CTX_set_tlsext_use_srtp(ctx, profiles) IAmiSSL->SSL_CTX_set_tlsext_use_srtp((ctx), (profiles)) 
#define SSL_select_next_proto(out, outlen, in, inlen, client, client_len) IAmiSSL->SSL_select_next_proto((out), (outlen), (in), (inlen), (client), (client_len)) 
#define SSL_get_srtp_profiles(s) IAmiSSL->SSL_get_srtp_profiles((s)) 
#define SSL_CTX_set_next_proto_select_cb(s, cb, arg) IAmiSSL->SSL_CTX_set_next_proto_select_cb((s), (cb), (arg)) 
#define SSL_SESSION_get_compress_id(s) IAmiSSL->SSL_SESSION_get_compress_id((s)) 
#define SSL_CTX_set_tmp_ecdh_callback(ctx, ecdh) IAmiSSL->SSL_CTX_set_tmp_ecdh_callback((ctx), (ecdh)) 
#define SSL_set_tmp_ecdh_callback(ssl, ecdh) IAmiSSL->SSL_set_tmp_ecdh_callback((ssl), (ecdh)) 
#define SSL_SRP_CTX_init(s) IAmiSSL->SSL_SRP_CTX_init((s)) 
#define DES_options() IAmiSSL->DES_options() 
#define ERR_load_ENGINE_strings() IAmiSSL->ERR_load_ENGINE_strings() 
#define ENGINE_set_DSA(e, dsa_meth) IAmiSSL->ENGINE_set_DSA((e), (dsa_meth)) 
#define ENGINE_get_finish_function(e) IAmiSSL->ENGINE_get_finish_function((e)) 
#define ENGINE_get_default_RSA() IAmiSSL->ENGINE_get_default_RSA() 
#define ENGINE_set_DH(e, dh_meth) IAmiSSL->ENGINE_set_DH((e), (dh_meth)) 
#define ENGINE_get_init_function(e) IAmiSSL->ENGINE_get_init_function((e)) 
#define ENGINE_set_init_function(e, init_f) IAmiSSL->ENGINE_set_init_function((e), (init_f)) 
#define ENGINE_set_default_DSA(e) IAmiSSL->ENGINE_set_default_DSA((e)) 
#define ENGINE_get_last() IAmiSSL->ENGINE_get_last() 
#define ENGINE_get_prev(e) IAmiSSL->ENGINE_get_prev((e)) 
#define ENGINE_get_default_DH() IAmiSSL->ENGINE_get_default_DH() 
#define ENGINE_set_finish_function(e, finish_f) IAmiSSL->ENGINE_set_finish_function((e), (finish_f)) 
#define ENGINE_set_RSA(e, rsa_meth) IAmiSSL->ENGINE_set_RSA((e), (rsa_meth)) 
#define ENGINE_set_default_RAND(e) IAmiSSL->ENGINE_set_default_RAND((e)) 
#define ENGINE_get_default_DSA() IAmiSSL->ENGINE_get_default_DSA() 
#define ENGINE_set_default_RSA(e) IAmiSSL->ENGINE_set_default_RSA((e)) 
#define ENGINE_get_default_RAND() IAmiSSL->ENGINE_get_default_RAND() 
#define ENGINE_set_RAND(e, rand_meth) IAmiSSL->ENGINE_set_RAND((e), (rand_meth)) 
#define ENGINE_set_default_DH(e) IAmiSSL->ENGINE_set_default_DH((e)) 
#define ENGINE_get_ctrl_function(e) IAmiSSL->ENGINE_get_ctrl_function((e)) 
#define ENGINE_set_ctrl_function(e, ctrl_f) IAmiSSL->ENGINE_set_ctrl_function((e), (ctrl_f)) 
#define ENGINE_unregister_ciphers(e) IAmiSSL->ENGINE_unregister_ciphers((e)) 
#define ENGINE_unregister_RSA(e) IAmiSSL->ENGINE_unregister_RSA((e)) 
#define ENGINE_register_all_RAND() IAmiSSL->ENGINE_register_all_RAND() 
#define ENGINE_load_dynamic() IAmiSSL->ENGINE_load_dynamic() 
#define ENGINE_get_digest_engine(nid) IAmiSSL->ENGINE_get_digest_engine((nid)) 
#define ENGINE_register_DH(e) IAmiSSL->ENGINE_register_DH((e)) 
#define ENGINE_register_RAND(e) IAmiSSL->ENGINE_register_RAND((e)) 
#define ENGINE_load_cryptodev() IAmiSSL->ENGINE_load_cryptodev() 
#define ENGINE_register_ciphers(e) IAmiSSL->ENGINE_register_ciphers((e)) 
#define ENGINE_load_ubsec() IAmiSSL->ENGINE_load_ubsec() 
#define ENGINE_load_openssl() IAmiSSL->ENGINE_load_openssl() 
#define ENGINE_get_cmd_defns(e) IAmiSSL->ENGINE_get_cmd_defns((e)) 
#define ENGINE_set_load_privkey_function(e, loadpriv_f) IAmiSSL->ENGINE_set_load_privkey_function((e), (loadpriv_f)) 
#define ENGINE_set_default_digests(e) IAmiSSL->ENGINE_set_default_digests((e)) 
#define ENGINE_register_RSA(e) IAmiSSL->ENGINE_register_RSA((e)) 
#define ENGINE_unregister_DSA(e) IAmiSSL->ENGINE_unregister_DSA((e)) 
#define ENGINE_set_ciphers(e, f) IAmiSSL->ENGINE_set_ciphers((e), (f)) 
#define RAND_set_rand_engine(engine) IAmiSSL->RAND_set_rand_engine((engine)) 
#define ENGINE_get_digest(e, nid) IAmiSSL->ENGINE_get_digest((e), (nid)) 
#define ENGINE_get_cipher(e, nid) IAmiSSL->ENGINE_get_cipher((e), (nid)) 
#define ENGINE_cmd_is_executable(e, cmd) IAmiSSL->ENGINE_cmd_is_executable((e), (cmd)) 
#define ENGINE_register_DSA(e) IAmiSSL->ENGINE_register_DSA((e)) 
#define ENGINE_set_load_pubkey_function(e, loadpub_f) IAmiSSL->ENGINE_set_load_pubkey_function((e), (loadpub_f)) 
#define ENGINE_get_load_pubkey_function(e) IAmiSSL->ENGINE_get_load_pubkey_function((e)) 
#define ENGINE_register_all_RSA() IAmiSSL->ENGINE_register_all_RSA() 
#define ENGINE_unregister_digests(e) IAmiSSL->ENGINE_unregister_digests((e)) 
#define ENGINE_get_ex_new_index(argl, argp, new_func, dep_func, free_func) IAmiSSL->ENGINE_get_ex_new_index((argl), (argp), (new_func), (dep_func), (free_func)) 
#define ENGINE_get_ex_data(e, idx) IAmiSSL->ENGINE_get_ex_data((e), (idx)) 
#define ENGINE_set_cmd_defns(e, defns) IAmiSSL->ENGINE_set_cmd_defns((e), (defns)) 
#define ENGINE_register_digests(e) IAmiSSL->ENGINE_register_digests((e)) 
#define ENGINE_register_all_DH() IAmiSSL->ENGINE_register_all_DH() 
#define ENGINE_get_flags(e) IAmiSSL->ENGINE_get_flags((e)) 
#define ENGINE_unregister_DH(e) IAmiSSL->ENGINE_unregister_DH((e)) 
#define ENGINE_register_all_DSA() IAmiSSL->ENGINE_register_all_DSA() 
#define ENGINE_set_digests(e, f) IAmiSSL->ENGINE_set_digests((e), (f)) 
#define ENGINE_register_complete(e) IAmiSSL->ENGINE_register_complete((e)) 
#define ENGINE_set_ex_data(e, idx, arg) IAmiSSL->ENGINE_set_ex_data((e), (idx), (arg)) 
#define ENGINE_set_destroy_function(e, destroy_f) IAmiSSL->ENGINE_set_destroy_function((e), (destroy_f)) 
#define ENGINE_get_cipher_engine(nid) IAmiSSL->ENGINE_get_cipher_engine((nid)) 
#define ENGINE_load_cswift() IAmiSSL->ENGINE_load_cswift() 
#define ENGINE_set_default_ciphers(e) IAmiSSL->ENGINE_set_default_ciphers((e)) 
#define ENGINE_unregister_RAND(e) IAmiSSL->ENGINE_unregister_RAND((e)) 
#define ENGINE_load_nuron() IAmiSSL->ENGINE_load_nuron() 
#define ENGINE_set_table_flags(flags) IAmiSSL->ENGINE_set_table_flags((flags)) 
#define ENGINE_load_chil() IAmiSSL->ENGINE_load_chil() 
#define ENGINE_get_destroy_function(e) IAmiSSL->ENGINE_get_destroy_function((e)) 
#define ENGINE_load_atalla() IAmiSSL->ENGINE_load_atalla() 
#define ENGINE_get_table_flags() IAmiSSL->ENGINE_get_table_flags() 
#define ENGINE_set_flags(e, flags) IAmiSSL->ENGINE_set_flags((e), (flags)) 
#define ENGINE_get_load_privkey_function(e) IAmiSSL->ENGINE_get_load_privkey_function((e)) 
#define ENGINE_set_default_string(e, def_list) IAmiSSL->ENGINE_set_default_string((e), (def_list)) 
#define ENGINE_add_conf_module() IAmiSSL->ENGINE_add_conf_module() 
#define ENGINE_load_aep() IAmiSSL->ENGINE_load_aep() 
#define ENGINE_load_sureware() IAmiSSL->ENGINE_load_sureware() 
#define ENGINE_load_4758cca() IAmiSSL->ENGINE_load_4758cca() 
#define ENGINE_up_ref(e) IAmiSSL->ENGINE_up_ref((e)) 
#define ENGINE_set_STORE(e, store_meth) IAmiSSL->ENGINE_set_STORE((e), (store_meth)) 
#define ENGINE_register_ECDSA(e) IAmiSSL->ENGINE_register_ECDSA((e)) 
#define BN_BLINDING_get_thread_id(b) IAmiSSL->BN_BLINDING_get_thread_id((b)) 
#define EC_GROUP_get_trinomial_basis(eg, k) IAmiSSL->EC_GROUP_get_trinomial_basis((eg), (k)) 
#define ECDH_get_default_method() IAmiSSL->ECDH_get_default_method() 
#define ENGINE_register_ECDH(e) IAmiSSL->ENGINE_register_ECDH((e)) 
#define SHA512_Update(c, data, len) IAmiSSL->SHA512_Update((c), (data), (len)) 
#define i2d_ECPrivateKey(key, out) IAmiSSL->i2d_ECPrivateKey((key), (out)) 
#define BN_GF2m_mod_exp_arr(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_exp_arr((r), (a), (b), (p), (ctx)) 
#define BN_GF2m_mod_mul_arr(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_mul_arr((r), (a), (b), (p), (ctx)) 
#define o2i_ECPublicKey(key, in, len) IAmiSSL->o2i_ECPublicKey((key), (in), (len)) 
#define EC_KEY_copy(dst, src) IAmiSSL->EC_KEY_copy((dst), (src)) 
#define EC_GROUP_check_discriminant(group, ctx) IAmiSSL->EC_GROUP_check_discriminant((group), (ctx)) 
#define i2o_ECPublicKey(key, out) IAmiSSL->i2o_ECPublicKey((key), (out)) 
#define EC_GROUP_new_curve_GF2m(p, a, b, ctx) IAmiSSL->EC_GROUP_new_curve_GF2m((p), (a), (b), (ctx)) 
#define ENGINE_unregister_STORE(e) IAmiSSL->ENGINE_unregister_STORE((e)) 
#define EVP_PKEY_get1_EC_KEY(pkey) IAmiSSL->EVP_PKEY_get1_EC_KEY((pkey)) 
#define ENGINE_get_default_ECDH() IAmiSSL->ENGINE_get_default_ECDH() 
#define EC_KEY_get_conv_form(key) IAmiSSL->EC_KEY_get_conv_form((key)) 
#define ENGINE_get_static_state() IAmiSSL->ENGINE_get_static_state() 
#define ECDSA_SIG_new() IAmiSSL->ECDSA_SIG_new() 
#define EC_POINT_bn2point(g, b, p, ctx) IAmiSSL->EC_POINT_bn2point((g), (b), (p), (ctx)) 
#define EC_KEY_get_key_method_data(key, dup_func, free_func, clear_free_func) IAmiSSL->EC_KEY_get_key_method_data((key), (dup_func), (free_func), (clear_free_func)) 
#define ECDSA_sign_ex(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey) IAmiSSL->ECDSA_sign_ex((type), (dgst), (dgstlen), (sig), (siglen), (kinv), (rp), (eckey)) 
#define EC_GROUP_get_pentanomial_basis(ecgroup, k1, k2, k3) IAmiSSL->EC_GROUP_get_pentanomial_basis((ecgroup), (k1), (k2), (k3)) 
#define ECDSA_sign_setup(eckey, ctx, kinv, rp) IAmiSSL->ECDSA_sign_setup((eckey), (ctx), (kinv), (rp)) 
#define BN_GF2m_mod_solve_quad_arr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_solve_quad_arr((r), (a), (p), (ctx)) 
#define EC_KEY_up_ref(key) IAmiSSL->EC_KEY_up_ref((key)) 
#define d2i_EC_PUBKEY(a, pp, length) IAmiSSL->d2i_EC_PUBKEY((a), (pp), (length)) 
#define EC_GROUP_have_precompute_mult(group) IAmiSSL->EC_GROUP_have_precompute_mult((group)) 
#define BN_GF2m_mod_arr(r, a, p) IAmiSSL->BN_GF2m_mod_arr((r), (a), (p)) 
#define ECDH_get_ex_data(d, idx) IAmiSSL->ECDH_get_ex_data((d), (idx)) 
#define ENGINE_unregister_ECDH(e) IAmiSSL->ENGINE_unregister_ECDH((e)) 
#define ECDH_OpenSSL() IAmiSSL->ECDH_OpenSSL() 
#define EC_POINT_dup(src, group) IAmiSSL->EC_POINT_dup((src), (group)) 
#define EVP_PKEY_set1_EC_KEY(pkey, key) IAmiSSL->EVP_PKEY_set1_EC_KEY((pkey), (key)) 
#define BN_GF2m_mod_sqrt_arr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqrt_arr((r), (a), (p), (ctx)) 
#define EC_KEY_set_private_key(key, prv) IAmiSSL->EC_KEY_set_private_key((key), (prv)) 
#define BN_GF2m_poly2arr(a, p, max) IAmiSSL->BN_GF2m_poly2arr((a), (p), (max)) 
#define i2d_ECParameters(key, out) IAmiSSL->i2d_ECParameters((key), (out)) 
#define ENGINE_set_ECDH(e, ecdh_meth) IAmiSSL->ENGINE_set_ECDH((e), (ecdh_meth)) 
#define SHA256_Init(c) IAmiSSL->SHA256_Init((c)) 
#define ECDSA_get_ex_data(d, idx) IAmiSSL->ECDSA_get_ex_data((d), (idx)) 
#define SHA224(d, n, md) IAmiSSL->SHA224((d), (n), (md)) 
#define EC_GROUP_get_seed_len(ecgroup) IAmiSSL->EC_GROUP_get_seed_len((ecgroup)) 
#define i2d_EC_PUBKEY(a, pp) IAmiSSL->i2d_EC_PUBKEY((a), (pp)) 
#define ECDSA_get_default_method() IAmiSSL->ECDSA_get_default_method() 
#define EC_GFp_nist_method() IAmiSSL->EC_GFp_nist_method() 
#define ENGINE_load_padlock() IAmiSSL->ENGINE_load_padlock() 
#define EC_GROUP_set_curve_name(group, nid) IAmiSSL->EC_GROUP_set_curve_name((group), (nid)) 
#define BN_GF2m_mod_sqr_arr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqr_arr((r), (a), (p), (ctx)) 
#define BIO_s_datagram() IAmiSSL->BIO_s_datagram() 
#define ENGINE_set_default_ECDSA(e) IAmiSSL->ENGINE_set_default_ECDSA((e)) 
#define ECDH_set_default_method(method) IAmiSSL->ECDH_set_default_method((method)) 
#define SHA384_Update(c, data, len) IAmiSSL->SHA384_Update((c), (data), (len)) 
#define EC_KEY_insert_key_method_data(key, data, dup_func, free_func, clear_free_func) IAmiSSL->EC_KEY_insert_key_method_data((key), (data), (dup_func), (free_func), (clear_free_func)) 
#define SHA224_Final(md, c) IAmiSSL->SHA224_Final((md), (c)) 
#define SHA224_Update(c, data, len) IAmiSSL->SHA224_Update((c), (data), (len)) 
#define d2i_ECPrivateKey(key, in, len) IAmiSSL->d2i_ECPrivateKey((key), (in), (len)) 
#define ENGINE_register_all_STORE() IAmiSSL->ENGINE_register_all_STORE() 
#define SHA512_Final(md, c) IAmiSSL->SHA512_Final((md), (c)) 
#define EC_GROUP_get_asn1_flag(group) IAmiSSL->EC_GROUP_get_asn1_flag((group)) 
#define ECDH_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->ECDH_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define EC_GROUP_get0_seed(x) IAmiSSL->EC_GROUP_get0_seed((x)) 
#define BN_GF2m_mod_div_arr(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_div_arr((r), (a), (b), (p), (ctx)) 
#define ENGINE_set_ECDSA(e, ecdsa_meth) IAmiSSL->ENGINE_set_ECDSA((e), (ecdsa_meth)) 
#define ECDH_set_method(key, meth) IAmiSSL->ECDH_set_method((key), (meth)) 
#define ECDH_set_ex_data(d, idx, arg) IAmiSSL->ECDH_set_ex_data((d), (idx), (arg)) 
#define ECDSA_OpenSSL() IAmiSSL->ECDSA_OpenSSL() 
#define EC_KEY_get_enc_flags(key) IAmiSSL->EC_KEY_get_enc_flags((key)) 
#define ECDSA_set_default_method(meth) IAmiSSL->ECDSA_set_default_method((meth)) 
#define EC_POINT_set_compressed_coordinates_GF2m(group, p, x, y_bit, ctx) IAmiSSL->EC_POINT_set_compressed_coordinates_GF2m((group), (p), (x), (y_bit), (ctx)) 
#define EC_GROUP_cmp(a, b, ctx) IAmiSSL->EC_GROUP_cmp((a), (b), (ctx)) 
#define SHA224_Init(c) IAmiSSL->SHA224_Init((c)) 
#define SHA512_Init(c) IAmiSSL->SHA512_Init((c)) 
#define ERR_load_ECDSA_strings() IAmiSSL->ERR_load_ECDSA_strings() 
#define EC_GROUP_get_basis_type(group) IAmiSSL->EC_GROUP_get_basis_type((group)) 
#define ENGINE_register_all_ECDH() IAmiSSL->ENGINE_register_all_ECDH() 
#define ENGINE_register_all_ECDSA() IAmiSSL->ENGINE_register_all_ECDSA() 
#define EC_GROUP_dup(src) IAmiSSL->EC_GROUP_dup((src)) 
#define ENGINE_get_default_ECDSA() IAmiSSL->ENGINE_get_default_ECDSA() 
#define SHA256_Transform(c, data) IAmiSSL->SHA256_Transform((c), (data)) 
#define EC_KEY_set_enc_flags(eckey, flags) IAmiSSL->EC_KEY_set_enc_flags((eckey), (flags)) 
#define EC_POINT_point2hex(group, point, form, ctx) IAmiSSL->EC_POINT_point2hex((group), (point), (form), (ctx)) 
#define ENGINE_get_STORE(e) IAmiSSL->ENGINE_get_STORE((e)) 
#define ECDSA_do_sign_ex(dgst, dgstlen, kinv, rp, eckey) IAmiSSL->ECDSA_do_sign_ex((dgst), (dgstlen), (kinv), (rp), (eckey)) 
#define SHA512_Transform(c, data) IAmiSSL->SHA512_Transform((c), (data)) 
#define EC_KEY_set_public_key(key, pub) IAmiSSL->EC_KEY_set_public_key((key), (pub)) 
#define ENGINE_register_STORE(e) IAmiSSL->ENGINE_register_STORE((e)) 
#define EC_GROUP_get_curve_name(group) IAmiSSL->EC_GROUP_get_curve_name((group)) 
#define SHA256_Final(md, c) IAmiSSL->SHA256_Final((md), (c)) 
#define ENGINE_get_ECDH(e) IAmiSSL->ENGINE_get_ECDH((e)) 
#define ENGINE_get_ECDSA(e) IAmiSSL->ENGINE_get_ECDSA((e)) 
#define ERR_load_ECDH_strings() IAmiSSL->ERR_load_ECDH_strings() 
#define ECDSA_set_method(eckey, meth) IAmiSSL->ECDSA_set_method((eckey), (meth)) 
#define d2i_ECParameters(key, in, len) IAmiSSL->d2i_ECParameters((key), (in), (len)) 
#define SHA384_Init(c) IAmiSSL->SHA384_Init((c)) 
#define ECDSA_set_ex_data(d, idx, arg) IAmiSSL->ECDSA_set_ex_data((d), (idx), (arg)) 
#define SHA384_Final(md, c) IAmiSSL->SHA384_Final((md), (c)) 
#define ECDSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->ECDSA_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func)) 
#define SHA384(d, n, md) IAmiSSL->SHA384((d), (n), (md)) 
#define ENGINE_set_default_ECDH(e) IAmiSSL->ENGINE_set_default_ECDH((e)) 
#define EC_POINT_hex2point(group, c, p, ctx) IAmiSSL->EC_POINT_hex2point((group), (c), (p), (ctx)) 
#define SHA256_Update(c, data, len) IAmiSSL->SHA256_Update((c), (data), (len)) 
#define BN_GF2m_mod_inv_arr(r, b, p, ctx) IAmiSSL->BN_GF2m_mod_inv_arr((r), (b), (p), (ctx)) 
#define ENGINE_unregister_ECDSA(e) IAmiSSL->ENGINE_unregister_ECDSA((e)) 
#define BN_BLINDING_set_thread_id(b, l) IAmiSSL->BN_BLINDING_set_thread_id((b), (l)) 
#define DH_check_pub_key(dh, pub_key, codes) IAmiSSL->DH_check_pub_key((dh), (pub_key), (codes)) 
#define Camellia_cbc_encrypt(in, out, length, key, ivec, enc) IAmiSSL->Camellia_cbc_encrypt((in), (out), (length), (key), (ivec), (enc)) 
#define Camellia_cfb128_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->Camellia_cfb128_encrypt((in), (out), (length), (key), (ivec), (num), (enc)) 
#define Camellia_cfb1_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->Camellia_cfb1_encrypt((in), (out), (length), (key), (ivec), (num), (enc)) 
#define Camellia_cfb8_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->Camellia_cfb8_encrypt((in), (out), (length), (key), (ivec), (num), (enc)) 
#define Camellia_ctr128_encrypt(in, out, length, key, ivec, ecount_buf, num) IAmiSSL->Camellia_ctr128_encrypt((in), (out), (length), (key), (ivec), (ecount_buf), (num)) 
#define Camellia_decrypt(in, out, key) IAmiSSL->Camellia_decrypt((in), (out), (key)) 
#define Camellia_ecb_encrypt(in, out, key, enc) IAmiSSL->Camellia_ecb_encrypt((in), (out), (key), (enc)) 
#define Camellia_encrypt(in, out, key) IAmiSSL->Camellia_encrypt((in), (out), (key)) 
#define Camellia_ofb128_encrypt(in, out, length, key, ivec, num) IAmiSSL->Camellia_ofb128_encrypt((in), (out), (length), (key), (ivec), (num)) 
#define Camellia_set_key(userKey, bits, key) IAmiSSL->Camellia_set_key((userKey), (bits), (key)) 
#define EVP_camellia_128_cbc() IAmiSSL->EVP_camellia_128_cbc() 
#define EVP_camellia_128_cfb128() IAmiSSL->EVP_camellia_128_cfb128() 
#define EVP_camellia_128_cfb1() IAmiSSL->EVP_camellia_128_cfb1() 
#define EVP_camellia_128_cfb8() IAmiSSL->EVP_camellia_128_cfb8() 
#define EVP_camellia_128_ecb() IAmiSSL->EVP_camellia_128_ecb() 
#define EVP_camellia_128_ofb() IAmiSSL->EVP_camellia_128_ofb() 
#define EVP_camellia_192_cbc() IAmiSSL->EVP_camellia_192_cbc() 
#define EVP_camellia_192_cfb128() IAmiSSL->EVP_camellia_192_cfb128() 
#define EVP_camellia_192_cfb1() IAmiSSL->EVP_camellia_192_cfb1() 
#define EVP_camellia_192_cfb8() IAmiSSL->EVP_camellia_192_cfb8() 
#define EVP_camellia_192_ecb() IAmiSSL->EVP_camellia_192_ecb() 
#define EVP_camellia_192_ofb() IAmiSSL->EVP_camellia_192_ofb() 
#define EVP_camellia_256_cbc() IAmiSSL->EVP_camellia_256_cbc() 
#define EVP_camellia_256_cfb128() IAmiSSL->EVP_camellia_256_cfb128() 
#define EVP_camellia_256_cfb1() IAmiSSL->EVP_camellia_256_cfb1() 
#define EVP_camellia_256_cfb8() IAmiSSL->EVP_camellia_256_cfb8() 
#define EVP_camellia_256_ecb() IAmiSSL->EVP_camellia_256_ecb() 
#define EVP_camellia_256_ofb() IAmiSSL->EVP_camellia_256_ofb() 
#define AES_bi_ige_encrypt(in, out, length, key, key2, ivec, enc) IAmiSSL->AES_bi_ige_encrypt((in), (out), (length), (key), (key2), (ivec), (enc)) 
#define SEED_decrypt(s, d, ks) IAmiSSL->SEED_decrypt((s), (d), (ks)) 
#define SEED_encrypt(s, d, ks) IAmiSSL->SEED_encrypt((s), (d), (ks)) 
#define SEED_cbc_encrypt(in, out, len, ks, ivec, enc) IAmiSSL->SEED_cbc_encrypt((in), (out), (len), (ks), (ivec), (enc)) 
#define EVP_seed_ofb() IAmiSSL->EVP_seed_ofb() 
#define SEED_cfb128_encrypt(in, out, len, ks, ivec, num, enc) IAmiSSL->SEED_cfb128_encrypt((in), (out), (len), (ks), (ivec), (num), (enc)) 
#define SEED_ofb128_encrypt(in, out, len, ks, ivec, num) IAmiSSL->SEED_ofb128_encrypt((in), (out), (len), (ks), (ivec), (num)) 
#define EVP_seed_cbc() IAmiSSL->EVP_seed_cbc() 
#define SEED_ecb_encrypt(in, out, ks, enc) IAmiSSL->SEED_ecb_encrypt((in), (out), (ks), (enc)) 
#define EVP_seed_ecb() IAmiSSL->EVP_seed_ecb() 
#define SEED_set_key(rawkey, ks) IAmiSSL->SEED_set_key((rawkey), (ks)) 
#define EVP_seed_cfb128() IAmiSSL->EVP_seed_cfb128() 
#define AES_unwrap_key(key, iv, out, in, inlen) IAmiSSL->AES_unwrap_key((key), (iv), (out), (in), (inlen)) 
#define AES_wrap_key(key, iv, out, in, inlen) IAmiSSL->AES_wrap_key((key), (iv), (out), (in), (inlen)) 
#define CMS_ReceiptRequest_free(rr) IAmiSSL->CMS_ReceiptRequest_free((rr)) 
#define CMS_add0_CertificateChoices(cms) IAmiSSL->CMS_add0_CertificateChoices((cms)) 
#define CMS_unsigned_add1_attr_by_OBJ(si, obj, type, bytes, len) IAmiSSL->CMS_unsigned_add1_attr_by_OBJ((si), (obj), (type), (bytes), (len)) 
#define ERR_load_CMS_strings() IAmiSSL->ERR_load_CMS_strings() 
#define CMS_sign_receipt(si, signcert, pkey, certs, flags) IAmiSSL->CMS_sign_receipt((si), (signcert), (pkey), (certs), (flags)) 
#define i2d_CMS_ContentInfo(a, out) IAmiSSL->i2d_CMS_ContentInfo((a), (out)) 
#define CMS_signed_delete_attr(si, loc) IAmiSSL->CMS_signed_delete_attr((si), (loc)) 
#define d2i_CMS_bio(bp, cms) IAmiSSL->d2i_CMS_bio((bp), (cms)) 
#define CMS_unsigned_get_attr_by_NID(si, nid, lastpos) IAmiSSL->CMS_unsigned_get_attr_by_NID((si), (nid), (lastpos)) 
#define CMS_verify(cms, certs, store, dcont, out, flags) IAmiSSL->CMS_verify((cms), (certs), (store), (dcont), (out), (flags)) 
#define SMIME_read_CMS(bio, biocont) IAmiSSL->SMIME_read_CMS((bio), (biocont)) 
#define CMS_decrypt_set1_key(cms, key, keylen, id, idlen) IAmiSSL->CMS_decrypt_set1_key((cms), (key), (keylen), (id), (idlen)) 
#define CMS_SignerInfo_get0_algs(si, pk, signer, pdig, psig) IAmiSSL->CMS_SignerInfo_get0_algs((si), (pk), (signer), (pdig), (psig)) 
#define CMS_add1_cert(cms, cert) IAmiSSL->CMS_add1_cert((cms), (cert)) 
#define CMS_set_detached(cms, detached) IAmiSSL->CMS_set_detached((cms), (detached)) 
#define CMS_encrypt(certs, in, cipher, flags) IAmiSSL->CMS_encrypt((certs), (in), (cipher), (flags)) 
#define CMS_EnvelopedData_create(cipher) IAmiSSL->CMS_EnvelopedData_create((cipher)) 
#define CMS_uncompress(cms, dcont, out, flags) IAmiSSL->CMS_uncompress((cms), (dcont), (out), (flags)) 
#define CMS_add0_crl(cms, crl) IAmiSSL->CMS_add0_crl((cms), (crl)) 
#define CMS_SignerInfo_verify_content(si, chain) IAmiSSL->CMS_SignerInfo_verify_content((si), (chain)) 
#define CMS_unsigned_get0_data_by_OBJ(si, oid, lastpos, type) IAmiSSL->CMS_unsigned_get0_data_by_OBJ((si), (oid), (lastpos), (type)) 
#define PEM_write_bio_CMS(out, cms) IAmiSSL->PEM_write_bio_CMS((out), (cms)) 
#define CMS_unsigned_get_attr(si, loc) IAmiSSL->CMS_unsigned_get_attr((si), (loc)) 
#define CMS_RecipientInfo_ktri_cert_cmp(ri, cert) IAmiSSL->CMS_RecipientInfo_ktri_cert_cmp((ri), (cert)) 
#define CMS_RecipientInfo_ktri_get0_algs(ri, pk, recip, palg) IAmiSSL->CMS_RecipientInfo_ktri_get0_algs((ri), (pk), (recip), (palg)) 
#define CMS_ContentInfo_free(cms) IAmiSSL->CMS_ContentInfo_free((cms)) 
#define CMS_final(cms, data, dcont, flags) IAmiSSL->CMS_final((cms), (data), (dcont), (flags)) 
#define CMS_add_simple_smimecap(algs, algnid, keysize) IAmiSSL->CMS_add_simple_smimecap((algs), (algnid), (keysize)) 
#define CMS_SignerInfo_verify(si) IAmiSSL->CMS_SignerInfo_verify((si)) 
#define CMS_data(cms, out, flags) IAmiSSL->CMS_data((cms), (out), (flags)) 
#define d2i_CMS_ReceiptRequest(a, in, len) IAmiSSL->d2i_CMS_ReceiptRequest((a), (in), (len)) 
#define CMS_compress(in, comp_nid, flags) IAmiSSL->CMS_compress((in), (comp_nid), (flags)) 
#define CMS_digest_create(in, md, flags) IAmiSSL->CMS_digest_create((in), (md), (flags)) 
#define CMS_SignerInfo_cert_cmp(si, cert) IAmiSSL->CMS_SignerInfo_cert_cmp((si), (cert)) 
#define CMS_SignerInfo_sign(si) IAmiSSL->CMS_SignerInfo_sign((si)) 
#define CMS_data_create(in, flags) IAmiSSL->CMS_data_create((in), (flags)) 
#define i2d_CMS_bio(bp, cms) IAmiSSL->i2d_CMS_bio((bp), (cms)) 
#define CMS_EncryptedData_set1_key(cms, ciph, key, keylen) IAmiSSL->CMS_EncryptedData_set1_key((cms), (ciph), (key), (keylen)) 
#define CMS_decrypt(cms, pkey, cert, dcont, out, flags) IAmiSSL->CMS_decrypt((cms), (pkey), (cert), (dcont), (out), (flags)) 
#define CMS_unsigned_delete_attr(si, loc) IAmiSSL->CMS_unsigned_delete_attr((si), (loc)) 
#define CMS_unsigned_get_attr_count(si) IAmiSSL->CMS_unsigned_get_attr_count((si)) 
#define CMS_add_smimecap(si, algs) IAmiSSL->CMS_add_smimecap((si), (algs)) 
#define CMS_signed_get_attr_by_OBJ(si, obj, lastpos) IAmiSSL->CMS_signed_get_attr_by_OBJ((si), (obj), (lastpos)) 
#define d2i_CMS_ContentInfo(a, in, len) IAmiSSL->d2i_CMS_ContentInfo((a), (in), (len)) 
#define CMS_add_standard_smimecap(smcap) IAmiSSL->CMS_add_standard_smimecap((smcap)) 
#define CMS_ContentInfo_new() IAmiSSL->CMS_ContentInfo_new() 
#define CMS_RecipientInfo_type(ri) IAmiSSL->CMS_RecipientInfo_type((ri)) 
#define CMS_get0_type(cms) IAmiSSL->CMS_get0_type((cms)) 
#define CMS_is_detached(cms) IAmiSSL->CMS_is_detached((cms)) 
#define CMS_sign(signcert, pkey, certs, data, flags) IAmiSSL->CMS_sign((signcert), (pkey), (certs), (data), (flags)) 
#define CMS_signed_add1_attr(si, attr) IAmiSSL->CMS_signed_add1_attr((si), (attr)) 
#define CMS_unsigned_get_attr_by_OBJ(si, obj, lastpos) IAmiSSL->CMS_unsigned_get_attr_by_OBJ((si), (obj), (lastpos)) 
#define SMIME_write_CMS(bio, cms, data, flags) IAmiSSL->SMIME_write_CMS((bio), (cms), (data), (flags)) 
#define CMS_EncryptedData_decrypt(cms, key, keylen, dcont, out, flags) IAmiSSL->CMS_EncryptedData_decrypt((cms), (key), (keylen), (dcont), (out), (flags)) 
#define CMS_get0_RecipientInfos(cms) IAmiSSL->CMS_get0_RecipientInfos((cms)) 
#define CMS_add0_RevocationInfoChoice(cms) IAmiSSL->CMS_add0_RevocationInfoChoice((cms)) 
#define CMS_decrypt_set1_pkey(cms, pk, cert) IAmiSSL->CMS_decrypt_set1_pkey((cms), (pk), (cert)) 
#define CMS_SignerInfo_set1_signer_cert(si, signer) IAmiSSL->CMS_SignerInfo_set1_signer_cert((si), (signer)) 
#define CMS_get0_signers(cms) IAmiSSL->CMS_get0_signers((cms)) 
#define CMS_ReceiptRequest_get0_values(rr, pcid, pallorfirst, plist, prto) IAmiSSL->CMS_ReceiptRequest_get0_values((rr), (pcid), (pallorfirst), (plist), (prto)) 
#define CMS_signed_get0_data_by_OBJ(si, oid, lastpos, type) IAmiSSL->CMS_signed_get0_data_by_OBJ((si), (oid), (lastpos), (type)) 
#define CMS_get0_SignerInfos(cms) IAmiSSL->CMS_get0_SignerInfos((cms)) 
#define CMS_add0_cert(cms, cert) IAmiSSL->CMS_add0_cert((cms), (cert)) 
#define CMS_EncryptedData_encrypt(in, cipher, key, keylen, flags) IAmiSSL->CMS_EncryptedData_encrypt((in), (cipher), (key), (keylen), (flags)) 
#define CMS_digest_verify(cms, dcont, out, flags) IAmiSSL->CMS_digest_verify((cms), (dcont), (out), (flags)) 
#define CMS_set1_signers_certs(cms, certs, flags) IAmiSSL->CMS_set1_signers_certs((cms), (certs), (flags)) 
#define CMS_signed_get_attr(si, loc) IAmiSSL->CMS_signed_get_attr((si), (loc)) 
#define CMS_RecipientInfo_set0_key(ri, key, keylen) IAmiSSL->CMS_RecipientInfo_set0_key((ri), (key), (keylen)) 
#define CMS_SignedData_init(cms) IAmiSSL->CMS_SignedData_init((cms)) 
#define CMS_RecipientInfo_kekri_get0_id(ri, palg, pid, pdate, potherid, pothertype) IAmiSSL->CMS_RecipientInfo_kekri_get0_id((ri), (palg), (pid), (pdate), (potherid), (pothertype)) 
#define CMS_verify_receipt(rcms, ocms, certs, store, flags) IAmiSSL->CMS_verify_receipt((rcms), (ocms), (certs), (store), (flags)) 
#define PEM_read_bio_CMS(bp, x, cb, u) IAmiSSL->PEM_read_bio_CMS((bp), (x), (cb), (u)) 
#define CMS_get1_crls(cms) IAmiSSL->CMS_get1_crls((cms)) 
#define CMS_add0_recipient_key(cms, nid, key, keylen, id, idlen, date, otherTypeId, otherType) IAmiSSL->CMS_add0_recipient_key((cms), (nid), (key), (keylen), (id), (idlen), (date), (otherTypeId), (otherType)) 
#define CMS_ReceiptRequest_new() IAmiSSL->CMS_ReceiptRequest_new() 
#define CMS_get0_content(cms) IAmiSSL->CMS_get0_content((cms)) 
#define CMS_get1_ReceiptRequest(si, prr) IAmiSSL->CMS_get1_ReceiptRequest((si), (prr)) 
#define CMS_signed_add1_attr_by_OBJ(si, obj, type, bytes, len) IAmiSSL->CMS_signed_add1_attr_by_OBJ((si), (obj), (type), (bytes), (len)) 
#define CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) IAmiSSL->CMS_RecipientInfo_kekri_id_cmp((ri), (id), (idlen)) 
#define CMS_add1_ReceiptRequest(si, rr) IAmiSSL->CMS_add1_ReceiptRequest((si), (rr)) 
#define CMS_SignerInfo_get0_signer_id(si, keyid, issuer, sno) IAmiSSL->CMS_SignerInfo_get0_signer_id((si), (keyid), (issuer), (sno)) 
#define CMS_unsigned_add1_attr_by_NID(si, nid, type, bytes, len) IAmiSSL->CMS_unsigned_add1_attr_by_NID((si), (nid), (type), (bytes), (len)) 
#define CMS_unsigned_add1_attr(si, attr) IAmiSSL->CMS_unsigned_add1_attr((si), (attr)) 
#define CMS_signed_get_attr_by_NID(si, nid, lastpos) IAmiSSL->CMS_signed_get_attr_by_NID((si), (nid), (lastpos)) 
#define CMS_get1_certs(cms) IAmiSSL->CMS_get1_certs((cms)) 
#define CMS_signed_add1_attr_by_NID(si, nid, type, bytes, len) IAmiSSL->CMS_signed_add1_attr_by_NID((si), (nid), (type), (bytes), (len)) 
#define CMS_unsigned_add1_attr_by_txt(si, attrname, type, bytes, len) IAmiSSL->CMS_unsigned_add1_attr_by_txt((si), (attrname), (type), (bytes), (len)) 
#define CMS_dataFinal(cms, bio) IAmiSSL->CMS_dataFinal((cms), (bio)) 
#define CMS_RecipientInfo_ktri_get0_signer_id(ri, keyid, issuer, sno) IAmiSSL->CMS_RecipientInfo_ktri_get0_signer_id((ri), (keyid), (issuer), (sno)) 
#define i2d_CMS_ReceiptRequest(a, out) IAmiSSL->i2d_CMS_ReceiptRequest((a), (out)) 
#define CMS_add1_recipient_cert(cms, recip, flags) IAmiSSL->CMS_add1_recipient_cert((cms), (recip), (flags)) 
#define CMS_dataInit(cms, icont) IAmiSSL->CMS_dataInit((cms), (icont)) 
#define CMS_signed_add1_attr_by_txt(si, attrname, type, bytes, len) IAmiSSL->CMS_signed_add1_attr_by_txt((si), (attrname), (type), (bytes), (len)) 
#define CMS_RecipientInfo_decrypt(cms, ri) IAmiSSL->CMS_RecipientInfo_decrypt((cms), (ri)) 
#define CMS_signed_get_attr_count(si) IAmiSSL->CMS_signed_get_attr_count((si)) 
#define CMS_get0_eContentType(cms) IAmiSSL->CMS_get0_eContentType((cms)) 
#define CMS_set1_eContentType(cms, oid) IAmiSSL->CMS_set1_eContentType((cms), (oid)) 
#define CMS_ReceiptRequest_create0(id, idlen, allorfirst, receiptList, receiptsTo) IAmiSSL->CMS_ReceiptRequest_create0((id), (idlen), (allorfirst), (receiptList), (receiptsTo)) 
#define CMS_add1_signer(cms, signer, pk, md, flags) IAmiSSL->CMS_add1_signer((cms), (signer), (pk), (md), (flags)) 
#define CMS_RecipientInfo_set0_pkey(ri, pkey) IAmiSSL->CMS_RecipientInfo_set0_pkey((ri), (pkey)) 
#define ENGINE_set_load_ssl_client_cert_function(e, loadssl_f) IAmiSSL->ENGINE_set_load_ssl_client_cert_function((e), (loadssl_f)) 
#define ENGINE_get_ssl_client_cert_function(e) IAmiSSL->ENGINE_get_ssl_client_cert_function((e)) 
#define ENGINE_load_ssl_client_cert(e, s, ca_dn, pcert, ppkey, pother, ui_method, callback_data) IAmiSSL->ENGINE_load_ssl_client_cert((e), (s), (ca_dn), (pcert), (ppkey), (pother), (ui_method), (callback_data)) 
#define ENGINE_load_capi() IAmiSSL->ENGINE_load_capi() 
#define ENGINE_register_pkey_meths(e) IAmiSSL->ENGINE_register_pkey_meths((e)) 
#define ENGINE_get_pkey_asn1_meth_engine(nid) IAmiSSL->ENGINE_get_pkey_asn1_meth_engine((nid)) 
#define WHIRLPOOL_Init(c) IAmiSSL->WHIRLPOOL_Init((c)) 
#define WHIRLPOOL(inp, bytes, md) IAmiSSL->WHIRLPOOL((inp), (bytes), (md)) 
#define ENGINE_get_pkey_asn1_meth(e, nid) IAmiSSL->ENGINE_get_pkey_asn1_meth((e), (nid)) 
#define ENGINE_get_pkey_meth(e, nid) IAmiSSL->ENGINE_get_pkey_meth((e), (nid)) 
#define BIO_new_CMS(out, cms) IAmiSSL->BIO_new_CMS((out), (cms)) 
#define ENGINE_set_default_pkey_asn1_meths(e) IAmiSSL->ENGINE_set_default_pkey_asn1_meths((e)) 
#define WHIRLPOOL_BitUpdate(ctx, inp, bits) IAmiSSL->WHIRLPOOL_BitUpdate((ctx), (inp), (bits)) 
#define i2d_CMS_bio_stream(out, cms, in, flags) IAmiSSL->i2d_CMS_bio_stream((out), (cms), (in), (flags)) 
#define CMS_stream(boundary, cms) IAmiSSL->CMS_stream((boundary), (cms)) 
#define ENGINE_pkey_asn1_find_str(pe, str, len) IAmiSSL->ENGINE_pkey_asn1_find_str((pe), (str), (len)) 
#define ENGINE_get_pkey_meths(e) IAmiSSL->ENGINE_get_pkey_meths((e)) 
#define ENGINE_register_pkey_asn1_meths(e) IAmiSSL->ENGINE_register_pkey_asn1_meths((e)) 
#define ENGINE_set_default_pkey_meths(e) IAmiSSL->ENGINE_set_default_pkey_meths((e)) 
#define HMAC_CTX_copy(dctx, sctx) IAmiSSL->HMAC_CTX_copy((dctx), (sctx)) 
#define ENGINE_get_pkey_asn1_meths(e) IAmiSSL->ENGINE_get_pkey_asn1_meths((e)) 
#define EVP_whirlpool() IAmiSSL->EVP_whirlpool() 
#define ENGINE_register_all_pkey_meths() IAmiSSL->ENGINE_register_all_pkey_meths() 
#define WHIRLPOOL_Final(md, c) IAmiSSL->WHIRLPOOL_Final((md), (c)) 
#define ENGINE_get_pkey_asn1_meth_str(e, str, len) IAmiSSL->ENGINE_get_pkey_asn1_meth_str((e), (str), (len)) 
#define ENGINE_register_all_pkey_asn1_meths() IAmiSSL->ENGINE_register_all_pkey_asn1_meths() 
#define CMS_ContentInfo_print_ctx(out, cms, a, p) IAmiSSL->CMS_ContentInfo_print_ctx((out), (cms), (a), (p)) 
#define CMS_add1_crl(cms, crl) IAmiSSL->CMS_add1_crl((cms), (crl)) 
#define ENGINE_set_pkey_asn1_meths(e, f) IAmiSSL->ENGINE_set_pkey_asn1_meths((e), (f)) 
#define ENGINE_get_pkey_meth_engine(nid) IAmiSSL->ENGINE_get_pkey_meth_engine((nid)) 
#define WHIRLPOOL_Update(c, inp, bytes) IAmiSSL->WHIRLPOOL_Update((c), (inp), (bytes)) 
#define PEM_write_bio_CMS_stream(out, cms, in, flags) IAmiSSL->PEM_write_bio_CMS_stream((out), (cms), (in), (flags)) 
#define ENGINE_unregister_pkey_meths(e) IAmiSSL->ENGINE_unregister_pkey_meths((e)) 
#define ENGINE_unregister_pkey_asn1_meths(e) IAmiSSL->ENGINE_unregister_pkey_asn1_meths((e)) 
#define ENGINE_set_pkey_meths(e, f) IAmiSSL->ENGINE_set_pkey_meths((e), (f)) 
#define DSAparams_dup(x) IAmiSSL->DSAparams_dup((x)) 
#define DHparams_dup(d) IAmiSSL->DHparams_dup((d)) 
#define X509_issuer_name_hash_old(a) IAmiSSL->X509_issuer_name_hash_old((a)) 
#define X509_subject_name_hash_old(x) IAmiSSL->X509_subject_name_hash_old((x)) 
#define SRP_VBASE_get_by_user(vb, username) IAmiSSL->SRP_VBASE_get_by_user((vb), (username)) 
#define SRP_Calc_server_key(A, v, u, b, N) IAmiSSL->SRP_Calc_server_key((A), (v), (u), (b), (N)) 
#define SRP_create_verifier(user, pass, salt, verifier, N, g) IAmiSSL->SRP_create_verifier((user), (pass), (salt), (verifier), (N), (g)) 
#define SRP_create_verifier_BN(user, pass, salt, verifier, N, g) IAmiSSL->SRP_create_verifier_BN((user), (pass), (salt), (verifier), (N), (g)) 
#define SRP_Calc_u(A, B, N) IAmiSSL->SRP_Calc_u((A), (B), (N)) 
#define SRP_VBASE_free(vb) IAmiSSL->SRP_VBASE_free((vb)) 
#define SRP_Calc_client_key(N, B, g, x, a, u) IAmiSSL->SRP_Calc_client_key((N), (B), (g), (x), (a), (u)) 
#define SRP_get_default_gN(id) IAmiSSL->SRP_get_default_gN((id)) 
#define SRP_Calc_x(s, user, pass) IAmiSSL->SRP_Calc_x((s), (user), (pass)) 
#define SRP_Calc_B(b, N, g, v) IAmiSSL->SRP_Calc_B((b), (N), (g), (v)) 
#define SRP_VBASE_new(seed_key) IAmiSSL->SRP_VBASE_new((seed_key)) 
#define SRP_check_known_gN_param(g, N) IAmiSSL->SRP_check_known_gN_param((g), (N)) 
#define SRP_Calc_A(a, N, g) IAmiSSL->SRP_Calc_A((a), (N), (g)) 
#define SRP_Verify_A_mod_N(A, N) IAmiSSL->SRP_Verify_A_mod_N((A), (N)) 
#define SRP_VBASE_init(vb, verifier_file) IAmiSSL->SRP_VBASE_init((vb), (verifier_file)) 
#define SRP_Verify_B_mod_N(B, N) IAmiSSL->SRP_Verify_B_mod_N((B), (N)) 
#define EC_KEY_set_public_key_affine_coordinates(key, x, y) IAmiSSL->EC_KEY_set_public_key_affine_coordinates((key), (x), (y)) 
#define EVP_aes_192_ctr() IAmiSSL->EVP_aes_192_ctr() 
#define EVP_aes_128_ctr() IAmiSSL->EVP_aes_128_ctr() 
#define EVP_aes_256_ctr() IAmiSSL->EVP_aes_256_ctr() 
#define EC_KEY_get_flags(key) IAmiSSL->EC_KEY_get_flags((key)) 
#define EVP_aes_128_xts() IAmiSSL->EVP_aes_128_xts() 
#define private_AES_set_decrypt_key(userKey, bits, key) IAmiSSL->private_AES_set_decrypt_key((userKey), (bits), (key)) 
#define EVP_aes_256_xts() IAmiSSL->EVP_aes_256_xts() 
#define EVP_aes_128_gcm() IAmiSSL->EVP_aes_128_gcm() 
#define EC_KEY_clear_flags(key, flags) IAmiSSL->EC_KEY_clear_flags((key), (flags)) 
#define EC_KEY_set_flags(key, flags) IAmiSSL->EC_KEY_set_flags((key), (flags)) 
#define EVP_aes_256_ccm() IAmiSSL->EVP_aes_256_ccm() 
#define private_AES_set_encrypt_key(userKey, bits, key) IAmiSSL->private_AES_set_encrypt_key((userKey), (bits), (key)) 
#define EVP_aes_128_ccm() IAmiSSL->EVP_aes_128_ccm() 
#define EVP_aes_192_gcm() IAmiSSL->EVP_aes_192_gcm() 
#define EVP_aes_256_gcm() IAmiSSL->EVP_aes_256_gcm() 
#define EVP_aes_192_ccm() IAmiSSL->EVP_aes_192_ccm() 
#define EVP_rc4_hmac_md5() IAmiSSL->EVP_rc4_hmac_md5() 
#define EVP_aes_128_cbc_hmac_sha1() IAmiSSL->EVP_aes_128_cbc_hmac_sha1() 
#define ENGINE_load_rdrand() IAmiSSL->ENGINE_load_rdrand() 
#define ENGINE_load_rsax() IAmiSSL->ENGINE_load_rsax() 
#define EVP_aes_256_cbc_hmac_sha1() IAmiSSL->EVP_aes_256_cbc_hmac_sha1() 
#define CMS_add0_recipient_password(cms, iter, wrap_nid, pbe_nid, pass, passlen, kekciph) IAmiSSL->CMS_add0_recipient_password((cms), (iter), (wrap_nid), (pbe_nid), (pass), (passlen), (kekciph)) 
#define CMS_decrypt_set1_password(cms, pass, passlen) IAmiSSL->CMS_decrypt_set1_password((cms), (pass), (passlen)) 
#define CMS_RecipientInfo_set0_password(ri, pass, passlen) IAmiSSL->CMS_RecipientInfo_set0_password((ri), (pass), (passlen)) 
#define X509_REQ_sign_ctx(x, ctx) IAmiSSL->X509_REQ_sign_ctx((x), (ctx)) 
#define X509_CRL_sign_ctx(x, ctx) IAmiSSL->X509_CRL_sign_ctx((x), (ctx)) 
#define X509_signature_dump(bp, sig, indent) IAmiSSL->X509_signature_dump((bp), (sig), (indent)) 
#define X509_sign_ctx(x, ctx) IAmiSSL->X509_sign_ctx((x), (ctx)) 
#define ASN1_item_sign_ctx(it, algor1, algor2, signature, asn, ctx) IAmiSSL->ASN1_item_sign_ctx((it), (algor1), (algor2), (signature), (asn), (ctx)) 
#define OPENSSL_cpuid_setup() IAmiSSL->OPENSSL_cpuid_setup() 
#define ERR_remove_thread_state(id) IAmiSSL->ERR_remove_thread_state((id)) 
#define X509_STORE_CTX_set0_crls(ctx, sk) IAmiSSL->X509_STORE_CTX_set0_crls((ctx), (sk)) 
#define SSL_SESSION_get_id(s, len) IAmiSSL->SSL_SESSION_get_id((s), (len)) 
#define SSL_CTX_sess_set_new_cb(ctx, new_session_cb) IAmiSSL->SSL_CTX_sess_set_new_cb((ctx), (new_session_cb)) 
#define SSL_CTX_sess_get_get_cb(ctx) IAmiSSL->SSL_CTX_sess_get_get_cb((ctx)) 
#define SSL_CTX_sess_set_get_cb(ctx, get_session_cb) IAmiSSL->SSL_CTX_sess_set_get_cb((ctx), (get_session_cb)) 
#define SSL_CTX_get_info_callback(ctx) IAmiSSL->SSL_CTX_get_info_callback((ctx)) 
#define SSL_CTX_set_client_cert_cb(ctx, client_cert_cb) IAmiSSL->SSL_CTX_set_client_cert_cb((ctx), (client_cert_cb)) 
#define SSL_CTX_sess_set_remove_cb(ctx, remove_session_cb) IAmiSSL->SSL_CTX_sess_set_remove_cb((ctx), (remove_session_cb)) 
#define SSL_CTX_sess_get_new_cb(ctx) IAmiSSL->SSL_CTX_sess_get_new_cb((ctx)) 
#define SSL_CTX_get_client_cert_cb(ctx) IAmiSSL->SSL_CTX_get_client_cert_cb((ctx)) 
#define SSL_CTX_sess_get_remove_cb(ctx) IAmiSSL->SSL_CTX_sess_get_remove_cb((ctx)) 
#define PEM_write_bio_SSL_SESSION(bp, x) IAmiSSL->PEM_write_bio_SSL_SESSION((bp), (x)) 
#define PEM_read_bio_SSL_SESSION(bp, x, cb, u) IAmiSSL->PEM_read_bio_SSL_SESSION((bp), (x), (cb), (u)) 
#define FIPS_mode_set(r) IAmiSSL->FIPS_mode_set((r)) 
#define BN_X931_generate_Xpq(Xp, Xq, nbits, ctx) IAmiSSL->BN_X931_generate_Xpq((Xp), (Xq), (nbits), (ctx)) 
#define BN_get0_nist_prime_384() IAmiSSL->BN_get0_nist_prime_384() 
#define ERR_set_mark() IAmiSSL->ERR_set_mark() 
#define BN_BLINDING_invert_ex(n, r, b, ctx) IAmiSSL->BN_BLINDING_invert_ex((n), (r), (b), (ctx)) 
#define NAME_CONSTRAINTS_free(ncons) IAmiSSL->NAME_CONSTRAINTS_free((ncons)) 
#define X509_STORE_CTX_set0_param(ctx, param) IAmiSSL->X509_STORE_CTX_set0_param((ctx), (param)) 
#define POLICY_CONSTRAINTS_free(pcons) IAmiSSL->POLICY_CONSTRAINTS_free((pcons)) 
#define BN_nist_mod_192(r, a, p, ctx) IAmiSSL->BN_nist_mod_192((r), (a), (p), (ctx)) 
#define GENERAL_SUBTREE_free(sub) IAmiSSL->GENERAL_SUBTREE_free((sub)) 
#define PKCS12_add_safe(psafes, bags, safe_nid, iter, pass) IAmiSSL->PKCS12_add_safe((psafes), (bags), (safe_nid), (iter), (pass)) 
#define BN_get0_nist_prime_192() IAmiSSL->BN_get0_nist_prime_192() 
#define X509_keyid_get0(x, len) IAmiSSL->X509_keyid_get0((x), (len)) 
#define pitem_new(prio64be, data) IAmiSSL->pitem_new((prio64be), (data)) 
#define X509_policy_node_get0_parent(node) IAmiSSL->X509_policy_node_get0_parent((node)) 
#define a2i_IPADDRESS(ipasc) IAmiSSL->a2i_IPADDRESS((ipasc)) 
#define X509_STORE_CTX_set_depth(ctx, depth) IAmiSSL->X509_STORE_CTX_set_depth((ctx), (depth)) 
#define X509_VERIFY_PARAM_inherit(to, from) IAmiSSL->X509_VERIFY_PARAM_inherit((to), (from)) 
#define pqueue_iterator(pq) IAmiSSL->pqueue_iterator((pq)) 
#define X509_VERIFY_PARAM_set_depth(param, depth) IAmiSSL->X509_VERIFY_PARAM_set_depth((param), (depth)) 
#define EVP_PKEY_add1_attr_by_txt(key, attrname, type, bytes, len) IAmiSSL->EVP_PKEY_add1_attr_by_txt((key), (attrname), (type), (bytes), (len)) 
#define BN_BLINDING_set_flags(b, l) IAmiSSL->BN_BLINDING_set_flags((b), (l)) 
#define X509_VERIFY_PARAM_set1_policies(param, policies) IAmiSSL->X509_VERIFY_PARAM_set1_policies((param), (policies)) 
#define X509_VERIFY_PARAM_set1_name(param, name) IAmiSSL->X509_VERIFY_PARAM_set1_name((param), (name)) 
#define POLICY_MAPPING_free(pmap) IAmiSSL->POLICY_MAPPING_free((pmap)) 
#define pqueue_print(pq) IAmiSSL->pqueue_print((pq)) 
#define PEM_write_bio_X509_CERT_PAIR(bp, x) IAmiSSL->PEM_write_bio_X509_CERT_PAIR((bp), (x)) 
#define EVP_PKEY_cmp(a, b) IAmiSSL->EVP_PKEY_cmp((a), (b)) 
#define X509_policy_level_node_count(level) IAmiSSL->X509_policy_level_node_count((level)) 
#define EVP_PKEY_get_attr(key, loc) IAmiSSL->EVP_PKEY_get_attr((key), (loc)) 
#define GENERAL_SUBTREE_new() IAmiSSL->GENERAL_SUBTREE_new() 
#define X509_policy_node_get0_qualifiers(node) IAmiSSL->X509_policy_node_get0_qualifiers((node)) 
#define pqueue_find(pq, prio64be) IAmiSSL->pqueue_find((pq), (prio64be)) 
#define pqueue_peek(pq) IAmiSSL->pqueue_peek((pq)) 
#define X509_policy_node_get0_policy(node) IAmiSSL->X509_policy_node_get0_policy((node)) 
#define PKCS12_add_safes(safes, p7_nid) IAmiSSL->PKCS12_add_safes((safes), (p7_nid)) 
#define BN_BLINDING_convert_ex(n, r, b, ctx) IAmiSSL->BN_BLINDING_convert_ex((n), (r), (b), (ctx)) 
#define X509_policy_tree_free(tree) IAmiSSL->X509_policy_tree_free((tree)) 
#define OPENSSL_ia32cap_loc() IAmiSSL->OPENSSL_ia32cap_loc() 
#define BN_get0_nist_prime_224() IAmiSSL->BN_get0_nist_prime_224() 
#define BN_GENCB_call(cb, a, b) IAmiSSL->BN_GENCB_call((cb), (a), (b)) 
#define NAME_CONSTRAINTS_new() IAmiSSL->NAME_CONSTRAINTS_new() 
#define ECParameters_print(bp, key) IAmiSSL->ECParameters_print((bp), (key)) 
#define BUF_memdup(data, siz) IAmiSSL->BUF_memdup((data), (siz)) 
#define X509_VERIFY_PARAM_set_trust(param, trust) IAmiSSL->X509_VERIFY_PARAM_set_trust((param), (trust)) 
#define EVP_PKEY_get_attr_count(key) IAmiSSL->EVP_PKEY_get_attr_count((key)) 
#define X509_STORE_CTX_get0_param(ctx) IAmiSSL->X509_STORE_CTX_get0_param((ctx)) 
#define X509_STORE_set_depth(store, depth) IAmiSSL->X509_STORE_set_depth((store), (depth)) 
#define BUF_strndup(str, siz) IAmiSSL->BUF_strndup((str), (siz)) 
#define ASN1_put_eoc(pp) IAmiSSL->ASN1_put_eoc((pp)) 
#define X509_VERIFY_PARAM_table_cleanup() IAmiSSL->X509_VERIFY_PARAM_table_cleanup() 
#define RSA_setup_blinding(rsa, ctx) IAmiSSL->RSA_setup_blinding((rsa), (ctx)) 
#define sk_find_ex(st, data) IAmiSSL->sk_find_ex((st), (data)) 
#define POLICY_CONSTRAINTS_new() IAmiSSL->POLICY_CONSTRAINTS_new() 
#define X509_VERIFY_PARAM_get_depth(param) IAmiSSL->X509_VERIFY_PARAM_get_depth((param)) 
#define ASN1_item_ndef_i2d(val, out, it) IAmiSSL->ASN1_item_ndef_i2d((val), (out), (it)) 
#define ERR_pop_to_mark() IAmiSSL->ERR_pop_to_mark() 
#define X509_policy_level_get0_node(level, i) IAmiSSL->X509_policy_level_get0_node((level), (i)) 
#define i2d_PKCS7_NDEF(a, out) IAmiSSL->i2d_PKCS7_NDEF((a), (out)) 
#define ASN1_generate_v3(str, cnf) IAmiSSL->ASN1_generate_v3((str), (cnf)) 
#define X509_policy_tree_level_count(tree) IAmiSSL->X509_policy_tree_level_count((tree)) 
#define X509_CERT_PAIR_free(pair) IAmiSSL->X509_CERT_PAIR_free((pair)) 
#define BN_nist_mod_224(r, a, p, ctx) IAmiSSL->BN_nist_mod_224((r), (a), (p), (ctx)) 
#define BIO_dgram_non_fatal_error(error) IAmiSSL->BIO_dgram_non_fatal_error((error)) 
#define v2i_ASN1_BIT_STRING(method, ctx, nval) IAmiSSL->v2i_ASN1_BIT_STRING((method), (ctx), (nval)) 
#define X509_STORE_CTX_set_default(ctx, name) IAmiSSL->X509_STORE_CTX_set_default((ctx), (name)) 
#define X509_VERIFY_PARAM_set1(to, from) IAmiSSL->X509_VERIFY_PARAM_set1((to), (from)) 
#define v2i_GENERAL_NAME_ex(out, method, ctx, cnf, is_nc) IAmiSSL->v2i_GENERAL_NAME_ex((out), (method), (ctx), (cnf), (is_nc)) 
#define BN_nist_mod_521(r, a, p, ctx) IAmiSSL->BN_nist_mod_521((r), (a), (p), (ctx)) 
#define X509_policy_tree_get0_level(tree, i) IAmiSSL->X509_policy_tree_get0_level((tree), (i)) 
#define ASN1_const_check_infinite_end(p, len) IAmiSSL->ASN1_const_check_infinite_end((p), (len)) 
#define EVP_PKEY_delete_attr(key, loc) IAmiSSL->EVP_PKEY_delete_attr((key), (loc)) 
#define BN_get0_nist_prime_256() IAmiSSL->BN_get0_nist_prime_256() 
#define i2v_ASN1_BIT_STRING(method, bits, extlist) IAmiSSL->i2v_ASN1_BIT_STRING((method), (bits), (extlist)) 
#define BN_nist_mod_384(r, a, p, ctx) IAmiSSL->BN_nist_mod_384((r), (a), (p), (ctx)) 
#define i2d_X509_CERT_PAIR(a, out) IAmiSSL->i2d_X509_CERT_PAIR((a), (out)) 
#define pqueue_pop(pq) IAmiSSL->pqueue_pop((pq)) 
#define EVP_PKEY_get_attr_by_OBJ(key, obj, lastpos) IAmiSSL->EVP_PKEY_get_attr_by_OBJ((key), (obj), (lastpos)) 
#define X509_VERIFY_PARAM_lookup(name) IAmiSSL->X509_VERIFY_PARAM_lookup((name)) 
#define X509_CERT_PAIR_new() IAmiSSL->X509_CERT_PAIR_new() 
#define X509V3_NAME_from_section(nm, dn_sk, chtype) IAmiSSL->X509V3_NAME_from_section((nm), (dn_sk), (chtype)) 
#define EVP_PKEY_add1_attr(key, attr) IAmiSSL->EVP_PKEY_add1_attr((key), (attr)) 
#define BIO_dump_indent_cb(cb, u, s, len, indent) IAmiSSL->BIO_dump_indent_cb((cb), (u), (s), (len), (indent)) 
#define d2i_X509_CERT_PAIR(a, in, len) IAmiSSL->d2i_X509_CERT_PAIR((a), (in), (len)) 
#define asn1_const_Finish(c) IAmiSSL->asn1_const_Finish((c)) 
#define BN_nist_mod_256(r, a, p, ctx) IAmiSSL->BN_nist_mod_256((r), (a), (p), (ctx)) 
#define X509_VERIFY_PARAM_add0_table(param) IAmiSSL->X509_VERIFY_PARAM_add0_table((param)) 
#define pqueue_free(pq) IAmiSSL->pqueue_free((pq)) 
#define BN_BLINDING_create_param(b, e, m, ctx, bn_mod_exp, m_ctx) IAmiSSL->BN_BLINDING_create_param((b), (e), (m), (ctx), (bn_mod_exp), (m_ctx)) 
#define BN_get0_nist_prime_521() IAmiSSL->BN_get0_nist_prime_521() 
#define BN_is_prime_fasttest_ex(p, nchecks, ctx, do_trial_devision, cb) IAmiSSL->BN_is_prime_fasttest_ex((p), (nchecks), (ctx), (do_trial_devision), (cb)) 
#define X509_policy_check(ptree, pexplicit_policy, certs, policy_oids, flags) IAmiSSL->X509_policy_check((ptree), (pexplicit_policy), (certs), (policy_oids), (flags)) 
#define EVP_PKEY_get_attr_by_NID(key, nid, lastpos) IAmiSSL->EVP_PKEY_get_attr_by_NID((key), (nid), (lastpos)) 
#define BN_BLINDING_get_flags(b) IAmiSSL->BN_BLINDING_get_flags((b)) 
#define PKCS12_add_cert(pbags, cert) IAmiSSL->PKCS12_add_cert((pbags), (cert)) 
#define EVP_CIPHER_CTX_rand_key(ctx, key) IAmiSSL->EVP_CIPHER_CTX_rand_key((ctx), (key)) 
#define a2i_IPADDRESS_NC(ipasc) IAmiSSL->a2i_IPADDRESS_NC((ipasc)) 
#define PKCS7_set_digest(p7, md) IAmiSSL->PKCS7_set_digest((p7), (md)) 
#define POLICY_MAPPING_new() IAmiSSL->POLICY_MAPPING_new() 
#define PKCS7_set0_type_other(p7, type, other) IAmiSSL->PKCS7_set0_type_other((p7), (type), (other)) 
#define PEM_read_bio_X509_CERT_PAIR(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_CERT_PAIR((bp), (x), (cb), (u)) 
#define pqueue_next(iter) IAmiSSL->pqueue_next((iter)) 
#define EVP_PKEY_add1_attr_by_OBJ(key, obj, type, bytes, len) IAmiSSL->EVP_PKEY_add1_attr_by_OBJ((key), (obj), (type), (bytes), (len)) 
#define X509_VERIFY_PARAM_set_time(param, t) IAmiSSL->X509_VERIFY_PARAM_set_time((param), (t)) 
#define pqueue_new() IAmiSSL->pqueue_new() 
#define PKCS12_add_key(pbags, key, key_usage, iter, key_nid, pass) IAmiSSL->PKCS12_add_key((pbags), (key), (key_usage), (iter), (key_nid), (pass)) 
#define DSO_merge(dso, filespec1, filespec2) IAmiSSL->DSO_merge((dso), (filespec1), (filespec2)) 
#define BIO_dump_cb(cb, u, s, len) IAmiSSL->BIO_dump_cb((cb), (u), (s), (len)) 
#define pqueue_insert(pq, item) IAmiSSL->pqueue_insert((pq), (item)) 
#define pitem_free(item) IAmiSSL->pitem_free((item)) 
#define get_rfc3526_prime_8192(bn) IAmiSSL->get_rfc3526_prime_8192((bn)) 
#define X509_VERIFY_PARAM_clear_flags(param, flags) IAmiSSL->X509_VERIFY_PARAM_clear_flags((param), (flags)) 
#define get_rfc2409_prime_1024(bn) IAmiSSL->get_rfc2409_prime_1024((bn)) 
#define get_rfc3526_prime_2048(bn) IAmiSSL->get_rfc3526_prime_2048((bn)) 
#define get_rfc3526_prime_6144(bn) IAmiSSL->get_rfc3526_prime_6144((bn)) 
#define get_rfc3526_prime_1536(bn) IAmiSSL->get_rfc3526_prime_1536((bn)) 
#define get_rfc3526_prime_3072(bn) IAmiSSL->get_rfc3526_prime_3072((bn)) 
#define get_rfc3526_prime_4096(bn) IAmiSSL->get_rfc3526_prime_4096((bn)) 
#define get_rfc2409_prime_768(bn) IAmiSSL->get_rfc2409_prime_768((bn)) 
#define X509_VERIFY_PARAM_get_flags(param) IAmiSSL->X509_VERIFY_PARAM_get_flags((param)) 
#define EVP_CIPHER_CTX_new() IAmiSSL->EVP_CIPHER_CTX_new() 
#define EVP_CIPHER_CTX_free(a) IAmiSSL->EVP_CIPHER_CTX_free((a)) 
#define a2i_ipadd(ipout, ipasc) IAmiSSL->a2i_ipadd((ipout), (ipasc)) 
#define EVP_CIPHER_block_size(cipher) IAmiSSL->EVP_CIPHER_block_size((cipher)) 
#define EVP_CIPHER_CTX_set_app_data(ctx, data) IAmiSSL->EVP_CIPHER_CTX_set_app_data((ctx), (data)) 
#define BIO_method_type(b) IAmiSSL->BIO_method_type((b)) 
#define EVP_CIPHER_CTX_nid(ctx) IAmiSSL->EVP_CIPHER_CTX_nid((ctx)) 
#define EVP_CIPHER_CTX_key_length(ctx) IAmiSSL->EVP_CIPHER_CTX_key_length((ctx)) 
#define EVP_MD_size(md) IAmiSSL->EVP_MD_size((md)) 
#define EVP_MD_CTX_test_flags(ctx, flags) IAmiSSL->EVP_MD_CTX_test_flags((ctx), (flags)) 
#define BIO_clear_flags(b, flags) IAmiSSL->BIO_clear_flags((b), (flags)) 
#define EVP_MD_pkey_type(md) IAmiSSL->EVP_MD_pkey_type((md)) 
#define EVP_MD_CTX_clear_flags(ctx, flags) IAmiSSL->EVP_MD_CTX_clear_flags((ctx), (flags)) 
#define EVP_CIPHER_flags(cipher) IAmiSSL->EVP_CIPHER_flags((cipher)) 
#define BIO_get_callback(b) IAmiSSL->BIO_get_callback((b)) 
#define EVP_CIPHER_key_length(cipher) IAmiSSL->EVP_CIPHER_key_length((cipher)) 
#define EVP_Cipher(c, out, in, inl) IAmiSSL->EVP_Cipher((c), (out), (in), (inl)) 
#define EVP_CIPHER_CTX_block_size(ctx) IAmiSSL->EVP_CIPHER_CTX_block_size((ctx)) 
#define EVP_CIPHER_CTX_cipher(ctx) IAmiSSL->EVP_CIPHER_CTX_cipher((ctx)) 
#define EVP_CIPHER_CTX_get_app_data(ctx) IAmiSSL->EVP_CIPHER_CTX_get_app_data((ctx)) 
#define EVP_MD_block_size(md) IAmiSSL->EVP_MD_block_size((md)) 
#define EVP_CIPHER_CTX_flags(ctx) IAmiSSL->EVP_CIPHER_CTX_flags((ctx)) 
#define EVP_MD_CTX_md(ctx) IAmiSSL->EVP_MD_CTX_md((ctx)) 
#define BIO_method_name(b) IAmiSSL->BIO_method_name((b)) 
#define EVP_CIPHER_CTX_iv_length(ctx) IAmiSSL->EVP_CIPHER_CTX_iv_length((ctx)) 
#define CRYPTO_memcmp(a, b, len) IAmiSSL->CRYPTO_memcmp((a), (b), (len)) 
#define BN_consttime_swap(swap, a, b, nwords) IAmiSSL->BN_consttime_swap((swap), (a), (b), (nwords)) 
#define i2d_X509_EXTENSIONS(a, out) IAmiSSL->i2d_X509_EXTENSIONS((a), (out)) 
#define d2i_X509_EXTENSIONS(a, in, len) IAmiSSL->d2i_X509_EXTENSIONS((a), (in), (len)) 
#define X509_ALGOR_get0(pobj, pptype, ppval, algor) IAmiSSL->X509_ALGOR_get0((pobj), (pptype), (ppval), (algor)) 
#define X509_ALGOR_set0(alg, aobj, ptype, pval) IAmiSSL->X509_ALGOR_set0((alg), (aobj), (ptype), (pval)) 
#define X509at_get0_data_by_OBJ(x, obj, lastpos, type) IAmiSSL->X509at_get0_data_by_OBJ((x), (obj), (lastpos), (type)) 
#define ASN1_TYPE_set1(a, type, value) IAmiSSL->ASN1_TYPE_set1((a), (type), (value)) 
#define ASN1_STRING_set0(str, data, len) IAmiSSL->ASN1_STRING_set0((str), (data), (len)) 
#define i2d_X509_ALGORS(a, out) IAmiSSL->i2d_X509_ALGORS((a), (out)) 
#define COMP_zlib_cleanup() IAmiSSL->COMP_zlib_cleanup() 
#define d2i_X509_ALGORS(a, in, len) IAmiSSL->d2i_X509_ALGORS((a), (in), (len)) 
#define SMIME_read_ASN1(bio, bcont, it) IAmiSSL->SMIME_read_ASN1((bio), (bcont), (it)) 
#define OPENSSL_isservice() IAmiSSL->OPENSSL_isservice() 
#define EVP_CIPHER_CTX_clear_flags(ctx, flags) IAmiSSL->EVP_CIPHER_CTX_clear_flags((ctx), (flags)) 
#define BN_X931_generate_prime_ex(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb) IAmiSSL->BN_X931_generate_prime_ex((p), (p1), (p2), (Xp1), (Xp2), (Xp), (e), (ctx), (cb)) 
#define EVP_CIPHER_CTX_test_flags(ctx, flags) IAmiSSL->EVP_CIPHER_CTX_test_flags((ctx), (flags)) 
#define EVP_add_alg_module() IAmiSSL->EVP_add_alg_module() 
#define BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb) IAmiSSL->BN_X931_derive_prime_ex((p), (p1), (p2), (Xp), (Xp1), (Xp2), (e), (ctx), (cb)) 
#define OPENSSL_init() IAmiSSL->OPENSSL_init() 
#define CRYPTO_strdup(str, file, line) IAmiSSL->CRYPTO_strdup((str), (file), (line)) 
#define pqueue_size(pq) IAmiSSL->pqueue_size((pq)) 
#define i2d_TS_ACCURACY(a, pp) IAmiSSL->i2d_TS_ACCURACY((a), (pp)) 
#define i2d_TS_MSG_IMPRINT(a, pp) IAmiSSL->i2d_TS_MSG_IMPRINT((a), (pp)) 
#define EVP_PKEY_print_public(out, pkey, indent, pctx) IAmiSSL->EVP_PKEY_print_public((out), (pkey), (indent), (pctx)) 
#define EVP_PKEY_CTX_new(pkey, e) IAmiSSL->EVP_PKEY_CTX_new((pkey), (e)) 
#define i2d_TS_TST_INFO(a, pp) IAmiSSL->i2d_TS_TST_INFO((a), (pp)) 
#define EVP_PKEY_asn1_find(pe, type) IAmiSSL->EVP_PKEY_asn1_find((pe), (type)) 
#define DSO_METHOD_beos() IAmiSSL->DSO_METHOD_beos() 
#define TS_CONF_load_cert(file) IAmiSSL->TS_CONF_load_cert((file)) 
#define TS_REQ_get_ext(a, loc) IAmiSSL->TS_REQ_get_ext((a), (loc)) 
#define EVP_PKEY_sign_init(ctx) IAmiSSL->EVP_PKEY_sign_init((ctx)) 
#define ASN1_item_print(out, ifld, indent, it, ctx) IAmiSSL->ASN1_item_print((out), (ifld), (indent), (it), (ctx)) 
#define TS_TST_INFO_set_nonce(a, nonce) IAmiSSL->TS_TST_INFO_set_nonce((a), (nonce)) 
#define TS_RESP_dup(a) IAmiSSL->TS_RESP_dup((a)) 
#define EVP_PKEY_asn1_add0(ameth) IAmiSSL->EVP_PKEY_asn1_add0((ameth)) 
#define PKCS7_add0_attrib_signing_time(si, t) IAmiSSL->PKCS7_add0_attrib_signing_time((si), (t)) 
#define BIO_asn1_get_prefix(b, pprefix, pprefix_free) IAmiSSL->BIO_asn1_get_prefix((b), (pprefix), (pprefix_free)) 
#define TS_TST_INFO_set_time(a, gtime) IAmiSSL->TS_TST_INFO_set_time((a), (gtime)) 
#define EVP_PKEY_meth_set_decrypt(pmeth, decrypt_init, decrypt) IAmiSSL->EVP_PKEY_meth_set_decrypt((pmeth), (decrypt_init), (decrypt)) 
#define EVP_PKEY_set_type_str(pkey, str, len) IAmiSSL->EVP_PKEY_set_type_str((pkey), (str), (len)) 
#define EVP_PKEY_CTX_get_keygen_info(ctx, idx) IAmiSSL->EVP_PKEY_CTX_get_keygen_info((ctx), (idx)) 
#define TS_REQ_set_policy_id(a, policy) IAmiSSL->TS_REQ_set_policy_id((a), (policy)) 
#define TS_RESP_set_status_info(a, info) IAmiSSL->TS_RESP_set_status_info((a), (info)) 
#define EVP_PKEY_keygen(ctx, ppkey) IAmiSSL->EVP_PKEY_keygen((ctx), (ppkey)) 
#define EVP_DigestSignInit(ctx, pctx, type, e, pkey) IAmiSSL->EVP_DigestSignInit((ctx), (pctx), (type), (e), (pkey)) 
#define TS_ACCURACY_set_millis(a, millis) IAmiSSL->TS_ACCURACY_set_millis((a), (millis)) 
#define TS_REQ_dup(a) IAmiSSL->TS_REQ_dup((a)) 
#define GENERAL_NAME_dup(a) IAmiSSL->GENERAL_NAME_dup((a)) 
#define X509_STORE_get1_crls(st, nm) IAmiSSL->X509_STORE_get1_crls((st), (nm)) 
#define EVP_PKEY_asn1_new(id, flags, pem_str, info) IAmiSSL->EVP_PKEY_asn1_new((id), (flags), (pem_str), (info)) 
#define BIO_new_NDEF(out, val, it) IAmiSSL->BIO_new_NDEF((out), (val), (it)) 
#define TS_MSG_IMPRINT_set_algo(a, alg) IAmiSSL->TS_MSG_IMPRINT_set_algo((a), (alg)) 
#define i2d_TS_TST_INFO_bio(fp, a) IAmiSSL->i2d_TS_TST_INFO_bio((fp), (a)) 
#define TS_TST_INFO_set_ordering(a, ordering) IAmiSSL->TS_TST_INFO_set_ordering((a), (ordering)) 
#define TS_TST_INFO_get_ext_by_OBJ(a, obj, lastpos) IAmiSSL->TS_TST_INFO_get_ext_by_OBJ((a), (obj), (lastpos)) 
#define CRYPTO_THREADID_set_pointer(id, ptr) IAmiSSL->CRYPTO_THREADID_set_pointer((id), (ptr)) 
#define TS_CONF_get_tsa_section(conf, section) IAmiSSL->TS_CONF_get_tsa_section((conf), (section)) 
#define SMIME_write_ASN1(bio, val, data, flags, ctype_nid, econt_nid, mdalgs, it) IAmiSSL->SMIME_write_ASN1((bio), (val), (data), (flags), (ctype_nid), (econt_nid), (mdalgs), (it)) 
#define TS_RESP_CTX_set_signer_key(ctx, key) IAmiSSL->TS_RESP_CTX_set_signer_key((ctx), (key)) 
#define EVP_PKEY_encrypt_old(enc_key, key, key_len, pub_key) IAmiSSL->EVP_PKEY_encrypt_old((enc_key), (key), (key_len), (pub_key)) 
#define EVP_PKEY_encrypt_init(ctx) IAmiSSL->EVP_PKEY_encrypt_init((ctx)) 
#define CRYPTO_THREADID_cpy(dest, src) IAmiSSL->CRYPTO_THREADID_cpy((dest), (src)) 
#define ASN1_PCTX_get_cert_flags(p) IAmiSSL->ASN1_PCTX_get_cert_flags((p)) 
#define i2d_ESS_SIGNING_CERT(a, pp) IAmiSSL->i2d_ESS_SIGNING_CERT((a), (pp)) 
#define TS_CONF_load_key(file, pass) IAmiSSL->TS_CONF_load_key((file), (pass)) 
#define i2d_ASN1_SEQUENCE_ANY(a, pp) IAmiSSL->i2d_ASN1_SEQUENCE_ANY((a), (pp)) 
#define d2i_TS_MSG_IMPRINT_bio(fp, a) IAmiSSL->d2i_TS_MSG_IMPRINT_bio((fp), (a)) 
#define EVP_PKEY_asn1_set_public(ameth, pub_decode, pub_encode, pub_cmp, pub_print, pkey_size, pkey_bits) IAmiSSL->EVP_PKEY_asn1_set_public((ameth), (pub_decode), (pub_encode), (pub_cmp), (pub_print), (pkey_size), (pkey_bits)) 
#define b2i_PublicKey_bio(in) IAmiSSL->b2i_PublicKey_bio((in)) 
#define BIO_asn1_set_prefix(b, prefix, prefix_free) IAmiSSL->BIO_asn1_set_prefix((b), (prefix), (prefix_free)) 
#define EVP_PKEY_new_mac_key(type, e, key, keylen) IAmiSSL->EVP_PKEY_new_mac_key((type), (e), (key), (keylen)) 
#define CRYPTO_THREADID_cmp(a, b) IAmiSSL->CRYPTO_THREADID_cmp((a), (b)) 
#define TS_REQ_ext_free(a) IAmiSSL->TS_REQ_ext_free((a)) 
#define EVP_PKEY_asn1_set_free(ameth, pkey_free) IAmiSSL->EVP_PKEY_asn1_set_free((ameth), (pkey_free)) 
#define EVP_PKEY_get0_asn1(pkey) IAmiSSL->EVP_PKEY_get0_asn1((pkey)) 
#define d2i_NETSCAPE_X509(a, in, len) IAmiSSL->d2i_NETSCAPE_X509((a), (in), (len)) 
#define EVP_PKEY_verify_recover_init(ctx) IAmiSSL->EVP_PKEY_verify_recover_init((ctx)) 
#define EVP_PKEY_CTX_set_data(ctx, data) IAmiSSL->EVP_PKEY_CTX_set_data((ctx), (data)) 
#define EVP_PKEY_keygen_init(ctx) IAmiSSL->EVP_PKEY_keygen_init((ctx)) 
#define TS_RESP_CTX_set_status_info(ctx, status, text) IAmiSSL->TS_RESP_CTX_set_status_info((ctx), (status), (text)) 
#define TS_MSG_IMPRINT_get_algo(a) IAmiSSL->TS_MSG_IMPRINT_get_algo((a)) 
#define TS_REQ_print_bio(bio, a) IAmiSSL->TS_REQ_print_bio((bio), (a)) 
#define EVP_PKEY_CTX_ctrl_str(ctx, type, value) IAmiSSL->EVP_PKEY_CTX_ctrl_str((ctx), (type), (value)) 
#define EVP_PKEY_get_default_digest_nid(pkey, pnid) IAmiSSL->EVP_PKEY_get_default_digest_nid((pkey), (pnid)) 
#define PEM_write_bio_PKCS7_stream(out, p7, in, flags) IAmiSSL->PEM_write_bio_PKCS7_stream((out), (p7), (in), (flags)) 
#define TS_MSG_IMPRINT_print_bio(bio, msg) IAmiSSL->TS_MSG_IMPRINT_print_bio((bio), (msg)) 
#define BN_asc2bn(a, str) IAmiSSL->BN_asc2bn((a), (str)) 
#define TS_REQ_get_policy_id(a) IAmiSSL->TS_REQ_get_policy_id((a)) 
#define d2i_TS_ACCURACY(a, pp, length) IAmiSSL->d2i_TS_ACCURACY((a), (pp), (length)) 
#define DSO_global_lookup(name) IAmiSSL->DSO_global_lookup((name)) 
#define TS_CONF_set_tsa_name(conf, section, ctx) IAmiSSL->TS_CONF_set_tsa_name((conf), (section), (ctx)) 
#define i2d_ASN1_SET_ANY(a, pp) IAmiSSL->i2d_ASN1_SET_ANY((a), (pp)) 
#define ASN1_PCTX_get_flags(p) IAmiSSL->ASN1_PCTX_get_flags((p)) 
#define TS_TST_INFO_get_ext_by_NID(a, nid, lastpos) IAmiSSL->TS_TST_INFO_get_ext_by_NID((a), (nid), (lastpos)) 
#define TS_RESP_new() IAmiSSL->TS_RESP_new() 
#define ESS_CERT_ID_dup(a) IAmiSSL->ESS_CERT_ID_dup((a)) 
#define TS_STATUS_INFO_dup(a) IAmiSSL->TS_STATUS_INFO_dup((a)) 
#define TS_REQ_delete_ext(a, loc) IAmiSSL->TS_REQ_delete_ext((a), (loc)) 
#define EVP_DigestVerifyFinal(ctx, sig, siglen) IAmiSSL->EVP_DigestVerifyFinal((ctx), (sig), (siglen)) 
#define EVP_PKEY_print_params(out, pkey, inden, pctx) IAmiSSL->EVP_PKEY_print_params((out), (pkey), (inden), (pctx)) 
#define TS_REQ_get_msg_imprint(a) IAmiSSL->TS_REQ_get_msg_imprint((a)) 
#define OBJ_find_sigid_by_algs(psignid, dig_nid, pkey_nid) IAmiSSL->OBJ_find_sigid_by_algs((psignid), (dig_nid), (pkey_nid)) 
#define TS_TST_INFO_get_serial(a) IAmiSSL->TS_TST_INFO_get_serial((a)) 
#define TS_REQ_get_nonce(a) IAmiSSL->TS_REQ_get_nonce((a)) 
#define X509_PUBKEY_set0_param(pub, aobj, ptype, pval, penc, penclen) IAmiSSL->X509_PUBKEY_set0_param((pub), (aobj), (ptype), (pval), (penc), (penclen)) 
#define EVP_PKEY_CTX_set0_keygen_info(ctx, dat, datlen) IAmiSSL->EVP_PKEY_CTX_set0_keygen_info((ctx), (dat), (datlen)) 
#define DIST_POINT_set_dpname(dpn, iname) IAmiSSL->DIST_POINT_set_dpname((dpn), (iname)) 
#define i2d_ISSUING_DIST_POINT(a, pp) IAmiSSL->i2d_ISSUING_DIST_POINT((a), (pp)) 
#define EVP_PKEY_CTX_get_data(ctx) IAmiSSL->EVP_PKEY_CTX_get_data((ctx)) 
#define TS_STATUS_INFO_print_bio(bio, a) IAmiSSL->TS_STATUS_INFO_print_bio((bio), (a)) 
#define EVP_PKEY_derive_init(ctx) IAmiSSL->EVP_PKEY_derive_init((ctx)) 
#define d2i_TS_TST_INFO(a, pp, length) IAmiSSL->d2i_TS_TST_INFO((a), (pp), (length)) 
#define EVP_PKEY_asn1_add_alias(to, from) IAmiSSL->EVP_PKEY_asn1_add_alias((to), (from)) 
#define d2i_TS_RESP_bio(fp, a) IAmiSSL->d2i_TS_RESP_bio((fp), (a)) 
#define OTHERNAME_cmp(a, b) IAmiSSL->OTHERNAME_cmp((a), (b)) 
#define GENERAL_NAME_set0_value(a, type, value) IAmiSSL->GENERAL_NAME_set0_value((a), (type), (value)) 
#define PKCS7_RECIP_INFO_get0_alg(ri, penc) IAmiSSL->PKCS7_RECIP_INFO_get0_alg((ri), (penc)) 
#define TS_RESP_CTX_new() IAmiSSL->TS_RESP_CTX_new() 
#define TS_RESP_set_tst_info(a, p7, tst_info) IAmiSSL->TS_RESP_set_tst_info((a), (p7), (tst_info)) 
#define PKCS7_final(p7, data, flags) IAmiSSL->PKCS7_final((p7), (data), (flags)) 
#define EVP_PKEY_base_id(pkey) IAmiSSL->EVP_PKEY_base_id((pkey)) 
#define TS_RESP_CTX_set_signer_cert(ctx, signer) IAmiSSL->TS_RESP_CTX_set_signer_cert((ctx), (signer)) 
#define TS_REQ_set_msg_imprint(a, msg_imprint) IAmiSSL->TS_REQ_set_msg_imprint((a), (msg_imprint)) 
#define EVP_PKEY_CTX_ctrl(ctx, keytype, optype, cmd, p1, p2) IAmiSSL->EVP_PKEY_CTX_ctrl((ctx), (keytype), (optype), (cmd), (p1), (p2)) 
#define TS_CONF_set_digests(conf, section, ctx) IAmiSSL->TS_CONF_set_digests((conf), (section), (ctx)) 
#define d2i_TS_MSG_IMPRINT(a, pp, length) IAmiSSL->d2i_TS_MSG_IMPRINT((a), (pp), (length)) 
#define EVP_PKEY_meth_set_ctrl(pmeth, ctrl, ctrl_str) IAmiSSL->EVP_PKEY_meth_set_ctrl((pmeth), (ctrl), (ctrl_str)) 
#define TS_REQ_get_ext_by_NID(a, nid, lastpos) IAmiSSL->TS_REQ_get_ext_by_NID((a), (nid), (lastpos)) 
#define PKCS5_pbe_set0_algor(algor, alg, iter, salt, saltlen) IAmiSSL->PKCS5_pbe_set0_algor((algor), (alg), (iter), (salt), (saltlen)) 
#define BN_BLINDING_thread_id(b) IAmiSSL->BN_BLINDING_thread_id((b)) 
#define TS_ACCURACY_new() IAmiSSL->TS_ACCURACY_new() 
#define X509_CRL_METHOD_free(m) IAmiSSL->X509_CRL_METHOD_free((m)) 
#define ASN1_PCTX_get_nm_flags(p) IAmiSSL->ASN1_PCTX_get_nm_flags((p)) 
#define EVP_PKEY_meth_set_sign(pmeth, sign_init, sign) IAmiSSL->EVP_PKEY_meth_set_sign((pmeth), (sign_init), (sign)) 
#define CRYPTO_THREADID_current(id) IAmiSSL->CRYPTO_THREADID_current((id)) 
#define EVP_PKEY_decrypt_init(ctx) IAmiSSL->EVP_PKEY_decrypt_init((ctx)) 
#define NETSCAPE_X509_free(a) IAmiSSL->NETSCAPE_X509_free((a)) 
#define i2b_PVK_bio(out, pk, enclevel, cb, u) IAmiSSL->i2b_PVK_bio((out), (pk), (enclevel), (cb), (u)) 
#define EVP_PKEY_print_private(out, pkey, indent, pctx) IAmiSSL->EVP_PKEY_print_private((out), (pkey), (indent), (pctx)) 
#define GENERAL_NAME_get0_value(a, ptype) IAmiSSL->GENERAL_NAME_get0_value((a), (ptype)) 
#define b2i_PVK_bio(in, cb, u) IAmiSSL->b2i_PVK_bio((in), (cb), (u)) 
#define ASN1_UTCTIME_adj(s, t, offset_day, offset_sec) IAmiSSL->ASN1_UTCTIME_adj((s), (t), (offset_day), (offset_sec)) 
#define TS_TST_INFO_new() IAmiSSL->TS_TST_INFO_new() 
#define EVP_MD_do_all_sorted(fn, arg) IAmiSSL->EVP_MD_do_all_sorted((fn), (arg)) 
#define TS_CONF_set_default_engine(name) IAmiSSL->TS_CONF_set_default_engine((name)) 
#define TS_ACCURACY_set_seconds(a, seconds) IAmiSSL->TS_ACCURACY_set_seconds((a), (seconds)) 
#define TS_TST_INFO_get_time(a) IAmiSSL->TS_TST_INFO_get_time((a)) 
#define PKCS8_pkey_get0(ppkalg, pk, ppklen, pa, p8) IAmiSSL->PKCS8_pkey_get0((ppkalg), (pk), (ppklen), (pa), (p8)) 
#define EVP_PKEY_asn1_get0(idx) IAmiSSL->EVP_PKEY_asn1_get0((idx)) 
#define OBJ_add_sigid(signid, dig_id, pkey_id) IAmiSSL->OBJ_add_sigid((signid), (dig_id), (pkey_id)) 
#define PKCS7_SIGNER_INFO_sign(si) IAmiSSL->PKCS7_SIGNER_INFO_sign((si)) 
#define EVP_PKEY_paramgen_init(ctx) IAmiSSL->EVP_PKEY_paramgen_init((ctx)) 
#define EVP_PKEY_sign(ctx, sig, siglen, tbs, tbslen) IAmiSSL->EVP_PKEY_sign((ctx), (sig), (siglen), (tbs), (tbslen)) 
#define OBJ_sigid_free() IAmiSSL->OBJ_sigid_free() 
#define EVP_PKEY_meth_set_init(pmeth, init) IAmiSSL->EVP_PKEY_meth_set_init((pmeth), (init)) 
#define d2i_ESS_ISSUER_SERIAL(a, pp, length) IAmiSSL->d2i_ESS_ISSUER_SERIAL((a), (pp), (length)) 
#define ISSUING_DIST_POINT_new() IAmiSSL->ISSUING_DIST_POINT_new() 
#define ASN1_TIME_adj(s, t, offset_day, offset_sec) IAmiSSL->ASN1_TIME_adj((s), (t), (offset_day), (offset_sec)) 
#define TS_OBJ_print_bio(bio, obj) IAmiSSL->TS_OBJ_print_bio((bio), (obj)) 
#define EVP_PKEY_meth_set_verify_recover(pmeth, verify_recover_init, verify_recover) IAmiSSL->EVP_PKEY_meth_set_verify_recover((pmeth), (verify_recover_init), (verify_recover)) 
#define TS_RESP_get_status_info(g) IAmiSSL->TS_RESP_get_status_info((g)) 
#define EVP_PKEY_CTX_set_cb(ctx, cb) IAmiSSL->EVP_PKEY_CTX_set_cb((ctx), (cb)) 
#define PKCS7_to_TS_TST_INFO(token) IAmiSSL->PKCS7_to_TS_TST_INFO((token)) 
#define ASN1_PCTX_get_oid_flags(p) IAmiSSL->ASN1_PCTX_get_oid_flags((p)) 
#define TS_TST_INFO_add_ext(a, ex, loc) IAmiSSL->TS_TST_INFO_add_ext((a), (ex), (loc)) 
#define EVP_PKEY_meth_set_derive(pmeth, derive_init, derive) IAmiSSL->EVP_PKEY_meth_set_derive((pmeth), (derive_init), (derive)) 
#define i2d_TS_MSG_IMPRINT_bio(fp, a) IAmiSSL->i2d_TS_MSG_IMPRINT_bio((fp), (a)) 
#define TS_RESP_CTX_set_accuracy(ctx, secs, millis, micros) IAmiSSL->TS_RESP_CTX_set_accuracy((ctx), (secs), (millis), (micros)) 
#define TS_REQ_set_nonce(a, nonce) IAmiSSL->TS_REQ_set_nonce((a), (nonce)) 
#define ESS_CERT_ID_new() IAmiSSL->ESS_CERT_ID_new() 
#define TS_REQ_get_ext_count(a) IAmiSSL->TS_REQ_get_ext_count((a)) 
#define BUF_reverse(out, in, siz) IAmiSSL->BUF_reverse((out), (in), (siz)) 
#define TS_TST_INFO_print_bio(bio, a) IAmiSSL->TS_TST_INFO_print_bio((bio), (a)) 
#define d2i_ISSUING_DIST_POINT(a, pp, length) IAmiSSL->d2i_ISSUING_DIST_POINT((a), (pp), (length)) 
#define i2b_PrivateKey_bio(out, pk) IAmiSSL->i2b_PrivateKey_bio((out), (pk)) 
#define i2d_TS_RESP(a, pp) IAmiSSL->i2d_TS_RESP((a), (pp)) 
#define b2i_PublicKey(in, length) IAmiSSL->b2i_PublicKey((in), (length)) 
#define TS_VERIFY_CTX_cleanup(ctx) IAmiSSL->TS_VERIFY_CTX_cleanup((ctx)) 
#define TS_STATUS_INFO_free(a) IAmiSSL->TS_STATUS_INFO_free((a)) 
#define TS_RESP_verify_token(ctx, token) IAmiSSL->TS_RESP_verify_token((ctx), (token)) 
#define OBJ_bsearch_ex_(key, base, num, size, cmp, flags) IAmiSSL->OBJ_bsearch_ex_((key), (base), (num), (size), (cmp), (flags)) 
#define ASN1_bn_print(bp, number, num, buf, off) IAmiSSL->ASN1_bn_print((bp), (number), (num), (buf), (off)) 
#define EVP_PKEY_asn1_get_count() IAmiSSL->EVP_PKEY_asn1_get_count() 
#define ASN1_PCTX_set_nm_flags(p, flags) IAmiSSL->ASN1_PCTX_set_nm_flags((p), (flags)) 
#define EVP_DigestVerifyInit(ctx, pctx, type, e, pkey) IAmiSSL->EVP_DigestVerifyInit((ctx), (pctx), (type), (e), (pkey)) 
#define TS_TST_INFO_get_policy_id(a) IAmiSSL->TS_TST_INFO_get_policy_id((a)) 
#define TS_REQ_get_cert_req(a) IAmiSSL->TS_REQ_get_cert_req((a)) 
#define X509_CRL_set_meth_data(crl, dat) IAmiSSL->X509_CRL_set_meth_data((crl), (dat)) 
#define PKCS8_pkey_set0(priv, aobj, version, ptype, pval, penc, penclen) IAmiSSL->PKCS8_pkey_set0((priv), (aobj), (version), (ptype), (pval), (penc), (penclen)) 
#define ASN1_STRING_copy(dst, str) IAmiSSL->ASN1_STRING_copy((dst), (str)) 
#define X509_CRL_match(a, b) IAmiSSL->X509_CRL_match((a), (b)) 
#define EVP_PKEY_asn1_set_private(ameth, priv_decode, priv_encode, priv_print) IAmiSSL->EVP_PKEY_asn1_set_private((ameth), (priv_decode), (priv_encode), (priv_print)) 
#define TS_TST_INFO_get_ext_d2i(a, nid, crit, idx) IAmiSSL->TS_TST_INFO_get_ext_d2i((a), (nid), (crit), (idx)) 
#define TS_RESP_CTX_add_policy(ctx, policy) IAmiSSL->TS_RESP_CTX_add_policy((ctx), (policy)) 
#define d2i_TS_RESP(a, pp, length) IAmiSSL->d2i_TS_RESP((a), (pp), (length)) 
#define TS_CONF_load_certs(file) IAmiSSL->TS_CONF_load_certs((file)) 
#define TS_TST_INFO_get_msg_imprint(a) IAmiSSL->TS_TST_INFO_get_msg_imprint((a)) 
#define ERR_load_TS_strings() IAmiSSL->ERR_load_TS_strings() 
#define TS_TST_INFO_get_version(a) IAmiSSL->TS_TST_INFO_get_version((a)) 
#define EVP_PKEY_CTX_dup(ctx) IAmiSSL->EVP_PKEY_CTX_dup((ctx)) 
#define EVP_PKEY_meth_set_verify(pmeth, verify_init, verify) IAmiSSL->EVP_PKEY_meth_set_verify((pmeth), (verify_init), (verify)) 
#define i2b_PublicKey_bio(out, pk) IAmiSSL->i2b_PublicKey_bio((out), (pk)) 
#define TS_CONF_set_certs(conf, section, certs, ctx) IAmiSSL->TS_CONF_set_certs((conf), (section), (certs), (ctx)) 
#define EVP_PKEY_asn1_get0_info(ppkey_id, ppkey_base_id, ppkey_flags, pinfo, ppem_str, ameth) IAmiSSL->EVP_PKEY_asn1_get0_info((ppkey_id), (ppkey_base_id), (ppkey_flags), (pinfo), (ppem_str), (ameth)) 
#define TS_VERIFY_CTX_free(ctx) IAmiSSL->TS_VERIFY_CTX_free((ctx)) 
#define TS_REQ_get_ext_by_critical(a, crit, lastpos) IAmiSSL->TS_REQ_get_ext_by_critical((a), (crit), (lastpos)) 
#define TS_RESP_CTX_set_serial_cb(ctx, cb, data) IAmiSSL->TS_RESP_CTX_set_serial_cb((ctx), (cb), (data)) 
#define X509_CRL_get_meth_data(crl) IAmiSSL->X509_CRL_get_meth_data((crl)) 
#define TS_RESP_CTX_set_time_cb(ctx, cb, data) IAmiSSL->TS_RESP_CTX_set_time_cb((ctx), (cb), (data)) 
#define TS_MSG_IMPRINT_get_msg(a) IAmiSSL->TS_MSG_IMPRINT_get_msg((a)) 
#define TS_TST_INFO_ext_free(a) IAmiSSL->TS_TST_INFO_ext_free((a)) 
#define TS_REQ_get_version(a) IAmiSSL->TS_REQ_get_version((a)) 
#define TS_REQ_add_ext(a, ex, loc) IAmiSSL->TS_REQ_add_ext((a), (ex), (loc)) 
#define EVP_PKEY_CTX_set_app_data(ctx, data) IAmiSSL->EVP_PKEY_CTX_set_app_data((ctx), (data)) 
#define OBJ_bsearch_(key, base, num, size, cmp) IAmiSSL->OBJ_bsearch_((key), (base), (num), (size), (cmp)) 
#define EVP_PKEY_meth_set_verifyctx(pmeth, verifyctx_init, verifyctx) IAmiSSL->EVP_PKEY_meth_set_verifyctx((pmeth), (verifyctx_init), (verifyctx)) 
#define i2d_PKCS7_bio_stream(out, p7, in, flags) IAmiSSL->i2d_PKCS7_bio_stream((out), (p7), (in), (flags)) 
#define CRYPTO_THREADID_set_numeric(id, val) IAmiSSL->CRYPTO_THREADID_set_numeric((id), (val)) 
#define PKCS7_sign_add_signer(p7, signcert, pkey, md, flags) IAmiSSL->PKCS7_sign_add_signer((p7), (signcert), (pkey), (md), (flags)) 
#define d2i_TS_TST_INFO_bio(bp, a) IAmiSSL->d2i_TS_TST_INFO_bio((bp), (a)) 
#define TS_TST_INFO_get_ordering(a) IAmiSSL->TS_TST_INFO_get_ordering((a)) 
#define TS_RESP_print_bio(bio, a) IAmiSSL->TS_RESP_print_bio((bio), (a)) 
#define TS_TST_INFO_get_exts(a) IAmiSSL->TS_TST_INFO_get_exts((a)) 
#define PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, aiv, prf_nid) IAmiSSL->PKCS5_pbe2_set_iv((cipher), (iter), (salt), (saltlen), (aiv), (prf_nid)) 
#define b2i_PrivateKey(in, length) IAmiSSL->b2i_PrivateKey((in), (length)) 
#define EVP_PKEY_CTX_get_app_data(ctx) IAmiSSL->EVP_PKEY_CTX_get_app_data((ctx)) 
#define TS_REQ_set_cert_req(a, cert_req) IAmiSSL->TS_REQ_set_cert_req((a), (cert_req)) 
#define CRYPTO_THREADID_set_callback(threadid_func) IAmiSSL->CRYPTO_THREADID_set_callback((threadid_func)) 
#define TS_CONF_set_serial(conf, section, cb, ctx) IAmiSSL->TS_CONF_set_serial((conf), (section), (cb), (ctx)) 
#define TS_TST_INFO_free(a) IAmiSSL->TS_TST_INFO_free((a)) 
#define TS_RESP_verify_response(ctx, response) IAmiSSL->TS_RESP_verify_response((ctx), (response)) 
#define i2d_ESS_ISSUER_SERIAL(a, pp) IAmiSSL->i2d_ESS_ISSUER_SERIAL((a), (pp)) 
#define TS_ACCURACY_get_seconds(a) IAmiSSL->TS_ACCURACY_get_seconds((a)) 
#define EVP_CIPHER_do_all(fn, arg) IAmiSSL->EVP_CIPHER_do_all((fn), (arg)) 
#define b2i_PrivateKey_bio(in) IAmiSSL->b2i_PrivateKey_bio((in)) 
#define OCSP_CERTID_dup(a) IAmiSSL->OCSP_CERTID_dup((a)) 
#define X509_PUBKEY_get0_param(ppkalg, pk, ppklen, pa, pub) IAmiSSL->X509_PUBKEY_get0_param((ppkalg), (pk), (ppklen), (pa), (pub)) 
#define TS_MSG_IMPRINT_dup(a) IAmiSSL->TS_MSG_IMPRINT_dup((a)) 
#define PKCS7_print_ctx(out, x, indent, pctx) IAmiSSL->PKCS7_print_ctx((out), (x), (indent), (pctx)) 
#define i2d_TS_REQ_bio(fp, a) IAmiSSL->i2d_TS_REQ_bio((fp), (a)) 
#define EVP_PKEY_asn1_set_param(ameth, param_decode, param_encode, param_missing, param_copy, param_cmp, param_print) IAmiSSL->EVP_PKEY_asn1_set_param((ameth), (param_decode), (param_encode), (param_missing), (param_copy), (param_cmp), (param_print)) 
#define EVP_PKEY_meth_set_encrypt(pmeth, encrypt_init, encryptfn) IAmiSSL->EVP_PKEY_meth_set_encrypt((pmeth), (encrypt_init), (encryptfn)) 
#define ASN1_PCTX_set_flags(p, flags) IAmiSSL->ASN1_PCTX_set_flags((p), (flags)) 
#define i2d_ESS_CERT_ID(a, pp) IAmiSSL->i2d_ESS_CERT_ID((a), (pp)) 
#define TS_VERIFY_CTX_new() IAmiSSL->TS_VERIFY_CTX_new() 
#define TS_RESP_CTX_set_extension_cb(ctx, cb, data) IAmiSSL->TS_RESP_CTX_set_extension_cb((ctx), (cb), (data)) 
#define TS_RESP_CTX_set_status_info_cond(ctx, status, text) IAmiSSL->TS_RESP_CTX_set_status_info_cond((ctx), (status), (text)) 
#define EVP_PKEY_verify(ctx, sig, siglen, tbs, tbslen) IAmiSSL->EVP_PKEY_verify((ctx), (sig), (siglen), (tbs), (tbslen)) 
#define X509_CRL_METHOD_new(crl_init, crl_free, crl_lookup, crl_verify) IAmiSSL->X509_CRL_METHOD_new((crl_init), (crl_free), (crl_lookup), (crl_verify)) 
#define EVP_DigestSignFinal(ctx, sigret, siglen) IAmiSSL->EVP_DigestSignFinal((ctx), (sigret), (siglen)) 
#define TS_RESP_CTX_set_def_policy(ctx, def_policy) IAmiSSL->TS_RESP_CTX_set_def_policy((ctx), (def_policy)) 
#define TS_RESP_create_response(ctx, req_bio) IAmiSSL->TS_RESP_create_response((ctx), (req_bio)) 
#define PKCS7_SIGNER_INFO_get0_algs(si, pk, pdig, psig) IAmiSSL->PKCS7_SIGNER_INFO_get0_algs((si), (pk), (pdig), (psig)) 
#define TS_TST_INFO_get_nonce(a) IAmiSSL->TS_TST_INFO_get_nonce((a)) 
#define EVP_PKEY_decrypt_old(dec_key, enc_key, enc_key_len, private_key) IAmiSSL->EVP_PKEY_decrypt_old((dec_key), (enc_key), (enc_key_len), (private_key)) 
#define TS_TST_INFO_set_policy_id(a, policy_id) IAmiSSL->TS_TST_INFO_set_policy_id((a), (policy_id)) 
#define TS_CONF_set_ess_cert_id_chain(conf, section, ctx) IAmiSSL->TS_CONF_set_ess_cert_id_chain((conf), (section), (ctx)) 
#define EVP_PKEY_CTX_get0_pkey(ctx) IAmiSSL->EVP_PKEY_CTX_get0_pkey((ctx)) 
#define d2i_TS_REQ(a, pp, length) IAmiSSL->d2i_TS_REQ((a), (pp), (length)) 
#define EVP_PKEY_asn1_find_str(pe, str, len) IAmiSSL->EVP_PKEY_asn1_find_str((pe), (str), (len)) 
#define BIO_f_asn1() IAmiSSL->BIO_f_asn1() 
#define ESS_SIGNING_CERT_new() IAmiSSL->ESS_SIGNING_CERT_new() 
#define EVP_PBE_find(type, pbe_nid, pcnid, pmnid, pkeygen) IAmiSSL->EVP_PBE_find((type), (pbe_nid), (pcnid), (pmnid), (pkeygen)) 
#define X509_CRL_get0_by_cert(crl, ret, x) IAmiSSL->X509_CRL_get0_by_cert((crl), (ret), (x)) 
#define EVP_PKEY_derive(ctx, key, keylen) IAmiSSL->EVP_PKEY_derive((ctx), (key), (keylen)) 
#define i2d_TS_REQ(a, pp) IAmiSSL->i2d_TS_REQ((a), (pp)) 
#define TS_TST_INFO_delete_ext(a, loc) IAmiSSL->TS_TST_INFO_delete_ext((a), (loc)) 
#define ESS_ISSUER_SERIAL_free(a) IAmiSSL->ESS_ISSUER_SERIAL_free((a)) 
#define ASN1_PCTX_set_str_flags(p, flags) IAmiSSL->ASN1_PCTX_set_str_flags((p), (flags)) 
#define TS_CONF_set_signer_key(conf, section, key, pass, ctx) IAmiSSL->TS_CONF_set_signer_key((conf), (section), (key), (pass), (ctx)) 
#define TS_ACCURACY_get_millis(a) IAmiSSL->TS_ACCURACY_get_millis((a)) 
#define TS_RESP_get_token(a) IAmiSSL->TS_RESP_get_token((a)) 
#define TS_ACCURACY_dup(a) IAmiSSL->TS_ACCURACY_dup((a)) 
#define X509_CRL_set_default_method(meth) IAmiSSL->X509_CRL_set_default_method((meth)) 
#define CRYPTO_THREADID_hash(id) IAmiSSL->CRYPTO_THREADID_hash((id)) 
#define TS_RESP_free(a) IAmiSSL->TS_RESP_free((a)) 
#define ISSUING_DIST_POINT_free(a) IAmiSSL->ISSUING_DIST_POINT_free((a)) 
#define ESS_ISSUER_SERIAL_new() IAmiSSL->ESS_ISSUER_SERIAL_new() 
#define PKCS7_add1_attrib_digest(si, md, mdlen) IAmiSSL->PKCS7_add1_attrib_digest((si), (md), (mdlen)) 
#define TS_RESP_CTX_add_md(ctx, md) IAmiSSL->TS_RESP_CTX_add_md((ctx), (md)) 
#define TS_TST_INFO_dup(a) IAmiSSL->TS_TST_INFO_dup((a)) 
#define PEM_write_bio_Parameters(bp, x) IAmiSSL->PEM_write_bio_Parameters((bp), (x)) 
#define TS_TST_INFO_get_accuracy(a) IAmiSSL->TS_TST_INFO_get_accuracy((a)) 
#define X509_CRL_get0_by_serial(crl, ret, serial) IAmiSSL->X509_CRL_get0_by_serial((crl), (ret), (serial)) 
#define TS_TST_INFO_set_version(a, version) IAmiSSL->TS_TST_INFO_set_version((a), (version)) 
#define TS_RESP_CTX_get_tst_info(ctx) IAmiSSL->TS_RESP_CTX_get_tst_info((ctx)) 
#define TS_RESP_verify_signature(token, certs, store, signer_out) IAmiSSL->TS_RESP_verify_signature((token), (certs), (store), (signer_out)) 
#define CRYPTO_THREADID_get_callback() IAmiSSL->CRYPTO_THREADID_get_callback() 
#define TS_TST_INFO_get_tsa(a) IAmiSSL->TS_TST_INFO_get_tsa((a)) 
#define TS_STATUS_INFO_new() IAmiSSL->TS_STATUS_INFO_new() 
#define EVP_PKEY_CTX_get_cb(ctx) IAmiSSL->EVP_PKEY_CTX_get_cb((ctx)) 
#define TS_REQ_get_ext_d2i(a, nid, crit, idx) IAmiSSL->TS_REQ_get_ext_d2i((a), (nid), (crit), (idx)) 
#define GENERAL_NAME_set0_othername(gen, oid, value) IAmiSSL->GENERAL_NAME_set0_othername((gen), (oid), (value)) 
#define TS_TST_INFO_get_ext_count(a) IAmiSSL->TS_TST_INFO_get_ext_count((a)) 
#define TS_RESP_CTX_get_request(ctx) IAmiSSL->TS_RESP_CTX_get_request((ctx)) 
#define i2d_NETSCAPE_X509(a, out) IAmiSSL->i2d_NETSCAPE_X509((a), (out)) 
#define EVP_PKEY_meth_set_signctx(pmeth, signctx_init, signctx) IAmiSSL->EVP_PKEY_meth_set_signctx((pmeth), (signctx_init), (signctx)) 
#define EVP_PKEY_asn1_copy(dst, src) IAmiSSL->EVP_PKEY_asn1_copy((dst), (src)) 
#define ASN1_TYPE_cmp(a, b) IAmiSSL->ASN1_TYPE_cmp((a), (b)) 
#define EVP_CIPHER_do_all_sorted(fn, arg) IAmiSSL->EVP_CIPHER_do_all_sorted((fn), (arg)) 
#define EVP_PKEY_CTX_free(ctx) IAmiSSL->EVP_PKEY_CTX_free((ctx)) 
#define X509_STORE_get1_certs(st, nm) IAmiSSL->X509_STORE_get1_certs((st), (nm)) 
#define EVP_PKEY_CTX_get_operation(ctx) IAmiSSL->EVP_PKEY_CTX_get_operation((ctx)) 
#define d2i_ESS_SIGNING_CERT(a, pp, length) IAmiSSL->d2i_ESS_SIGNING_CERT((a), (pp), (length)) 
#define TS_CONF_set_ordering(conf, section, ctx) IAmiSSL->TS_CONF_set_ordering((conf), (section), (ctx)) 
#define EVP_PBE_alg_add_type(pbe_type, pbe_nid, cipher_nid, md_nid, keygen) IAmiSSL->EVP_PBE_alg_add_type((pbe_type), (pbe_nid), (cipher_nid), (md_nid), (keygen)) 
#define TS_REQ_set_version(a, version) IAmiSSL->TS_REQ_set_version((a), (version)) 
#define EVP_PKEY_get0(pkey) IAmiSSL->EVP_PKEY_get0((pkey)) 
#define BIO_asn1_set_suffix(b, suffix, suffix_free) IAmiSSL->BIO_asn1_set_suffix((b), (suffix), (suffix_free)) 
#define i2d_TS_STATUS_INFO(a, pp) IAmiSSL->i2d_TS_STATUS_INFO((a), (pp)) 
#define EVP_MD_do_all(fn, arg) IAmiSSL->EVP_MD_do_all((fn), (arg)) 
#define TS_TST_INFO_set_accuracy(a, accuracy) IAmiSSL->TS_TST_INFO_set_accuracy((a), (accuracy)) 
#define PKCS7_add_attrib_content_type(si, coid) IAmiSSL->PKCS7_add_attrib_content_type((si), (coid)) 
#define EVP_PKEY_meth_add0(pmeth) IAmiSSL->EVP_PKEY_meth_add0((pmeth)) 
#define TS_TST_INFO_set_tsa(a, tsa) IAmiSSL->TS_TST_INFO_set_tsa((a), (tsa)) 
#define EVP_PKEY_meth_new(id, flags) IAmiSSL->EVP_PKEY_meth_new((id), (flags)) 
#define TS_CONF_set_accuracy(conf, section, ctx) IAmiSSL->TS_CONF_set_accuracy((conf), (section), (ctx)) 
#define ASN1_PCTX_set_oid_flags(p, flags) IAmiSSL->ASN1_PCTX_set_oid_flags((p), (flags)) 
#define ESS_SIGNING_CERT_dup(a) IAmiSSL->ESS_SIGNING_CERT_dup((a)) 
#define d2i_TS_REQ_bio(fp, a) IAmiSSL->d2i_TS_REQ_bio((fp), (a)) 
#define X509_time_adj_ex(s, offset_day, offset_sec, t) IAmiSSL->X509_time_adj_ex((s), (offset_day), (offset_sec), (t)) 
#define TS_RESP_CTX_add_flags(ctx, flags) IAmiSSL->TS_RESP_CTX_add_flags((ctx), (flags)) 
#define d2i_TS_STATUS_INFO(a, pp, length) IAmiSSL->d2i_TS_STATUS_INFO((a), (pp), (length)) 
#define TS_MSG_IMPRINT_set_msg(a, d, len) IAmiSSL->TS_MSG_IMPRINT_set_msg((a), (d), (len)) 
#define BIO_asn1_get_suffix(b, psuffix, psuffix_free) IAmiSSL->BIO_asn1_get_suffix((b), (psuffix), (psuffix_free)) 
#define TS_REQ_free(a) IAmiSSL->TS_REQ_free((a)) 
#define EVP_PKEY_meth_free(pmeth) IAmiSSL->EVP_PKEY_meth_free((pmeth)) 
#define TS_REQ_get_exts(a) IAmiSSL->TS_REQ_get_exts((a)) 
#define TS_RESP_CTX_set_clock_precision_digits(ctx, clock_precision_digits) IAmiSSL->TS_RESP_CTX_set_clock_precision_digits((ctx), (clock_precision_digits)) 
#define TS_RESP_CTX_add_failure_info(ctx, failure) IAmiSSL->TS_RESP_CTX_add_failure_info((ctx), (failure)) 
#define i2d_TS_RESP_bio(fp, a) IAmiSSL->i2d_TS_RESP_bio((fp), (a)) 
#define EVP_PKEY_CTX_get0_peerkey(ctx) IAmiSSL->EVP_PKEY_CTX_get0_peerkey((ctx)) 
#define TS_REQ_new() IAmiSSL->TS_REQ_new() 
#define TS_MSG_IMPRINT_new() IAmiSSL->TS_MSG_IMPRINT_new() 
#define EVP_PKEY_meth_find(type) IAmiSSL->EVP_PKEY_meth_find((type)) 
#define EVP_PKEY_id(pkey) IAmiSSL->EVP_PKEY_id((pkey)) 
#define TS_TST_INFO_set_serial(a, serial) IAmiSSL->TS_TST_INFO_set_serial((a), (serial)) 
#define a2i_GENERAL_NAME(out, method, ctx, gen_type, value, is_nc) IAmiSSL->a2i_GENERAL_NAME((out), (method), (ctx), (gen_type), (value), (is_nc)) 
#define TS_CONF_set_crypto_device(conf, section, device) IAmiSSL->TS_CONF_set_crypto_device((conf), (section), (device)) 
#define EVP_PKEY_verify_init(ctx) IAmiSSL->EVP_PKEY_verify_init((ctx)) 
#define TS_CONF_set_policies(conf, section, ctx) IAmiSSL->TS_CONF_set_policies((conf), (section), (ctx)) 
#define ASN1_PCTX_new() IAmiSSL->ASN1_PCTX_new() 
#define ESS_CERT_ID_free(a) IAmiSSL->ESS_CERT_ID_free((a)) 
#define TS_MSG_IMPRINT_free(a) IAmiSSL->TS_MSG_IMPRINT_free((a)) 
#define TS_VERIFY_CTX_init(ctx) IAmiSSL->TS_VERIFY_CTX_init((ctx)) 
#define PKCS7_stream(boundary, p7) IAmiSSL->PKCS7_stream((boundary), (p7)) 
#define TS_RESP_CTX_set_certs(ctx, certs) IAmiSSL->TS_RESP_CTX_set_certs((ctx), (certs)) 
#define TS_CONF_set_def_policy(conf, section, policy, ctx) IAmiSSL->TS_CONF_set_def_policy((conf), (section), (policy), (ctx)) 
#define ASN1_GENERALIZEDTIME_adj(s, t, offset_day, offset_sec) IAmiSSL->ASN1_GENERALIZEDTIME_adj((s), (t), (offset_day), (offset_sec)) 
#define NETSCAPE_X509_new() IAmiSSL->NETSCAPE_X509_new() 
#define TS_ACCURACY_free(a) IAmiSSL->TS_ACCURACY_free((a)) 
#define TS_RESP_get_tst_info(a) IAmiSSL->TS_RESP_get_tst_info((a)) 
#define EVP_PKEY_derive_set_peer(ctx, peer) IAmiSSL->EVP_PKEY_derive_set_peer((ctx), (peer)) 
#define PEM_read_bio_Parameters(bp, x) IAmiSSL->PEM_read_bio_Parameters((bp), (x)) 
#define TS_CONF_set_clock_precision_digits(conf, section, ctx) IAmiSSL->TS_CONF_set_clock_precision_digits((conf), (section), (ctx)) 
#define ESS_ISSUER_SERIAL_dup(a) IAmiSSL->ESS_ISSUER_SERIAL_dup((a)) 
#define TS_ACCURACY_get_micros(a) IAmiSSL->TS_ACCURACY_get_micros((a)) 
#define ASN1_PCTX_get_str_flags(p) IAmiSSL->ASN1_PCTX_get_str_flags((p)) 
#define NAME_CONSTRAINTS_check(x, nc) IAmiSSL->NAME_CONSTRAINTS_check((x), (nc)) 
#define ASN1_BIT_STRING_check(a, flags, flags_len) IAmiSSL->ASN1_BIT_STRING_check((a), (flags), (flags_len)) 
#define X509_check_akid(issuer, akid) IAmiSSL->X509_check_akid((issuer), (akid)) 
#define ASN1_PCTX_free(p) IAmiSSL->ASN1_PCTX_free((p)) 
#define PEM_write_bio_ASN1_stream(out, val, in, flags, hdr, it) IAmiSSL->PEM_write_bio_ASN1_stream((out), (val), (in), (flags), (hdr), (it)) 
#define i2d_ASN1_bio_stream(out, val, in, flags, it) IAmiSSL->i2d_ASN1_bio_stream((out), (val), (in), (flags), (it)) 
#define TS_X509_ALGOR_print_bio(bio, alg) IAmiSSL->TS_X509_ALGOR_print_bio((bio), (alg)) 
#define EVP_PKEY_meth_set_cleanup(pmeth, cleanup) IAmiSSL->EVP_PKEY_meth_set_cleanup((pmeth), (cleanup)) 
#define EVP_PKEY_asn1_free(ameth) IAmiSSL->EVP_PKEY_asn1_free((ameth)) 
#define ESS_SIGNING_CERT_free(a) IAmiSSL->ESS_SIGNING_CERT_free((a)) 
#define TS_TST_INFO_set_msg_imprint(a, msg_imprint) IAmiSSL->TS_TST_INFO_set_msg_imprint((a), (msg_imprint)) 
#define GENERAL_NAME_cmp(a, b) IAmiSSL->GENERAL_NAME_cmp((a), (b)) 
#define d2i_ASN1_SET_ANY(a, pp, length) IAmiSSL->d2i_ASN1_SET_ANY((a), (pp), (length)) 
#define d2i_ASN1_SEQUENCE_ANY(a, pp, length) IAmiSSL->d2i_ASN1_SEQUENCE_ANY((a), (pp), (length)) 
#define GENERAL_NAME_get0_otherName(gen, poid, pvalue) IAmiSSL->GENERAL_NAME_get0_otherName((gen), (poid), (pvalue)) 
#define d2i_ESS_CERT_ID(a, pp, length) IAmiSSL->d2i_ESS_CERT_ID((a), (pp), (length)) 
#define OBJ_find_sigid_algs(signid, pdig_nid, ppkey_nid) IAmiSSL->OBJ_find_sigid_algs((signid), (pdig_nid), (ppkey_nid)) 
#define EVP_PKEY_meth_set_keygen(pmeth, keygen_init, keygen) IAmiSSL->EVP_PKEY_meth_set_keygen((pmeth), (keygen_init), (keygen)) 
#define PKCS5_PBKDF2_HMAC(pass, passlen, salt, saltlen, iter, digest, keylen, out) IAmiSSL->PKCS5_PBKDF2_HMAC((pass), (passlen), (salt), (saltlen), (iter), (digest), (keylen), (out)) 
#define EVP_PKEY_paramgen(ctx, ppkey) IAmiSSL->EVP_PKEY_paramgen((ctx), (ppkey)) 
#define EVP_PKEY_meth_set_paramgen(pmeth, paramgen_init, paramgen) IAmiSSL->EVP_PKEY_meth_set_paramgen((pmeth), (paramgen_init), (paramgen)) 
#define BIO_new_PKCS7(out, p7) IAmiSSL->BIO_new_PKCS7((out), (p7)) 
#define EVP_PKEY_verify_recover(ctx, rout, routlen, sig, siglen) IAmiSSL->EVP_PKEY_verify_recover((ctx), (rout), (routlen), (sig), (siglen)) 
#define TS_ext_print_bio(bio, extensions) IAmiSSL->TS_ext_print_bio((bio), (extensions)) 
#define TS_ASN1_INTEGER_print_bio(bio, num) IAmiSSL->TS_ASN1_INTEGER_print_bio((bio), (num)) 
#define check_defer(nid) IAmiSSL->check_defer((nid)) 
#define DSO_pathbyaddr(addr, path, sz) IAmiSSL->DSO_pathbyaddr((addr), (path), (sz)) 
#define EVP_PKEY_set_type(pkey, type) IAmiSSL->EVP_PKEY_set_type((pkey), (type)) 
#define TS_ACCURACY_set_micros(a, micros) IAmiSSL->TS_ACCURACY_set_micros((a), (micros)) 
#define TS_REQ_to_TS_VERIFY_CTX(req, ctx) IAmiSSL->TS_REQ_to_TS_VERIFY_CTX((req), (ctx)) 
#define EVP_PKEY_meth_set_copy(pmeth, copy) IAmiSSL->EVP_PKEY_meth_set_copy((pmeth), (copy)) 
#define ASN1_PCTX_set_cert_flags(p, flags) IAmiSSL->ASN1_PCTX_set_cert_flags((p), (flags)) 
#define TS_TST_INFO_get_ext(a, loc) IAmiSSL->TS_TST_INFO_get_ext((a), (loc)) 
#define EVP_PKEY_asn1_set_ctrl(ameth, pkey_ctrl) IAmiSSL->EVP_PKEY_asn1_set_ctrl((ameth), (pkey_ctrl)) 
#define TS_TST_INFO_get_ext_by_critical(a, crit, lastpos) IAmiSSL->TS_TST_INFO_get_ext_by_critical((a), (crit), (lastpos)) 
#define EVP_PKEY_CTX_new_id(id, e) IAmiSSL->EVP_PKEY_CTX_new_id((id), (e)) 
#define TS_REQ_get_ext_by_OBJ(a, obj, lastpos) IAmiSSL->TS_REQ_get_ext_by_OBJ((a), (obj), (lastpos)) 
#define TS_CONF_set_signer_cert(conf, section, cert, ctx) IAmiSSL->TS_CONF_set_signer_cert((conf), (section), (cert), (ctx)) 
#define X509_NAME_hash_old(x) IAmiSSL->X509_NAME_hash_old((x)) 
#define ASN1_TIME_set_string(s, str) IAmiSSL->ASN1_TIME_set_string((s), (str)) 
#define EVP_MD_flags(md) IAmiSSL->EVP_MD_flags((md)) 
#define TS_RESP_CTX_free(ctx) IAmiSSL->TS_RESP_CTX_free((ctx)) 
#define OCSP_REQ_CTX_add1_header(rctx, name, value) IAmiSSL->OCSP_REQ_CTX_add1_header((rctx), (name), (value)) 
#define OCSP_REQ_CTX_set1_req(rctx, req) IAmiSSL->OCSP_REQ_CTX_set1_req((rctx), (req)) 
#define X509_STORE_set_verify_cb(ctx, verify_cb) IAmiSSL->X509_STORE_set_verify_cb((ctx), (verify_cb)) 
#define X509_STORE_CTX_get0_current_crl(ctx) IAmiSSL->X509_STORE_CTX_get0_current_crl((ctx)) 
#define X509_STORE_CTX_get0_parent_ctx(ctx) IAmiSSL->X509_STORE_CTX_get0_parent_ctx((ctx)) 
#define X509_STORE_CTX_get0_current_issuer(ctx) IAmiSSL->X509_STORE_CTX_get0_current_issuer((ctx)) 
#define EVP_CIPHER_CTX_copy(out, in) IAmiSSL->EVP_CIPHER_CTX_copy((out), (in)) 
#define UI_method_get_prompt_constructor(method) IAmiSSL->UI_method_get_prompt_constructor((method)) 
#define UI_method_set_prompt_constructor(method, prompt_constructor) IAmiSSL->UI_method_set_prompt_constructor((method), (prompt_constructor)) 
#define EVP_read_pw_string_min(buf, minlen, maxlen, prompt, verify) IAmiSSL->EVP_read_pw_string_min((buf), (minlen), (maxlen), (prompt), (verify)) 
#define CRYPTO_cts128_encrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_cts128_encrypt((in), (out), (len), (key), (ivec), (cbc)) 
#define CRYPTO_cts128_decrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cts128_decrypt_block((in), (out), (len), (key), (ivec), (block)) 
#define CRYPTO_cfb128_1_encrypt(in, out, bits, key, ivec, num, enc, block) IAmiSSL->CRYPTO_cfb128_1_encrypt((in), (out), (bits), (key), (ivec), (num), (enc), (block)) 
#define CRYPTO_cbc128_encrypt(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cbc128_encrypt((in), (out), (len), (key), (ivec), (block)) 
#define CRYPTO_ctr128_encrypt(in, out, len, key, ivec, ecount_buf, num, block) IAmiSSL->CRYPTO_ctr128_encrypt((in), (out), (len), (key), (ivec), (ecount_buf), (num), (block)) 
#define CRYPTO_ofb128_encrypt(in, out, len, key, ivec, num, block) IAmiSSL->CRYPTO_ofb128_encrypt((in), (out), (len), (key), (ivec), (num), (block)) 
#define CRYPTO_cts128_decrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_cts128_decrypt((in), (out), (len), (key), (ivec), (cbc)) 
#define CRYPTO_cts128_encrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cts128_encrypt_block((in), (out), (len), (key), (ivec), (block)) 
#define CRYPTO_cbc128_decrypt(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cbc128_decrypt((in), (out), (len), (key), (ivec), (block)) 
#define CRYPTO_cfb128_encrypt(in, out, len, key, ivec, num, enc, block) IAmiSSL->CRYPTO_cfb128_encrypt((in), (out), (len), (key), (ivec), (num), (enc), (block)) 
#define CRYPTO_cfb128_8_encrypt(in, out, length, key, ivec, num, enc, block) IAmiSSL->CRYPTO_cfb128_8_encrypt((in), (out), (length), (key), (ivec), (num), (enc), (block)) 
#define OPENSSL_strcasecmp(str1, str2) IAmiSSL->OPENSSL_strcasecmp((str1), (str2)) 
#define OPENSSL_memcmp(p1, p2, n) IAmiSSL->OPENSSL_memcmp((p1), (p2), (n)) 
#define OPENSSL_strncasecmp(str1, str2, n) IAmiSSL->OPENSSL_strncasecmp((str1), (str2), (n)) 
#define OPENSSL_gmtime(timer, result) IAmiSSL->OPENSSL_gmtime((timer), (result)) 
#define OPENSSL_gmtime_adj(tm, offset_day, offset_sec) IAmiSSL->OPENSSL_gmtime_adj((tm), (offset_day), (offset_sec)) 
#define EVP_PKEY_meth_get0_info(ppkey_id, pflags, meth) IAmiSSL->EVP_PKEY_meth_get0_info((ppkey_id), (pflags), (meth)) 
#define EVP_PKEY_meth_copy(dst, src) IAmiSSL->EVP_PKEY_meth_copy((dst), (src)) 
#define RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, mgf1Hash, sLen) IAmiSSL->RSA_padding_add_PKCS1_PSS_mgf1((rsa), (EM), (mHash), (Hash), (mgf1Hash), (sLen)) 
#define RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, mgf1Hash, EM, sLen) IAmiSSL->RSA_verify_PKCS1_PSS_mgf1((rsa), (mHash), (Hash), (mgf1Hash), (EM), (sLen)) 
#define X509_ALGOR_set_md(alg, md) IAmiSSL->X509_ALGOR_set_md((alg), (md)) 
#define CMAC_CTX_copy(out, in) IAmiSSL->CMAC_CTX_copy((out), (in)) 
#define CMAC_CTX_free(ctx) IAmiSSL->CMAC_CTX_free((ctx)) 
#define CMAC_CTX_get0_cipher_ctx(ctx) IAmiSSL->CMAC_CTX_get0_cipher_ctx((ctx)) 
#define CMAC_CTX_cleanup(ctx) IAmiSSL->CMAC_CTX_cleanup((ctx)) 
#define CMAC_Init(ctx, key, keylen, cipher, impl) IAmiSSL->CMAC_Init((ctx), (key), (keylen), (cipher), (impl)) 
#define CMAC_Update(ctx, data, dlen) IAmiSSL->CMAC_Update((ctx), (data), (dlen)) 
#define CMAC_resume(ctx) IAmiSSL->CMAC_resume((ctx)) 
#define CMAC_CTX_new() IAmiSSL->CMAC_CTX_new() 
#define CMAC_Final(ctx, out, poutlen) IAmiSSL->CMAC_Final((ctx), (out), (poutlen)) 
#define CRYPTO_ctr128_encrypt_ctr32(in, out, len, key, ivec, ecount_buf, num, ctr) IAmiSSL->CRYPTO_ctr128_encrypt_ctr32((in), (out), (len), (key), (ivec), (ecount_buf), (num), (ctr)) 
#define CRYPTO_gcm128_release(ctx) IAmiSSL->CRYPTO_gcm128_release((ctx)) 
#define CRYPTO_ccm128_decrypt_ccm64(ctx, inp, out, len, stream) IAmiSSL->CRYPTO_ccm128_decrypt_ccm64((ctx), (inp), (out), (len), (stream)) 
#define CRYPTO_ccm128_encrypt(ctx, inp, out, len) IAmiSSL->CRYPTO_ccm128_encrypt((ctx), (inp), (out), (len)) 
#define CRYPTO_gcm128_encrypt(ctx, in, out, len) IAmiSSL->CRYPTO_gcm128_encrypt((ctx), (in), (out), (len)) 
#define CRYPTO_xts128_encrypt(ctx, iv, inp, out, len, enc) IAmiSSL->CRYPTO_xts128_encrypt((ctx), (iv), (inp), (out), (len), (enc)) 
#define CRYPTO_nistcts128_decrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_nistcts128_decrypt_block((in), (out), (len), (key), (ivec), (block)) 
#define CRYPTO_gcm128_setiv(ctx, iv, len) IAmiSSL->CRYPTO_gcm128_setiv((ctx), (iv), (len)) 
#define CRYPTO_nistcts128_encrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_nistcts128_encrypt((in), (out), (len), (key), (ivec), (cbc)) 
#define CRYPTO_gcm128_tag(ctx, tag, len) IAmiSSL->CRYPTO_gcm128_tag((ctx), (tag), (len)) 
#define CRYPTO_ccm128_encrypt_ccm64(ctx, inp, out, len, stream) IAmiSSL->CRYPTO_ccm128_encrypt_ccm64((ctx), (inp), (out), (len), (stream)) 
#define CRYPTO_ccm128_setiv(ctx, nonce, nlen, mlen) IAmiSSL->CRYPTO_ccm128_setiv((ctx), (nonce), (nlen), (mlen)) 
#define CRYPTO_nistcts128_encrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_nistcts128_encrypt_block((in), (out), (len), (key), (ivec), (block)) 
#define CRYPTO_gcm128_aad(ctx, aad, len) IAmiSSL->CRYPTO_gcm128_aad((ctx), (aad), (len)) 
#define CRYPTO_ccm128_init(ctx, M, L, key, block) IAmiSSL->CRYPTO_ccm128_init((ctx), (M), (L), (key), (block)) 
#define CRYPTO_nistcts128_decrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_nistcts128_decrypt((in), (out), (len), (key), (ivec), (cbc)) 
#define CRYPTO_gcm128_new(key, block) IAmiSSL->CRYPTO_gcm128_new((key), (block)) 
#define CRYPTO_ccm128_tag(ctx, tag, len) IAmiSSL->CRYPTO_ccm128_tag((ctx), (tag), (len)) 
#define CRYPTO_ccm128_decrypt(ctx, inp, out, len) IAmiSSL->CRYPTO_ccm128_decrypt((ctx), (inp), (out), (len)) 
#define CRYPTO_ccm128_aad(ctx, aad, alen) IAmiSSL->CRYPTO_ccm128_aad((ctx), (aad), (alen)) 
#define CRYPTO_gcm128_init(ctx, key, block) IAmiSSL->CRYPTO_gcm128_init((ctx), (key), (block)) 
#define CRYPTO_gcm128_decrypt(ctx, in, out, len) IAmiSSL->CRYPTO_gcm128_decrypt((ctx), (in), (out), (len)) 
#define CRYPTO_gcm128_decrypt_ctr32(ctx, in, out, len, stream) IAmiSSL->CRYPTO_gcm128_decrypt_ctr32((ctx), (in), (out), (len), (stream)) 
#define CRYPTO_gcm128_encrypt_ctr32(ctx, in, out, len, stream) IAmiSSL->CRYPTO_gcm128_encrypt_ctr32((ctx), (in), (out), (len), (stream)) 
#define CRYPTO_gcm128_finish(ctx, tag, len) IAmiSSL->CRYPTO_gcm128_finish((ctx), (tag), (len)) 
#define PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen) IAmiSSL->PKCS5_pbkdf2_set((iter), (salt), (saltlen), (prf_nid), (keylen)) 
#define RSA_PSS_PARAMS_new() IAmiSSL->RSA_PSS_PARAMS_new() 
#define d2i_RSA_PSS_PARAMS(a, pp, length) IAmiSSL->d2i_RSA_PSS_PARAMS((a), (pp), (length)) 
#define RSA_PSS_PARAMS_free(a) IAmiSSL->RSA_PSS_PARAMS_free((a)) 
#define i2d_RSA_PSS_PARAMS(a, out) IAmiSSL->i2d_RSA_PSS_PARAMS((a), (out)) 
#define OPENSSL_stderr() IAmiSSL->OPENSSL_stderr() 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define OPENSSL_showfatal(...) IAmiSSL->OPENSSL_showfatal(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define OPENSSL_showfatal(vargs...) IAmiSSL->OPENSSL_showfatal(## vargs) 
#endif
#define POLICY_MAPPING_it() IAmiSSL->POLICY_MAPPING_it() 
#define NAME_CONSTRAINTS_it() IAmiSSL->NAME_CONSTRAINTS_it() 
#define ASN1_OCTET_STRING_NDEF_it() IAmiSSL->ASN1_OCTET_STRING_NDEF_it() 
#define X509_CERT_PAIR_it() IAmiSSL->X509_CERT_PAIR_it() 
#define POLICY_CONSTRAINTS_it() IAmiSSL->POLICY_CONSTRAINTS_it() 
#define POLICY_MAPPINGS_it() IAmiSSL->POLICY_MAPPINGS_it() 
#define GENERAL_SUBTREE_it() IAmiSSL->GENERAL_SUBTREE_it() 
#define X509_EXTENSIONS_it() IAmiSSL->X509_EXTENSIONS_it() 
#define X509_ALGORS_it() IAmiSSL->X509_ALGORS_it() 
#define CMS_ContentInfo_it() IAmiSSL->CMS_ContentInfo_it() 
#define CMS_ReceiptRequest_it() IAmiSSL->CMS_ReceiptRequest_it() 
#define ASN1_SEQUENCE_ANY_it() IAmiSSL->ASN1_SEQUENCE_ANY_it() 
#define ASN1_SET_ANY_it() IAmiSSL->ASN1_SET_ANY_it() 
#define NETSCAPE_X509_it() IAmiSSL->NETSCAPE_X509_it() 
#define ISSUING_DIST_POINT_it() IAmiSSL->ISSUING_DIST_POINT_it() 
#define RSA_PSS_PARAMS_it() IAmiSSL->RSA_PSS_PARAMS_it() 
#define _shadow_DES_rw_mode() IAmiSSL->_shadow_DES_rw_mode() 
#define _shadow_DES_check_key() IAmiSSL->_shadow_DES_check_key() 
#define ENGINE_load_gost() IAmiSSL->ENGINE_load_gost() 

#endif /* INLINE4_AMISSL_H */
