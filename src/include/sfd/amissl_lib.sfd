==id $Id$
==base _AmiSSLBase
==basetype struct Library *
==libname amissl.library
==bias 30
==public
==include <amissl/amissl.h>
==include <dos/dos.h>
==include <utility/tagitem.h>
==include <stdlib.h>
long InitAmiSSLA(struct TagItem * tagList) (a0)
==varargs
long InitAmiSSL(Tag tagList, ...) (a0)
long CleanupAmiSSLA(struct TagItem * tagList) (a0)
==varargs
long CleanupAmiSSL(Tag tagList, ...) (a0)
void * AmiSSLMalloc(long num) (a0)
void * AmiSSLRealloc(void * block, long num) (a0,a1)
void AmiSSLFree(void * block) (a0)
long EVP_BF_IsReal() ()
long EVP_CAST_IsReal() ()
long EVP_des_IsReal() ()
long EVP_idea_IsReal() ()
long EVP_MD2_IsReal() ()
long EVP_MD5_IsReal() ()
long EVP_MDC2_IsReal() ()
long EVP_RC2_IsReal() ()
long EVP_RC4_IsReal() ()
long EVP_RC5_IsReal() ()
long EVP_RIPEMD160_IsReal() ()
long EVP_SHA_IsReal() ()
ASN1_TYPE * ASN1_TYPE_new() ()
void ASN1_TYPE_free(ASN1_TYPE * a) (a0)
int i2d_ASN1_TYPE(ASN1_TYPE * a, unsigned char ** pp) (a0,a1)
ASN1_TYPE * d2i_ASN1_TYPE(ASN1_TYPE ** a, unsigned char ** pp, long length) (a0,a1,a2)
int ASN1_TYPE_get(ASN1_TYPE * a) (a0)
void ASN1_TYPE_set(ASN1_TYPE * a, int type, void * value) (a0,a1,a2)
ASN1_OBJECT * ASN1_OBJECT_new() ()
void ASN1_OBJECT_free(ASN1_OBJECT * a) (a0)
int i2d_ASN1_OBJECT(ASN1_OBJECT * a, unsigned char ** pp) (a0,a1)
ASN1_OBJECT * d2i_ASN1_OBJECT(ASN1_OBJECT ** a, unsigned char ** pp, long length) (a0,a1,a2)
ASN1_STRING * ASN1_STRING_new() ()
void ASN1_STRING_free(ASN1_STRING * a) (a0)
ASN1_STRING * ASN1_STRING_dup(ASN1_STRING * a) (a0)
ASN1_STRING * ASN1_STRING_type_new(int type) (a0)
int ASN1_STRING_cmp(ASN1_STRING * a, ASN1_STRING * b) (a0,a1)
int ASN1_STRING_set(ASN1_STRING * str, const void * data, int len) (a0,a1,a2)
int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING * a, unsigned char ** pp) (a0,a1)
ASN1_BIT_STRING * d2i_ASN1_BIT_STRING(ASN1_BIT_STRING ** a, unsigned char ** pp, long length) (a0,a1,a2)
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING * a, int n, int value) (a0,a1,a2)
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING * a, int n) (a0,a1)
int i2d_ASN1_BOOLEAN(int a, unsigned char ** pp) (a0,a1)
int d2i_ASN1_BOOLEAN(int * a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** pp) (a0,a1)
ASN1_INTEGER * d2i_ASN1_INTEGER(ASN1_INTEGER ** a, unsigned char ** pp, long length) (a0,a1,a2)
ASN1_INTEGER * d2i_ASN1_UINTEGER(ASN1_INTEGER ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED * a, unsigned char ** pp) (a0,a1)
ASN1_ENUMERATED * d2i_ASN1_ENUMERATED(ASN1_ENUMERATED ** a, unsigned char ** pp, long length) (a0,a1,a2)
int ASN1_UTCTIME_check(ASN1_UTCTIME * a) (a0)
ASN1_UTCTIME * ASN1_UTCTIME_set(ASN1_UTCTIME * s, time_t t) (a0,a1)
int ASN1_UTCTIME_set_string(ASN1_UTCTIME * s, char * str) (a0,a1)
int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME * a) (a0)
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME * s, time_t t) (a0,a1)
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME * s, char * str) (a0,a1)
int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING * a, unsigned char ** pp) (a0,a1)
ASN1_OCTET_STRING * d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING * a, unsigned char ** pp) (a0,a1)
ASN1_VISIBLESTRING * d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING ** a, unsigned char ** pp,
	long length) (a0,a1,a2)
int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING * a, unsigned char ** pp) (a0,a1)
ASN1_UTF8STRING * d2i_ASN1_UTF8STRING(ASN1_UTF8STRING ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_ASN1_BMPSTRING(ASN1_BMPSTRING * a, unsigned char ** pp) (a0,a1)
ASN1_BMPSTRING * d2i_ASN1_BMPSTRING(ASN1_BMPSTRING ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_ASN1_PRINTABLE(ASN1_STRING * a, unsigned char ** pp) (a0,a1)
ASN1_STRING * d2i_ASN1_PRINTABLE(ASN1_STRING ** a, unsigned char ** pp, long l) (a0,a1,a2)
ASN1_PRINTABLESTRING * d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING ** a, unsigned char ** pp,
	long l) (a0,a1,a2)
int i2d_DIRECTORYSTRING(ASN1_STRING * a, unsigned char ** pp) (a0,a1)
ASN1_STRING * d2i_DIRECTORYSTRING(ASN1_STRING ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_DISPLAYTEXT(ASN1_STRING * a, unsigned char ** pp) (a0,a1)
ASN1_STRING * d2i_DISPLAYTEXT(ASN1_STRING ** a, unsigned char ** pp, long length) (a0,a1,a2)
ASN1_T61STRING * d2i_ASN1_T61STRING(ASN1_T61STRING ** a, unsigned char ** pp, long l) (a0,a1,a2)
int i2d_ASN1_IA5STRING(ASN1_IA5STRING * a, unsigned char ** pp) (a0,a1)
ASN1_IA5STRING * d2i_ASN1_IA5STRING(ASN1_IA5STRING ** a, unsigned char ** pp, long l) (a0,a1,a2)
int i2d_ASN1_UTCTIME(ASN1_UTCTIME * a, unsigned char ** pp) (a0,a1)
ASN1_UTCTIME * d2i_ASN1_UTCTIME(ASN1_UTCTIME ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME * a, unsigned char ** pp) (a0,a1)
ASN1_GENERALIZEDTIME * d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME ** a, unsigned char ** pp,
	long length) (a0,a1,a2)
int i2d_ASN1_TIME(ASN1_TIME * a, unsigned char ** pp) (a0,a1)
ASN1_TIME * d2i_ASN1_TIME(ASN1_TIME ** a, unsigned char ** pp, long length) (a0,a1,a2)
ASN1_TIME * ASN1_TIME_set(ASN1_TIME * s, time_t t) (a0,a1)
int i2d_ASN1_SET(STACK * a, unsigned char ** pp, int (*func)(), int ex_tag, int ex_class,
	int is_set) (a0,a1,a2,a3,d0,d1)
STACK * d2i_ASN1_SET(STACK ** a, unsigned char ** pp, long length, char * (*func)(),
	void (*free_func)(), int ex_tag, int ex_class) (a0,a1,a2,a3,d0,d1,d2)
int i2a_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * a) (a0,a1)
int a2i_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * bs, char * buf, int size) (a0,a1,a2,a3)
int i2a_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * a) (a0,a1)
int a2i_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * bs, char * buf, int size) (a0,a1,a2,a3)
int i2a_ASN1_OBJECT(BIO * bp, ASN1_OBJECT * a) (a0,a1)
int a2i_ASN1_STRING(BIO * bp, ASN1_STRING * bs, char * buf, int size) (a0,a1,a2,a3)
int i2a_ASN1_STRING(BIO * bp, ASN1_STRING * a, int type) (a0,a1,a2)
int i2t_ASN1_OBJECT(char * buf, int buf_len, ASN1_OBJECT * a) (a0,a1,a2)
int a2d_ASN1_OBJECT(unsigned char * out, int olen, const char * buf, int num) (a0,a1,a2,a3)
ASN1_OBJECT * ASN1_OBJECT_create(int nid, unsigned char * data, int len, char * sn, char * ln) (a0,a1,a2,a3,d0)
int ASN1_INTEGER_set(ASN1_INTEGER * a, long v) (a0,a1)
long ASN1_INTEGER_get(ASN1_INTEGER * a) (a0)
ASN1_INTEGER * BN_to_ASN1_INTEGER(BIGNUM * bn, ASN1_INTEGER * ai) (a0,a1)
BIGNUM * ASN1_INTEGER_to_BN(ASN1_INTEGER * ai, BIGNUM * bn) (a0,a1)
int ASN1_ENUMERATED_set(ASN1_ENUMERATED * a, long v) (a0,a1)
long ASN1_ENUMERATED_get(ASN1_ENUMERATED * a) (a0)
ASN1_ENUMERATED * BN_to_ASN1_ENUMERATED(BIGNUM * bn, ASN1_ENUMERATED * ai) (a0,a1)
BIGNUM * ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED * ai, BIGNUM * bn) (a0,a1)
int ASN1_PRINTABLE_type(unsigned char * s, int max) (a0,a1)
int i2d_ASN1_bytes(ASN1_STRING * a, unsigned char ** pp, int tags, int xclass) (a0,a1,a2,a3)
ASN1_STRING * d2i_ASN1_bytes(ASN1_STRING ** a, unsigned char ** pp, long length, int Ptag,
	int Pclass) (a0,a1,a2,a3,d0)
ASN1_STRING * d2i_ASN1_type_bytes(ASN1_STRING ** a, unsigned char ** pp, long length, int type) (a0,a1,a2,a3)
int asn1_Finish(ASN1_CTX * c) (a0)
int ASN1_get_object(unsigned char ** pp, long * plength, int * ptag, int * pclass, long omax) (a0,a1,a2,a3,d0)
int ASN1_check_infinite_end(unsigned char ** p, long len) (a0,a1)
void ASN1_put_object(unsigned char ** pp, int constructed, int length, int tags, int xclass) (a0,a1,a2,a3,d0)
int ASN1_object_size(int constructed, int length, int tags) (a0,a1,a2)
char * ASN1_dup(int (*i2d)(), char * (*d2i)(), char * x) (a0,a1,a2)
char * ASN1_d2i_bio(char * (*xnew)(), char * (*d2i)(), BIO * bp, unsigned char ** x) (a0,a1,a2,a3)
int ASN1_i2d_bio(int (*i2d)(), BIO * out, unsigned char * x) (a0,a1,a2)
int ASN1_UTCTIME_print(BIO * fp, ASN1_UTCTIME * a) (a0,a1)
int ASN1_GENERALIZEDTIME_print(BIO * fp, ASN1_GENERALIZEDTIME * a) (a0,a1)
int ASN1_TIME_print(BIO * fp, ASN1_TIME * a) (a0,a1)
int ASN1_STRING_print(BIO * bp, ASN1_STRING * v) (a0,a1)
int ASN1_parse(BIO * bp, unsigned char * pp, long len, int indent) (a0,a1,a2,a3)
int i2d_ASN1_HEADER(ASN1_HEADER * a, unsigned char ** pp) (a0,a1)
ASN1_HEADER * d2i_ASN1_HEADER(ASN1_HEADER ** a, unsigned char ** pp, long length) (a0,a1,a2)
ASN1_HEADER * ASN1_HEADER_new() ()
void ASN1_HEADER_free(ASN1_HEADER * a) (a0)
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING * s) (a0)
void ERR_load_ASN1_strings() ()
ASN1_METHOD * X509_asn1_meth() ()
ASN1_METHOD * RSAPrivateKey_asn1_meth() ()
ASN1_METHOD * ASN1_IA5STRING_asn1_meth() ()
ASN1_METHOD * ASN1_BIT_STRING_asn1_meth() ()
int ASN1_TYPE_set_octetstring(ASN1_TYPE * a, unsigned char * data, int len) (a0,a1,a2)
int ASN1_TYPE_get_octetstring(ASN1_TYPE * a, unsigned char * data, int max_len) (a0,a1,a2)
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE * a, long num, unsigned char * data, int len) (a0,a1,a2,a3)
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE * a, long * num, unsigned char * data, int max_len) (a0,a1,a2,a3)
STACK * ASN1_seq_unpack(unsigned char * buf, int len, char * (*d2i)(), void (*free_func)()) (a0,a1,a2,a3)
unsigned char * ASN1_seq_pack(STACK * safes, int (*i2d)(), unsigned char ** buf, int * len) (a0,a1,a2,a3)
void * ASN1_unpack_string(ASN1_STRING * oct, char * (*d2i)()) (a0,a1)
ASN1_STRING * ASN1_pack_string(void * obj, int (*i2d)(), ASN1_OCTET_STRING ** oct) (a0,a1,a2)
int asn1_GetSequence(ASN1_CTX * c, long * length) (a0,a1)
void asn1_add_error(unsigned char * address, int offset) (a0,a1)
int BIO_set_ex_data(BIO * bio, int idx, char * data) (a0,a1,a2)
char * BIO_get_ex_data(BIO * bio, int idx) (a0,a1)
int BIO_get_ex_new_index(long argl, char * argp, int (*new_func)(), int (*dup_func)(),
	void (*free_func)()) (a0,a1,a2,a3,d0)
BIO_METHOD * BIO_s_file() ()
BIO * BIO_new_file(const char * filename, const char * mode) (a0,a1)
BIO * BIO_new_fp_amiga(BPTR stream, int close_flag) (a0,a1)
BIO * BIO_new(BIO_METHOD * type) (a0)
int BIO_set(BIO * a, BIO_METHOD * type) (a0,a1)
int BIO_free(BIO * a) (a0)
int BIO_read(BIO * b, void * data, int len) (a0,a1,a2)
int BIO_gets(BIO * bp, char * buf, int size) (a0,a1,a2)
int BIO_write(BIO * b, const char * data, int len) (a0,a1,a2)
int BIO_puts(BIO * bp, const char * buf) (a0,a1)
long BIO_ctrl(BIO * bp, int cmd, long larg, void * parg) (a0,a1,a2,a3)
char * BIO_ptr_ctrl(BIO * bp, int cmd, long larg) (a0,a1,a2)
long BIO_int_ctrl(BIO * bp, int cmd, long larg, int iarg) (a0,a1,a2,a3)
BIO * BIO_push(BIO * b, BIO * append) (a0,a1)
BIO * BIO_pop(BIO * b) (a0)
void BIO_free_all(BIO * a) (a0)
BIO * BIO_find_type(BIO * b, int bio_type) (a0,a1)
BIO * BIO_get_retry_BIO(BIO * bio, int * reason) (a0,a1)
int BIO_get_retry_reason(BIO * bio) (a0)
BIO * BIO_dup_chain(BIO * in) (a0)
long BIO_debug_callback(BIO * bio, int cmd, const char * argp, int argi, long argl, long ret) (a0,a1,a2,a3,d0,d1)
BIO_METHOD * BIO_s_mem() ()
BIO_METHOD * BIO_s_socket() ()
BIO_METHOD * BIO_s_connect() ()
BIO_METHOD * BIO_s_accept() ()
BIO_METHOD * BIO_s_fd() ()
BIO_METHOD * BIO_s_log() ()
BIO_METHOD * BIO_s_null() ()
BIO_METHOD * BIO_f_null() ()
BIO_METHOD * BIO_f_buffer() ()
BIO_METHOD * BIO_f_nbio_test() ()
int BIO_sock_should_retry(int i) (a0)
int BIO_sock_non_fatal_error(int error) (a0)
int BIO_fd_should_retry(int i) (a0)
int BIO_fd_non_fatal_error(int error) (a0)
int BIO_dump(BIO * b, const char * bytes, int len) (a0,a1,a2)
struct hostent * BIO_gethostbyname(const char * name) (a0)
int BIO_sock_error(int sock) (a0)
int BIO_socket_ioctl(int fd, long type, unsigned long * arg) (a0,a1,a2)
int BIO_socket_nbio(int fd, int mode) (a0,a1)
int BIO_get_port(const char * str, unsigned short * port_ptr) (a0,a1)
int BIO_get_host_ip(const char * str, unsigned char * ip) (a0,a1)
int BIO_get_accept_socket(char * host_port, int mode) (a0,a1)
int BIO_accept(int sock, char ** ip_port) (a0,a1)
int BIO_sock_init() ()
void BIO_sock_cleanup() ()
int BIO_set_tcp_ndelay(int sock, int turn_on) (a0,a1)
void ERR_load_BIO_strings() ()
BIO * BIO_new_socket(int sock, int close_flag) (a0,a1)
BIO * BIO_new_fd(int fd, int close_flag) (a0,a1)
BIO * BIO_new_connect(char * host_port) (a0)
BIO * BIO_new_accept(char * host_port) (a0)
void BIO_copy_next_retry(BIO * b) (a0)
long BIO_ghbn_ctrl(int cmd, int iarg, char * parg) (a0,a1,a2)
int BIO_printfA(BIO * bio, void * args) (a0,a1)
==varargs
int BIO_printf(BIO * bio, ULONG tag1, ...) (a0,a1)
BIGNUM * BN_value_one() ()
char * BN_options() ()
BN_CTX * BN_CTX_new() ()
void BN_CTX_init(BN_CTX * c) (a0)
void BN_CTX_free(BN_CTX * c) (a0)
int BN_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,a1,a2,a3)
int BN_num_bits(const BIGNUM * a) (a0)
int BN_num_bits_word(BN_ULONG a) (a0)
BIGNUM * BN_new() ()
void BN_init(BIGNUM * a) (a0)
void BN_clear_free(BIGNUM * a) (a0)
BIGNUM * BN_copy(BIGNUM * a, const BIGNUM * b) (a0,a1)
BIGNUM * BN_bin2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,a1,a2)
int BN_bn2bin(const BIGNUM * a, unsigned char * to) (a0,a1)
BIGNUM * BN_mpi2bn(unsigned char * s, int len, BIGNUM * ret) (a0,a1,a2)
int BN_bn2mpi(const BIGNUM * a, unsigned char * to) (a0,a1)
int BN_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_usub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_uadd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_add(BIGNUM * r, BIGNUM * a, BIGNUM * b) (a0,a1,a2)
int BN_mod(BIGNUM * rem, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_div(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, const BIGNUM * d,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mul(BIGNUM * r, BIGNUM * a, BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_sqr(BIGNUM * r, BIGNUM * a, BN_CTX * ctx) (a0,a1,a2)
BN_ULONG BN_mod_word(BIGNUM * a, BN_ULONG w) (a0,a1)
BN_ULONG BN_div_word(BIGNUM * a, BN_ULONG w) (a0,a1)
int BN_mul_word(BIGNUM * a, BN_ULONG w) (a0,a1)
int BN_add_word(BIGNUM * a, BN_ULONG w) (a0,a1)
int BN_sub_word(BIGNUM * a, BN_ULONG w) (a0,a1)
int BN_set_word(BIGNUM * a, BN_ULONG w) (a0,a1)
BN_ULONG BN_get_word(BIGNUM * a) (a0)
int BN_cmp(const BIGNUM * a, const BIGNUM * b) (a0,a1)
void BN_free(BIGNUM * a) (a0)
int BN_is_bit_set(const BIGNUM * a, int n) (a0,a1)
int BN_lshift(BIGNUM * r, const BIGNUM * a, int n) (a0,a1,a2)
int BN_lshift1(BIGNUM * r, BIGNUM * a) (a0,a1)
int BN_exp(BIGNUM * r, BIGNUM * a, BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_exp(BIGNUM * r, BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_exp_mont(BIGNUM * r, BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx,
	BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1)
int BN_mod_exp2_mont(BIGNUM * r, BIGNUM * a1, BIGNUM * p1, BIGNUM * a2, BIGNUM * p2,
	BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1,d2,d3)
int BN_mod_exp_simple(BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mask_bits(BIGNUM * a, int n) (a0,a1)
int BN_mod_mul(BIGNUM * ret, BIGNUM * a, BIGNUM * b, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_print(BIO * fp, const BIGNUM * a) (a0,a1)
int BN_reciprocal(BIGNUM * r, BIGNUM * m, int len, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_rshift(BIGNUM * r, BIGNUM * a, int n) (a0,a1,a2)
int BN_rshift1(BIGNUM * r, BIGNUM * a) (a0,a1)
void BN_clear(BIGNUM * a) (a0)
BIGNUM * bn_expand2(BIGNUM * b, int bits) (a0,a1)
BIGNUM * BN_dup(const BIGNUM * a) (a0)
int BN_ucmp(const BIGNUM * a, const BIGNUM * b) (a0,a1)
int BN_set_bit(BIGNUM * a, int n) (a0,a1)
int BN_clear_bit(BIGNUM * a, int n) (a0,a1)
char * BN_bn2hex(const BIGNUM * a) (a0)
char * BN_bn2dec(const BIGNUM * a) (a0)
int BN_hex2bn(BIGNUM ** a, const char * str) (a0,a1)
int BN_dec2bn(BIGNUM ** a, const char * str) (a0,a1)
int BN_gcd(BIGNUM * r, BIGNUM * in_a, BIGNUM * in_b, BN_CTX * ctx) (a0,a1,a2,a3)
BIGNUM * BN_mod_inverse(BIGNUM * ret, BIGNUM * a, const BIGNUM * n, BN_CTX * ctx) (a0,a1,a2,a3)
BIGNUM * BN_generate_prime(BIGNUM * ret, int bits, int strong, BIGNUM * add, BIGNUM * rem,
	void (*callback)(int, int, void *), void * cb_arg) (a0,a1,a2,a3,d0,d1,d2)
int BN_is_prime(BIGNUM * p, int nchecks, void (*callback)(int, int, void *),
	BN_CTX * ctx, void * cb_arg) (a0,a1,a2,a3,d0)
void ERR_load_BN_strings() ()
BN_ULONG bn_mul_add_words(BN_ULONG * rp, BN_ULONG * ap, int num, BN_ULONG w) (a0,a1,a2,a3)
BN_ULONG bn_mul_words(BN_ULONG * rp, BN_ULONG * ap, int num, BN_ULONG w) (a0,a1,a2,a3)
void bn_sqr_words(BN_ULONG * rp, BN_ULONG * ap, int num) (a0,a1,a2)
BN_ULONG bn_div_words(BN_ULONG h, BN_ULONG l, BN_ULONG d) (a0,a1,a2)
BN_ULONG bn_add_words(BN_ULONG * rp, BN_ULONG * ap, BN_ULONG * bp, int num) (a0,a1,a2,a3)
BN_ULONG bn_sub_words(BN_ULONG * rp, BN_ULONG * ap, BN_ULONG * bp, int num) (a0,a1,a2,a3)
BN_MONT_CTX * BN_MONT_CTX_new() ()
void BN_MONT_CTX_init(BN_MONT_CTX * ctx) (a0)
int BN_mod_mul_montgomery(BIGNUM * r, BIGNUM * a, BIGNUM * b, BN_MONT_CTX * mont, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_from_montgomery(BIGNUM * r, BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx) (a0,a1,a2,a3)
void BN_MONT_CTX_free(BN_MONT_CTX * mont) (a0)
int BN_MONT_CTX_set(BN_MONT_CTX * mont, const BIGNUM * modulus, BN_CTX * ctx) (a0,a1,a2)
BN_MONT_CTX * BN_MONT_CTX_copy(BN_MONT_CTX * to, BN_MONT_CTX * from) (a0,a1)
BN_BLINDING * BN_BLINDING_new(BIGNUM * A, BIGNUM * Ai, BIGNUM * mod) (a0,a1,a2)
void BN_BLINDING_free(BN_BLINDING * b) (a0)
int BN_BLINDING_update(BN_BLINDING * b, BN_CTX * ctx) (a0,a1)
int BN_BLINDING_convert(BIGNUM * n, BN_BLINDING * r, BN_CTX * ctx) (a0,a1,a2)
int BN_BLINDING_invert(BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx) (a0,a1,a2)
void BN_set_params(int mul, int high, int low, int mont) (a0,a1,a2,a3)
int BN_get_params(int which) (a0)
void BN_RECP_CTX_init(BN_RECP_CTX * recp) (a0)
BN_RECP_CTX * BN_RECP_CTX_new() ()
void BN_RECP_CTX_free(BN_RECP_CTX * recp) (a0)
int BN_RECP_CTX_set(BN_RECP_CTX * recp, const BIGNUM * rdiv, BN_CTX * ctx) (a0,a1,a2)
int BN_mod_mul_reciprocal(BIGNUM * r, BIGNUM * x, BIGNUM * y, BN_RECP_CTX * recp, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_exp_recp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m,
	BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_div_recp(BIGNUM * dv, BIGNUM * rem, BIGNUM * m, BN_RECP_CTX * recp, BN_CTX * ctx) (a0,a1,a2,a3,d0)
BUF_MEM * BUF_MEM_new() ()
void BUF_MEM_free(BUF_MEM * a) (a0)
int BUF_MEM_grow(BUF_MEM * str, int len) (a0,a1)
char * BUF_strdup(const char * str) (a0)
void ERR_load_BUF_strings() ()
COMP_CTX * COMP_CTX_new(COMP_METHOD * meth) (a0)
void COMP_CTX_free(COMP_CTX * ctx) (a0)
int COMP_compress_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in,
	int ilen) (a0,a1,a2,a3,d0)
int COMP_expand_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in,
	int ilen) (a0,a1,a2,a3,d0)
COMP_METHOD * COMP_rle() ()
LHASH * CONF_load(LHASH * conf, const char * file, long * eline) (a0,a1,a2)
STACK * CONF_get_section(LHASH * conf, char * section) (a0,a1)
char * CONF_get_string(LHASH * conf, char * group, char * name) (a0,a1,a2)
long CONF_get_number(LHASH * conf, char * group, char * name) (a0,a1,a2)
void CONF_free(LHASH * conf) (a0)
void ERR_load_CONF_strings() ()
const char * SSLeay_version(int type) (a0)
unsigned long SSLeay() ()
int CRYPTO_get_ex_new_index(int idx, STACK ** sk, long argl, char * argp, int (*new_func)(),
	int (*dup_func)(), void (*free_func)()) (a0,a1,a2,a3,d0,d1,d2)
int CRYPTO_set_ex_data(CRYPTO_EX_DATA * ad, int idx, char * val) (a0,a1,a2)
char * CRYPTO_get_ex_data(CRYPTO_EX_DATA * ad, int idx) (a0,a1)
int CRYPTO_dup_ex_data(STACK * meth, CRYPTO_EX_DATA * from, CRYPTO_EX_DATA * to) (a0,a1,a2)
void CRYPTO_free_ex_data(STACK * meth, char * obj, CRYPTO_EX_DATA * ad) (a0,a1,a2)
void CRYPTO_new_ex_data(STACK * meth, char * obj, CRYPTO_EX_DATA * ad) (a0,a1,a2)
int CRYPTO_mem_ctrl(int mode) (a0)
int CRYPTO_get_new_lockid(char * name) (a0)
void CRYPTO_lock(int mode, int type, const char * file, int line) (a0,a1,a2,a3)
void CRYPTO_set_locking_callback(void (*func)(int mode, int type, const char *file, int line)) (a0)
void * CRYPTO_get_locking_callback() ()
void CRYPTO_set_add_lock_callback(int (*func)(int *num, int mount, int type, const char *file, int line)) (a0)
int  * CRYPTO_get_add_lock_callback() ()
void CRYPTO_set_id_callback(unsigned long (*func)(void)) (a0)
unsigned long *CRYPTO_get_id_callback() ()
unsigned long CRYPTO_thread_id() ()
const char * CRYPTO_get_lock_name(int type) (a0)
int CRYPTO_add_lock(int * pointer, int amount, int type, const char * file, int line) (a0,a1,a2,a3,d0)
void CRYPTO_set_mem_functions(char * (*m)(), char * (*r)(), void (*free_func)()) (a0,a1,a2)
void CRYPTO_get_mem_functions(char * (*m)(), char * (*r)(), void (*f)()) (a0,a1,a2)
void CRYPTO_set_locked_mem_functions(char * (*m)(), void (*free_func)()) (a0,a1)
void CRYPTO_get_locked_mem_functions(char * (*m)(), void (*f)()) (a0,a1)
void * CRYPTO_malloc_locked(int num) (a0)
void CRYPTO_free_locked(void * a) (a0)
void * CRYPTO_malloc(int num) (a0)
void CRYPTO_free(void * a) (a0)
void * CRYPTO_realloc(void * addr, int num) (a0,a1)
void * CRYPTO_remalloc(void * addr, int num) (a0,a1)
void * CRYPTO_dbg_malloc(int num, const char * file, int line) (a0,a1,a2)
void * CRYPTO_dbg_realloc(void * addr, int num, const char * file, int line) (a0,a1,a2,a3)
void CRYPTO_dbg_free(void * a) (a0)
void * CRYPTO_dbg_remalloc(void * addr, int num, const char * file, int line) (a0,a1,a2,a3)
void CRYPTO_mem_leaks(struct bio_st * bio) (a0)
void CRYPTO_mem_leaks_cb(void (*cb)()) (a0)
void ERR_load_CRYPTO_strings() ()
DH * DH_new() ()
void DH_free(DH * dh) (a0)
int DH_size(DH * dh) (a0)
DH * DH_generate_parameters(int prime_len, int generator, void (*callback)(int, int, void *),
	void * cb_arg) (a0,a1,a2,a3)
int DH_check(DH * dh, int * codes) (a0,a1)
int DH_generate_key(DH * dh) (a0)
int DH_compute_key(unsigned char * key, BIGNUM * pub_key, DH * dh) (a0,a1,a2)
DH * d2i_DHparams(DH ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_DHparams(DH * a, unsigned char ** pp) (a0,a1)
int DHparams_print(BIO * bp, DH * x) (a0,a1)
void ERR_load_DH_strings() ()
DSA_SIG * DSA_SIG_new() ()
void DSA_SIG_free(DSA_SIG * a) (a0)
int i2d_DSA_SIG(DSA_SIG * a, unsigned char ** pp) (a0,a1)
DSA_SIG * d2i_DSA_SIG(DSA_SIG ** v, unsigned char ** pp, long length) (a0,a1,a2)
DSA_SIG * DSA_do_sign(const unsigned char * dgst, int dlen, DSA * dsa) (a0,a1,a2)
int DSA_do_verify(const unsigned char * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa) (a0,a1,a2,a3)
DSA * DSA_new() ()
int DSA_size(DSA * a) (a0)
int DSA_sign_setup(DSA * dsa, BN_CTX * ctx_in, BIGNUM ** kinvp, BIGNUM ** rp) (a0,a1,a2,a3)
int DSA_sign(int type, const unsigned char * dgst, int dlen, unsigned char * sig,
	unsigned int * siglen, DSA * dsa) (a0,a1,a2,a3,d0,d1)
int DSA_verify(int type, const unsigned char * dgst, int dgst_len,
	unsigned char * sigbuf, int siglen, DSA * dsa) (a0,a1,a2,a3,d0,d1)
void DSA_free(DSA * r) (a0)
void ERR_load_DSA_strings() ()
DSA * d2i_DSAPublicKey(DSA ** a, unsigned char ** pp, long length) (a0,a1,a2)
DSA * d2i_DSAPrivateKey(DSA ** a, unsigned char ** pp, long length) (a0,a1,a2)
DSA * d2i_DSAparams(DSA ** a, unsigned char ** pp, long length) (a0,a1,a2)
DSA * DSA_generate_parameters(int bits, unsigned char * seed, int seed_len, int * counter_ret,
	unsigned long * h_ret, void (*callback)(), char * cb_arg) (a0,a1,a2,a3,d0,d1,d2)
int DSA_generate_key(DSA * a) (a0)
int i2d_DSAPublicKey(DSA * a, unsigned char ** pp) (a0,a1)
int i2d_DSAPrivateKey(DSA * a, unsigned char ** pp) (a0,a1)
int i2d_DSAparams(DSA * a, unsigned char ** pp) (a0,a1)
int DSAparams_print(BIO * bp, DSA * x) (a0,a1)
int DSA_print(BIO * bp, DSA * x, int off) (a0,a1,a2)
int DSA_is_prime(BIGNUM * q, void (*callback)(), char * cb_arg) (a0,a1,a2)
void ERR_put_error(int lib, int func, int reason, const char * file, int line) (a0,a1,a2,a3,d0)
void ERR_set_error_data(char * data, int flags) (a0,a1)
unsigned long ERR_get_error() ()
unsigned long ERR_get_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_get_error_line_data(const char ** file, int * line, const char ** data,
	int * flags) (a0,a1,a2,a3)
unsigned long ERR_peek_error() ()
unsigned long ERR_peek_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_peek_error_line_data(const char ** file, int * line, const char ** data,
	int * flags) (a0,a1,a2,a3)
void ERR_clear_error() ()
char * ERR_error_string(unsigned long e, char * buf) (a0,a1)
const char * ERR_lib_error_string(unsigned long e) (a0)
const char * ERR_func_error_string(unsigned long e) (a0)
const char * ERR_reason_error_string(unsigned long e) (a0)
void ERR_print_errors(BIO * bp) (a0)
void ERR_add_error_dataA(int num, void * data) (a0,a1)
==varargs
void ERR_add_error_data(int num, ULONG tag1, ...) (a0,a1)
void ERR_load_strings(int lib, ERR_STRING_DATA * str) (a0,a1)
void ERR_load_ERR_strings() ()
void ERR_load_crypto_strings() ()
void ERR_free_strings() ()
void ERR_remove_state(unsigned long pid) (a0)
ERR_STATE * ERR_get_state() ()
LHASH * ERR_get_string_table() ()
LHASH * ERR_get_err_state_table() ()
int ERR_get_next_error_library() ()
int EVP_MD_CTX_copy(EVP_MD_CTX * out, EVP_MD_CTX * in) (a0,a1)
void EVP_DigestInit(EVP_MD_CTX * ctx, const EVP_MD * type) (a0,a1)
void EVP_DigestUpdate(EVP_MD_CTX * ctx, const unsigned char * d, unsigned int cnt) (a0,a1,a2)
void EVP_DigestFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s) (a0,a1,a2)
int EVP_read_pw_string(char * buf, int length, const char * prompt, int verify) (a0,a1,a2,a3)
void EVP_set_pw_prompt(char * prompt) (a0)
char * EVP_get_pw_prompt() ()
int EVP_BytesToKey(const EVP_CIPHER * type, EVP_MD * md, unsigned char * salt,
	unsigned char * data, int datal, int count, unsigned char * key,
	unsigned char * iv) (a0,a1,a2,a3,d0,d1,d2,d3)
void EVP_EncryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char * key,
	unsigned char * iv) (a0,a1,a2,a3)
void EVP_EncryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
void EVP_EncryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
void EVP_DecryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char * key,
	unsigned char * iv) (a0,a1,a2,a3)
void EVP_DecryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_DecryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
void EVP_CipherInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char * key,
	unsigned char * iv, int enc) (a0,a1,a2,a3,d0)
void EVP_CipherUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_CipherFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_SignFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s, EVP_PKEY * pkey) (a0,a1,a2,a3)
int EVP_VerifyFinal(EVP_MD_CTX * ctx, unsigned char * sigbuf, unsigned int siglen,
	EVP_PKEY * pkey) (a0,a1,a2,a3)
int EVP_OpenInit(EVP_CIPHER_CTX * ctx, EVP_CIPHER * type, unsigned char * ek, int ekl,
	unsigned char * iv, EVP_PKEY * priv) (a0,a1,a2,a3,d0,d1)
int EVP_OpenFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_SealInit(EVP_CIPHER_CTX * ctx, EVP_CIPHER * type, unsigned char ** ek, int * ekl,
	unsigned char * iv, EVP_PKEY ** pubk, int npubk) (a0,a1,a2,a3,d0,d1,d2)
void EVP_SealFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
void EVP_EncodeInit(EVP_ENCODE_CTX * ctx) (a0)
void EVP_EncodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
void EVP_EncodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_EncodeBlock(unsigned char * t, unsigned char * f, int n) (a0,a1,a2)
void EVP_DecodeInit(EVP_ENCODE_CTX * ctx) (a0)
int EVP_DecodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_DecodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_DecodeBlock(unsigned char * t, unsigned char * f, int n) (a0,a1,a2)
void ERR_load_EVP_strings() ()
void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX * a) (a0)
void EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX * a) (a0)
BIO_METHOD * BIO_f_md() ()
BIO_METHOD * BIO_f_base64() ()
BIO_METHOD * BIO_f_cipher() ()
BIO_METHOD * BIO_f_reliable() ()
void BIO_set_cipher(BIO * b, const EVP_CIPHER * c, unsigned char * k, unsigned char * i,
	int enc) (a0,a1,a2,a3,d0)
EVP_MD * EVP_md_null() ()
EVP_MD * EVP_md2() ()
EVP_MD * EVP_md5() ()
EVP_MD * EVP_sha() ()
EVP_MD * EVP_sha1() ()
EVP_MD * EVP_dss() ()
EVP_MD * EVP_dss1() ()
EVP_MD * EVP_mdc2() ()
EVP_MD * EVP_ripemd160() ()
EVP_CIPHER * EVP_enc_null() ()
EVP_CIPHER * EVP_des_ecb() ()
EVP_CIPHER * EVP_des_ede() ()
EVP_CIPHER * EVP_des_ede3() ()
EVP_CIPHER * EVP_des_cfb() ()
EVP_CIPHER * EVP_des_ede_cfb() ()
EVP_CIPHER * EVP_des_ede3_cfb() ()
EVP_CIPHER * EVP_des_ofb() ()
EVP_CIPHER * EVP_des_ede_ofb() ()
EVP_CIPHER * EVP_des_ede3_ofb() ()
EVP_CIPHER * EVP_des_cbc() ()
EVP_CIPHER * EVP_des_ede_cbc() ()
EVP_CIPHER * EVP_des_ede3_cbc() ()
EVP_CIPHER * EVP_desx_cbc() ()
EVP_CIPHER * EVP_rc4() ()
EVP_CIPHER * EVP_rc4_40() ()
EVP_CIPHER * EVP_idea_ecb() ()
EVP_CIPHER * EVP_idea_cfb() ()
EVP_CIPHER * EVP_idea_ofb() ()
EVP_CIPHER * EVP_idea_cbc() ()
EVP_CIPHER * EVP_rc2_ecb() ()
EVP_CIPHER * EVP_rc2_cbc() ()
EVP_CIPHER * EVP_rc2_40_cbc() ()
EVP_CIPHER * EVP_rc2_64_cbc() ()
EVP_CIPHER * EVP_rc2_cfb() ()
EVP_CIPHER * EVP_rc2_ofb() ()
EVP_CIPHER * EVP_bf_ecb() ()
EVP_CIPHER * EVP_bf_cbc() ()
EVP_CIPHER * EVP_bf_cfb() ()
EVP_CIPHER * EVP_bf_ofb() ()
EVP_CIPHER * EVP_cast5_ecb() ()
EVP_CIPHER * EVP_cast5_cbc() ()
EVP_CIPHER * EVP_cast5_cfb() ()
EVP_CIPHER * EVP_cast5_ofb() ()
EVP_CIPHER * EVP_rc5_32_12_16_cbc() ()
EVP_CIPHER * EVP_rc5_32_12_16_ecb() ()
EVP_CIPHER * EVP_rc5_32_12_16_cfb() ()
EVP_CIPHER * EVP_rc5_32_12_16_ofb() ()
void SSLeay_add_all_algorithms() ()
void SSLeay_add_all_ciphers() ()
void SSLeay_add_all_digests() ()
int EVP_add_cipher(EVP_CIPHER * cipher) (a0)
int EVP_add_digest(EVP_MD * digest) (a0)
const EVP_CIPHER * EVP_get_cipherbyname(const char * name) (a0)
const EVP_MD * EVP_get_digestbyname(const char * name) (a0)
void EVP_cleanup() ()
int EVP_PKEY_decrypt(unsigned char * dec_key, unsigned char * enc_key, int enc_key_len,
	EVP_PKEY * private_key) (a0,a1,a2,a3)
int EVP_PKEY_encrypt(unsigned char * enc_key, unsigned char * key, int key_len,
	EVP_PKEY * pub_key) (a0,a1,a2,a3)
int EVP_PKEY_type(int type) (a0)
int EVP_PKEY_bits(EVP_PKEY * pkey) (a0)
int EVP_PKEY_size(EVP_PKEY * pkey) (a0)
int EVP_PKEY_assign(EVP_PKEY * pkey, int type, char * key) (a0,a1,a2)
EVP_PKEY * EVP_PKEY_new() ()
void EVP_PKEY_free(EVP_PKEY * pkey) (a0)
EVP_PKEY * d2i_PublicKey(int type, EVP_PKEY ** a, unsigned char ** pp, long length) (a0,a1,a2,a3)
int i2d_PublicKey(EVP_PKEY * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * d2i_PrivateKey(int type, EVP_PKEY ** a, unsigned char ** pp, long length) (a0,a1,a2,a3)
int i2d_PrivateKey(EVP_PKEY * a, unsigned char ** pp) (a0,a1)
int EVP_PKEY_copy_parameters(EVP_PKEY * to, EVP_PKEY * from) (a0,a1)
int EVP_PKEY_missing_parameters(EVP_PKEY * pkey) (a0)
int EVP_PKEY_save_parameters(EVP_PKEY * pkey, int mode) (a0,a1)
int EVP_PKEY_cmp_parameters(EVP_PKEY * a, EVP_PKEY * b) (a0,a1)
int EVP_CIPHER_type(const EVP_CIPHER * ctx) (a0)
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
void HMAC_Init(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md) (a0,a1,a2,a3)
void HMAC_Update(HMAC_CTX * ctx, unsigned char * key, int len) (a0,a1,a2)
void HMAC_Final(HMAC_CTX * ctx, unsigned char * md, unsigned int * len) (a0,a1,a2)
void HMAC_cleanup(HMAC_CTX * ctx) (a0)
unsigned char * HMAC(const EVP_MD * evp_md, const void * key, int key_len,
	unsigned char * d, int n, unsigned char * md, unsigned int * md_len) (a0,a1,a2,a3,d0,d1,d2)
LHASH * lh_new(unsigned long (*h)(), int (*c)()) (a0,a1)
void lh_free(LHASH * lh) (a0)
char * lh_insert(LHASH * lh, char * data) (a0,a1)
char * lh_delete(LHASH * lh, char * data) (a0,a1)
char * lh_retrieve(LHASH * lh, char * data) (a0,a1)
void lh_doall(LHASH * lh, void (*func)()) (a0,a1)
void lh_doall_arg(LHASH * lh, void (*func)(), char * arg) (a0,a1,a2)
unsigned long lh_strhash(const char * c) (a0)
void lh_stats_bio(LHASH * lh, BIO * out) (a0,a1)
void lh_node_stats_bio(LHASH * lh, BIO * out) (a0,a1)
void lh_node_usage_stats_bio(LHASH * lh, BIO * out) (a0,a1)
int OBJ_NAME_init() ()
int OBJ_NAME_new_index(unsigned long (*hash_func)(), int (*cmp_func)(), void (*free_func)()) (a0,a1,a2)
const char * OBJ_NAME_get(const char * name, int type) (a0,a1)
int OBJ_NAME_add(const char * name, int type, const char * data) (a0,a1,a2)
int OBJ_NAME_remove(const char * name, int type) (a0,a1)
void OBJ_NAME_cleanup(int type) (a0)
ASN1_OBJECT * OBJ_dup(ASN1_OBJECT * o) (a0)
ASN1_OBJECT * OBJ_nid2obj(int n) (a0)
const char * OBJ_nid2ln(int n) (a0)
const char * OBJ_nid2sn(int n) (a0)
int OBJ_obj2nid(ASN1_OBJECT * o) (a0)
ASN1_OBJECT * OBJ_txt2obj(const char * s, int no_name) (a0,a1)
int OBJ_txt2nid(char * s) (a0)
int OBJ_ln2nid(const char * s) (a0)
int OBJ_sn2nid(const char * s) (a0)
int OBJ_cmp(ASN1_OBJECT * a, ASN1_OBJECT * b) (a0,a1)
char * OBJ_bsearch(char * key, char * base, int num, int size, int (*cmp)()) (a0,a1,a2,a3,d0)
void ERR_load_OBJ_strings() ()
int OBJ_new_nid(int num) (a0)
int OBJ_add_object(ASN1_OBJECT * obj) (a0)
int OBJ_create(char * oid, char * sn, char * ln) (a0,a1,a2)
void OBJ_cleanup() ()
int OBJ_create_objects(BIO * in) (a0)
int PEM_get_EVP_CIPHER_INFO(char * header, EVP_CIPHER_INFO * cipher) (a0,a1)
int PEM_do_header(EVP_CIPHER_INFO * cipher, unsigned char * data, long * len,
	pem_password_cb * (*callback)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0)
int PEM_read_bio(BIO * bp, char ** name, char ** header, unsigned char ** data,
	long * len) (a0,a1,a2,a3,d0)
int PEM_write_bio(BIO * bp, const char * name, char * hdr, unsigned char * data, long len) (a0,a1,a2,a3,d0)
char * PEM_ASN1_read_bio(char * (*d2i)(), const char * name, BIO * bp, char ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1)
int PEM_ASN1_write_bio(int (*i2d)(), const char * name, BIO * bp, char * x,
	const EVP_CIPHER * enc, unsigned char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
STACK * PEM_X509_INFO_read_bio(BIO * bp, STACK * sk,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_X509_INFO_write_bio(BIO * bp, X509_INFO * xi, EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
int PEM_SealInit(PEM_ENCODE_SEAL_CTX * ctx, EVP_CIPHER * type, EVP_MD * md_type,
	unsigned char ** ek, int * ekl, unsigned char * iv,
	EVP_PKEY ** pubk, int npubk) (a0,a1,a2,a3,d0,d1,d2,d3)
void PEM_SealUpdate(PEM_ENCODE_SEAL_CTX * ctx, unsigned char * out, int * outl,
	unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int PEM_SealFinal(PEM_ENCODE_SEAL_CTX * ctx, unsigned char * sig, int * sigl,
	unsigned char * out, int * outl, EVP_PKEY * priv) (a0,a1,a2,a3,d0,d1)
void PEM_SignInit(EVP_MD_CTX * ctx, EVP_MD * type) (a0,a1)
void PEM_SignUpdate(EVP_MD_CTX * ctx, unsigned char * d, unsigned int cnt) (a0,a1,a2)
int PEM_SignFinal(EVP_MD_CTX * ctx, unsigned char * sigret, unsigned int * siglen,
	EVP_PKEY * pkey) (a0,a1,a2,a3)
void ERR_load_PEM_strings() ()
void PEM_proc_type(char * buf, int type) (a0,a1)
void PEM_dek_info(char * buf, const char * type, int len, char * str) (a0,a1,a2,a3)
X509 * PEM_read_bio_X509(BIO * bp, X509 ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
X509_REQ * PEM_read_bio_X509_REQ(BIO * bp, X509_REQ ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
X509_CRL * PEM_read_bio_X509_CRL(BIO * bp, X509_CRL ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
RSA * PEM_read_bio_RSAPrivateKey(BIO * bp, RSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
RSA * PEM_read_bio_RSAPublicKey(BIO * bp, RSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
DSA * PEM_read_bio_DSAPrivateKey(BIO * bp, DSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
EVP_PKEY * PEM_read_bio_PrivateKey(BIO * bp, EVP_PKEY ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
PKCS7 * PEM_read_bio_PKCS7(BIO * bp, PKCS7 ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
DH * PEM_read_bio_DHparams(BIO * bp, DH ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
NETSCAPE_CERT_SEQUENCE * PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
DSA * PEM_read_bio_DSAparams(BIO * bp, DSA ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509(BIO * bp, X509 * x) (a0,a1)
int PEM_write_bio_X509_REQ(BIO * bp, X509_REQ * x) (a0,a1)
int PEM_write_bio_X509_CRL(BIO * bp, X509_CRL * x) (a0,a1)
int PEM_write_bio_RSAPrivateKey(BIO * fp, RSA * x, const EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
int PEM_write_bio_RSAPublicKey(BIO * fp, RSA * x) (a0,a1)
int PEM_write_bio_DSAPrivateKey(BIO * fp, DSA * x, const EVP_CIPHER * enc, unsigned char * kstr,
	int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
int PEM_write_bio_PrivateKey(BIO * fp, EVP_PKEY * x, EVP_CIPHER * enc, unsigned char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
int PEM_write_bio_PKCS7(BIO * bp, PKCS7 * x) (a0,a1)
int PEM_write_bio_DHparams(BIO * bp, DH * x) (a0,a1)
int PEM_write_bio_DSAparams(BIO * bp, DSA * x) (a0,a1)
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE * x) (a0,a1)
PKCS12_SAFEBAG * PKCS12_pack_safebag(char * obj, int (*i2d)(), int nid1, int nid2) (a0,a1,a2,a3)
PKCS12_SAFEBAG * PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO * p8) (a0)
X509_SIG * PKCS8_encrypt(int pbe_nid, const EVP_CIPHER * cipher, const char * pass,
	int passlen, unsigned char * salt, int saltlen, int iter,
	PKCS8_PRIV_KEY_INFO * p8) (a0,a1,a2,a3,d0,d1,d2,d3)
PKCS12_SAFEBAG * PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char * pass, int passlen,
	unsigned char * salt, int saltlen, int iter,
	PKCS8_PRIV_KEY_INFO * p8) (a0,a1,a2,a3,d0,d1,d2)
PKCS7 * PKCS12_pack_p7data(STACK * sk) (a0)
PKCS7 * PKCS12_pack_p7encdata(int pbe_nid, const char * pass, int passlen, unsigned char * salt,
	int saltlen, int iter, STACK * bags) (a0,a1,a2,a3,d0,d1,d2)
int PKCS12_add_localkeyid(PKCS12_SAFEBAG * bag, unsigned char * name, int namelen) (a0,a1,a2)
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen) (a0,a1,a2)
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG * bag, const unsigned char * name, int namelen) (a0,a1,a2)
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO * p8, int usage) (a0,a1)
ASN1_TYPE * PKCS12_get_attr_gen(STACK * attrs, int attr_nid) (a0,a1)
char * PKCS12_get_friendlyname(PKCS12_SAFEBAG * bag) (a0)
unsigned char * PKCS12_pbe_crypt(X509_ALGOR * algor, const char * pass, int passlen,
	unsigned char * in, int inlen, unsigned char ** data, int * datalen,
	int en_de) (a0,a1,a2,a3,d0,d1,d2,d3)
char * PKCS12_decrypt_d2i(X509_ALGOR * algor, char * (*d2i)(), void (*free_func)(),
	const char * pass, int passlen, ASN1_STRING * oct, int seq) (a0,a1,a2,a3,d0,d1,d2)
ASN1_STRING * PKCS12_i2d_encrypt(X509_ALGOR * algor, int (*i2d)(), const char * pass,
	int passlen, char * obj, int seq) (a0,a1,a2,a3,d0,d1)
PKCS12 * PKCS12_init(int mode) (a0)
int PKCS12_key_gen_asc(const char * pass, int passlen, unsigned char * salt, int saltlen,
	int id, int iter, int n, unsigned char * out,
	const EVP_MD * md_type) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
int PKCS12_key_gen_uni(unsigned char * pass, int passlen, unsigned char * salt, int saltlen,
	int id, int iter, int n, unsigned char * out,
	const EVP_MD * md_type) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
int PKCS12_gen_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * mac,
	unsigned int * maclen) (a0,a1,a2,a3,d0)
int PKCS12_verify_mac(PKCS12 * p12, const char * pass, int passlen) (a0,a1,a2)
int PKCS12_set_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * salt,
	int saltlen, int iter, EVP_MD * md_type) (a0,a1,a2,a3,d0,d1,d2)
int PKCS12_setup_mac(PKCS12 * p12, int iter, unsigned char * salt, int saltlen,
	EVP_MD * md_type) (a0,a1,a2,a3,d0)
unsigned char * asc2uni(const char * asc, unsigned char ** uni, int * unilen) (a0,a1,a2)
char * uni2asc(unsigned char * uni, int unilen) (a0,a1)
int i2d_PKCS12_BAGS(PKCS12_BAGS * a, unsigned char ** pp) (a0,a1)
PKCS12_BAGS * PKCS12_BAGS_new() ()
PKCS12_BAGS * d2i_PKCS12_BAGS(PKCS12_BAGS ** a, unsigned char ** pp, long length) (a0,a1,a2)
void PKCS12_BAGS_free(PKCS12_BAGS * a) (a0)
int i2d_PKCS12(PKCS12 * a, unsigned char ** pp) (a0,a1)
PKCS12 * d2i_PKCS12(PKCS12 ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS12 * PKCS12_new() ()
void PKCS12_free(PKCS12 * a) (a0)
int i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA * a, unsigned char ** pp) (a0,a1)
PKCS12_MAC_DATA * PKCS12_MAC_DATA_new() ()
PKCS12_MAC_DATA * d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA ** a, unsigned char ** pp, long length) (a0,a1,a2)
void PKCS12_MAC_DATA_free(PKCS12_MAC_DATA * a) (a0)
int i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG * a, unsigned char ** pp) (a0,a1)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_new() ()
PKCS12_SAFEBAG * d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG ** a, unsigned char ** pp, long length) (a0,a1,a2)
void PKCS12_SAFEBAG_free(PKCS12_SAFEBAG * a) (a0)
void ERR_load_PKCS12_strings() ()
void PKCS12_PBE_add() ()
int PKCS12_parse(PKCS12 * p12, const char * pass, EVP_PKEY ** pkey, X509 ** cert,
	STACK ** ca) (a0,a1,a2,a3,d0)
PKCS12 * PKCS12_create(char * pass, char * name, EVP_PKEY * pkey, X509 * cert, STACK * ca,
	int nid_key, int nid_cert, int iter, int mac_iter, int keytype) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5)
int i2d_PKCS12_bio(BIO * bp, PKCS12 * p12) (a0,a1)
PKCS12 * d2i_PKCS12_bio(BIO * bp, PKCS12 ** p12) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * PKCS7_ISSUER_AND_SERIAL_new() ()
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL * a) (a0)
int i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL * a, unsigned char ** pp) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL ** a, unsigned char ** pp,
	long length) (a0,a1,a2)
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL * data, EVP_MD * type, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3)
PKCS7 * PKCS7_dup(PKCS7 * p7) (a0)
PKCS7 * d2i_PKCS7_bio(BIO * bp, PKCS7 ** p7) (a0,a1)
int i2d_PKCS7_bio(BIO * bp, PKCS7 * p7) (a0,a1)
PKCS7_SIGNER_INFO * PKCS7_SIGNER_INFO_new() ()
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO * a) (a0)
int i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO * a, unsigned char ** pp) (a0,a1)
PKCS7_SIGNER_INFO * d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7_RECIP_INFO * PKCS7_RECIP_INFO_new() ()
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO * a) (a0)
int i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO * a, unsigned char ** pp) (a0,a1)
PKCS7_RECIP_INFO * d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7_SIGNED * PKCS7_SIGNED_new() ()
void PKCS7_SIGNED_free(PKCS7_SIGNED * a) (a0)
int i2d_PKCS7_SIGNED(PKCS7_SIGNED * a, unsigned char ** pp) (a0,a1)
PKCS7_SIGNED * d2i_PKCS7_SIGNED(PKCS7_SIGNED ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7_ENC_CONTENT * PKCS7_ENC_CONTENT_new() ()
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT * a) (a0)
int i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT * a, unsigned char ** pp) (a0,a1)
PKCS7_ENC_CONTENT * d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7_ENVELOPE * PKCS7_ENVELOPE_new() ()
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE * a) (a0)
int i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE * a, unsigned char ** pp) (a0,a1)
PKCS7_ENVELOPE * d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7_SIGN_ENVELOPE * PKCS7_SIGN_ENVELOPE_new() ()
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE * a) (a0)
int i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE * a, unsigned char ** pp) (a0,a1)
PKCS7_SIGN_ENVELOPE * d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE ** a, unsigned char ** pp,
	long length) (a0,a1,a2)
PKCS7_DIGEST * PKCS7_DIGEST_new() ()
void PKCS7_DIGEST_free(PKCS7_DIGEST * a) (a0)
int i2d_PKCS7_DIGEST(PKCS7_DIGEST * a, unsigned char ** pp) (a0,a1)
PKCS7_DIGEST * d2i_PKCS7_DIGEST(PKCS7_DIGEST ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7_ENCRYPT * PKCS7_ENCRYPT_new() ()
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT * a) (a0)
int i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT * a, unsigned char ** pp) (a0,a1)
PKCS7_ENCRYPT * d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKCS7 * PKCS7_new() ()
void PKCS7_free(PKCS7 * a) (a0)
void PKCS7_content_free(PKCS7 * a) (a0)
int i2d_PKCS7(PKCS7 * a, unsigned char ** pp) (a0,a1)
PKCS7 * d2i_PKCS7(PKCS7 ** a, unsigned char ** pp, long length) (a0,a1,a2)
void ERR_load_PKCS7_strings() ()
long PKCS7_ctrl(PKCS7 * p7, int cmd, long larg, char * parg) (a0,a1,a2,a3)
int PKCS7_set_type(PKCS7 * p7, int type) (a0,a1)
int PKCS7_set_content(PKCS7 * p7, PKCS7 * p7_data) (a0,a1)
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO * p7i, X509 * x509, EVP_PKEY * pkey, EVP_MD * dgst) (a0,a1,a2,a3)
int PKCS7_add_signer(PKCS7 * p7, PKCS7_SIGNER_INFO * p7i) (a0,a1)
int PKCS7_add_certificate(PKCS7 * p7, X509 * x509) (a0,a1)
int PKCS7_add_crl(PKCS7 * p7, X509_CRL * x509) (a0,a1)
int PKCS7_content_new(PKCS7 * p7, int nid) (a0,a1)
int PKCS7_dataVerify(X509_STORE * cert_store, X509_STORE_CTX * ctx, BIO * bio, PKCS7 * p7,
	PKCS7_SIGNER_INFO * si) (a0,a1,a2,a3,d0)
BIO * PKCS7_dataInit(PKCS7 * p7, BIO * bio) (a0,a1)
int PKCS7_dataFinal(PKCS7 * p7, BIO * bio) (a0,a1)
BIO * PKCS7_dataDecode(PKCS7 * p7, EVP_PKEY * pkey, BIO * in_bio, X509 * pcert) (a0,a1,a2,a3)
PKCS7_SIGNER_INFO * PKCS7_add_signature(PKCS7 * p7, X509 * x509, EVP_PKEY * pkey, EVP_MD * dgst) (a0,a1,a2,a3)
X509 * PKCS7_cert_from_signer_info(PKCS7 * p7, PKCS7_SIGNER_INFO * si) (a0,a1)
STACK * PKCS7_get_signer_info(PKCS7 * p7) (a0)
PKCS7_RECIP_INFO * PKCS7_add_recipient(PKCS7 * p7, X509 * x509) (a0,a1)
int PKCS7_add_recipient_info(PKCS7 * p7, PKCS7_RECIP_INFO * ri) (a0,a1)
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO * p7i, X509 * x509) (a0,a1)
int PKCS7_set_cipher(PKCS7 * p7, const EVP_CIPHER * cipher) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * PKCS7_get_issuer_and_serial(PKCS7 * p7, int idx) (a0,a1)
ASN1_OCTET_STRING * PKCS7_digest_from_attributes(STACK * sk) (a0)
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int type, void * data) (a0,a1,a2,a3)
int PKCS7_add_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int atrtype, void * value) (a0,a1,a2,a3)
ASN1_TYPE * PKCS7_get_attribute(PKCS7_SIGNER_INFO * si, int nid) (a0,a1)
ASN1_TYPE * PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO * si, int nid) (a0,a1)
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO * p7si, STACK * sk) (a0,a1)
int PKCS7_set_attributes(PKCS7_SIGNER_INFO * p7si, STACK * sk) (a0,a1)
void RAND_set_rand_method(RAND_METHOD * meth) (a0)
RAND_METHOD * RAND_get_rand_method() ()
RAND_METHOD * RAND_SSLeay() ()
void RAND_cleanup() ()
void RAND_bytes(unsigned char * buf, int num) (a0,a1)
void RAND_seed(const void * buf, int num) (a0,a1)
int RAND_load_file(const char * file, long max_bytes) (a0,a1)
int RAND_write_file(const char * file) (a0)
char * RAND_file_name(char * file, int num) (a0,a1)
void ERR_load_RSAREF_strings() ()
RSA * RSA_new() ()
RSA * RSA_new_method(RSA_METHOD * method) (a0)
int RSA_size(RSA * a) (a0)
RSA * RSA_generate_key(int bits, unsigned long e, void (*callback)(int, int, void *),
	void * cb_arg) (a0,a1,a2,a3)
int RSA_public_encrypt(int flen, unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (a0,a1,a2,a3,d0)
int RSA_private_encrypt(int flen, unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (a0,a1,a2,a3,d0)
int RSA_public_decrypt(int flen, unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (a0,a1,a2,a3,d0)
int RSA_private_decrypt(int flen, unsigned char * from, unsigned char * to, RSA * rsa,
	int padding) (a0,a1,a2,a3,d0)
void RSA_free(RSA * r) (a0)
int RSA_flags(RSA * r) (a0)
void RSA_set_default_method(RSA_METHOD * meth) (a0)
int RSA_memory_lock(RSA * r) (a0)
RSA_METHOD * RSA_PKCS1_Default() ()
void ERR_load_RSA_strings() ()
RSA * d2i_RSAPublicKey(RSA ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_RSAPublicKey(RSA * a, unsigned char ** pp) (a0,a1)
RSA * d2i_RSAPrivateKey(RSA ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_RSAPrivateKey(RSA * a, unsigned char ** pp) (a0,a1)
int RSA_print(BIO * bp, RSA * r, int offset) (a0,a1,a2)
int i2d_Netscape_RSA(RSA * a, unsigned char ** pp, int (*cb)()) (a0,a1,a2)
RSA * d2i_Netscape_RSA(RSA ** a, unsigned char ** pp, long length, int (*cb)()) (a0,a1,a2,a3)
RSA * d2i_Netscape_RSA_2(RSA ** a, unsigned char ** pp, long length, int (*cb)()) (a0,a1,a2,a3)
int RSA_sign(int type, unsigned char * m, unsigned int m_len, unsigned char * sigret,
	unsigned int * siglen, RSA * rsa) (a0,a1,a2,a3,d0,d1)
int RSA_verify(int type, unsigned char * m, unsigned int m_len, unsigned char * sigbuf,
	unsigned int siglen, RSA * rsa) (a0,a1,a2,a3,d0,d1)
int RSA_sign_ASN1_OCTET_STRING(int type, unsigned char * m, unsigned int m_len, unsigned char * sigret,
	unsigned int * siglen, RSA * rsa) (a0,a1,a2,a3,d0,d1)
int RSA_verify_ASN1_OCTET_STRING(int type, unsigned char * m, unsigned int m_len, unsigned char * sigbuf,
	unsigned int siglen, RSA * rsa) (a0,a1,a2,a3,d0,d1)
int RSA_blinding_on(RSA * rsa, BN_CTX * ctx) (a0,a1)
void RSA_blinding_off(RSA * rsa) (a0)
int RSA_padding_add_PKCS1_type_1(unsigned char * to, int tlen, unsigned char * f, int fl) (a0,a1,a2,a3)
int RSA_padding_check_PKCS1_type_1(unsigned char * to, int tlen, unsigned char * f, int fl, int rsa_len) (a0,a1,a2,a3,d0)
int RSA_padding_add_PKCS1_type_2(unsigned char * to, int tlen, unsigned char * f, int fl) (a0,a1,a2,a3)
int RSA_padding_check_PKCS1_type_2(unsigned char * to, int tlen, unsigned char * f, int fl, int rsa_len) (a0,a1,a2,a3,d0)
int RSA_padding_add_PKCS1_OAEP(unsigned char * to, int tlen, unsigned char * f, int fl,
	unsigned char * p, int pl) (a0,a1,a2,a3,d0,d1)
int RSA_padding_check_PKCS1_OAEP(unsigned char * to, int tlen, unsigned char * f, int fl, int rsa_len,
	unsigned char * p, int pl) (a0,a1,a2,a3,d0,d1,d2)
int RSA_padding_add_SSLv23(unsigned char * to, int tlen, unsigned char * f, int fl) (a0,a1,a2,a3)
int RSA_padding_check_SSLv23(unsigned char * to, int tlen, unsigned char * f, int fl, int rsa_len) (a0,a1,a2,a3,d0)
int RSA_padding_add_none(unsigned char * to, int tlen, unsigned char * f, int fl) (a0,a1,a2,a3)
int RSA_padding_check_none(unsigned char * to, int tlen, unsigned char * f, int fl, int rsa_len) (a0,a1,a2,a3,d0)
int RSA_get_ex_new_index(long argl, char * argp, int (*new_func)(), int (*dup_func)(),
	void (*free_func)()) (a0,a1,a2,a3,d0)
int RSA_set_ex_data(RSA * r, int idx, char * arg) (a0,a1,a2)
char * RSA_get_ex_data(RSA * r, int idx) (a0,a1)
BIO_METHOD * BIO_f_ssl() ()
BIO * BIO_new_ssl(SSL_CTX * ctx, int client) (a0,a1)
BIO * BIO_new_ssl_connect(SSL_CTX * ctx) (a0)
BIO * BIO_new_buffer_ssl_connect(SSL_CTX * ctx) (a0)
int BIO_ssl_copy_session_id(BIO * to, BIO * from) (a0,a1)
void BIO_ssl_shutdown(BIO * ssl_bio) (a0)
int SSL_CTX_set_cipher_list(SSL_CTX * a, char * str) (a0,a1)
SSL_CTX * SSL_CTX_new(SSL_METHOD * meth) (a0)
void SSL_CTX_free(SSL_CTX * a) (a0)
long SSL_CTX_set_timeout(SSL_CTX * ctx, long t) (a0,a1)
long SSL_CTX_get_timeout(SSL_CTX * ctx) (a0)
X509_STORE * SSL_CTX_get_cert_store(SSL_CTX * a) (a0)
void SSL_CTX_set_cert_store(SSL_CTX * a, X509_STORE * b) (a0,a1)
int SSL_want(SSL * s) (a0)
int SSL_clear(SSL * s) (a0)
void SSL_CTX_flush_sessions(SSL_CTX * ctx, long tm) (a0,a1)
SSL_CIPHER * SSL_get_current_cipher(SSL * s) (a0)
int SSL_CIPHER_get_bits(SSL_CIPHER * c, int * alg_bits) (a0,a1)
char * SSL_CIPHER_get_version(SSL_CIPHER * c) (a0)
const char * SSL_CIPHER_get_name(SSL_CIPHER * c) (a0)
int SSL_get_fd(SSL * s) (a0)
const char * SSL_get_cipher_list(SSL * s, int n) (a0,a1)
char * SSL_get_shared_ciphers(SSL * s, char * buf, int len) (a0,a1,a2)
int SSL_get_read_ahead(SSL * s) (a0)
int SSL_pending(SSL * s) (a0)
int SSL_set_fd(SSL * s, int fd) (a0,a1)
int SSL_set_rfd(SSL * s, int fd) (a0,a1)
int SSL_set_wfd(SSL * s, int fd) (a0,a1)
void SSL_set_bio(SSL * s, BIO * rbio, BIO * wbio) (a0,a1,a2)
BIO * SSL_get_rbio(SSL * s) (a0)
BIO * SSL_get_wbio(SSL * s) (a0)
int SSL_set_cipher_list(SSL * s, char * str) (a0,a1)
void SSL_set_read_ahead(SSL * s, int yes) (a0,a1)
int SSL_get_verify_mode(SSL * s) (a0)
int SSL_get_verify_depth(SSL * s) (a0)
int *SSL_get_verify_callback(SSL * s) (a0)
void SSL_set_verify(SSL * s, int mode, int (*callback)(int ok, X509_STORE_CTX *ctx)) (a0,a1,a2)
void SSL_set_verify_depth(SSL * s, int depth) (a0,a1)
int SSL_use_RSAPrivateKey(SSL * ssl, RSA * rsa) (a0,a1)
int SSL_use_RSAPrivateKey_ASN1(SSL * ssl, unsigned char * d, long len) (a0,a1,a2)
int SSL_use_PrivateKey(SSL * ssl, EVP_PKEY * pkey) (a0,a1)
int SSL_use_PrivateKey_ASN1(int pk, SSL * ssl, unsigned char * d, long len) (a0,a1,a2,a3)
int SSL_use_certificate(SSL * ssl, X509 * x) (a0,a1)
int SSL_use_certificate_ASN1(SSL * ssl, unsigned char * d, int len) (a0,a1,a2)
int SSL_use_RSAPrivateKey_file(SSL * ssl, const char * file, int type) (a0,a1,a2)
int SSL_use_PrivateKey_file(SSL * ssl, const char * file, int type) (a0,a1,a2)
int SSL_use_certificate_file(SSL * ssl, const char * file, int type) (a0,a1,a2)
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,a2)
int SSL_CTX_use_PrivateKey_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,a2)
int SSL_CTX_use_certificate_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,a2)
int SSL_CTX_use_certificate_chain_file(SSL_CTX * ctx, const char * file) (a0,a1)
STACK * SSL_load_client_CA_file(const char * file) (a0)
int SSL_add_file_cert_subjects_to_stack(STACK * stackCAs, const char * file) (a0,a1)
int SSL_add_dir_cert_subjects_to_stack(STACK * stackCAs, const char * dir) (a0,a1)
void ERR_load_SSL_strings() ()
void SSL_load_error_strings() ()
char * SSL_state_string(SSL * s) (a0)
char * SSL_rstate_string(SSL * s) (a0)
char * SSL_state_string_long(SSL * s) (a0)
char * SSL_rstate_string_long(SSL * s) (a0)
long SSL_SESSION_get_time(SSL_SESSION * s) (a0)
long SSL_SESSION_set_time(SSL_SESSION * s, long t) (a0,a1)
long SSL_SESSION_get_timeout(SSL_SESSION * s) (a0)
long SSL_SESSION_set_timeout(SSL_SESSION * s, long t) (a0,a1)
void SSL_copy_session_id(SSL * to, SSL * from) (a0,a1)
SSL_SESSION * SSL_SESSION_new() ()
unsigned long SSL_SESSION_hash(SSL_SESSION * a) (a0)
int SSL_SESSION_cmp(SSL_SESSION * a, SSL_SESSION * b) (a0,a1)
int SSL_SESSION_print(BIO * fp, SSL_SESSION * ses) (a0,a1)
void SSL_SESSION_free(SSL_SESSION * ses) (a0)
int i2d_SSL_SESSION(SSL_SESSION * in, unsigned char ** pp) (a0,a1)
int SSL_set_session(SSL * to, SSL_SESSION * session) (a0,a1)
int SSL_CTX_add_session(SSL_CTX * s, SSL_SESSION * c) (a0,a1)
int SSL_CTX_remove_session(SSL_CTX * a, SSL_SESSION * c) (a0,a1)
SSL_SESSION * d2i_SSL_SESSION(SSL_SESSION ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509 * SSL_get_peer_certificate(SSL * s) (a0)
STACK * SSL_get_peer_cert_chain(SSL * s) (a0)
int SSL_CTX_get_verify_mode(SSL_CTX * ctx) (a0)
int SSL_CTX_get_verify_depth(SSL_CTX * ctx) (a0)
int *SSL_CTX_get_verify_callback(SSL_CTX * ctx) (a0)
void SSL_CTX_set_verify(SSL_CTX * ctx, int mode, int (*callback)(int, X509_STORE_CTX *)) (a0,a1,a2)
void SSL_CTX_set_verify_depth(SSL_CTX * ctx, int depth) (a0,a1)
void SSL_CTX_set_cert_verify_callback(SSL_CTX * ctx, int (*cb)(), char * arg) (a0,a1,a2)
int SSL_CTX_use_RSAPrivateKey(SSL_CTX * ctx, RSA * rsa) (a0,a1)
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX * ctx, unsigned char * d, long len) (a0,a1,a2)
int SSL_CTX_use_PrivateKey(SSL_CTX * ctx, EVP_PKEY * pkey) (a0,a1)
int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX * ctx, unsigned char * d, long len) (a0,a1,a2,a3)
int SSL_CTX_use_certificate(SSL_CTX * ctx, X509 * x) (a0,a1)
int SSL_CTX_use_certificate_ASN1(SSL_CTX * ctx, int len, unsigned char * d) (a0,a1,a2)
void SSL_CTX_set_default_passwd_cb(SSL_CTX * ctx,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata)) (a0,a1)
int SSL_CTX_check_private_key(SSL_CTX * ctx) (a0)
int SSL_check_private_key(SSL * ctx) (a0)
int SSL_CTX_set_session_id_context(SSL_CTX * ctx, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,a2)
SSL * SSL_new(SSL_CTX * ctx) (a0)
int SSL_set_session_id_context(SSL * ssl, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,a2)
void SSL_free(SSL * ssl) (a0)
int SSL_accept(SSL * ssl) (a0)
int SSL_connect(SSL * ssl) (a0)
int SSL_read(SSL * ssl, char * buf, int num) (a0,a1,a2)
int SSL_peek(SSL * ssl, char * buf, int num) (a0,a1,a2)
int SSL_write(SSL * ssl, const char * buf, int num) (a0,a1,a2)
long SSL_ctrl(SSL * ssl, int cmd, long larg, char * parg) (a0,a1,a2,a3)
long SSL_CTX_ctrl(SSL_CTX * ctx, int cmd, long larg, char * parg) (a0,a1,a2,a3)
int SSL_get_error(SSL * s, int ret_code) (a0,a1)
char * SSL_get_version(SSL * s) (a0)
int SSL_CTX_set_ssl_version(SSL_CTX * ctx, SSL_METHOD * meth) (a0,a1)
SSL_METHOD * SSLv2_method() ()
SSL_METHOD * SSLv2_server_method() ()
SSL_METHOD * SSLv2_client_method() ()
SSL_METHOD * SSLv3_method() ()
SSL_METHOD * SSLv3_server_method() ()
SSL_METHOD * SSLv3_client_method() ()
SSL_METHOD * SSLv23_method() ()
SSL_METHOD * SSLv23_server_method() ()
SSL_METHOD * SSLv23_client_method() ()
SSL_METHOD * TLSv1_method() ()
SSL_METHOD * TLSv1_server_method() ()
SSL_METHOD * TLSv1_client_method() ()
STACK * SSL_get_ciphers(SSL * s) (a0)
int SSL_do_handshake(SSL * s) (a0)
int SSL_renegotiate(SSL * s) (a0)
int SSL_shutdown(SSL * s) (a0)
SSL_METHOD * SSL_get_ssl_method(SSL * s) (a0)
int SSL_set_ssl_method(SSL * s, SSL_METHOD * method) (a0,a1)
char * SSL_alert_type_string_long(int value) (a0)
char * SSL_alert_type_string(int value) (a0)
char * SSL_alert_desc_string_long(int value) (a0)
char * SSL_alert_desc_string(int value) (a0)
void SSL_set_client_CA_list(SSL * s, STACK * list) (a0,a1)
void SSL_CTX_set_client_CA_list(SSL_CTX * ctx, STACK * list) (a0,a1)
STACK * SSL_get_client_CA_list(SSL * s) (a0)
STACK * SSL_CTX_get_client_CA_list(SSL_CTX * s) (a0)
int SSL_add_client_CA(SSL * ssl, X509 * x) (a0,a1)
int SSL_CTX_add_client_CA(SSL_CTX * ctx, X509 * x) (a0,a1)
void SSL_set_connect_state(SSL * s) (a0)
void SSL_set_accept_state(SSL * s) (a0)
long SSL_get_default_timeout(SSL * s) (a0)
int SSL_library_init() ()
char * SSL_CIPHER_description(SSL_CIPHER * a, char * buf, int size) (a0,a1,a2)
STACK * SSL_dup_CA_list(STACK * sk) (a0)
SSL * SSL_dup(SSL * ssl) (a0)
X509 * SSL_get_certificate(SSL * ssl) (a0)
struct evp_pkey_st * SSL_get_privatekey(SSL * ssl) (a0)
void SSL_CTX_set_quiet_shutdown(SSL_CTX * ctx, int mode) (a0,a1)
int SSL_CTX_get_quiet_shutdown(SSL_CTX * ctx) (a0)
void SSL_set_quiet_shutdown(SSL * ssl, int mode) (a0,a1)
int SSL_get_quiet_shutdown(SSL * ssl) (a0)
void SSL_set_shutdown(SSL * ssl, int mode) (a0,a1)
int SSL_get_shutdown(SSL * ssl) (a0)
int SSL_version(SSL * ssl) (a0)
int SSL_CTX_set_default_verify_paths(SSL_CTX * ctx) (a0)
int SSL_CTX_load_verify_locations(SSL_CTX * ctx, const char * CAfile, const char * CApath) (a0,a1,a2)
SSL_SESSION * SSL_get_session(SSL * ssl) (a0)
SSL_CTX * SSL_get_SSL_CTX(SSL * ssl) (a0)
void SSL_set_info_callback(SSL * ssl, void (*cb)()) (a0,a1)
void *SSL_get_info_callback(SSL * ssl) (a0)
int SSL_state(SSL * ssl) (a0)
void SSL_set_verify_result(SSL * ssl, long v) (a0,a1)
long SSL_get_verify_result(SSL * ssl) (a0)
int SSL_set_ex_data(SSL * ssl, int idx, void * data) (a0,a1,a2)
void * SSL_get_ex_data(SSL * ssl, int idx) (a0,a1)
int SSL_get_ex_new_index(long argl, char * argp, int (*new_func)(), int (*dup_func)(),
	void (*free_func)()) (a0,a1,a2,a3,d0)
int SSL_SESSION_set_ex_data(SSL_SESSION * ss, int idx, void * data) (a0,a1,a2)
void * SSL_SESSION_get_ex_data(SSL_SESSION * ss, int idx) (a0,a1)
int SSL_SESSION_get_ex_new_index(long argl, char * argp, int (*new_func)(), int (*dup_func)(),
	void (*free_func)()) (a0,a1,a2,a3,d0)
int SSL_CTX_set_ex_data(SSL_CTX * ssl, int idx, void * data) (a0,a1,a2)
void * SSL_CTX_get_ex_data(SSL_CTX * ssl, int idx) (a0,a1)
int SSL_CTX_get_ex_new_index(long argl, char * argp, int (*new_func)(), int (*dup_func)(),
	void (*free_func)()) (a0,a1,a2,a3,d0)
int SSL_get_ex_data_X509_STORE_CTX_idx() ()
void SSL_CTX_set_tmp_rsa_callback(SSL_CTX * ctx, RSA * (*cb)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_set_tmp_rsa_callback(SSL * ssl, RSA * (*cb)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_CTX_set_tmp_dh_callback(SSL_CTX * ctx, DH * (*dh)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_set_tmp_dh_callback(SSL * ssl, DH * (*dh)(SSL *ssl, int is_export, int keylength)) (a0,a1)
int SSL_COMP_add_compression_method(int id, COMP_METHOD * cm) (a0,a1)
int sk_num(STACK * a) (a0)
char * sk_value(STACK * a, int b) (a0,a1)
char * sk_set(STACK * a, int b, char * c) (a0,a1,a2)
STACK * sk_new(int (*cmp)()) (a0)
void sk_free(STACK * a) (a0)
void sk_pop_free(STACK * st, void (*func)()) (a0,a1)
int sk_insert(STACK * sk, char * data, int where) (a0,a1,a2)
char * sk_delete(STACK * st, int loc) (a0,a1)
char * sk_delete_ptr(STACK * st, char * p) (a0,a1)
int sk_find(STACK * st, char * data) (a0,a1)
int sk_push(STACK * st, char * data) (a0,a1)
int sk_unshift(STACK * st, char * data) (a0,a1)
char * sk_shift(STACK * st) (a0)
char * sk_pop(STACK * st) (a0)
void sk_zero(STACK * st) (a0)
int *sk_set_cmp_func(STACK * sk, int (*c)()) (a0,a1)
STACK * sk_dup(STACK * st) (a0)
char * ms_time_new() ()
void ms_time_free(char * a) (a0)
void ms_time_get(char * a) (a0)
double ms_time_diff(char * start, char * end) (a0,a1)
int ms_time_cmp(char * ap, char * bp) (a0,a1)
TXT_DB * TXT_DB_read(BIO * in, int num) (a0,a1)
long TXT_DB_write(BIO * out, TXT_DB * db) (a0,a1)
int TXT_DB_create_index(TXT_DB * db, int field, int (*qual)(), unsigned long (*hash)(),
	int (*cmp)()) (a0,a1,a2,a3,d0)
void TXT_DB_free(TXT_DB * db) (a0)
char ** TXT_DB_get_by_index(TXT_DB * db, int idx, char ** value) (a0,a1,a2)
int TXT_DB_insert(TXT_DB * db, char ** value) (a0,a1)
void ERR_load_X509V3_strings() ()
int i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS * a, unsigned char ** pp) (a0,a1)
BASIC_CONSTRAINTS * d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS ** a, unsigned char ** pp, long length) (a0,a1,a2)
BASIC_CONSTRAINTS * BASIC_CONSTRAINTS_new() ()
void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS * a) (a0)
int i2d_GENERAL_NAME(GENERAL_NAME * a, unsigned char ** pp) (a0,a1)
GENERAL_NAME * d2i_GENERAL_NAME(GENERAL_NAME ** a, unsigned char ** pp, long length) (a0,a1,a2)
GENERAL_NAME * GENERAL_NAME_new() ()
void GENERAL_NAME_free(GENERAL_NAME * a) (a0)
STACK * i2v_GENERAL_NAME(X509V3_EXT_METHOD * method, GENERAL_NAME * gen, STACK * ret) (a0,a1,a2)
int i2d_SXNET(SXNET * a, unsigned char ** pp) (a0,a1)
SXNET * d2i_SXNET(SXNET ** a, unsigned char ** pp, long length) (a0,a1,a2)
SXNET * SXNET_new() ()
void SXNET_free(SXNET * a) (a0)
int i2d_SXNETID(SXNETID * a, unsigned char ** pp) (a0,a1)
SXNETID * d2i_SXNETID(SXNETID ** a, unsigned char ** pp, long length) (a0,a1,a2)
SXNETID * SXNETID_new() ()
void SXNETID_free(SXNETID * a) (a0)
int SXNET_add_id_asc(SXNET ** psx, char * zone, char * user, int userlen) (a0,a1,a2,a3)
int SXNET_add_id_ulong(SXNET ** psx, unsigned long lzone, char * user, int userlen) (a0,a1,a2,a3)
int SXNET_add_id_INTEGER(SXNET ** psx, ASN1_INTEGER * izone, char * user, int userlen) (a0,a1,a2,a3)
ASN1_OCTET_STRING * SXNET_get_id_asc(SXNET * sx, char * zone) (a0,a1)
ASN1_OCTET_STRING * SXNET_get_id_ulong(SXNET * sx, unsigned long lzone) (a0,a1)
ASN1_OCTET_STRING * SXNET_get_id_INTEGER(SXNET * sx, ASN1_INTEGER * zone) (a0,a1)
int i2d_AUTHORITY_KEYID(AUTHORITY_KEYID * a, unsigned char ** pp) (a0,a1)
AUTHORITY_KEYID * d2i_AUTHORITY_KEYID(AUTHORITY_KEYID ** a, unsigned char ** pp, long length) (a0,a1,a2)
AUTHORITY_KEYID * AUTHORITY_KEYID_new() ()
void AUTHORITY_KEYID_free(AUTHORITY_KEYID * a) (a0)
int i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD * a, unsigned char ** pp) (a0,a1)
PKEY_USAGE_PERIOD * d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD ** a, unsigned char ** pp, long length) (a0,a1,a2)
PKEY_USAGE_PERIOD * PKEY_USAGE_PERIOD_new() ()
void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD * a) (a0)
STACK * GENERAL_NAMES_new() ()
void GENERAL_NAMES_free(STACK * a) (a0)
STACK * d2i_GENERAL_NAMES(STACK ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_GENERAL_NAMES(STACK * a, unsigned char ** pp) (a0,a1)
STACK * i2v_GENERAL_NAMES(X509V3_EXT_METHOD * method, STACK * gen, STACK * extlist) (a0,a1,a2)
STACK * v2i_GENERAL_NAMES(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK * nval) (a0,a1,a2)
char * i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, ASN1_OCTET_STRING * ia5) (a0,a1)
ASN1_OCTET_STRING * s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, char * str) (a0,a1,a2)
int i2d_ext_ku(STACK * a, unsigned char ** pp) (a0,a1)
STACK * d2i_ext_ku(STACK ** a, unsigned char ** pp, long length) (a0,a1,a2)
void ext_ku_free(STACK * a) (a0)
STACK * ext_ku_new() ()
int i2d_CERTIFICATEPOLICIES(STACK * a, unsigned char ** pp) (a0,a1)
STACK * CERTIFICATEPOLICIES_new() ()
void CERTIFICATEPOLICIES_free(STACK * a) (a0)
STACK * d2i_CERTIFICATEPOLICIES(STACK ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_POLICYINFO(POLICYINFO * a, unsigned char ** pp) (a0,a1)
POLICYINFO * POLICYINFO_new() ()
POLICYINFO * d2i_POLICYINFO(POLICYINFO ** a, unsigned char ** pp, long length) (a0,a1,a2)
void POLICYINFO_free(POLICYINFO * a) (a0)
int i2d_POLICYQUALINFO(POLICYQUALINFO * a, unsigned char ** pp) (a0,a1)
POLICYQUALINFO * POLICYQUALINFO_new() ()
POLICYQUALINFO * d2i_POLICYQUALINFO(POLICYQUALINFO ** a, unsigned char ** pp, long length) (a0,a1,a2)
void POLICYQUALINFO_free(POLICYQUALINFO * a) (a0)
int i2d_USERNOTICE(USERNOTICE * a, unsigned char ** pp) (a0,a1)
USERNOTICE * USERNOTICE_new() ()
USERNOTICE * d2i_USERNOTICE(USERNOTICE ** a, unsigned char ** pp, long length) (a0,a1,a2)
void USERNOTICE_free(USERNOTICE * a) (a0)
int i2d_NOTICEREF(NOTICEREF * a, unsigned char ** pp) (a0,a1)
NOTICEREF * NOTICEREF_new() ()
NOTICEREF * d2i_NOTICEREF(NOTICEREF ** a, unsigned char ** pp, long length) (a0,a1,a2)
void NOTICEREF_free(NOTICEREF * a) (a0)
int i2d_CRL_DIST_POINTS(STACK * a, unsigned char ** pp) (a0,a1)
STACK * CRL_DIST_POINTS_new() ()
void CRL_DIST_POINTS_free(STACK * a) (a0)
STACK * d2i_CRL_DIST_POINTS(STACK ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_DIST_POINT(DIST_POINT * a, unsigned char ** pp) (a0,a1)
DIST_POINT * DIST_POINT_new() ()
DIST_POINT * d2i_DIST_POINT(DIST_POINT ** a, unsigned char ** pp, long length) (a0,a1,a2)
void DIST_POINT_free(DIST_POINT * a) (a0)
int i2d_DIST_POINT_NAME(DIST_POINT_NAME * a, unsigned char ** pp) (a0,a1)
DIST_POINT_NAME * DIST_POINT_NAME_new() ()
void DIST_POINT_NAME_free(DIST_POINT_NAME * a) (a0)
DIST_POINT_NAME * d2i_DIST_POINT_NAME(DIST_POINT_NAME ** a, unsigned char ** pp, long length) (a0,a1,a2)
GENERAL_NAME * v2i_GENERAL_NAME(X509V3_EXT_METHOD * method, X509V3_CTX * ctx,
	CONF_VALUE * cnf) (a0,a1,a2)
void X509V3_conf_free(CONF_VALUE * val) (a0)
X509_EXTENSION * X509V3_EXT_conf_nid(LHASH * conf, X509V3_CTX * ctx, int ext_nid, char * value) (a0,a1,a2,a3)
X509_EXTENSION * X509V3_EXT_conf(LHASH * conf, X509V3_CTX * ctx, char * name, char * value) (a0,a1,a2,a3)
int X509V3_EXT_add_conf(LHASH * conf, X509V3_CTX * ctx, char * section, X509 * cert) (a0,a1,a2,a3)
int X509V3_EXT_CRL_add_conf(LHASH * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl) (a0,a1,a2,a3)
int X509V3_add_value_bool_nf(char * name, int asn1_bool, STACK ** extlist) (a0,a1,a2)
int X509V3_get_value_bool(CONF_VALUE * value, int * asn1_bool) (a0,a1)
int X509V3_get_value_int(CONF_VALUE * value, ASN1_INTEGER ** aint) (a0,a1)
void X509V3_set_conf_lhash(X509V3_CTX * ctx, LHASH * lhash) (a0,a1)
char * X509V3_get_string(X509V3_CTX * ctx, char * name, char * section) (a0,a1,a2)
STACK * X509V3_get_section(X509V3_CTX * ctx, char * section) (a0,a1)
void X509V3_string_free(X509V3_CTX * ctx, char * str) (a0,a1)
void X509V3_section_free(X509V3_CTX * ctx, STACK * section) (a0,a1)
void X509V3_set_ctx(X509V3_CTX * ctx, X509 * issuer, X509 * subject, X509_REQ * req,
	X509_CRL * crl, int flags) (a0,a1,a2,a3,d0,d1)
int X509V3_add_value(const char * name, const char * value, STACK ** extlist) (a0,a1,a2)
int X509V3_add_value_uchar(const char * name, const unsigned char * value, STACK ** extlist) (a0,a1,a2)
int X509V3_add_value_bool(const char * name, int asn1_bool, STACK ** extlist) (a0,a1,a2)
int X509V3_add_value_int(const char * name, ASN1_INTEGER * aint, STACK ** extlist) (a0,a1,a2)
char * i2s_ASN1_INTEGER(X509V3_EXT_METHOD * meth, ASN1_INTEGER * aint) (a0,a1)
ASN1_INTEGER * s2i_ASN1_INTEGER(X509V3_EXT_METHOD * meth, char * value) (a0,a1)
char * i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint) (a0,a1)
char * i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint) (a0,a1)
int X509V3_EXT_add(X509V3_EXT_METHOD * ext) (a0)
int X509V3_EXT_add_list(X509V3_EXT_METHOD * extlist) (a0)
int X509V3_EXT_add_alias(int nid_to, int nid_from) (a0,a1)
void X509V3_EXT_cleanup() ()
X509V3_EXT_METHOD * X509V3_EXT_get(X509_EXTENSION * ext) (a0)
X509V3_EXT_METHOD * X509V3_EXT_get_nid(int nid) (a0)
int X509V3_add_standard_extensions() ()
STACK * X509V3_parse_list(char * line) (a0)
void * X509V3_EXT_d2i(X509_EXTENSION * ext) (a0)
X509_EXTENSION * X509V3_EXT_i2d(int ext_nid, int crit, void * ext_struc) (a0,a1,a2)
char * hex_to_string(unsigned char * buffer, long len) (a0,a1)
unsigned char * string_to_hex(char * str, long * len) (a0,a1)
int name_cmp(const char * name, const char * cmp) (a0,a1)
void X509V3_EXT_val_prn(BIO * out, STACK * val, int indent, int ml) (a0,a1,a2,a3)
int X509V3_EXT_print(BIO * out, X509_EXTENSION * ext, int flag, int indent) (a0,a1,a2,a3)
int X509_verify(X509 * a, EVP_PKEY * r) (a0,a1)
const char * X509_verify_cert_error_string(long n) (a0)
int X509_REQ_verify(X509_REQ * a, EVP_PKEY * r) (a0,a1)
int X509_CRL_verify(X509_CRL * a, EVP_PKEY * r) (a0,a1)
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI * a, EVP_PKEY * r) (a0,a1)
int X509_sign(X509 * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_REQ_sign(X509_REQ * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_CRL_sign(X509_CRL * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_digest(X509 * data, EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
int X509_NAME_digest(X509_NAME * data, EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
X509 * d2i_X509_bio(BIO * bp, X509 ** x509) (a0,a1)
int i2d_X509_bio(BIO * bp, X509 * x509) (a0,a1)
X509_CRL * d2i_X509_CRL_bio(BIO * bp, X509_CRL ** crl) (a0,a1)
int i2d_X509_CRL_bio(BIO * bp, X509_CRL * crl) (a0,a1)
X509_REQ * d2i_X509_REQ_bio(BIO * bp, X509_REQ ** req) (a0,a1)
int i2d_X509_REQ_bio(BIO * bp, X509_REQ * req) (a0,a1)
RSA * d2i_RSAPrivateKey_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSAPrivateKey_bio(BIO * bp, RSA * rsa) (a0,a1)
RSA * d2i_RSAPublicKey_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSAPublicKey_bio(BIO * bp, RSA * rsa) (a0,a1)
DSA * d2i_DSAPrivateKey_bio(BIO * bp, DSA ** dsa) (a0,a1)
int i2d_DSAPrivateKey_bio(BIO * bp, DSA * dsa) (a0,a1)
X509 * X509_dup(X509 * x509) (a0)
X509_ATTRIBUTE * X509_ATTRIBUTE_dup(X509_ATTRIBUTE * xa) (a0)
X509_EXTENSION * X509_EXTENSION_dup(X509_EXTENSION * ex) (a0)
X509_CRL * X509_CRL_dup(X509_CRL * crl) (a0)
X509_REQ * X509_REQ_dup(X509_REQ * req) (a0)
X509_ALGOR * X509_ALGOR_dup(X509_ALGOR * xn) (a0)
X509_NAME * X509_NAME_dup(X509_NAME * xn) (a0)
X509_NAME_ENTRY * X509_NAME_ENTRY_dup(X509_NAME_ENTRY * ne) (a0)
RSA * RSAPublicKey_dup(RSA * rsa) (a0)
RSA * RSAPrivateKey_dup(RSA * rsa) (a0)
int X509_cmp_current_time(ASN1_UTCTIME * s) (a0)
ASN1_UTCTIME * X509_gmtime_adj(ASN1_UTCTIME * s, long adj) (a0,a1)
const char * X509_get_default_cert_area() ()
const char * X509_get_default_cert_dir() ()
const char * X509_get_default_cert_file() ()
const char * X509_get_default_cert_dir_env() ()
const char * X509_get_default_cert_file_env() ()
const char * X509_get_default_private_dir() ()
X509_REQ * X509_to_X509_REQ(X509 * x, EVP_PKEY * pkey, EVP_MD * md) (a0,a1,a2)
X509 * X509_REQ_to_X509(X509_REQ * r, int days, EVP_PKEY * pkey) (a0,a1,a2)
void ERR_load_X509_strings() ()
X509_ALGOR * X509_ALGOR_new() ()
void X509_ALGOR_free(X509_ALGOR * a) (a0)
int i2d_X509_ALGOR(X509_ALGOR * a, unsigned char ** pp) (a0,a1)
X509_ALGOR * d2i_X509_ALGOR(X509_ALGOR ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_VAL * X509_VAL_new() ()
void X509_VAL_free(X509_VAL * a) (a0)
int i2d_X509_VAL(X509_VAL * a, unsigned char ** pp) (a0,a1)
X509_VAL * d2i_X509_VAL(X509_VAL ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_PUBKEY * X509_PUBKEY_new() ()
void X509_PUBKEY_free(X509_PUBKEY * a) (a0)
int i2d_X509_PUBKEY(X509_PUBKEY * a, unsigned char ** pp) (a0,a1)
X509_PUBKEY * d2i_X509_PUBKEY(X509_PUBKEY ** a, unsigned char ** pp, long length) (a0,a1,a2)
int X509_PUBKEY_set(X509_PUBKEY ** x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_PUBKEY_get(X509_PUBKEY * key) (a0)
int X509_get_pubkey_parameters(EVP_PKEY * pkey, STACK * chain) (a0,a1)
X509_SIG * X509_SIG_new() ()
void X509_SIG_free(X509_SIG * a) (a0)
int i2d_X509_SIG(X509_SIG * a, unsigned char ** pp) (a0,a1)
X509_SIG * d2i_X509_SIG(X509_SIG ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_REQ_INFO * X509_REQ_INFO_new() ()
void X509_REQ_INFO_free(X509_REQ_INFO * a) (a0)
int i2d_X509_REQ_INFO(X509_REQ_INFO * a, unsigned char ** pp) (a0,a1)
X509_REQ_INFO * d2i_X509_REQ_INFO(X509_REQ_INFO ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_REQ * X509_REQ_new() ()
void X509_REQ_free(X509_REQ * a) (a0)
int i2d_X509_REQ(X509_REQ * a, unsigned char ** pp) (a0,a1)
X509_REQ * d2i_X509_REQ(X509_REQ ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_ATTRIBUTE * X509_ATTRIBUTE_new() ()
void X509_ATTRIBUTE_free(X509_ATTRIBUTE * a) (a0)
int i2d_X509_ATTRIBUTE(X509_ATTRIBUTE * a, unsigned char ** pp) (a0,a1)
X509_ATTRIBUTE * d2i_X509_ATTRIBUTE(X509_ATTRIBUTE ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_ATTRIBUTE * X509_ATTRIBUTE_create(int nid, int atrtype, void * value) (a0,a1,a2)
X509_EXTENSION * X509_EXTENSION_new() ()
void X509_EXTENSION_free(X509_EXTENSION * a) (a0)
int i2d_X509_EXTENSION(X509_EXTENSION * a, unsigned char ** pp) (a0,a1)
X509_EXTENSION * d2i_X509_EXTENSION(X509_EXTENSION ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_NAME_ENTRY * X509_NAME_ENTRY_new() ()
void X509_NAME_ENTRY_free(X509_NAME_ENTRY * a) (a0)
int i2d_X509_NAME_ENTRY(X509_NAME_ENTRY * a, unsigned char ** pp) (a0,a1)
X509_NAME_ENTRY * d2i_X509_NAME_ENTRY(X509_NAME_ENTRY ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_NAME * X509_NAME_new() ()
void X509_NAME_free(X509_NAME * a) (a0)
int i2d_X509_NAME(X509_NAME * a, unsigned char ** pp) (a0,a1)
X509_NAME * d2i_X509_NAME(X509_NAME ** a, unsigned char ** pp, long length) (a0,a1,a2)
int X509_NAME_set(X509_NAME ** xn, X509_NAME * name) (a0,a1)
X509_CINF * X509_CINF_new() ()
void X509_CINF_free(X509_CINF * a) (a0)
int i2d_X509_CINF(X509_CINF * a, unsigned char ** pp) (a0,a1)
X509_CINF * d2i_X509_CINF(X509_CINF ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509 * X509_new() ()
void X509_free(X509 * a) (a0)
int i2d_X509(X509 * a, unsigned char ** pp) (a0,a1)
X509 * d2i_X509(X509 ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_REVOKED * X509_REVOKED_new() ()
void X509_REVOKED_free(X509_REVOKED * a) (a0)
int i2d_X509_REVOKED(X509_REVOKED * a, unsigned char ** pp) (a0,a1)
X509_REVOKED * d2i_X509_REVOKED(X509_REVOKED ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_CRL_INFO * X509_CRL_INFO_new() ()
void X509_CRL_INFO_free(X509_CRL_INFO * a) (a0)
int i2d_X509_CRL_INFO(X509_CRL_INFO * a, unsigned char ** pp) (a0,a1)
X509_CRL_INFO * d2i_X509_CRL_INFO(X509_CRL_INFO ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_CRL * X509_CRL_new() ()
void X509_CRL_free(X509_CRL * a) (a0)
int i2d_X509_CRL(X509_CRL * a, unsigned char ** pp) (a0,a1)
X509_CRL * d2i_X509_CRL(X509_CRL ** a, unsigned char ** pp, long length) (a0,a1,a2)
X509_PKEY * X509_PKEY_new() ()
void X509_PKEY_free(X509_PKEY * a) (a0)
int i2d_X509_PKEY(X509_PKEY * a, unsigned char ** pp) (a0,a1)
X509_PKEY * d2i_X509_PKEY(X509_PKEY ** a, unsigned char ** pp, long length) (a0,a1,a2)
NETSCAPE_SPKI * NETSCAPE_SPKI_new() ()
void NETSCAPE_SPKI_free(NETSCAPE_SPKI * a) (a0)
int i2d_NETSCAPE_SPKI(NETSCAPE_SPKI * a, unsigned char ** pp) (a0,a1)
NETSCAPE_SPKI * d2i_NETSCAPE_SPKI(NETSCAPE_SPKI ** a, unsigned char ** pp, long length) (a0,a1,a2)
NETSCAPE_SPKAC * NETSCAPE_SPKAC_new() ()
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC * a) (a0)
int i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC * a, unsigned char ** pp) (a0,a1)
NETSCAPE_SPKAC * d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC ** a, unsigned char ** pp, long length) (a0,a1,a2)
int i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE * a, unsigned char ** pp) (a0,a1)
NETSCAPE_CERT_SEQUENCE * NETSCAPE_CERT_SEQUENCE_new() ()
NETSCAPE_CERT_SEQUENCE * d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE ** a, unsigned char ** pp,
	long length) (a0,a1,a2)
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE * a) (a0)
X509_INFO * X509_INFO_new() ()
void X509_INFO_free(X509_INFO * a) (a0)
char * X509_NAME_oneline(X509_NAME * a, char * buf, int size) (a0,a1,a2)
int ASN1_verify(int (*i2d)(), X509_ALGOR * algor1, ASN1_BIT_STRING * signature,
	char * data, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
int ASN1_digest(int (*i2d)(), EVP_MD * type, char * data, unsigned char * md,
	unsigned int * len) (a0,a1,a2,a3,d0)
int ASN1_sign(int (*i2d)(), X509_ALGOR * algor1, X509_ALGOR * algor2,
	ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey,
	const EVP_MD * type) (a0,a1,a2,a3,d0,d1,d2)
int X509_set_version(X509 * x, long version) (a0,a1)
int X509_set_serialNumber(X509 * x, ASN1_INTEGER * serial) (a0,a1)
ASN1_INTEGER * X509_get_serialNumber(X509 * x) (a0)
int X509_set_issuer_name(X509 * x, X509_NAME * name) (a0,a1)
X509_NAME * X509_get_issuer_name(X509 * a) (a0)
int X509_set_subject_name(X509 * x, X509_NAME * name) (a0,a1)
X509_NAME * X509_get_subject_name(X509 * a) (a0)
int X509_set_notBefore(X509 * x, ASN1_UTCTIME * tm) (a0,a1)
int X509_set_notAfter(X509 * x, ASN1_UTCTIME * tm) (a0,a1)
int X509_set_pubkey(X509 * x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_get_pubkey(X509 * x) (a0)
int X509_certificate_type(X509 * x, EVP_PKEY * pubkey) (a0,a1)
int X509_REQ_set_version(X509_REQ * x, long version) (a0,a1)
int X509_REQ_set_subject_name(X509_REQ * req, X509_NAME * name) (a0,a1)
int X509_REQ_set_pubkey(X509_REQ * x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_REQ_get_pubkey(X509_REQ * req) (a0)
int X509_check_private_key(X509 * x509, EVP_PKEY * pkey) (a0,a1)
int X509_issuer_and_serial_cmp(X509 * a, X509 * b) (a0,a1)
unsigned long X509_issuer_and_serial_hash(X509 * a) (a0)
int X509_issuer_name_cmp(X509 * a, X509 * b) (a0,a1)
unsigned long X509_issuer_name_hash(X509 * a) (a0)
int X509_subject_name_cmp(X509 * a, X509 * b) (a0,a1)
unsigned long X509_subject_name_hash(X509 * x) (a0)
int X509_NAME_cmp(X509_NAME * a, X509_NAME * b) (a0,a1)
unsigned long X509_NAME_hash(X509_NAME * x) (a0)
int X509_CRL_cmp(X509_CRL * a, X509_CRL * b) (a0,a1)
int X509_NAME_print(BIO * bp, X509_NAME * name, int obase) (a0,a1,a2)
int X509_print(BIO * bp, X509 * x) (a0,a1)
int X509_CRL_print(BIO * bp, X509_CRL * x) (a0,a1)
int X509_REQ_print(BIO * bp, X509_REQ * req) (a0,a1)
int X509_NAME_entry_count(X509_NAME * name) (a0)
int X509_NAME_get_text_by_NID(X509_NAME * name, int nid, char * buf, int len) (a0,a1,a2,a3)
int X509_NAME_get_text_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, char * buf, int len) (a0,a1,a2,a3)
int X509_NAME_get_index_by_NID(X509_NAME * name, int nid, int lastpos) (a0,a1,a2)
int X509_NAME_get_index_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, int lastpos) (a0,a1,a2)
X509_NAME_ENTRY * X509_NAME_get_entry(X509_NAME * name, int loc) (a0,a1)
X509_NAME_ENTRY * X509_NAME_delete_entry(X509_NAME * name, int loc) (a0,a1)
int X509_NAME_add_entry(X509_NAME * name, X509_NAME_ENTRY * ne, int loc, int set) (a0,a1,a2,a3)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY ** ne, int nid, int type,
	unsigned char * bytes, int len) (a0,a1,a2,a3,d0)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY ** ne, ASN1_OBJECT * obj, int type,
	unsigned char * bytes, int len) (a0,a1,a2,a3,d0)
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY * ne, ASN1_OBJECT * obj) (a0,a1)
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY * ne, int type, unsigned char * bytes, int len) (a0,a1,a2,a3)
ASN1_OBJECT * X509_NAME_ENTRY_get_object(X509_NAME_ENTRY * ne) (a0)
ASN1_STRING * X509_NAME_ENTRY_get_data(X509_NAME_ENTRY * ne) (a0)
int X509v3_get_ext_count(const STACK * x) (a0)
int X509v3_get_ext_by_NID(const STACK * x, int nid, int lastpos) (a0,a1,a2)
int X509v3_get_ext_by_OBJ(const STACK * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,a2)
int X509v3_get_ext_by_critical(const STACK * x, int crit, int lastpos) (a0,a1,a2)
X509_EXTENSION * X509v3_get_ext(const STACK * x, int loc) (a0,a1)
X509_EXTENSION * X509v3_delete_ext(STACK * x, int loc) (a0,a1)
STACK * X509v3_add_ext(STACK ** x, X509_EXTENSION * ex, int loc) (a0,a1,a2)
int X509_get_ext_count(X509 * x) (a0)
int X509_get_ext_by_NID(X509 * x, int nid, int lastpos) (a0,a1,a2)
int X509_get_ext_by_OBJ(X509 * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,a2)
int X509_get_ext_by_critical(X509 * x, int crit, int lastpos) (a0,a1,a2)
X509_EXTENSION * X509_get_ext(X509 * x, int loc) (a0,a1)
X509_EXTENSION * X509_delete_ext(X509 * x, int loc) (a0,a1)
int X509_add_ext(X509 * x, X509_EXTENSION * ex, int loc) (a0,a1,a2)
int X509_CRL_get_ext_count(X509_CRL * x) (a0)
int X509_CRL_get_ext_by_NID(X509_CRL * x, int nid, int lastpos) (a0,a1,a2)
int X509_CRL_get_ext_by_OBJ(X509_CRL * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,a2)
int X509_CRL_get_ext_by_critical(X509_CRL * x, int crit, int lastpos) (a0,a1,a2)
X509_EXTENSION * X509_CRL_get_ext(X509_CRL * x, int loc) (a0,a1)
X509_EXTENSION * X509_CRL_delete_ext(X509_CRL * x, int loc) (a0,a1)
int X509_CRL_add_ext(X509_CRL * x, X509_EXTENSION * ex, int loc) (a0,a1,a2)
int X509_REVOKED_get_ext_count(X509_REVOKED * x) (a0)
int X509_REVOKED_get_ext_by_NID(X509_REVOKED * x, int nid, int lastpos) (a0,a1,a2)
int X509_REVOKED_get_ext_by_OBJ(X509_REVOKED * x, ASN1_OBJECT * obj, int lastpos) (a0,a1,a2)
int X509_REVOKED_get_ext_by_critical(X509_REVOKED * x, int crit, int lastpos) (a0,a1,a2)
X509_EXTENSION * X509_REVOKED_get_ext(X509_REVOKED * x, int loc) (a0,a1)
X509_EXTENSION * X509_REVOKED_delete_ext(X509_REVOKED * x, int loc) (a0,a1)
int X509_REVOKED_add_ext(X509_REVOKED * x, X509_EXTENSION * ex, int loc) (a0,a1,a2)
X509_EXTENSION * X509_EXTENSION_create_by_NID(X509_EXTENSION ** ex, int nid, int crit,
	ASN1_OCTET_STRING * data) (a0,a1,a2,a3)
X509_EXTENSION * X509_EXTENSION_create_by_OBJ(X509_EXTENSION ** ex, ASN1_OBJECT * obj, int crit,
	ASN1_OCTET_STRING * data) (a0,a1,a2,a3)
int X509_EXTENSION_set_object(X509_EXTENSION * ex, ASN1_OBJECT * obj) (a0,a1)
int X509_EXTENSION_set_critical(X509_EXTENSION * ex, int crit) (a0,a1)
int X509_EXTENSION_set_data(X509_EXTENSION * ex, ASN1_OCTET_STRING * data) (a0,a1)
ASN1_OBJECT * X509_EXTENSION_get_object(X509_EXTENSION * ex) (a0)
ASN1_OCTET_STRING * X509_EXTENSION_get_data(X509_EXTENSION * ne) (a0)
int X509_EXTENSION_get_critical(X509_EXTENSION * ex) (a0)
int X509_verify_cert(X509_STORE_CTX * ctx) (a0)
X509 * X509_find_by_issuer_and_serial(STACK * sk, X509_NAME * name, ASN1_INTEGER * serial) (a0,a1,a2)
X509 * X509_find_by_subject(STACK * sk, X509_NAME * name) (a0,a1)
int i2d_PBEPARAM(PBEPARAM * a, unsigned char ** pp) (a0,a1)
PBEPARAM * PBEPARAM_new() ()
PBEPARAM * d2i_PBEPARAM(PBEPARAM ** a, unsigned char ** pp, long length) (a0,a1,a2)
void PBEPARAM_free(PBEPARAM * a) (a0)
X509_ALGOR * PKCS5_pbe_set(int alg, int iter, unsigned char * salt, int saltlen) (a0,a1,a2,a3)
int i2d_PBKDF2PARAM(PBKDF2PARAM * a, unsigned char ** pp) (a0,a1)
PBKDF2PARAM * PBKDF2PARAM_new() ()
PBKDF2PARAM * d2i_PBKDF2PARAM(PBKDF2PARAM ** a, unsigned char ** pp, long length) (a0,a1,a2)
void PBKDF2PARAM_free(PBKDF2PARAM * a) (a0)
int i2d_PBE2PARAM(PBE2PARAM * a, unsigned char ** pp) (a0,a1)
PBE2PARAM * PBE2PARAM_new() ()
PBE2PARAM * d2i_PBE2PARAM(PBE2PARAM ** a, unsigned char ** pp, long length) (a0,a1,a2)
void PBE2PARAM_free(PBE2PARAM * a) (a0)
int i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO * a, unsigned char ** pp) (a0,a1)
PKCS8_PRIV_KEY_INFO * PKCS8_PRIV_KEY_INFO_new() ()
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO ** a, unsigned char ** pp,
	long length) (a0,a1,a2)
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO * a) (a0)
EVP_PKEY * EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO * p8) (a0)
PKCS8_PRIV_KEY_INFO * EVP_PKEY2PKCS8(EVP_PKEY * pkey) (a0)
PKCS8_PRIV_KEY_INFO * PKCS8_set_broken(PKCS8_PRIV_KEY_INFO * p8, int broken) (a0,a1)
X509_OBJECT * X509_OBJECT_retrieve_by_subject(LHASH * h, int type, X509_NAME * name) (a0,a1,a2)
void X509_OBJECT_up_ref_count(X509_OBJECT * a) (a0)
void X509_OBJECT_free_contents(X509_OBJECT * a) (a0)
X509_STORE * X509_STORE_new() ()
void X509_STORE_free(X509_STORE * v) (a0)
void X509_STORE_CTX_init(X509_STORE_CTX * ctx, X509_STORE * store, X509 * x509, STACK * chain) (a0,a1,a2,a3)
void X509_STORE_CTX_cleanup(X509_STORE_CTX * ctx) (a0)
X509_LOOKUP * X509_STORE_add_lookup(X509_STORE * v, X509_LOOKUP_METHOD * m) (a0,a1)
X509_LOOKUP_METHOD * X509_LOOKUP_hash_dir() ()
X509_LOOKUP_METHOD * X509_LOOKUP_file() ()
int X509_STORE_add_cert(X509_STORE * ctx, X509 * x) (a0,a1)
int X509_STORE_add_crl(X509_STORE * ctx, X509_CRL * x) (a0,a1)
int X509_STORE_get_by_subject(X509_STORE_CTX * vs, int type, X509_NAME * name, X509_OBJECT * ret) (a0,a1,a2,a3)
int X509_LOOKUP_ctrl(X509_LOOKUP * ctx, int cmd, const char * argc, long argl, char ** ret) (a0,a1,a2,a3,d0)
int X509_load_cert_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,a2)
int X509_load_crl_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,a2)
X509_LOOKUP * X509_LOOKUP_new(X509_LOOKUP_METHOD * method) (a0)
void X509_LOOKUP_free(X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_init(X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_by_subject(X509_LOOKUP * ctx, int type, X509_NAME * name, X509_OBJECT * ret) (a0,a1,a2,a3)
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP * ctx, int type, X509_NAME * name, ASN1_INTEGER * serial,
	X509_OBJECT * ret) (a0,a1,a2,a3,d0)
int X509_LOOKUP_by_fingerprint(X509_LOOKUP * ctx, int type, unsigned char * bytes, int len,
	X509_OBJECT * ret) (a0,a1,a2,a3,d0)
int X509_LOOKUP_by_alias(X509_LOOKUP * ctx, int type, char * str, int len, X509_OBJECT * ret) (a0,a1,a2,a3,d0)
int X509_LOOKUP_shutdown(X509_LOOKUP * ctx) (a0)
int X509_STORE_load_locations(X509_STORE * ctx, const char * file, const char * dir) (a0,a1,a2)
int X509_STORE_set_default_paths(X509_STORE * ctx) (a0)
int X509_STORE_CTX_get_ex_new_index(long argl, char * argp, int (*new_func)(), int (*dup_func)(),
	void (*free_func)()) (a0,a1,a2,a3,d0)
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX * ctx, int idx, void * data) (a0,a1,a2)
void * X509_STORE_CTX_get_ex_data(X509_STORE_CTX * ctx, int idx) (a0,a1)
int X509_STORE_CTX_get_error(X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_error(X509_STORE_CTX * ctx, int s) (a0,a1)
int X509_STORE_CTX_get_error_depth(X509_STORE_CTX * ctx) (a0)
X509 * X509_STORE_CTX_get_current_cert(X509_STORE_CTX * ctx) (a0)
STACK * X509_STORE_CTX_get_chain(X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_cert(X509_STORE_CTX * c, X509 * x) (a0,a1)
void X509_STORE_CTX_set_chain(X509_STORE_CTX * c, STACK * sk) (a0,a1)
size_t BIO_ctrl_pending(BIO * b) (a0)
size_t BIO_ctrl_wpending(BIO * b) (a0)
size_t BIO_ctrl_get_write_guarantee(BIO * b) (a0)
size_t BIO_ctrl_get_read_request(BIO * b) (a0)
BIO_METHOD * BIO_s_bio() ()
int BIO_new_bio_pair(BIO ** bio1, size_t writebuf1, BIO ** bio2, size_t writebuf2) (a0,a1,a2,a3)
int CRYPTO_num_locks() ()
DH * DSA_dup_DH(DSA * r) (a0)
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param,
	EVP_CIPHER * cipher, EVP_MD * md, int en_de) (a0,a1,a2,a3,d0,d1,d2)
int PKCS5_PBKDF2_HMAC_SHA1(const char * pass, int passlen, unsigned char * salt, int saltlen,
	int iter, int keylen, unsigned char * out) (a0,a1,a2,a3,d0,d1,d2)
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param,
	EVP_CIPHER * cipher, EVP_MD * md, int en_de) (a0,a1,a2,a3,d0,d1,d2)
void PKCS5_PBE_add() ()
int EVP_PBE_CipherInit(ASN1_OBJECT * pbe_obj, const char * pass, int passlen, ASN1_TYPE * param,
	EVP_CIPHER_CTX * ctx, int en_de) (a0,a1,a2,a3,d0,d1)
int EVP_PBE_alg_add(int nid, EVP_CIPHER * cipher, EVP_MD * md,
	EVP_PBE_KEYGEN * (*keygen)(struct evp_cipher_ctx_st *ctx, const char *pass, int passlen, struct asn1_type_st *param, struct evp_cipher_st *cipher, struct env_md_st *md, int en_de)) (a0,a1,a2,a3)
void EVP_PBE_cleanup() ()
int OBJ_obj2txt(char * buf, int buf_len, ASN1_OBJECT * a, int no_name) (a0,a1,a2,a3)
int PKCS7_signatureVerify(BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si, X509 * x509) (a0,a1,a2,a3)
int RSA_check_key(RSA * rsa) (a0)
RSA_METHOD * RSA_get_default_method() ()
RSA_METHOD * RSA_get_method(RSA * rsa) (a0)
RSA_METHOD * RSA_set_method(RSA * rsa, RSA_METHOD * meth) (a0,a1)
void sk_sort(STACK * st) (a0)
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX * ctx, void * u) (a0,a1)
X509_SIG * d2i_PKCS8_bio(BIO * bp, X509_SIG ** p8) (a0,a1)
int i2d_PKCS8_bio(BIO * bp, X509_SIG * p8) (a0,a1)
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO ** p8inf) (a0,a1)
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO * p8inf) (a0,a1)
X509_ALGOR * PKCS5_pbe2_set(const EVP_CIPHER * cipher, int iter, unsigned char * salt,
	int saltlen) (a0,a1,a2,a3)
int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param,
	EVP_CIPHER * cipher, EVP_MD * md_type, int en_de) (a0,a1,a2,a3,d0,d1,d2)
X509_SIG * PEM_read_bio_PKCS8(BIO * bp, X509_SIG ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
PKCS8_PRIV_KEY_INFO * PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO ** x,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS8(BIO * bp, X509_SIG * x) (a0,a1)
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO * x) (a0,a1)
int PEM_write_bio_PKCS8PrivateKey(BIO * fp, EVP_PKEY * x, const EVP_CIPHER * enc, char * kstr, int klen,
	pem_password_cb * (*cb)(char *buf, int size, int rwflag, void *userdata),
	void * u) (a0,a1,a2,a3,d0,d1,d2)
LHASH * CONF_load_bio(LHASH * conf, BIO * bp, long * eline) (a0,a1,a2)
==end
