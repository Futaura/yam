/* Automatically generated header (sfdc 1.5)! Do not edit! */

#ifndef CLIB_AMISSL_PROTOS_H
#define CLIB_AMISSL_PROTOS_H

/*
**	$VER: amissl_protos.h $Id$ $Id$
**
**	C prototypes. For use with 32 bit integers only.
**
**	Copyright © 2001 Amiga, Inc.
**	    All Rights Reserved
*/

#include <exec/types.h>
#include <dos/dos.h>
#include <amissl/amissl.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

long InitAmiSSLA(struct TagItem * tagList);
long InitAmiSSL(Tag tag, ...);
long CleanupAmiSSLA(struct TagItem * tagList);
long CleanupAmiSSL(Tag tag, ...);
#if 0
ASN1_TYPE * ASN1_TYPE_new(void);
void ASN1_TYPE_free(ASN1_TYPE * a);
ASN1_TYPE * d2i_ASN1_TYPE(ASN1_TYPE ** a, const unsigned char ** in, long len);
int i2d_ASN1_TYPE(ASN1_TYPE * a, unsigned char ** out);
const ASN1_ITEM * ASN1_ANY_it(void);
int ASN1_TYPE_get(ASN1_TYPE * a);
void ASN1_TYPE_set(ASN1_TYPE * a, int type, void * value);
ASN1_OBJECT * ASN1_OBJECT_new(void);
void ASN1_OBJECT_free(ASN1_OBJECT * a);
int i2d_ASN1_OBJECT(ASN1_OBJECT * a, unsigned char ** pp);
ASN1_OBJECT * c2i_ASN1_OBJECT(ASN1_OBJECT ** a, const unsigned char ** pp, long length);
ASN1_OBJECT * d2i_ASN1_OBJECT(ASN1_OBJECT ** a, const unsigned char ** pp, long length);
const ASN1_ITEM * ASN1_OBJECT_it(void);
ASN1_STRING * ASN1_STRING_new(void);
void ASN1_STRING_free(ASN1_STRING * a);
ASN1_STRING * ASN1_STRING_dup(ASN1_STRING * a);
ASN1_STRING * ASN1_STRING_type_new(int type);
int ASN1_STRING_cmp(ASN1_STRING * a, ASN1_STRING * b);
int ASN1_STRING_set(ASN1_STRING * str, const void * data, int len);
int ASN1_STRING_length(ASN1_STRING * x);
void ASN1_STRING_length_set(ASN1_STRING * x, int n);
int ASN1_STRING_type(ASN1_STRING * x);
unsigned char * ASN1_STRING_data(ASN1_STRING * x);
ASN1_BIT_STRING * ASN1_BIT_STRING_new(void);
void ASN1_BIT_STRING_free(ASN1_BIT_STRING * a);
ASN1_BIT_STRING * d2i_ASN1_BIT_STRING(ASN1_BIT_STRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_BIT_STRING_it(void);
int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING * a, unsigned char ** pp);
ASN1_BIT_STRING * c2i_ASN1_BIT_STRING(ASN1_BIT_STRING ** a, const unsigned char ** pp, long length);
int ASN1_BIT_STRING_set(ASN1_BIT_STRING * a, unsigned char * d, int length);
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING * a, int n, int value);
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING * a, int n);
int ASN1_BIT_STRING_name_print(BIO * out, ASN1_BIT_STRING * bs, BIT_STRING_BITNAME * tbl, int indent);
int ASN1_BIT_STRING_num_asc(char * name, BIT_STRING_BITNAME * tbl);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING * bs, char * name, int value, BIT_STRING_BITNAME * tbl);
int i2d_ASN1_BOOLEAN(int a, unsigned char ** pp);
int d2i_ASN1_BOOLEAN(int * a, const unsigned char ** pp, long length);
ASN1_INTEGER * ASN1_INTEGER_new(void);
void ASN1_INTEGER_free(ASN1_INTEGER * a);
ASN1_INTEGER * d2i_ASN1_INTEGER(ASN1_INTEGER ** a, const unsigned char ** in, long len);
int i2d_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** out);
const ASN1_ITEM * ASN1_INTEGER_it(void);
int i2c_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** pp);
ASN1_INTEGER * c2i_ASN1_INTEGER(ASN1_INTEGER ** a, const unsigned char ** pp, long length);
ASN1_INTEGER * d2i_ASN1_UINTEGER(ASN1_INTEGER ** a, const unsigned char ** pp, long length);
ASN1_INTEGER * ASN1_INTEGER_dup(ASN1_INTEGER * x);
int ASN1_INTEGER_cmp(ASN1_INTEGER * x, ASN1_INTEGER * y);
ASN1_ENUMERATED * ASN1_ENUMERATED_new(void);
void ASN1_ENUMERATED_free(ASN1_ENUMERATED * a);
ASN1_ENUMERATED * d2i_ASN1_ENUMERATED(ASN1_ENUMERATED ** a, const unsigned char ** in, long len);
int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED * a, unsigned char ** out);
const ASN1_ITEM * ASN1_ENUMERATED_it(void);
int ASN1_UTCTIME_check(ASN1_UTCTIME * a);
ASN1_UTCTIME * ASN1_UTCTIME_set(ASN1_UTCTIME * s, time_t t);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME * s, char * str);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME * s, time_t t);
int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME * a);
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME * s, time_t t);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME * s, char * str);
ASN1_OCTET_STRING * ASN1_OCTET_STRING_new(void);
void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING * a);
ASN1_OCTET_STRING * d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_OCTET_STRING_it(void);
ASN1_OCTET_STRING * ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING * a);
int ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING * a, ASN1_OCTET_STRING * b);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING * str, unsigned char * data, int len);
ASN1_VISIBLESTRING * ASN1_VISIBLESTRING_new(void);
void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING * a);
ASN1_VISIBLESTRING * d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_VISIBLESTRING_it(void);
ASN1_UNIVERSALSTRING * ASN1_UNIVERSALSTRING_new(void);
void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING * a);
ASN1_UNIVERSALSTRING * d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_UNIVERSALSTRING_it(void);
ASN1_UTF8STRING * ASN1_UTF8STRING_new(void);
void ASN1_UTF8STRING_free(ASN1_UTF8STRING * a);
ASN1_UTF8STRING * d2i_ASN1_UTF8STRING(ASN1_UTF8STRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_UTF8STRING_it(void);
ASN1_NULL * ASN1_NULL_new(void);
void ASN1_NULL_free(ASN1_NULL * a);
ASN1_NULL * d2i_ASN1_NULL(ASN1_NULL ** a, const unsigned char ** in, long len);
int i2d_ASN1_NULL(ASN1_NULL * a, unsigned char ** out);
const ASN1_ITEM * ASN1_NULL_it(void);
ASN1_BMPSTRING * ASN1_BMPSTRING_new(void);
void ASN1_BMPSTRING_free(ASN1_BMPSTRING * a);
ASN1_BMPSTRING * d2i_ASN1_BMPSTRING(ASN1_BMPSTRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_BMPSTRING(ASN1_BMPSTRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_BMPSTRING_it(void);
int UTF8_getc(const unsigned char * str, int len, unsigned long * val);
int UTF8_putc(unsigned char * str, int len, unsigned long value);
ASN1_STRING * ASN1_PRINTABLE_new(void);
void ASN1_PRINTABLE_free(ASN1_STRING * a);
ASN1_STRING * d2i_ASN1_PRINTABLE(ASN1_STRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_PRINTABLE(ASN1_STRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_PRINTABLE_it(void);
ASN1_STRING * DIRECTORYSTRING_new(void);
void DIRECTORYSTRING_free(ASN1_STRING * a);
ASN1_STRING * d2i_DIRECTORYSTRING(ASN1_STRING ** a, const unsigned char ** in, long len);
int i2d_DIRECTORYSTRING(ASN1_STRING * a, unsigned char ** out);
const ASN1_ITEM * DIRECTORYSTRING_it(void);
ASN1_STRING * DISPLAYTEXT_new(void);
void DISPLAYTEXT_free(ASN1_STRING * a);
ASN1_STRING * d2i_DISPLAYTEXT(ASN1_STRING ** a, const unsigned char ** in, long len);
int i2d_DISPLAYTEXT(ASN1_STRING * a, unsigned char ** out);
const ASN1_ITEM * DISPLAYTEXT_it(void);
ASN1_PRINTABLESTRING * ASN1_PRINTABLESTRING_new(void);
void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING * a);
ASN1_PRINTABLESTRING * d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_PRINTABLESTRING_it(void);
ASN1_T61STRING * ASN1_T61STRING_new(void);
void ASN1_T61STRING_free(ASN1_T61STRING * a);
ASN1_T61STRING * d2i_ASN1_T61STRING(ASN1_T61STRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_T61STRING(ASN1_T61STRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_T61STRING_it(void);
ASN1_IA5STRING * ASN1_IA5STRING_new(void);
void ASN1_IA5STRING_free(ASN1_IA5STRING * a);
ASN1_IA5STRING * d2i_ASN1_IA5STRING(ASN1_IA5STRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_IA5STRING(ASN1_IA5STRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_IA5STRING_it(void);
ASN1_GENERALSTRING * ASN1_GENERALSTRING_new(void);
void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING * a);
ASN1_GENERALSTRING * d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING ** a, const unsigned char ** in, long len);
int i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING * a, unsigned char ** out);
const ASN1_ITEM * ASN1_GENERALSTRING_it(void);
ASN1_UTCTIME * ASN1_UTCTIME_new(void);
void ASN1_UTCTIME_free(ASN1_UTCTIME * a);
ASN1_UTCTIME * d2i_ASN1_UTCTIME(ASN1_UTCTIME ** a, const unsigned char ** in, long len);
int i2d_ASN1_UTCTIME(ASN1_UTCTIME * a, unsigned char ** out);
const ASN1_ITEM * ASN1_UTCTIME_it(void);
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_new(void);
void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME * a);
ASN1_GENERALIZEDTIME * d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME ** a, const unsigned char ** in, long len);
int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME * a, unsigned char ** out);
const ASN1_ITEM * ASN1_GENERALIZEDTIME_it(void);
ASN1_TIME * ASN1_TIME_new(void);
void ASN1_TIME_free(ASN1_TIME * a);
ASN1_TIME * d2i_ASN1_TIME(ASN1_TIME ** a, const unsigned char ** in, long len);
int i2d_ASN1_TIME(ASN1_TIME * a, unsigned char ** out);
const ASN1_ITEM * ASN1_TIME_it(void);
ASN1_TIME * ASN1_TIME_set(ASN1_TIME * s, time_t t);
int ASN1_TIME_check(ASN1_TIME * t);
ASN1_GENERALIZEDTIME * ASN1_TIME_to_generalizedtime(ASN1_TIME * t, ASN1_GENERALIZEDTIME ** out);
int i2d_ASN1_SET(STACK_OF(OPENSSL_BLOCK) * a, unsigned char ** pp, i2d_of_void * i2d, int ex_tag, int ex_class, int is_set);
STACK_OF(OPENSSL_BLOCK) * d2i_ASN1_SET(STACK_OF(OPENSSL_BLOCK) ** a, const unsigned char ** pp, long length, d2i_of_void * d2i, void (*free_func)(OPENSSL_BLOCK), int ex_tag, int ex_class);
int i2a_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * a);
int a2i_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * bs, char * buf, int size);
int i2a_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * a);
int a2i_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * bs, char * buf, int size);
int i2a_ASN1_OBJECT(BIO * bp, ASN1_OBJECT * a);
int a2i_ASN1_STRING(BIO * bp, ASN1_STRING * bs, char * buf, int size);
int i2a_ASN1_STRING(BIO * bp, ASN1_STRING * a, int type);
int i2t_ASN1_OBJECT(char * buf, int buf_len, ASN1_OBJECT * a);
int a2d_ASN1_OBJECT(unsigned char * out, int olen, const char * buf, int num);
ASN1_OBJECT * ASN1_OBJECT_create(int nid, unsigned char * data, int len, const char * sn, const char * ln);
int ASN1_INTEGER_set(ASN1_INTEGER * a, long v);
long ASN1_INTEGER_get(ASN1_INTEGER * a);
ASN1_INTEGER * BN_to_ASN1_INTEGER(BIGNUM * bn, ASN1_INTEGER * ai);
BIGNUM * ASN1_INTEGER_to_BN(ASN1_INTEGER * ai, BIGNUM * bn);
int ASN1_ENUMERATED_set(ASN1_ENUMERATED * a, long v);
long ASN1_ENUMERATED_get(ASN1_ENUMERATED * a);
ASN1_ENUMERATED * BN_to_ASN1_ENUMERATED(BIGNUM * bn, ASN1_ENUMERATED * ai);
BIGNUM * ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED * ai, BIGNUM * bn);
int ASN1_PRINTABLE_type(const unsigned char * s, int max);
int i2d_ASN1_bytes(ASN1_STRING * a, unsigned char ** pp, int tag, int xclass);
ASN1_STRING * d2i_ASN1_bytes(ASN1_STRING ** a, const unsigned char ** pp, long length, int Ptag, int Pclass);
unsigned long ASN1_tag2bit(int tag);
ASN1_STRING * d2i_ASN1_type_bytes(ASN1_STRING ** a, const unsigned char ** pp, long length, int type);
int asn1_Finish(ASN1_CTX * c);
int ASN1_get_object(const unsigned char ** pp, long * plength, int * ptag, int * pclass, long omax);
int ASN1_check_infinite_end(unsigned char ** p, long len);
void ASN1_put_object(unsigned char ** pp, int constructed, int length, int tag, int xclass);
int ASN1_object_size(int constructed, int length, int tag);
void * ASN1_dup(i2d_of_void * i2d, d2i_of_void * d2i, char * x);
void * ASN1_item_dup(const ASN1_ITEM * it, void * x);
int ASN1_STRING_to_UTF8(unsigned char ** out, ASN1_STRING * in);
void * ASN1_d2i_bio(void * (*xnew)(void), d2i_of_void * d2i, BIO * in, void ** x);
void * ASN1_item_d2i_bio(const ASN1_ITEM * it, BIO * in, void * x);
int ASN1_i2d_bio(i2d_of_void * i2d, BIO * out, unsigned char * x);
int ASN1_item_i2d_bio(const ASN1_ITEM * it, BIO * out, void * x);
int ASN1_UTCTIME_print(BIO * fp, ASN1_UTCTIME * a);
int ASN1_GENERALIZEDTIME_print(BIO * fp, ASN1_GENERALIZEDTIME * a);
int ASN1_TIME_print(BIO * fp, ASN1_TIME * a);
int ASN1_STRING_print(BIO * bp, ASN1_STRING * v);
int ASN1_STRING_print_ex(BIO * out, ASN1_STRING * str, unsigned long flags);
int ASN1_parse(BIO * bp, unsigned char * pp, long len, int indent);
int ASN1_parse_dump(BIO * bp, unsigned char * pp, long len, int indent, int dump);
const char * ASN1_tag2str(int tag);
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING * s);
int ASN1_TYPE_set_octetstring(ASN1_TYPE * a, unsigned char * data, int len);
int ASN1_TYPE_get_octetstring(ASN1_TYPE * a, unsigned char * data, int max_len);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE * a, long num, unsigned char * data, int len);
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE * a, long * num, unsigned char * data, int max_len);
STACK_OF(OPENSSL_BLOCK) * ASN1_seq_unpack(const unsigned char * buf, int len, d2i_of_void * d2i, void (*free_func)(OPENSSL_BLOCK));
unsigned char * ASN1_seq_pack(STACK_OF(OPENSSL_BLOCK) * safes, i2d_of_void * i2d, unsigned char ** buf, int * len);
void * ASN1_unpack_string(ASN1_STRING * oct, d2i_of_void * d2i);
void * ASN1_item_unpack(ASN1_STRING * oct, const ASN1_ITEM * it);
ASN1_STRING * ASN1_pack_string(void * obj, int (*i2d)(), ASN1_OCTET_STRING ** oct);
ASN1_STRING * ASN1_item_pack(void * obj, const ASN1_ITEM * it, ASN1_OCTET_STRING ** oct);
void ASN1_STRING_set_default_mask(unsigned long mask);
int ASN1_STRING_set_default_mask_asc(char * p);
unsigned long ASN1_STRING_get_default_mask(void);
int ASN1_mbstring_copy(ASN1_STRING ** out, const unsigned char * in, int len, int inform, unsigned long mask);
int ASN1_mbstring_ncopy(ASN1_STRING ** out, const unsigned char * in, int len, int inform, unsigned long mask, long minsize, long maxsize);
ASN1_STRING * ASN1_STRING_set_by_NID(ASN1_STRING ** out, const unsigned char * in, int inlen, int inform, int nid);
ASN1_STRING_TABLE * ASN1_STRING_TABLE_get(int nid);
int ASN1_STRING_TABLE_add(int a, long b, long c, unsigned long d, unsigned long e);
void ASN1_STRING_TABLE_cleanup(void);
ASN1_VALUE * ASN1_item_new(const ASN1_ITEM * it);
void ASN1_item_free(ASN1_VALUE * val, const ASN1_ITEM * it);
ASN1_VALUE * ASN1_item_d2i(ASN1_VALUE ** val, const unsigned char ** in, long len, const ASN1_ITEM * it);
int ASN1_item_i2d(ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it);
void ASN1_add_oid_module(void);
void ERR_load_ASN1_strings(void);
int asn1_GetSequence(ASN1_const_CTX * c, long * length);
void asn1_add_error(unsigned char * address, int offset);
const ASN1_ITEM * ASN1_BOOLEAN_it(void);
const ASN1_ITEM * ASN1_TBOOLEAN_it(void);
const ASN1_ITEM * ASN1_FBOOLEAN_it(void);
const ASN1_ITEM * ASN1_SEQUENCE_it(void);
const ASN1_ITEM * CBIGNUM_it(void);
const ASN1_ITEM * BIGNUM_it(void);
const ASN1_ITEM * LONG_it(void);
const ASN1_ITEM * ZLONG_it(void);
int ASN1_item_ex_new(ASN1_VALUE ** pval, const ASN1_ITEM * it);
void ASN1_item_ex_free(ASN1_VALUE ** pval, const ASN1_ITEM * it);
int ASN1_template_new(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt);
int ASN1_primitive_new(ASN1_VALUE ** pval, const ASN1_ITEM * it);
void ASN1_template_free(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt);
int ASN1_template_d2i(ASN1_VALUE ** pval, const unsigned char ** in, long len, const ASN1_TEMPLATE * tt);
int ASN1_item_ex_d2i(ASN1_VALUE ** pval, const unsigned char ** in, long len, const ASN1_ITEM * it, int tag, int aclass, char opt, ASN1_TLC * ctx);
int ASN1_item_ex_i2d(ASN1_VALUE ** pval, unsigned char ** out, const ASN1_ITEM * it, int tag, int aclass);
int ASN1_template_i2d(ASN1_VALUE ** pval, unsigned char ** out, const ASN1_TEMPLATE * tt);
void ASN1_primitive_free(ASN1_VALUE ** pval, const ASN1_ITEM * it);
int asn1_ex_i2c(ASN1_VALUE ** pval, unsigned char * cont, int * putype, const ASN1_ITEM * it);
int asn1_ex_c2i(ASN1_VALUE ** pval, unsigned char * cont, int len, int utype, char * free_cont, const ASN1_ITEM * it);
int asn1_get_choice_selector(ASN1_VALUE ** pval, const ASN1_ITEM * it);
int asn1_set_choice_selector(ASN1_VALUE ** pval, int value, const ASN1_ITEM * it);
ASN1_VALUE ** asn1_get_field_ptr(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt);
const ASN1_TEMPLATE * asn1_do_adb(ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt, int nullerr);
int asn1_do_lock(ASN1_VALUE ** pval, int op, const ASN1_ITEM * it);
void asn1_enc_init(ASN1_VALUE ** pval, const ASN1_ITEM * it);
void asn1_enc_free(ASN1_VALUE ** pval, const ASN1_ITEM * it);
int asn1_enc_restore(int * len, unsigned char ** out, ASN1_VALUE ** pval, const ASN1_ITEM * it);
int asn1_enc_save(ASN1_VALUE ** pval, unsigned char * in, int inlen, const ASN1_ITEM * it);
size_t BIO_ctrl_pending(BIO * b);
size_t BIO_ctrl_wpending(BIO * b);
size_t BIO_ctrl_get_write_guarantee(BIO * b);
size_t BIO_ctrl_get_read_request(BIO * b);
int BIO_ctrl_reset_read_request(BIO * b);
int BIO_set_ex_data(BIO * bio, int idx, void * data);
void * BIO_get_ex_data(BIO * bio, int idx);
int BIO_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
unsigned long BIO_number_read(BIO * bio);
unsigned long BIO_number_written(BIO * bio);
BIO_METHOD * BIO_s_file(void);
BIO * BIO_new_file(const char * filename, const char * mode);
BIO * BIO_new_fp_amiga(BPTR stream, int close_flag);
BIO * BIO_new(BIO_METHOD * type);
int BIO_set(BIO * a, BIO_METHOD * type);
int BIO_free(BIO * a);
void BIO_vfree(BIO * a);
int BIO_read(BIO * b, void * data, int len);
int BIO_gets(BIO * bp, char * buf, int size);
int BIO_write(BIO * b, const void * data, int len);
int BIO_puts(BIO * bp, const char * buf);
int BIO_indent(BIO * b, int indent, int max);
long BIO_ctrl(BIO * bp, int cmd, long larg, void * parg);
long BIO_callback_ctrl(BIO * b, int cmd, void (*fp)(struct bio_st *,int,const char *,int,long,long));
char * BIO_ptr_ctrl(BIO * bp, int cmd, long larg);
long BIO_int_ctrl(BIO * bp, int cmd, long larg, int iarg);
BIO * BIO_push(BIO * b, BIO * append);
BIO * BIO_pop(BIO * b);
void BIO_free_all(BIO * a);
BIO * BIO_find_type(BIO * b, int bio_type);
BIO * BIO_next(BIO * b);
BIO * BIO_get_retry_BIO(BIO * bio, int * reason);
int BIO_get_retry_reason(BIO * bio);
BIO * BIO_dup_chain(BIO * in);
int BIO_nread0(BIO * bio, char ** buf);
int BIO_nread(BIO * bio, char ** buf, int num);
int BIO_nwrite0(BIO * bio, char ** buf);
int BIO_nwrite(BIO * bio, char ** buf, int num);
long BIO_debug_callback(BIO * bio, int cmd, const char * argp, int argi, long argl, long ret);
BIO_METHOD * BIO_s_mem(void);
BIO * BIO_new_mem_buf(void * buf, int len);
BIO_METHOD * BIO_s_socket(void);
BIO_METHOD * BIO_s_connect(void);
BIO_METHOD * BIO_s_accept(void);
BIO_METHOD * BIO_s_fd(void);
BIO_METHOD * BIO_s_log(void);
BIO_METHOD * BIO_s_bio(void);
BIO_METHOD * BIO_s_null(void);
BIO_METHOD * BIO_f_null(void);
BIO_METHOD * BIO_f_buffer(void);
BIO_METHOD * BIO_f_nbio_test(void);
int BIO_sock_should_retry(int i);
int BIO_sock_non_fatal_error(int error);
int BIO_fd_should_retry(int i);
int BIO_fd_non_fatal_error(int error);
int BIO_dump(BIO * b, const char * bytes, int len);
int BIO_dump_indent(BIO * b, const char * bytes, int len, int indent);
struct hostent * BIO_gethostbyname(const char * name);
int BIO_sock_error(int sock);
int BIO_socket_ioctl(int fd, long type, void * arg);
int BIO_socket_nbio(int fd, int mode);
int BIO_get_port(const char * str, unsigned short * port_ptr);
int BIO_get_host_ip(const char * str, unsigned char * ip);
int BIO_get_accept_socket(char * host_port, int mode);
int BIO_accept(int sock, char ** ip_port);
int BIO_sock_init(void);
void BIO_sock_cleanup(void);
int BIO_set_tcp_ndelay(int sock, int turn_on);
BIO * BIO_new_socket(int sock, int close_flag);
BIO * BIO_new_fd(int fd, int close_flag);
BIO * BIO_new_connect(char * host_port);
BIO * BIO_new_accept(char * host_port);
int BIO_new_bio_pair(BIO ** bio1, size_t writebuf1, BIO ** bio2, size_t writebuf2);
void BIO_copy_next_retry(BIO * b);
int BIO_vprintf(BIO * bio, const char * format, long * args);
int BIO_printf(BIO * bio, const char * format, long dummy, ...);
int BIO_vsnprintf(char * buf, size_t n, const char * format, long * args);
int BIO_snprintf(char * buf, size_t n, const char * format, long dummy, ...);
void ERR_load_BIO_strings(void);
const BIGNUM * BN_value_one(void);
char * BN_options(void);
BN_CTX * BN_CTX_new(void);
void BN_CTX_init(BN_CTX * c);
void BN_CTX_free(BN_CTX * c);
void BN_CTX_start(BN_CTX * ctx);
BIGNUM * BN_CTX_get(BN_CTX * ctx);
void BN_CTX_end(BN_CTX * ctx);
int BN_rand(BIGNUM * rnd, int bits, int top, int bottom);
int BN_pseudo_rand(BIGNUM * rnd, int bits, int top, int bottom);
int BN_rand_range(BIGNUM * rnd, BIGNUM * range);
int BN_pseudo_rand_range(BIGNUM * rnd, BIGNUM * range);
int BN_num_bits(const BIGNUM * a);
int BN_num_bits_word(BN_ULONG a);
BIGNUM * BN_new(void);
void BN_init(BIGNUM * a);
void BN_clear_free(BIGNUM * a);
BIGNUM * BN_copy(BIGNUM * a, const BIGNUM * b);
void BN_swap(BIGNUM * a, BIGNUM * b);
BIGNUM * BN_bin2bn(const unsigned char * s, int len, BIGNUM * ret);
int BN_bn2bin(const BIGNUM * a, unsigned char * to);
BIGNUM * BN_mpi2bn(const unsigned char * s, int len, BIGNUM * ret);
int BN_bn2mpi(const BIGNUM * a, unsigned char * to);
int BN_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_usub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_uadd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int BN_sqr(BIGNUM * r, const BIGNUM * a, BN_CTX * ctx);
int BN_div(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx);
int BN_nnmod(BIGNUM * r, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx);
int BN_mod_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_add_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m);
int BN_mod_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_sub_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m);
int BN_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_lshift1(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_lshift1_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * m);
int BN_mod_lshift(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_lshift_quick(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m);
BN_ULONG BN_mod_word(const BIGNUM * a, BN_ULONG w);
BN_ULONG BN_div_word(BIGNUM * a, BN_ULONG w);
int BN_mul_word(BIGNUM * a, BN_ULONG w);
int BN_add_word(BIGNUM * a, BN_ULONG w);
int BN_sub_word(BIGNUM * a, BN_ULONG w);
int BN_set_word(BIGNUM * a, BN_ULONG w);
BN_ULONG BN_get_word(const BIGNUM * a);
int BN_cmp(const BIGNUM * a, const BIGNUM * b);
void BN_free(BIGNUM * a);
int BN_is_bit_set(const BIGNUM * a, int n);
int BN_lshift(BIGNUM * r, const BIGNUM * a, int n);
int BN_lshift1(BIGNUM * r, const BIGNUM * a);
int BN_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
int BN_mod_exp_mont(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int BN_mod_exp_mont_word(BIGNUM * r, BN_ULONG a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int BN_mod_exp2_mont(BIGNUM * r, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * a2, const BIGNUM * p2, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int BN_mod_exp_simple(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
int BN_mask_bits(BIGNUM * a, int n);
int BN_print(BIO * fp, const BIGNUM * a);
int BN_reciprocal(BIGNUM * r, const BIGNUM * m, int len, BN_CTX * ctx);
int BN_rshift(BIGNUM * r, const BIGNUM * a, int n);
int BN_rshift1(BIGNUM * r, const BIGNUM * a);
void BN_clear(BIGNUM * a);
BIGNUM * BN_dup(const BIGNUM * a);
int BN_ucmp(const BIGNUM * a, const BIGNUM * b);
int BN_set_bit(BIGNUM * a, int n);
int BN_clear_bit(BIGNUM * a, int n);
char * BN_bn2hex(const BIGNUM * a);
char * BN_bn2dec(const BIGNUM * a);
int BN_hex2bn(BIGNUM ** a, const char * str);
int BN_dec2bn(BIGNUM ** a, const char * str);
int BN_gcd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int BN_kronecker(const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
BIGNUM * BN_mod_inverse(BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx);
BIGNUM * BN_mod_sqrt(BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx);
BIGNUM * BN_generate_prime(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, void (*callback)(int,int,void *), void * cb_arg);
int BN_is_prime(const BIGNUM * p, int nchecks, void (*callback)(int,int,void *), BN_CTX * ctx, void * cb_arg);
int BN_is_prime_fasttest(const BIGNUM * p, int nchecks, void (*callback)(int,int,void *), BN_CTX * ctx, void * cb_arg, int do_trial_division);
BN_MONT_CTX * BN_MONT_CTX_new(void);
void BN_MONT_CTX_init(BN_MONT_CTX * ctx);
int BN_mod_mul_montgomery(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_MONT_CTX * mont, BN_CTX * ctx);
int BN_from_montgomery(BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx);
void BN_MONT_CTX_free(BN_MONT_CTX * mont);
int BN_MONT_CTX_set(BN_MONT_CTX * mont, const BIGNUM * mod, BN_CTX * ctx);
BN_MONT_CTX * BN_MONT_CTX_copy(BN_MONT_CTX * to, BN_MONT_CTX * from);
BN_BLINDING * BN_BLINDING_new(BIGNUM * A, BIGNUM * Ai, BIGNUM * mod);
void BN_BLINDING_free(BN_BLINDING * b);
int BN_BLINDING_update(BN_BLINDING * b, BN_CTX * ctx);
int BN_BLINDING_convert(BIGNUM * n, BN_BLINDING * r, BN_CTX * ctx);
int BN_BLINDING_invert(BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx);
void BN_set_params(int mul, int high, int low, int mont);
int BN_get_params(int which);
void BN_RECP_CTX_init(BN_RECP_CTX * recp);
BN_RECP_CTX * BN_RECP_CTX_new(void);
void BN_RECP_CTX_free(BN_RECP_CTX * recp);
int BN_RECP_CTX_set(BN_RECP_CTX * recp, const BIGNUM * rdiv, BN_CTX * ctx);
int BN_mod_mul_reciprocal(BIGNUM * r, const BIGNUM * x, const BIGNUM * y, BN_RECP_CTX * recp, BN_CTX * ctx);
int BN_mod_exp_recp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
int BN_div_recp(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, BN_RECP_CTX * recp, BN_CTX * ctx);
BIGNUM * bn_expand2(BIGNUM * a, int words);
BIGNUM * bn_dup_expand(const BIGNUM * a, int words);
BN_ULONG bn_mul_add_words(BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w);
BN_ULONG bn_mul_words(BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w);
void bn_sqr_words(BN_ULONG * rp, const BN_ULONG * ap, int num);
BN_ULONG bn_div_words(BN_ULONG h, BN_ULONG l, BN_ULONG d);
BN_ULONG bn_add_words(BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num);
BN_ULONG bn_sub_words(BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num);
int BN_bntest_rand(BIGNUM * rnd, int bits, int top, int bottom);
void ERR_load_BN_strings(void);
BUF_MEM * BUF_MEM_new(void);
void BUF_MEM_free(BUF_MEM * a);
int BUF_MEM_grow(BUF_MEM * str, int len);
int BUF_MEM_grow_clean(BUF_MEM * str, int len);
char * BUF_strdup(const char * str);
size_t BUF_strlcpy(char * dst, const char * src, size_t siz);
size_t BUF_strlcat(char * dst, const char * src, size_t siz);
void ERR_load_BUF_strings(void);
COMP_CTX * COMP_CTX_new(COMP_METHOD * meth);
void COMP_CTX_free(COMP_CTX * ctx);
int COMP_compress_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in, int ilen);
int COMP_expand_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in, int ilen);
COMP_METHOD * COMP_rle(void);
COMP_METHOD * COMP_zlib(void);
void ERR_load_COMP_strings(void);
int CONF_set_default_method(CONF_METHOD * meth);
void CONF_set_nconf(CONF * conf, LHASH_OF(CONF_VALUE) * hash);
LHASH_OF(CONF_VALUE) * CONF_load(LHASH_OF(CONF_VALUE) * conf, const char * file, long * eline);
LHASH_OF(CONF_VALUE) * CONF_load_bio(LHASH_OF(CONF_VALUE) * conf, BIO * bp, long * eline);
STACK_OF(CONF_VALUE) * CONF_get_section(LHASH_OF(CONF_VALUE) * conf, const char * section);
char * CONF_get_string(LHASH_OF(CONF_VALUE) * conf, const char * group, const char * name);
long CONF_get_number(LHASH_OF(CONF_VALUE) * conf, const char * group, const char * name);
void CONF_free(LHASH_OF(CONF_VALUE) * conf);
int CONF_dump_bio(LHASH_OF(CONF_VALUE) * conf, BIO * out);
void OPENSSL_config(const char * config_name);
void OPENSSL_no_config(void);
CONF * NCONF_new(CONF_METHOD * meth);
CONF_METHOD * NCONF_default(void);
CONF_METHOD * NCONF_WIN32(void);
void NCONF_free(CONF * conf);
void NCONF_free_data(CONF * conf);
int NCONF_load(CONF * conf, const char * file, long * eline);
int NCONF_load_bio(CONF * conf, BIO * bp, long * eline);
STACK_OF(CONF_VALUE) * NCONF_get_section(const CONF * conf, const char * section);
char * NCONF_get_string(const CONF * conf, const char * group, const char * name);
int NCONF_get_number_e(const CONF * conf, const char * group, const char * name, long * result);
int NCONF_dump_bio(const CONF * conf, BIO * out);
int CONF_modules_load(const CONF * cnf, const char * appname, unsigned long flags);
int CONF_modules_load_file(const char * filename, const char * appname, unsigned long flags);
void CONF_modules_unload(int all);
void CONF_modules_finish(void);
void CONF_modules_free(void);
int CONF_module_add(const char * name, conf_init_func * ifunc, conf_finish_func * ffunc);
const char * CONF_imodule_get_name(const CONF_IMODULE * md);
const char * CONF_imodule_get_value(const CONF_IMODULE * md);
void * CONF_imodule_get_usr_data(const CONF_IMODULE * md);
void CONF_imodule_set_usr_data(CONF_IMODULE * md, void * usr_data);
CONF_MODULE * CONF_imodule_get_module(const CONF_IMODULE * md);
unsigned long CONF_imodule_get_flags(const CONF_IMODULE * md);
void CONF_imodule_set_flags(CONF_IMODULE * md, unsigned long flags);
void * CONF_module_get_usr_data(CONF_MODULE * pmod);
void CONF_module_set_usr_data(CONF_MODULE * pmod, void * usr_data);
char * CONF_get1_default_config_file(void);
int CONF_parse_list(const char * list, int sep, int nospc, int (*list_cb)(const char *elem,int len,void *usr), void * arg);
void OPENSSL_load_builtin_modules(void);
void ERR_load_CONF_strings(void);
CONF_VALUE * _CONF_new_section(CONF * conf, const char * section);
CONF_VALUE * _CONF_get_section(const CONF * conf, const char * section);
STACK_OF(CONF_VALUE) * _CONF_get_section_values(const CONF * conf, const char * section);
int _CONF_add_string(CONF * conf, CONF_VALUE * section, CONF_VALUE * value);
char * _CONF_get_string(const CONF * conf, const char * section, const char * name);
int _CONF_new_data(CONF * conf);
void _CONF_free_data(CONF * conf);
int CRYPTO_mem_ctrl(int mode);
int CRYPTO_is_mem_check_on(void);
const char * SSLeay_version(int type);
unsigned long SSLeay(void);
int OPENSSL_issetugid(void);
const CRYPTO_EX_DATA_IMPL * CRYPTO_get_ex_data_implementation(void);
int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL * i);
int CRYPTO_ex_data_new_class(void);
int CRYPTO_get_ex_new_index(int class_index, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int CRYPTO_new_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad);
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA * to, CRYPTO_EX_DATA * from);
void CRYPTO_free_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad);
int CRYPTO_set_ex_data(CRYPTO_EX_DATA * ad, int idx, void * val);
void * CRYPTO_get_ex_data(const CRYPTO_EX_DATA * ad, int idx);
void CRYPTO_cleanup_all_ex_data(void);
int CRYPTO_get_new_lockid(char * name);
int CRYPTO_num_locks(void);
void CRYPTO_lock(int mode, int type, const char * file, int line);
void CRYPTO_set_locking_callback(void (*func)(int mode,int type,const char *file,int line));
void (*)(int mode, int type, const char *file, int line) CRYPTO_get_locking_callback(void);
void CRYPTO_set_add_lock_callback(int (*func)(int *num,int mount,int type,const char *file,int line));
int (*)(int *num, int mount, int type, const char *file, int line) CRYPTO_get_add_lock_callback(void);
void CRYPTO_set_id_callback(unsigned long (*func)(void));
unsigned long (*)(void) CRYPTO_get_id_callback(void);
unsigned long CRYPTO_thread_id(void);
const char * CRYPTO_get_lock_name(int type);
int CRYPTO_add_lock(int * pointer, int amount, int type, const char * file, int line);
int CRYPTO_get_new_dynlockid(void);
void CRYPTO_destroy_dynlockid(int i);
struct CRYPTO_dynlock_value * CRYPTO_get_dynlock_value(int i);
void CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value * (*dyn_create_function)(const char *file,int line));
void CRYPTO_set_dynlock_lock_callback(void (*dyn_lock_function)(int mode,struct CRYPTO_dynlock_value *l,const char *file,int line));
void CRYPTO_set_dynlock_destroy_callback(void (*dyn_destroy_function)(struct CRYPTO_dynlock_value *l,const char *file,int line));
struct CRYPTO_dynlock_value * (*)(const char *file, int line) CRYPTO_get_dynlock_create_callback(void);
void (*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line) CRYPTO_get_dynlock_lock_callback(void);
void (*)(struct CRYPTO_dynlock_value *l, const char *file, int line) CRYPTO_get_dynlock_destroy_callback(void);
int CRYPTO_set_mem_functions(void * (*m)(size_t), void * (*r)(void *,size_t), void (*f)(void *));
int CRYPTO_set_locked_mem_functions(void * (*m)(size_t), void (*free_func)(void *));
int CRYPTO_set_mem_ex_functions(void * (*m)(size_t,const char *,int), void * (*r)(void *,size_t,const char *,int), void (*f)(void *));
int CRYPTO_set_locked_mem_ex_functions(void * (*m)(size_t,const char *,int), void (*free_func)(void *));
int CRYPTO_set_mem_debug_functions(void (*m)(void *,int,const char *,int,int), void (*r)(void *,void *,int,const char *,int,int), void (*f)(void *,int), void (*so)(long), long (*go)(void));
void CRYPTO_get_mem_functions(void * (**m)(size_t), void * (**r)(void *,size_t), void (**f)(void *));
void CRYPTO_get_locked_mem_functions(void * (**m)(size_t), void (**f)(void *));
void CRYPTO_get_mem_ex_functions(void * (**m)(size_t,const char *,int), void * (**r)(void *,size_t,const char *,int), void (**f)(void *));
void CRYPTO_get_locked_mem_ex_functions(void * (**m)(size_t,const char *,int), void (**f)(void *));
void CRYPTO_get_mem_debug_functions(void (**m)(void *,int,const char *,int,int), void (**r)(void *,void *,int,const char *,int,int), void (**f)(void *,int), void (**so)(long), long (**go)(void));
void * CRYPTO_malloc_locked(int num, const char * file, int line);
void CRYPTO_free_locked(void * a);
void * CRYPTO_malloc(int num, const char * file, int line);
void CRYPTO_free(void * a);
void * CRYPTO_realloc(void * addr, int num, const char * file, int line);
void * CRYPTO_realloc_clean(void * addr, int old_num, int num, const char * file, int line);
void * CRYPTO_remalloc(void * addr, int num, const char * file, int line);
void OPENSSL_cleanse(void * ptr, size_t len);
void CRYPTO_set_mem_debug_options(long bits);
long CRYPTO_get_mem_debug_options(void);
int CRYPTO_push_info_(const char * info, const char * file, int line);
int CRYPTO_pop_info(void);
int CRYPTO_remove_all_info(void);
void CRYPTO_dbg_malloc(void * addr, int num, const char * file, int line, int before_p);
void CRYPTO_dbg_realloc(void * addr1, void * addr2, int num, const char * file, int line, int before_p);
void CRYPTO_dbg_free(void * addr, int before_p);
void CRYPTO_dbg_set_options(long bits);
long CRYPTO_dbg_get_options(void);
void CRYPTO_mem_leaks(struct bio_st * bio);
void CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB * cb);
void OpenSSLDie(const char * file, int line, const char * assertion);
void ERR_load_CRYPTO_strings(void);
DSO * DSO_new(void);
DSO * DSO_new_method(DSO_METHOD * method);
int DSO_free(DSO * dso);
int DSO_flags(DSO * dso);
int DSO_up_ref(DSO * dso);
long DSO_ctrl(DSO * dso, int cmd, long larg, void * parg);
int DSO_set_name_converter(DSO * dso, DSO_NAME_CONVERTER_FUNC cb, DSO_NAME_CONVERTER_FUNC * oldcb);
const char * DSO_get_filename(DSO * dso);
int DSO_set_filename(DSO * dso, const char * filename);
char * DSO_convert_filename(DSO * dso, const char * filename);
const char * DSO_get_loaded_filename(DSO * dso);
void DSO_set_default_method(DSO_METHOD * meth);
DSO_METHOD * DSO_get_default_method(void);
DSO_METHOD * DSO_get_method(DSO * dso);
DSO_METHOD * DSO_set_method(DSO * dso, DSO_METHOD * meth);
DSO * DSO_load(DSO * dso, const char * filename, DSO_METHOD * meth, int flags);
void * DSO_bind_var(DSO * dso, const char * symname);
DSO_FUNC_TYPE DSO_bind_func(DSO * dso, const char * symname);
DSO_METHOD * DSO_METHOD_openssl(void);
DSO_METHOD * DSO_METHOD_null(void);
DSO_METHOD * DSO_METHOD_dlfcn(void);
DSO_METHOD * DSO_METHOD_dl(void);
DSO_METHOD * DSO_METHOD_win32(void);
DSO_METHOD * DSO_METHOD_vms(void);
void ERR_load_DSO_strings(void);
const EC_METHOD * EC_GFp_simple_method(void);
const EC_METHOD * EC_GFp_mont_method(void);
EC_GROUP * EC_GROUP_new(const EC_METHOD * a);
void EC_GROUP_free(EC_GROUP * a);
void EC_GROUP_clear_free(EC_GROUP * a);
int EC_GROUP_copy(EC_GROUP * a, const EC_GROUP * b);
const EC_METHOD * EC_GROUP_method_of(const EC_GROUP * a);
int EC_GROUP_set_curve_GFp(EC_GROUP * a1, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a2);
int EC_GROUP_get_curve_GFp(const EC_GROUP * a1, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * a2);
EC_GROUP * EC_GROUP_new_curve_GFp(const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a1);
int EC_GROUP_set_generator(EC_GROUP * a1, const EC_POINT * generator, const BIGNUM * order, const BIGNUM * cofactor);
const EC_POINT * EC_GROUP_get0_generator(const EC_GROUP * a1);
int EC_GROUP_get_order(const EC_GROUP * a1, BIGNUM * order, BN_CTX * a2);
int EC_GROUP_get_cofactor(const EC_GROUP * a1, BIGNUM * cofactor, BN_CTX * a2);
EC_POINT * EC_POINT_new(const EC_GROUP * a);
void EC_POINT_free(EC_POINT * a);
void EC_POINT_clear_free(EC_POINT * a);
int EC_POINT_copy(EC_POINT * a, const EC_POINT * b);
const EC_METHOD * EC_POINT_method_of(const EC_POINT * a);
int EC_POINT_set_to_infinity(const EC_GROUP * a, EC_POINT * b);
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y, const BIGNUM * z, BN_CTX * a3);
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y, BIGNUM * z, BN_CTX * a3);
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y, BN_CTX * a3);
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y, BN_CTX * a3);
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, int y_bit, BN_CTX * a3);
size_t EC_POINT_point2oct(const EC_GROUP * a1, const EC_POINT * a2, point_conversion_form_t form, unsigned char * buf, size_t len, BN_CTX * a3);
int EC_POINT_oct2point(const EC_GROUP * a1, EC_POINT * a2, const unsigned char * buf, size_t len, BN_CTX * a3);
int EC_POINT_add(const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2);
int EC_POINT_dbl(const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, BN_CTX * a2);
int EC_POINT_invert(const EC_GROUP * a1, EC_POINT * a2, BN_CTX * a3);
int EC_POINT_is_at_infinity(const EC_GROUP * a, const EC_POINT * b);
int EC_POINT_is_on_curve(const EC_GROUP * a, const EC_POINT * b, BN_CTX * c);
int EC_POINT_cmp(const EC_GROUP * a1, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2);
int EC_POINT_make_affine(const EC_GROUP * a, EC_POINT * b, BN_CTX * c);
int EC_POINTs_make_affine(const EC_GROUP * a1, size_t num, EC_POINT ** a2, BN_CTX * a3);
int EC_POINTs_mul(const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, size_t num, const EC_POINT ** a3, const BIGNUM ** a4, BN_CTX * a5);
int EC_POINT_mul(const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, const EC_POINT * a3, const BIGNUM * a4, BN_CTX * a5);
int EC_GROUP_precompute_mult(EC_GROUP * a, BN_CTX * b);
void ERR_load_EC_strings(void);
void ERR_put_error(int lib, int func, int reason, const char * file, int line);
void ERR_set_error_data(char * data, int flags);
unsigned long ERR_get_error(void);
unsigned long ERR_get_error_line(const char ** file, int * line);
unsigned long ERR_get_error_line_data(const char ** file, int * line, const char ** data, int * flags);
unsigned long ERR_peek_error(void);
unsigned long ERR_peek_error_line(const char ** file, int * line);
unsigned long ERR_peek_error_line_data(const char ** file, int * line, const char ** data, int * flags);
unsigned long ERR_peek_last_error(void);
unsigned long ERR_peek_last_error_line(const char ** file, int * line);
unsigned long ERR_peek_last_error_line_data(const char ** file, int * line, const char ** data, int * flags);
void ERR_clear_error(void);
char * ERR_error_string(unsigned long e, char * buf);
void ERR_error_string_n(unsigned long e, char * buf, size_t len);
const char * ERR_lib_error_string(unsigned long e);
const char * ERR_func_error_string(unsigned long e);
const char * ERR_reason_error_string(unsigned long e);
void ERR_print_errors_cb(int (*cb)(const char *str,size_t len,void *u), void * u);
void ERR_print_errors(BIO * bp);
void ERR_add_error_vdata(int num, va_list args);
void ERR_add_error_data(int num, long dummy, ...);
void ERR_load_strings(int lib, ERR_STRING_DATA * str);
void ERR_unload_strings(int lib, ERR_STRING_DATA * str);
void ERR_load_ERR_strings(void);
void ERR_load_crypto_strings(void);
void ERR_free_strings(void);
void ERR_remove_state(unsigned long pid);
ERR_STATE * ERR_get_state(void);
LHASH_OF(ERR_STRING_DATA) * ERR_get_string_table(void);
LHASH_OF(ERR_STATE) * ERR_get_err_state_table(void);
void ERR_release_err_state_table(LHASH_OF(ERR_STATE) ** hash);
int ERR_get_next_error_library(void);
const ERR_FNS * ERR_get_implementation(void);
int ERR_set_implementation(const ERR_FNS * fns);
void EVP_MD_CTX_init(EVP_MD_CTX * ctx);
int EVP_MD_CTX_cleanup(EVP_MD_CTX * ctx);
EVP_MD_CTX * EVP_MD_CTX_create(void);
void EVP_MD_CTX_destroy(EVP_MD_CTX * ctx);
int EVP_MD_CTX_copy_ex(EVP_MD_CTX * out, const EVP_MD_CTX * in);
int EVP_DigestInit_ex(EVP_MD_CTX * ctx, const EVP_MD * type, ENGINE * impl);
int EVP_DigestUpdate(EVP_MD_CTX * ctx, const void * d, unsigned int cnt);
int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s);
int EVP_Digest(void * data, unsigned int count, unsigned char * md, unsigned int * size, const EVP_MD * type, ENGINE * impl);
int EVP_MD_CTX_copy(EVP_MD_CTX * out, const EVP_MD_CTX * in);
int EVP_DigestInit(EVP_MD_CTX * ctx, const EVP_MD * type);
int EVP_DigestFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s);
int EVP_read_pw_string(char * buf, int length, const char * prompt, int verify);
void EVP_set_pw_prompt(char * prompt);
char * EVP_get_pw_prompt(void);
int EVP_BytesToKey(const EVP_CIPHER * type, const EVP_MD * md, const unsigned char * salt, const unsigned char * data, int datal, int count, unsigned char * key, unsigned char * iv);
int EVP_EncryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv);
int EVP_EncryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv);
int EVP_EncryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl);
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
int EVP_EncryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
int EVP_DecryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv);
int EVP_DecryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv);
int EVP_DecryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl);
int EVP_DecryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
int EVP_CipherInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv, int enc);
int EVP_CipherInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv, int enc);
int EVP_CipherUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl);
int EVP_CipherFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
int EVP_CipherFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
int EVP_SignFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s, EVP_PKEY * pkey);
int EVP_VerifyFinal(EVP_MD_CTX * ctx, unsigned char * sigbuf, unsigned int siglen, EVP_PKEY * pkey);
int EVP_OpenInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char * ek, int ekl, unsigned char * iv, EVP_PKEY * priv);
int EVP_OpenFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
int EVP_SealInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char ** ek, int * ekl, unsigned char * iv, EVP_PKEY ** pubk, int npubk);
int EVP_SealFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
void EVP_EncodeInit(EVP_ENCODE_CTX * ctx);
void EVP_EncodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl, unsigned char * in, int inl);
void EVP_EncodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl);
int EVP_EncodeBlock(unsigned char * t, const unsigned char * f, int n);
void EVP_DecodeInit(EVP_ENCODE_CTX * ctx);
int EVP_DecodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl, unsigned char * in, int inl);
int EVP_DecodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl);
int EVP_DecodeBlock(unsigned char * t, const unsigned char * f, int n);
void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX * a);
int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX * a);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX * x, int keylen);
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX * c, int pad);
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX * ctx, int type, int arg, void * ptr);
BIO_METHOD * BIO_f_md(void);
BIO_METHOD * BIO_f_base64(void);
BIO_METHOD * BIO_f_cipher(void);
BIO_METHOD * BIO_f_reliable(void);
void BIO_set_cipher(BIO * b, const EVP_CIPHER * c, unsigned char * k, unsigned char * i, int enc);
const EVP_MD * EVP_md_null(void);
const EVP_MD * EVP_md2(void);
const EVP_MD * EVP_md4(void);
const EVP_MD * EVP_md5(void);
const EVP_MD * EVP_sha(void);
const EVP_MD * EVP_sha1(void);
const EVP_MD * EVP_dss(void);
const EVP_MD * EVP_dss1(void);
const EVP_MD * EVP_mdc2(void);
const EVP_MD * EVP_ripemd160(void);
const EVP_CIPHER * EVP_enc_null(void);
const EVP_CIPHER * EVP_des_ecb(void);
const EVP_CIPHER * EVP_des_ede(void);
const EVP_CIPHER * EVP_des_ede3(void);
const EVP_CIPHER * EVP_des_ede_ecb(void);
const EVP_CIPHER * EVP_des_ede3_ecb(void);
const EVP_CIPHER * EVP_des_cfb64(void);
const EVP_CIPHER * EVP_des_cfb1(void);
const EVP_CIPHER * EVP_des_cfb8(void);
const EVP_CIPHER * EVP_des_ede_cfb64(void);
const EVP_CIPHER * EVP_des_ede3_cfb64(void);
const EVP_CIPHER * EVP_des_ede3_cfb1(void);
const EVP_CIPHER * EVP_des_ede3_cfb8(void);
const EVP_CIPHER * EVP_des_ofb(void);
const EVP_CIPHER * EVP_des_ede_ofb(void);
const EVP_CIPHER * EVP_des_ede3_ofb(void);
const EVP_CIPHER * EVP_des_cbc(void);
const EVP_CIPHER * EVP_des_ede_cbc(void);
const EVP_CIPHER * EVP_des_ede3_cbc(void);
const EVP_CIPHER * EVP_desx_cbc(void);
const EVP_CIPHER * EVP_rc4(void);
const EVP_CIPHER * EVP_rc4_40(void);
const EVP_CIPHER * EVP_idea_ecb(void);
const EVP_CIPHER * EVP_idea_cfb64(void);
const EVP_CIPHER * EVP_idea_ofb(void);
const EVP_CIPHER * EVP_idea_cbc(void);
const EVP_CIPHER * EVP_rc2_ecb(void);
const EVP_CIPHER * EVP_rc2_cbc(void);
const EVP_CIPHER * EVP_rc2_40_cbc(void);
const EVP_CIPHER * EVP_rc2_64_cbc(void);
const EVP_CIPHER * EVP_rc2_cfb64(void);
const EVP_CIPHER * EVP_rc2_ofb(void);
const EVP_CIPHER * EVP_bf_ecb(void);
const EVP_CIPHER * EVP_bf_cbc(void);
const EVP_CIPHER * EVP_bf_cfb64(void);
const EVP_CIPHER * EVP_bf_ofb(void);
const EVP_CIPHER * EVP_cast5_ecb(void);
const EVP_CIPHER * EVP_cast5_cbc(void);
const EVP_CIPHER * EVP_cast5_cfb64(void);
const EVP_CIPHER * EVP_cast5_ofb(void);
const EVP_CIPHER * EVP_rc5_32_12_16_cbc(void);
const EVP_CIPHER * EVP_rc5_32_12_16_ecb(void);
const EVP_CIPHER * EVP_rc5_32_12_16_cfb64(void);
const EVP_CIPHER * EVP_rc5_32_12_16_ofb(void);
const EVP_CIPHER * EVP_aes_128_ecb(void);
const EVP_CIPHER * EVP_aes_128_cbc(void);
const EVP_CIPHER * EVP_aes_128_cfb1(void);
const EVP_CIPHER * EVP_aes_128_cfb8(void);
const EVP_CIPHER * EVP_aes_128_cfb128(void);
const EVP_CIPHER * EVP_aes_128_ofb(void);
const EVP_CIPHER * EVP_aes_192_ecb(void);
const EVP_CIPHER * EVP_aes_192_cbc(void);
const EVP_CIPHER * EVP_aes_192_cfb1(void);
const EVP_CIPHER * EVP_aes_192_cfb8(void);
const EVP_CIPHER * EVP_aes_192_cfb128(void);
const EVP_CIPHER * EVP_aes_192_ofb(void);
const EVP_CIPHER * EVP_aes_256_ecb(void);
const EVP_CIPHER * EVP_aes_256_cbc(void);
const EVP_CIPHER * EVP_aes_256_cfb1(void);
const EVP_CIPHER * EVP_aes_256_cfb8(void);
const EVP_CIPHER * EVP_aes_256_cfb128(void);
const EVP_CIPHER * EVP_aes_256_ofb(void);
void OPENSSL_add_all_algorithms_noconf(void);
void OPENSSL_add_all_algorithms_conf(void);
void OpenSSL_add_all_ciphers(void);
void OpenSSL_add_all_digests(void);
int EVP_add_cipher(const EVP_CIPHER * cipher);
int EVP_add_digest(const EVP_MD * digest);
const EVP_CIPHER * EVP_get_cipherbyname(const char * name);
const EVP_MD * EVP_get_digestbyname(const char * name);
void EVP_cleanup(void);
int EVP_PKEY_decrypt(EVP_PKEY_CTX * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen);
int EVP_PKEY_encrypt(EVP_PKEY_CTX * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen);
int EVP_PKEY_type(int type);
int EVP_PKEY_bits(EVP_PKEY * pkey);
int EVP_PKEY_size(EVP_PKEY * pkey);
int EVP_PKEY_assign(EVP_PKEY * pkey, int type, char * key);
int EVP_PKEY_set1_RSA(EVP_PKEY * pkey, struct rsa_st * key);
struct rsa_st * EVP_PKEY_get1_RSA(EVP_PKEY * pkey);
int EVP_PKEY_set1_DSA(EVP_PKEY * pkey, struct dsa_st * key);
struct dsa_st * EVP_PKEY_get1_DSA(EVP_PKEY * pkey);
int EVP_PKEY_set1_DH(EVP_PKEY * pkey, struct dh_st * key);
struct dh_st * EVP_PKEY_get1_DH(EVP_PKEY * pkey);
EVP_PKEY * EVP_PKEY_new(void);
void EVP_PKEY_free(EVP_PKEY * pkey);
EVP_PKEY * d2i_PublicKey(int type, EVP_PKEY ** a, const unsigned char ** pp, long length);
int i2d_PublicKey(EVP_PKEY * a, unsigned char ** pp);
EVP_PKEY * d2i_PrivateKey(int type, EVP_PKEY ** a, const unsigned char ** pp, long length);
EVP_PKEY * d2i_AutoPrivateKey(EVP_PKEY ** a, const unsigned char ** pp, long length);
int i2d_PrivateKey(EVP_PKEY * a, unsigned char ** pp);
int EVP_PKEY_copy_parameters(EVP_PKEY * to, EVP_PKEY * from);
int EVP_PKEY_missing_parameters(EVP_PKEY * pkey);
int EVP_PKEY_save_parameters(EVP_PKEY * pkey, int mode);
int EVP_PKEY_cmp_parameters(EVP_PKEY * a, EVP_PKEY * b);
int EVP_CIPHER_type(const EVP_CIPHER * ctx);
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type);
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de);
int PKCS5_PBKDF2_HMAC_SHA1(const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, int keylen, unsigned char * out);
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de);
void PKCS5_PBE_add(void);
int EVP_PBE_CipherInit(ASN1_OBJECT * pbe_obj, const char * pass, int passlen, ASN1_TYPE * param, EVP_CIPHER_CTX * ctx, int en_de);
int EVP_PBE_alg_add(int nid, const EVP_CIPHER * cipher, const EVP_MD * md, EVP_PBE_KEYGEN * keygen);
void EVP_PBE_cleanup(void);
void ERR_load_EVP_strings(void);
void HMAC_CTX_init(HMAC_CTX * ctx);
void HMAC_CTX_cleanup(HMAC_CTX * ctx);
void HMAC_Init(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md);
void HMAC_Init_ex(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md, ENGINE * impl);
void HMAC_Update(HMAC_CTX * ctx, const unsigned char * data, int len);
void HMAC_Final(HMAC_CTX * ctx, unsigned char * md, unsigned int * len);
unsigned char * HMAC(const EVP_MD * evp_md, const void * key, int key_len, const unsigned char * d, int n, unsigned char * md, unsigned int * md_len);
KRB5_ENCDATA * KRB5_ENCDATA_new(void);
void KRB5_ENCDATA_free(KRB5_ENCDATA * a);
KRB5_ENCDATA * d2i_KRB5_ENCDATA(KRB5_ENCDATA ** a, const unsigned char ** in, long len);
int i2d_KRB5_ENCDATA(KRB5_ENCDATA * a, unsigned char ** out);
const ASN1_ITEM * KRB5_ENCDATA_it(void);
KRB5_PRINCNAME * KRB5_PRINCNAME_new(void);
void KRB5_PRINCNAME_free(KRB5_PRINCNAME * a);
KRB5_PRINCNAME * d2i_KRB5_PRINCNAME(KRB5_PRINCNAME ** a, const unsigned char ** in, long len);
int i2d_KRB5_PRINCNAME(KRB5_PRINCNAME * a, unsigned char ** out);
const ASN1_ITEM * KRB5_PRINCNAME_it(void);
KRB5_TKTBODY * KRB5_TKTBODY_new(void);
void KRB5_TKTBODY_free(KRB5_TKTBODY * a);
KRB5_TKTBODY * d2i_KRB5_TKTBODY(KRB5_TKTBODY ** a, const unsigned char ** in, long len);
int i2d_KRB5_TKTBODY(KRB5_TKTBODY * a, unsigned char ** out);
const ASN1_ITEM * KRB5_TKTBODY_it(void);
KRB5_APREQBODY * KRB5_APREQBODY_new(void);
void KRB5_APREQBODY_free(KRB5_APREQBODY * a);
KRB5_APREQBODY * d2i_KRB5_APREQBODY(KRB5_APREQBODY ** a, const unsigned char ** in, long len);
int i2d_KRB5_APREQBODY(KRB5_APREQBODY * a, unsigned char ** out);
const ASN1_ITEM * KRB5_APREQBODY_it(void);
KRB5_TICKET * KRB5_TICKET_new(void);
void KRB5_TICKET_free(KRB5_TICKET * a);
KRB5_TICKET * d2i_KRB5_TICKET(KRB5_TICKET ** a, const unsigned char ** in, long len);
int i2d_KRB5_TICKET(KRB5_TICKET * a, unsigned char ** out);
const ASN1_ITEM * KRB5_TICKET_it(void);
KRB5_APREQ * KRB5_APREQ_new(void);
void KRB5_APREQ_free(KRB5_APREQ * a);
KRB5_APREQ * d2i_KRB5_APREQ(KRB5_APREQ ** a, const unsigned char ** in, long len);
int i2d_KRB5_APREQ(KRB5_APREQ * a, unsigned char ** out);
const ASN1_ITEM * KRB5_APREQ_it(void);
KRB5_CHECKSUM * KRB5_CHECKSUM_new(void);
void KRB5_CHECKSUM_free(KRB5_CHECKSUM * a);
KRB5_CHECKSUM * d2i_KRB5_CHECKSUM(KRB5_CHECKSUM ** a, const unsigned char ** in, long len);
int i2d_KRB5_CHECKSUM(KRB5_CHECKSUM * a, unsigned char ** out);
const ASN1_ITEM * KRB5_CHECKSUM_it(void);
KRB5_ENCKEY * KRB5_ENCKEY_new(void);
void KRB5_ENCKEY_free(KRB5_ENCKEY * a);
KRB5_ENCKEY * d2i_KRB5_ENCKEY(KRB5_ENCKEY ** a, const unsigned char ** in, long len);
int i2d_KRB5_ENCKEY(KRB5_ENCKEY * a, unsigned char ** out);
const ASN1_ITEM * KRB5_ENCKEY_it(void);
KRB5_AUTHDATA * KRB5_AUTHDATA_new(void);
void KRB5_AUTHDATA_free(KRB5_AUTHDATA * a);
KRB5_AUTHDATA * d2i_KRB5_AUTHDATA(KRB5_AUTHDATA ** a, const unsigned char ** in, long len);
int i2d_KRB5_AUTHDATA(KRB5_AUTHDATA * a, unsigned char ** out);
const ASN1_ITEM * KRB5_AUTHDATA_it(void);
KRB5_AUTHENTBODY * KRB5_AUTHENTBODY_new(void);
void KRB5_AUTHENTBODY_free(KRB5_AUTHENTBODY * a);
KRB5_AUTHENTBODY * d2i_KRB5_AUTHENTBODY(KRB5_AUTHENTBODY ** a, const unsigned char ** in, long len);
int i2d_KRB5_AUTHENTBODY(KRB5_AUTHENTBODY * a, unsigned char ** out);
const ASN1_ITEM * KRB5_AUTHENTBODY_it(void);
KRB5_AUTHENT * KRB5_AUTHENT_new(void);
void KRB5_AUTHENT_free(KRB5_AUTHENT * a);
KRB5_AUTHENT * d2i_KRB5_AUTHENT(KRB5_AUTHENT ** a, const unsigned char ** in, long len);
int i2d_KRB5_AUTHENT(KRB5_AUTHENT * a, unsigned char ** out);
const ASN1_ITEM * KRB5_AUTHENT_it(void);
_LHASH * lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c);
void lh_free(_LHASH * lh);
void * lh_insert(_LHASH * lh, void * data);
void * lh_delete(_LHASH * lh, const void * data);
void * lh_retrieve(_LHASH * lh, const void * data);
void lh_doall(_LHASH * lh, LHASH_DOALL_FN_TYPE func);
void lh_doall_arg(_LHASH * lh, LHASH_DOALL_ARG_FN_TYPE func, void * arg);
unsigned long lh_strhash(const char * c);
unsigned long lh_num_items(const _LHASH * lh);
void lh_stats_bio(const _LHASH * lh, BIO * out);
void lh_node_stats_bio(const _LHASH * lh, BIO * out);
void lh_node_usage_stats_bio(const _LHASH * lh, BIO * out);
int OBJ_NAME_init(void);
int OBJ_NAME_new_index(unsigned long (*hash_func)(const char *), int (*cmp_func)(const char *,const char *), void (*free_func)(const char *,int,const char *));
const char * OBJ_NAME_get(const char * name, int type);
int OBJ_NAME_add(const char * name, int type, const char * data);
int OBJ_NAME_remove(const char * name, int type);
void OBJ_NAME_cleanup(int type);
void OBJ_NAME_do_all(int type, void (*fn)(const OBJ_NAME *,void *arg), void * arg);
void OBJ_NAME_do_all_sorted(int type, void (*fn)(const OBJ_NAME *,void *arg), void * arg);
ASN1_OBJECT * OBJ_dup(const ASN1_OBJECT * o);
ASN1_OBJECT * OBJ_nid2obj(int n);
const char * OBJ_nid2ln(int n);
const char * OBJ_nid2sn(int n);
int OBJ_obj2nid(const ASN1_OBJECT * o);
ASN1_OBJECT * OBJ_txt2obj(const char * s, int no_name);
int OBJ_obj2txt(char * buf, int buf_len, const ASN1_OBJECT * a, int no_name);
int OBJ_txt2nid(const char * s);
int OBJ_ln2nid(const char * s);
int OBJ_sn2nid(const char * s);
int OBJ_cmp(const ASN1_OBJECT * a, const ASN1_OBJECT * b);
int OBJ_new_nid(int num);
int OBJ_add_object(const ASN1_OBJECT * obj);
int OBJ_create(const char * oid, const char * sn, const char * ln);
void OBJ_cleanup(void);
int OBJ_create_objects(BIO * in);
void ERR_load_OBJ_strings(void);
OCSP_RESPONSE * OCSP_sendreq_bio(BIO * b, char * path, OCSP_REQUEST * req);
OCSP_CERTID * OCSP_cert_to_id(const EVP_MD * dgst, X509 * subject, X509 * issuer);
OCSP_CERTID * OCSP_cert_id_new(const EVP_MD * dgst, X509_NAME * issuerName, ASN1_BIT_STRING * issuerKey, ASN1_INTEGER * serialNumber);
OCSP_ONEREQ * OCSP_request_add0_id(OCSP_REQUEST * req, OCSP_CERTID * cid);
int OCSP_request_add1_nonce(OCSP_REQUEST * req, unsigned char * val, int len);
int OCSP_basic_add1_nonce(OCSP_BASICRESP * resp, unsigned char * val, int len);
int OCSP_check_nonce(OCSP_REQUEST * req, OCSP_BASICRESP * bs);
int OCSP_copy_nonce(OCSP_BASICRESP * resp, OCSP_REQUEST * req);
int OCSP_request_set1_name(OCSP_REQUEST * req, X509_NAME * nm);
int OCSP_request_add1_cert(OCSP_REQUEST * req, X509 * cert);
int OCSP_request_sign(OCSP_REQUEST * req, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst, STACK_OF(X509) * certs, unsigned long flags);
int OCSP_response_status(OCSP_RESPONSE * resp);
OCSP_BASICRESP * OCSP_response_get1_basic(OCSP_RESPONSE * resp);
int OCSP_resp_count(OCSP_BASICRESP * bs);
OCSP_SINGLERESP * OCSP_resp_get0(OCSP_BASICRESP * bs, int idx);
int OCSP_resp_find(OCSP_BASICRESP * bs, OCSP_CERTID * id, int last);
int OCSP_single_get0_status(OCSP_SINGLERESP * single, int * reason, ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd);
int OCSP_resp_find_status(OCSP_BASICRESP * bs, OCSP_CERTID * id, int * status, int * reason, ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd);
int OCSP_check_validity(ASN1_GENERALIZEDTIME * thisupd, ASN1_GENERALIZEDTIME * nextupd, long sec, long maxsec);
int OCSP_request_verify(OCSP_REQUEST * req, STACK_OF(X509) * certs, X509_STORE * store, unsigned long flags);
int OCSP_parse_url(char * url, char ** phost, char ** pport, char ** ppath, int * pssl);
int OCSP_id_issuer_cmp(OCSP_CERTID * a, OCSP_CERTID * b);
int OCSP_id_cmp(OCSP_CERTID * a, OCSP_CERTID * b);
int OCSP_request_onereq_count(OCSP_REQUEST * req);
OCSP_ONEREQ * OCSP_request_onereq_get0(OCSP_REQUEST * req, int i);
OCSP_CERTID * OCSP_onereq_get0_id(OCSP_ONEREQ * one);
int OCSP_id_get0_info(ASN1_OCTET_STRING ** piNameHash, ASN1_OBJECT ** pmd, ASN1_OCTET_STRING ** pikeyHash, ASN1_INTEGER ** pserial, OCSP_CERTID * cid);
int OCSP_request_is_signed(OCSP_REQUEST * req);
OCSP_RESPONSE * OCSP_response_create(int status, OCSP_BASICRESP * bs);
OCSP_SINGLERESP * OCSP_basic_add1_status(OCSP_BASICRESP * rsp, OCSP_CERTID * cid, int status, int reason, ASN1_TIME * revtime, ASN1_TIME * thisupd, ASN1_TIME * nextupd);
int OCSP_basic_add1_cert(OCSP_BASICRESP * resp, X509 * cert);
int OCSP_basic_sign(OCSP_BASICRESP * brsp, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst, STACK_OF(X509) * certs, unsigned long flags);
X509_EXTENSION * OCSP_crlID_new(char * url, long * n, char * tim);
X509_EXTENSION * OCSP_accept_responses_new(char ** oids);
X509_EXTENSION * OCSP_archive_cutoff_new(char * tim);
X509_EXTENSION * OCSP_url_svcloc_new(X509_NAME * issuer, char ** urls);
int OCSP_REQUEST_get_ext_count(OCSP_REQUEST * x);
int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST * x, int nid, int lastpos);
int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST * x, ASN1_OBJECT * obj, int lastpos);
int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST * x, int crit, int lastpos);
X509_EXTENSION * OCSP_REQUEST_get_ext(OCSP_REQUEST * x, int loc);
X509_EXTENSION * OCSP_REQUEST_delete_ext(OCSP_REQUEST * x, int loc);
void * OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST * x, int nid, int * crit, int * idx);
int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST * x, int nid, void * value, int crit, unsigned long flags);
int OCSP_REQUEST_add_ext(OCSP_REQUEST * x, X509_EXTENSION * ex, int loc);
int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ * x);
int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ * x, int nid, int lastpos);
int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ * x, ASN1_OBJECT * obj, int lastpos);
int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ * x, int crit, int lastpos);
X509_EXTENSION * OCSP_ONEREQ_get_ext(OCSP_ONEREQ * x, int loc);
X509_EXTENSION * OCSP_ONEREQ_delete_ext(OCSP_ONEREQ * x, int loc);
void * OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ * x, int nid, int * crit, int * idx);
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ * x, int nid, void * value, int crit, unsigned long flags);
int OCSP_ONEREQ_add_ext(OCSP_ONEREQ * x, X509_EXTENSION * ex, int loc);
int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP * x);
int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP * x, int nid, int lastpos);
int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP * x, ASN1_OBJECT * obj, int lastpos);
int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP * x, int crit, int lastpos);
X509_EXTENSION * OCSP_BASICRESP_get_ext(OCSP_BASICRESP * x, int loc);
X509_EXTENSION * OCSP_BASICRESP_delete_ext(OCSP_BASICRESP * x, int loc);
void * OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP * x, int nid, int * crit, int * idx);
int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP * x, int nid, void * value, int crit, unsigned long flags);
int OCSP_BASICRESP_add_ext(OCSP_BASICRESP * x, X509_EXTENSION * ex, int loc);
int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP * x);
int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP * x, int nid, int lastpos);
int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP * x, ASN1_OBJECT * obj, int lastpos);
int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP * x, int crit, int lastpos);
X509_EXTENSION * OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP * x, int loc);
X509_EXTENSION * OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP * x, int loc);
void * OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP * x, int nid, int * crit, int * idx);
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP * x, int nid, void * value, int crit, unsigned long flags);
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP * x, X509_EXTENSION * ex, int loc);
OCSP_SINGLERESP * OCSP_SINGLERESP_new(void);
void OCSP_SINGLERESP_free(OCSP_SINGLERESP * a);
OCSP_SINGLERESP * d2i_OCSP_SINGLERESP(OCSP_SINGLERESP ** a, const unsigned char ** in, long len);
int i2d_OCSP_SINGLERESP(OCSP_SINGLERESP * a, unsigned char ** out);
const ASN1_ITEM * OCSP_SINGLERESP_it(void);
OCSP_CERTSTATUS * OCSP_CERTSTATUS_new(void);
void OCSP_CERTSTATUS_free(OCSP_CERTSTATUS * a);
OCSP_CERTSTATUS * d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS ** a, const unsigned char ** in, long len);
int i2d_OCSP_CERTSTATUS(OCSP_CERTSTATUS * a, unsigned char ** out);
const ASN1_ITEM * OCSP_CERTSTATUS_it(void);
OCSP_REVOKEDINFO * OCSP_REVOKEDINFO_new(void);
void OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO * a);
OCSP_REVOKEDINFO * d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO ** a, const unsigned char ** in, long len);
int i2d_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO * a, unsigned char ** out);
const ASN1_ITEM * OCSP_REVOKEDINFO_it(void);
OCSP_BASICRESP * OCSP_BASICRESP_new(void);
void OCSP_BASICRESP_free(OCSP_BASICRESP * a);
OCSP_BASICRESP * d2i_OCSP_BASICRESP(OCSP_BASICRESP ** a, const unsigned char ** in, long len);
int i2d_OCSP_BASICRESP(OCSP_BASICRESP * a, unsigned char ** out);
const ASN1_ITEM * OCSP_BASICRESP_it(void);
OCSP_RESPDATA * OCSP_RESPDATA_new(void);
void OCSP_RESPDATA_free(OCSP_RESPDATA * a);
OCSP_RESPDATA * d2i_OCSP_RESPDATA(OCSP_RESPDATA ** a, const unsigned char ** in, long len);
int i2d_OCSP_RESPDATA(OCSP_RESPDATA * a, unsigned char ** out);
const ASN1_ITEM * OCSP_RESPDATA_it(void);
OCSP_RESPID * OCSP_RESPID_new(void);
void OCSP_RESPID_free(OCSP_RESPID * a);
OCSP_RESPID * d2i_OCSP_RESPID(OCSP_RESPID ** a, const unsigned char ** in, long len);
int i2d_OCSP_RESPID(OCSP_RESPID * a, unsigned char ** out);
const ASN1_ITEM * OCSP_RESPID_it(void);
OCSP_RESPONSE * OCSP_RESPONSE_new(void);
void OCSP_RESPONSE_free(OCSP_RESPONSE * a);
OCSP_RESPONSE * d2i_OCSP_RESPONSE(OCSP_RESPONSE ** a, const unsigned char ** in, long len);
int i2d_OCSP_RESPONSE(OCSP_RESPONSE * a, unsigned char ** out);
const ASN1_ITEM * OCSP_RESPONSE_it(void);
OCSP_RESPBYTES * OCSP_RESPBYTES_new(void);
void OCSP_RESPBYTES_free(OCSP_RESPBYTES * a);
OCSP_RESPBYTES * d2i_OCSP_RESPBYTES(OCSP_RESPBYTES ** a, const unsigned char ** in, long len);
int i2d_OCSP_RESPBYTES(OCSP_RESPBYTES * a, unsigned char ** out);
const ASN1_ITEM * OCSP_RESPBYTES_it(void);
OCSP_ONEREQ * OCSP_ONEREQ_new(void);
void OCSP_ONEREQ_free(OCSP_ONEREQ * a);
OCSP_ONEREQ * d2i_OCSP_ONEREQ(OCSP_ONEREQ ** a, const unsigned char ** in, long len);
int i2d_OCSP_ONEREQ(OCSP_ONEREQ * a, unsigned char ** out);
const ASN1_ITEM * OCSP_ONEREQ_it(void);
OCSP_CERTID * OCSP_CERTID_new(void);
void OCSP_CERTID_free(OCSP_CERTID * a);
OCSP_CERTID * d2i_OCSP_CERTID(OCSP_CERTID ** a, const unsigned char ** in, long len);
int i2d_OCSP_CERTID(OCSP_CERTID * a, unsigned char ** out);
const ASN1_ITEM * OCSP_CERTID_it(void);
OCSP_REQUEST * OCSP_REQUEST_new(void);
void OCSP_REQUEST_free(OCSP_REQUEST * a);
OCSP_REQUEST * d2i_OCSP_REQUEST(OCSP_REQUEST ** a, const unsigned char ** in, long len);
int i2d_OCSP_REQUEST(OCSP_REQUEST * a, unsigned char ** out);
const ASN1_ITEM * OCSP_REQUEST_it(void);
OCSP_SIGNATURE * OCSP_SIGNATURE_new(void);
void OCSP_SIGNATURE_free(OCSP_SIGNATURE * a);
OCSP_SIGNATURE * d2i_OCSP_SIGNATURE(OCSP_SIGNATURE ** a, const unsigned char ** in, long len);
int i2d_OCSP_SIGNATURE(OCSP_SIGNATURE * a, unsigned char ** out);
const ASN1_ITEM * OCSP_SIGNATURE_it(void);
OCSP_REQINFO * OCSP_REQINFO_new(void);
void OCSP_REQINFO_free(OCSP_REQINFO * a);
OCSP_REQINFO * d2i_OCSP_REQINFO(OCSP_REQINFO ** a, const unsigned char ** in, long len);
int i2d_OCSP_REQINFO(OCSP_REQINFO * a, unsigned char ** out);
const ASN1_ITEM * OCSP_REQINFO_it(void);
OCSP_CRLID * OCSP_CRLID_new(void);
void OCSP_CRLID_free(OCSP_CRLID * a);
OCSP_CRLID * d2i_OCSP_CRLID(OCSP_CRLID ** a, const unsigned char ** in, long len);
int i2d_OCSP_CRLID(OCSP_CRLID * a, unsigned char ** out);
const ASN1_ITEM * OCSP_CRLID_it(void);
OCSP_SERVICELOC * OCSP_SERVICELOC_new(void);
void OCSP_SERVICELOC_free(OCSP_SERVICELOC * a);
OCSP_SERVICELOC * d2i_OCSP_SERVICELOC(OCSP_SERVICELOC ** a, const unsigned char ** in, long len);
int i2d_OCSP_SERVICELOC(OCSP_SERVICELOC * a, unsigned char ** out);
const ASN1_ITEM * OCSP_SERVICELOC_it(void);
const char * OCSP_response_status_str(long s);
const char * OCSP_cert_status_str(long s);
const char * OCSP_crl_reason_str(long s);
int OCSP_REQUEST_print(BIO * bp, OCSP_REQUEST * a, unsigned long flags);
int OCSP_RESPONSE_print(BIO * bp, OCSP_RESPONSE * o, unsigned long flags);
int OCSP_basic_verify(OCSP_BASICRESP * bs, STACK_OF(X509) * certs, X509_STORE * st, unsigned long flags);
void ERR_load_OCSP_strings(void);
int PEM_get_EVP_CIPHER_INFO(char * header, EVP_CIPHER_INFO * cipher);
int PEM_do_header(EVP_CIPHER_INFO * cipher, unsigned char * data, long * len, pem_password_cb * callback, void * u);
int PEM_read_bio(BIO * bp, char ** name, char ** header, unsigned char ** data, long * len);
int PEM_write_bio(BIO * bp, const char * name, char * hdr, unsigned char * data, long len);
int PEM_bytes_read_bio(unsigned char ** pdata, long * plen, char ** pnm, const char * name, BIO * bp, pem_password_cb * cb, void * u);
void * PEM_ASN1_read_bio(d2i_of_void * d2i, const char * name, BIO * bp, void ** x, pem_password_cb * cb, void * u);
int PEM_ASN1_write_bio(i2d_of_void * i2d, const char * name, BIO * bp, char * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
STACK_OF(X509_INFO) * PEM_X509_INFO_read_bio(BIO * bp, STACK_OF(X509_INFO) * sk, pem_password_cb * cb, void * u);
int PEM_X509_INFO_write_bio(BIO * bp, X509_INFO * xi, EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cd, void * u);
int PEM_SealInit(PEM_ENCODE_SEAL_CTX * ctx, EVP_CIPHER * type, EVP_MD * md_type, unsigned char ** ek, int * ekl, unsigned char * iv, EVP_PKEY ** pubk, int npubk);
void PEM_SealUpdate(PEM_ENCODE_SEAL_CTX * ctx, unsigned char * out, int * outl, unsigned char * in, int inl);
int PEM_SealFinal(PEM_ENCODE_SEAL_CTX * ctx, unsigned char * sig, int * sigl, unsigned char * out, int * outl, EVP_PKEY * priv);
void PEM_SignInit(EVP_MD_CTX * ctx, EVP_MD * type);
void PEM_SignUpdate(EVP_MD_CTX * ctx, unsigned char * d, unsigned int cnt);
int PEM_SignFinal(EVP_MD_CTX * ctx, unsigned char * sigret, unsigned int * siglen, EVP_PKEY * pkey);
int PEM_def_callback(char * buf, int num, int w, void * key);
void PEM_proc_type(char * buf, int type);
void PEM_dek_info(char * buf, const char * type, int len, char * str);
X509 * PEM_read_bio_X509(BIO * bp, X509 ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_X509(BIO * bp, X509 * x);
X509 * PEM_read_bio_X509_AUX(BIO * bp, X509 ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_X509_AUX(BIO * bp, X509 * x);
X509_REQ * PEM_read_bio_X509_REQ(BIO * bp, X509_REQ ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_X509_REQ(BIO * bp, X509_REQ * x);
int PEM_write_bio_X509_REQ_NEW(BIO * bp, X509_REQ * x);
X509_CRL * PEM_read_bio_X509_CRL(BIO * bp, X509_CRL ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_X509_CRL(BIO * bp, X509_CRL * x);
PKCS7 * PEM_read_bio_PKCS7(BIO * bp, PKCS7 ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_PKCS7(BIO * bp, PKCS7 * x);
NETSCAPE_CERT_SEQUENCE * PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE * x);
X509_SIG * PEM_read_bio_PKCS8(BIO * bp, X509_SIG ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_PKCS8(BIO * bp, X509_SIG * x);
PKCS8_PRIV_KEY_INFO * PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO * x);
RSA * PEM_read_bio_RSAPrivateKey(BIO * bp, RSA ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_RSAPrivateKey(BIO * bp, RSA * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
RSA * PEM_read_bio_RSAPublicKey(BIO * bp, RSA ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_RSAPublicKey(BIO * bp, RSA * x);
RSA * PEM_read_bio_RSA_PUBKEY(BIO * bp, RSA ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_RSA_PUBKEY(BIO * bp, RSA * x);
DSA * PEM_read_bio_DSAPrivateKey(BIO * bp, DSA ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_DSAPrivateKey(BIO * bp, DSA * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
DSA * PEM_read_bio_DSA_PUBKEY(BIO * bp, DSA ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_DSA_PUBKEY(BIO * bp, DSA * x);
DSA * PEM_read_bio_DSAparams(BIO * bp, DSA ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_DSAparams(BIO * bp, DSA * x);
DH * PEM_read_bio_DHparams(BIO * bp, DH ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_DHparams(BIO * bp, DH * x);
EVP_PKEY * PEM_read_bio_PrivateKey(BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_PrivateKey(BIO * bp, EVP_PKEY * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
EVP_PKEY * PEM_read_bio_PUBKEY(BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_PUBKEY(BIO * bp, EVP_PKEY * x);
int PEM_write_bio_PKCS8PrivateKey_nid(BIO * bp, EVP_PKEY * x, int nid, char * kstr, int klen, pem_password_cb * cb, void * u);
int PEM_write_bio_PKCS8PrivateKey(BIO * a, EVP_PKEY * b, const EVP_CIPHER * c, char * d, int a1, pem_password_cb * e, void * f);
int i2d_PKCS8PrivateKey_bio(BIO * bp, EVP_PKEY * x, const EVP_CIPHER * enc, char * kstr, int klen, pem_password_cb * cb, void * u);
int i2d_PKCS8PrivateKey_nid_bio(BIO * bp, EVP_PKEY * x, int nid, char * kstr, int klen, pem_password_cb * cb, void * u);
EVP_PKEY * d2i_PKCS8PrivateKey_bio(BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u);
void ERR_load_PEM_strings(void);
PKCS12_SAFEBAG * PKCS12_x5092certbag(X509 * x509);
PKCS12_SAFEBAG * PKCS12_x509crl2certbag(X509_CRL * crl);
X509 * PKCS12_certbag2x509(PKCS12_SAFEBAG * bag);
X509_CRL * PKCS12_certbag2x509crl(PKCS12_SAFEBAG * bag);
PKCS12_SAFEBAG * PKCS12_item_pack_safebag(void * obj, const ASN1_ITEM * it, int nid1, int nid2);
PKCS12_SAFEBAG * PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO * p8);
PKCS8_PRIV_KEY_INFO * PKCS8_decrypt(X509_SIG * p8, const char * pass, int passlen);
PKCS8_PRIV_KEY_INFO * PKCS12_decrypt_skey(PKCS12_SAFEBAG * bag, const char * pass, int passlen);
X509_SIG * PKCS8_encrypt(int pbe_nid, const EVP_CIPHER * cipher, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8);
PKCS12_SAFEBAG * PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8);
PKCS7 * PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) * sk);
STACK_OF(PKCS12_SAFEBAG) * PKCS12_unpack_p7data(PKCS7 * p7);
PKCS7 * PKCS12_pack_p7encdata(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, STACK_OF(PKCS12_SAFEBAG) * bags);
STACK_OF(PKCS12_SAFEBAG) * PKCS12_unpack_p7encdata(PKCS7 * p7, const char * pass, int passlen);
int PKCS12_pack_authsafes(PKCS12 * p12, STACK_OF(PKCS7) * safes);
STACK_OF(PKCS7) * PKCS12_unpack_authsafes(PKCS12 * p12);
int PKCS12_add_localkeyid(PKCS12_SAFEBAG * bag, unsigned char * name, int namelen);
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen);
int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen);
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG * bag, const unsigned char * name, int namelen);
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO * p8, int usage);
ASN1_TYPE * PKCS12_get_attr_gen(STACK_OF(X509_ATTRIBUTE) * attrs, int attr_nid);
char * PKCS12_get_friendlyname(PKCS12_SAFEBAG * bag);
unsigned char * PKCS12_pbe_crypt(X509_ALGOR * algor, const char * pass, int passlen, unsigned char * in, int inlen, unsigned char ** data, int * datalen, int en_de);
void * PKCS12_item_decrypt_d2i(X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, ASN1_OCTET_STRING * oct, int zbuf);
ASN1_OCTET_STRING * PKCS12_item_i2d_encrypt(X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, void * obj, int zbuf);
PKCS12 * PKCS12_init(int mode);
int PKCS12_key_gen_asc(const char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type);
int PKCS12_key_gen_uni(unsigned char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type);
int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de);
int PKCS12_gen_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * mac, unsigned int * maclen);
int PKCS12_verify_mac(PKCS12 * p12, const char * pass, int passlen);
int PKCS12_set_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, const EVP_MD * md_type);
int PKCS12_setup_mac(PKCS12 * p12, int iter, unsigned char * salt, int saltlen, const EVP_MD * md_type);
unsigned char * OPENSSL_asc2uni(const char * asc, int asclen, unsigned char ** uni, int * unilen);
char * OPENSSL_uni2asc(unsigned char * uni, int unilen);
PKCS12 * PKCS12_new(void);
void PKCS12_free(PKCS12 * a);
PKCS12 * d2i_PKCS12(PKCS12 ** a, const unsigned char ** in, long len);
int i2d_PKCS12(PKCS12 * a, unsigned char ** out);
const ASN1_ITEM * PKCS12_it(void);
PKCS12_MAC_DATA * PKCS12_MAC_DATA_new(void);
void PKCS12_MAC_DATA_free(PKCS12_MAC_DATA * a);
PKCS12_MAC_DATA * d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA ** a, const unsigned char ** in, long len);
int i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA * a, unsigned char ** out);
const ASN1_ITEM * PKCS12_MAC_DATA_it(void);
PKCS12_SAFEBAG * PKCS12_SAFEBAG_new(void);
void PKCS12_SAFEBAG_free(PKCS12_SAFEBAG * a);
PKCS12_SAFEBAG * d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG ** a, const unsigned char ** in, long len);
int i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG * a, unsigned char ** out);
const ASN1_ITEM * PKCS12_SAFEBAG_it(void);
PKCS12_BAGS * PKCS12_BAGS_new(void);
void PKCS12_BAGS_free(PKCS12_BAGS * a);
PKCS12_BAGS * d2i_PKCS12_BAGS(PKCS12_BAGS ** a, const unsigned char ** in, long len);
int i2d_PKCS12_BAGS(PKCS12_BAGS * a, unsigned char ** out);
const ASN1_ITEM * PKCS12_BAGS_it(void);
const ASN1_ITEM * PKCS12_SAFEBAGS_it(void);
const ASN1_ITEM * PKCS12_AUTHSAFES_it(void);
void PKCS12_PBE_add(void);
int PKCS12_parse(PKCS12 * p12, const char * pass, EVP_PKEY ** pkey, X509 ** cert, STACK_OF(X509) ** ca);
PKCS12 * PKCS12_create(char * pass, char * name, EVP_PKEY * pkey, X509 * cert, STACK_OF(X509) * ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype);
int i2d_PKCS12_bio(BIO * bp, PKCS12 * p12);
PKCS12 * d2i_PKCS12_bio(BIO * bp, PKCS12 ** p12);
int PKCS12_newpass(PKCS12 * p12, char * oldpass, char * newpass);
void ERR_load_PKCS12_strings(void);
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
PKCS7 * PKCS7_dup(PKCS7 * p7);
PKCS7 * d2i_PKCS7_bio(BIO * bp, PKCS7 ** p7);
int i2d_PKCS7_bio(BIO * bp, PKCS7 * p7);
PKCS7_ISSUER_AND_SERIAL * PKCS7_ISSUER_AND_SERIAL_new(void);
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL * a);
PKCS7_ISSUER_AND_SERIAL * d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL ** a, const unsigned char ** in, long len);
int i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_ISSUER_AND_SERIAL_it(void);
PKCS7_SIGNER_INFO * PKCS7_SIGNER_INFO_new(void);
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO * a);
PKCS7_SIGNER_INFO * d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO ** a, const unsigned char ** in, long len);
int i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_SIGNER_INFO_it(void);
PKCS7_RECIP_INFO * PKCS7_RECIP_INFO_new(void);
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO * a);
PKCS7_RECIP_INFO * d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO ** a, const unsigned char ** in, long len);
int i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_RECIP_INFO_it(void);
PKCS7_SIGNED * PKCS7_SIGNED_new(void);
void PKCS7_SIGNED_free(PKCS7_SIGNED * a);
PKCS7_SIGNED * d2i_PKCS7_SIGNED(PKCS7_SIGNED ** a, const unsigned char ** in, long len);
int i2d_PKCS7_SIGNED(PKCS7_SIGNED * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_SIGNED_it(void);
PKCS7_ENC_CONTENT * PKCS7_ENC_CONTENT_new(void);
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT * a);
PKCS7_ENC_CONTENT * d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT ** a, const unsigned char ** in, long len);
int i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_ENC_CONTENT_it(void);
PKCS7_ENVELOPE * PKCS7_ENVELOPE_new(void);
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE * a);
PKCS7_ENVELOPE * d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE ** a, const unsigned char ** in, long len);
int i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_ENVELOPE_it(void);
PKCS7_SIGN_ENVELOPE * PKCS7_SIGN_ENVELOPE_new(void);
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE * a);
PKCS7_SIGN_ENVELOPE * d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE ** a, const unsigned char ** in, long len);
int i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_SIGN_ENVELOPE_it(void);
PKCS7_DIGEST * PKCS7_DIGEST_new(void);
void PKCS7_DIGEST_free(PKCS7_DIGEST * a);
PKCS7_DIGEST * d2i_PKCS7_DIGEST(PKCS7_DIGEST ** a, const unsigned char ** in, long len);
int i2d_PKCS7_DIGEST(PKCS7_DIGEST * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_DIGEST_it(void);
PKCS7_ENCRYPT * PKCS7_ENCRYPT_new(void);
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT * a);
PKCS7_ENCRYPT * d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT ** a, const unsigned char ** in, long len);
int i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_ENCRYPT_it(void);
PKCS7 * PKCS7_new(void);
void PKCS7_free(PKCS7 * a);
PKCS7 * d2i_PKCS7(PKCS7 ** a, const unsigned char ** in, long len);
int i2d_PKCS7(PKCS7 * a, unsigned char ** out);
const ASN1_ITEM * PKCS7_it(void);
const ASN1_ITEM * PKCS7_ATTR_SIGN_it(void);
const ASN1_ITEM * PKCS7_ATTR_VERIFY_it(void);
long PKCS7_ctrl(PKCS7 * p7, int cmd, long larg, char * parg);
int PKCS7_set_type(PKCS7 * p7, int type);
int PKCS7_set_content(PKCS7 * p7, PKCS7 * p7_data);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO * p7i, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst);
int PKCS7_add_signer(PKCS7 * p7, PKCS7_SIGNER_INFO * p7i);
int PKCS7_add_certificate(PKCS7 * p7, X509 * x509);
int PKCS7_add_crl(PKCS7 * p7, X509_CRL * x509);
int PKCS7_content_new(PKCS7 * p7, int nid);
int PKCS7_dataVerify(X509_STORE * cert_store, X509_STORE_CTX * ctx, BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si);
int PKCS7_signatureVerify(BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si, X509 * x509);
BIO * PKCS7_dataInit(PKCS7 * p7, BIO * bio);
int PKCS7_dataFinal(PKCS7 * p7, BIO * bio);
BIO * PKCS7_dataDecode(PKCS7 * p7, EVP_PKEY * pkey, BIO * in_bio, X509 * pcert);
PKCS7_SIGNER_INFO * PKCS7_add_signature(PKCS7 * p7, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst);
X509 * PKCS7_cert_from_signer_info(PKCS7 * p7, PKCS7_SIGNER_INFO * si);
STACK_OF(PKCS7_SIGNER_INFO) * PKCS7_get_signer_info(PKCS7 * p7);
PKCS7_RECIP_INFO * PKCS7_add_recipient(PKCS7 * p7, X509 * x509);
int PKCS7_add_recipient_info(PKCS7 * p7, PKCS7_RECIP_INFO * ri);
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO * p7i, X509 * x509);
int PKCS7_set_cipher(PKCS7 * p7, const EVP_CIPHER * cipher);
PKCS7_ISSUER_AND_SERIAL * PKCS7_get_issuer_and_serial(PKCS7 * p7, int idx);
ASN1_OCTET_STRING * PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) * sk);
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int type, void * data);
int PKCS7_add_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int atrtype, void * value);
ASN1_TYPE * PKCS7_get_attribute(PKCS7_SIGNER_INFO * si, int nid);
ASN1_TYPE * PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO * si, int nid);
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO * p7si, STACK_OF(X509_ATTRIBUTE) * sk);
int PKCS7_set_attributes(PKCS7_SIGNER_INFO * p7si, STACK_OF(X509_ATTRIBUTE) * sk);
PKCS7 * PKCS7_sign(X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, int flags);
int PKCS7_verify(PKCS7 * p7, STACK_OF(X509) * certs, X509_STORE * store, BIO * indata, BIO * out, int flags);
STACK_OF(X509) * PKCS7_get0_signers(PKCS7 * p7, STACK_OF(X509) * certs, int flags);
PKCS7 * PKCS7_encrypt(STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, int flags);
int PKCS7_decrypt(PKCS7 * p7, EVP_PKEY * pkey, X509 * cert, BIO * data, int flags);
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO * si, STACK_OF(X509_ALGOR) * cap);
STACK_OF(X509_ALGOR) * PKCS7_get_smimecap(PKCS7_SIGNER_INFO * si);
int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) * sk, int nid, int arg);
int SMIME_write_PKCS7(BIO * bio, PKCS7 * p7, BIO * data, int flags);
PKCS7 * SMIME_read_PKCS7(BIO * bio, BIO ** bcont);
int SMIME_crlf_copy(BIO * in, BIO * out, int flags);
int SMIME_text(BIO * in, BIO * out);
void ERR_load_PKCS7_strings(void);
int RAND_set_rand_method(const RAND_METHOD * meth);
const RAND_METHOD * RAND_get_rand_method(void);
RAND_METHOD * RAND_SSLeay(void);
void RAND_cleanup(void);
int RAND_bytes(unsigned char * buf, int num);
int RAND_pseudo_bytes(unsigned char * buf, int num);
void RAND_seed(const void * buf, int num);
void RAND_add(const void * buf, int num, double entropy);
int RAND_load_file(const char * file, long max_bytes);
int RAND_write_file(const char * file);
const char * RAND_file_name(char * file, size_t num);
int RAND_status(void);
int RAND_query_egd_bytes(const char * path, unsigned char * buf, int bytes);
int RAND_egd(const char * path);
int RAND_egd_bytes(const char * path, int bytes);
int RAND_poll(void);
void ERR_load_RAND_strings(void);
void SSL_CTX_set_msg_callback(SSL_CTX * ctx, void (*cb)(int write_p,int version,int content_type,const void *buf,size_t len,SSL *ssl,void *arg));
void SSL_set_msg_callback(SSL * ssl, void (*cb)(int write_p,int version,int content_type,const void *buf,size_t len,SSL *ssl,void *arg));
LHASH_OF(SSL_SESSION) * SSL_CTX_sessions(SSL_CTX * ctx);
size_t SSL_get_finished(const SSL * s, void * buf, size_t count);
size_t SSL_get_peer_finished(const SSL * s, void * buf, size_t count);
BIO_METHOD * BIO_f_ssl(void);
BIO * BIO_new_ssl(SSL_CTX * ctx, int client);
BIO * BIO_new_ssl_connect(SSL_CTX * ctx);
BIO * BIO_new_buffer_ssl_connect(SSL_CTX * ctx);
int BIO_ssl_copy_session_id(BIO * to, BIO * from);
void BIO_ssl_shutdown(BIO * ssl_bio);
int SSL_CTX_set_cipher_list(SSL_CTX * a, const char * str);
SSL_CTX * SSL_CTX_new(const SSL_METHOD * meth);
void SSL_CTX_free(SSL_CTX * a);
long SSL_CTX_set_timeout(SSL_CTX * ctx, long t);
long SSL_CTX_get_timeout(const SSL_CTX * ctx);
X509_STORE * SSL_CTX_get_cert_store(const SSL_CTX * a);
void SSL_CTX_set_cert_store(SSL_CTX * a, X509_STORE * b);
int SSL_want(const SSL * s);
int SSL_clear(SSL * s);
void SSL_CTX_flush_sessions(SSL_CTX * ctx, long tm);
const SSL_CIPHER * SSL_get_current_cipher(const SSL * s);
int SSL_CIPHER_get_bits(const SSL_CIPHER * c, int * alg_bits);
char * SSL_CIPHER_get_version(const SSL_CIPHER * c);
const char * SSL_CIPHER_get_name(const SSL_CIPHER * c);
const char * SSL_CIPHER_get_mac(const SSL_CIPHER * cipher);
const char * SSL_CIPHER_get_encryption(const SSL_CIPHER * cipher);
const char * SSL_CIPHER_get_authentication(const SSL_CIPHER * cipher);
const char * SSL_CIPHER_get_key_exchange(const SSL_CIPHER * cipher);
const char * SSL_CIPHER_get_export(const SSL_CIPHER * cipher);
int SSL_get_fd(const SSL * s);
int SSL_get_rfd(const SSL * s);
int SSL_get_wfd(const SSL * s);
const char * SSL_get_cipher_list(const SSL * s, int n);
char * SSL_get_shared_ciphers(const SSL * s, char * buf, int len);
int SSL_get_read_ahead(const SSL * s);
int SSL_pending(const SSL * s);
int SSL_set_fd(SSL * s, int fd);
int SSL_set_rfd(SSL * s, int fd);
int SSL_set_wfd(SSL * s, int fd);
void SSL_set_bio(SSL * s, BIO * rbio, BIO * wbio);
BIO * SSL_get_rbio(const SSL * s);
BIO * SSL_get_wbio(const SSL * s);
int SSL_set_cipher_list(SSL * s, const char * str);
void SSL_set_read_ahead(SSL * s, int yes);
int SSL_get_verify_mode(const SSL * s);
int SSL_get_verify_depth(const SSL * s);
int (*)(int, X509_STORE_CTX *) SSL_get_verify_callback(const SSL * s);
void SSL_set_verify(SSL * s, int mode, int (*callback)(int ok,X509_STORE_CTX *ctx));
void SSL_set_verify_depth(SSL * s, int depth);
int SSL_use_RSAPrivateKey(SSL * ssl, RSA * rsa);
int SSL_use_RSAPrivateKey_ASN1(SSL * ssl, unsigned char * d, long len);
int SSL_use_PrivateKey(SSL * ssl, EVP_PKEY * pkey);
int SSL_use_PrivateKey_ASN1(int pk, SSL * ssl, unsigned char * d, long len);
int SSL_use_certificate(SSL * ssl, X509 * x);
int SSL_use_certificate_ASN1(SSL * ssl, unsigned char * d, int len);
int SSL_use_RSAPrivateKey_file(SSL * ssl, const char * file, int type);
int SSL_use_PrivateKey_file(SSL * ssl, const char * file, int type);
int SSL_use_certificate_file(SSL * ssl, const char * file, int type);
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX * ctx, const char * file, int type);
int SSL_CTX_use_PrivateKey_file(SSL_CTX * ctx, const char * file, int type);
int SSL_CTX_use_certificate_file(SSL_CTX * ctx, const char * file, int type);
int SSL_CTX_use_certificate_chain_file(SSL_CTX * ctx, const char * file);
STACK_OF(X509_NAME) * SSL_load_client_CA_file(const char * file);
int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) * stackCAs, const char * file);
int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) * stackCAs, const char * dir);
void SSL_load_error_strings(void);
const char * SSL_state_string(const SSL * s);
const char * SSL_rstate_string(const SSL * s);
const char * SSL_state_string_long(const SSL * s);
const char * SSL_rstate_string_long(const SSL * s);
long SSL_SESSION_get_time(const SSL_SESSION * s);
long SSL_SESSION_set_time(SSL_SESSION * s, long t);
long SSL_SESSION_get_timeout(const SSL_SESSION * s);
long SSL_SESSION_set_timeout(SSL_SESSION * s, long t);
void SSL_copy_session_id(SSL * to, const SSL * from);
SSL_SESSION * SSL_SESSION_new(void);
int SSL_SESSION_print(BIO * fp, const SSL_SESSION * ses);
void SSL_SESSION_free(SSL_SESSION * ses);
int i2d_SSL_SESSION(SSL_SESSION * in, unsigned char ** pp);
int SSL_set_session(SSL * to, SSL_SESSION * session);
int SSL_CTX_add_session(SSL_CTX * s, SSL_SESSION * c);
int SSL_CTX_remove_session(SSL_CTX * a1, SSL_SESSION * c);
int SSL_CTX_set_generate_session_id(SSL_CTX * a, GEN_SESSION_CB b);
int SSL_set_generate_session_id(SSL * a, GEN_SESSION_CB b);
int SSL_has_matching_session_id(const SSL * ssl, const unsigned char * id, unsigned int id_len);
SSL_SESSION * d2i_SSL_SESSION(SSL_SESSION ** a, const unsigned char ** pp, long length);
X509 * SSL_get_peer_certificate(const SSL * s);
STACK_OF(X509) * SSL_get_peer_cert_chain(const SSL * s);
int SSL_CTX_get_verify_mode(const SSL_CTX * ctx);
int SSL_CTX_get_verify_depth(const SSL_CTX * ctx);
int (*)(int, X509_STORE_CTX *) SSL_CTX_get_verify_callback(const SSL_CTX * ctx);
void SSL_CTX_set_verify(SSL_CTX * ctx, int mode, int (*callback)(int,X509_STORE_CTX *));
void SSL_CTX_set_verify_depth(SSL_CTX * ctx, int depth);
void SSL_CTX_set_cert_verify_callback(SSL_CTX * ctx, int (*cb)(X509_STORE_CTX *,void *), void * arg);
int SSL_CTX_use_RSAPrivateKey(SSL_CTX * ctx, RSA * rsa);
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX * ctx, unsigned char * d, long len);
int SSL_CTX_use_PrivateKey(SSL_CTX * ctx, EVP_PKEY * pkey);
int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX * ctx, unsigned char * d, long len);
int SSL_CTX_use_certificate(SSL_CTX * ctx, X509 * x);
int SSL_CTX_use_certificate_ASN1(SSL_CTX * ctx, int len, unsigned char * d);
void SSL_CTX_set_default_passwd_cb(SSL_CTX * ctx, pem_password_cb * cb);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX * ctx, void * u);
int SSL_CTX_check_private_key(const SSL_CTX * ctx);
int SSL_check_private_key(const SSL * ctx);
int SSL_CTX_set_session_id_context(SSL_CTX * ctx, const unsigned char * sid_ctx, unsigned int sid_ctx_len);
SSL * SSL_new(SSL_CTX * ctx);
int SSL_set_session_id_context(SSL * ssl, const unsigned char * sid_ctx, unsigned int sid_ctx_len);
int SSL_CTX_set_purpose(SSL_CTX * s, int purpose);
int SSL_set_purpose(SSL * s, int purpose);
int SSL_CTX_set_trust(SSL_CTX * s, int trust);
int SSL_set_trust(SSL * s, int trust);
void SSL_free(SSL * ssl);
int SSL_accept(SSL * ssl);
int SSL_connect(SSL * ssl);
int SSL_read(SSL * ssl, void * buf, int num);
int SSL_peek(SSL * ssl, void * buf, int num);
int SSL_write(SSL * ssl, const void * buf, int num);
long SSL_ctrl(SSL * ssl, int cmd, long larg, void * parg);
long SSL_callback_ctrl(SSL * a, int a1, void (*b)());
long SSL_CTX_ctrl(SSL_CTX * ctx, int cmd, long larg, void * parg);
long SSL_CTX_callback_ctrl(SSL_CTX * a1, int a2, void (*a3)(void));
int SSL_get_error(const SSL * s, int ret_code);
const char * SSL_get_version(const SSL * s);
int SSL_CTX_set_ssl_version(SSL_CTX * ctx, const SSL_METHOD * meth);
const SSL_METHOD * SSLv2_method(void);
const SSL_METHOD * SSLv2_server_method(void);
const SSL_METHOD * SSLv2_client_method(void);
const SSL_METHOD * SSLv3_method(void);
const SSL_METHOD * SSLv3_server_method(void);
const SSL_METHOD * SSLv3_client_method(void);
const SSL_METHOD * SSLv23_method(void);
const SSL_METHOD * SSLv23_server_method(void);
const SSL_METHOD * SSLv23_client_method(void);
const SSL_METHOD * TLSv1_method(void);
const SSL_METHOD * TLSv1_server_method(void);
const SSL_METHOD * TLSv1_client_method(void);
STACK_OF(SSL_CIPHER) * SSL_get_ciphers(const SSL * s);
int SSL_do_handshake(SSL * s);
int SSL_renegotiate(SSL * s);
int SSL_renegotiate_pending(SSL * s);
int SSL_shutdown(SSL * s);
const SSL_METHOD * SSL_get_ssl_method(SSL * s);
int SSL_set_ssl_method(SSL * s, SSL_METHOD * method);
const char * SSL_alert_type_string_long(int value);
const char * SSL_alert_type_string(int value);
const char * SSL_alert_desc_string_long(int value);
const char * SSL_alert_desc_string(int value);
void SSL_set_client_CA_list(SSL * s, STACK_OF(X509_NAME) * name_list);
void SSL_CTX_set_client_CA_list(SSL_CTX * ctx, STACK_OF(X509_NAME) * name_list);
STACK_OF(X509_NAME) * SSL_get_client_CA_list(const SSL * s);
STACK_OF(X509_NAME) * SSL_CTX_get_client_CA_list(const SSL_CTX * s);
int SSL_add_client_CA(SSL * ssl, X509 * x);
int SSL_CTX_add_client_CA(SSL_CTX * ctx, X509 * x);
void SSL_set_connect_state(SSL * s);
void SSL_set_accept_state(SSL * s);
long SSL_get_default_timeout(const SSL * s);
int SSL_library_init(void);
char * SSL_CIPHER_description(SSL_CIPHER * a1, char * buf, int size);
STACK_OF(X509_NAME) * SSL_dup_CA_list(STACK_OF(X509_NAME) * sk);
SSL * SSL_dup(SSL * ssl);
X509 * SSL_get_certificate(const SSL * ssl);
struct evp_pkey_st * SSL_get_privatekey(SSL * ssl);
void SSL_CTX_set_quiet_shutdown(SSL_CTX * ctx, int mode);
int SSL_CTX_get_quiet_shutdown(const SSL_CTX * ctx);
void SSL_set_quiet_shutdown(SSL * ssl, int mode);
int SSL_get_quiet_shutdown(const SSL * ssl);
void SSL_set_shutdown(SSL * ssl, int mode);
int SSL_get_shutdown(const SSL * ssl);
int SSL_version(const SSL * ssl);
int SSL_CTX_set_default_verify_paths(SSL_CTX * ctx);
int SSL_CTX_load_verify_locations(SSL_CTX * ctx, const char * CAfile, const char * CApath);
SSL_SESSION * SSL_get_session(const SSL * ssl);
SSL_SESSION * SSL_get1_session(SSL * ssl);
SSL_CTX * SSL_get_SSL_CTX(const SSL * ssl);
void SSL_set_info_callback(SSL * ssl, void (*cb)(const SSL *ssl,int type,int val));
void (*)(const SSL *ssl, int type, int val) SSL_get_info_callback(const SSL * ssl);
int SSL_state(const SSL * ssl);
void SSL_set_verify_result(SSL * ssl, long v);
long SSL_get_verify_result(const SSL * ssl);
int SSL_set_ex_data(SSL * ssl, int idx, void * data);
void * SSL_get_ex_data(const SSL * ssl, int idx);
int SSL_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int SSL_SESSION_set_ex_data(SSL_SESSION * ss, int idx, void * data);
void * SSL_SESSION_get_ex_data(const SSL_SESSION * ss, int idx);
int SSL_SESSION_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int SSL_CTX_set_ex_data(SSL_CTX * ssl, int idx, void * data);
void * SSL_CTX_get_ex_data(const SSL_CTX * ssl, int idx);
int SSL_CTX_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int SSL_get_ex_data_X509_STORE_CTX_idx(void);
void SSL_CTX_set_tmp_rsa_callback(SSL_CTX * ctx, RSA * (*cb)(SSL *ssl,int is_export,int keylength));
void SSL_set_tmp_rsa_callback(SSL * ssl, RSA * (*cb)(SSL *ssl,int is_export,int keylength));
void SSL_CTX_set_tmp_dh_callback(SSL_CTX * ctx, DH * (*dh)(SSL *ssl,int is_export,int keylength));
void SSL_set_tmp_dh_callback(SSL * ssl, DH * (*dh)(SSL *ssl,int is_export,int keylength));
int SSL_COMP_add_compression_method(int id, COMP_METHOD * cm);
void ERR_load_SSL_strings(void);
int sk_num(const _STACK * a);
char * sk_value(const _STACK * a, int b);
char * sk_set(_STACK * a, int b, char * c);
_STACK * sk_new(int (*cmp)(const void *,const void *));
_STACK * sk_new_null(void);
void sk_free(_STACK * a);
void sk_pop_free(_STACK * st, void (*func)(void *));
int sk_insert(_STACK * sk, char * data, int where);
char * sk_delete(_STACK * st, int loc);
char * sk_delete_ptr(_STACK * st, char * p);
int sk_find(_STACK * st, char * data);
int sk_push(_STACK * st, char * data);
int sk_unshift(_STACK * st, char * data);
char * sk_shift(_STACK * st);
char * sk_pop(_STACK * st);
void sk_zero(_STACK * st);
int (*)(const void *, const void *) sk_set_cmp_func(_STACK * sk, int (*c)(const void *,const void *));
_STACK * sk_dup(_STACK * st);
void sk_sort(_STACK * st);
int FIPS_mode(void);
int sk_is_sorted(const _STACK * st);
TXT_DB * TXT_DB_read(BIO * in, int num);
long TXT_DB_write(BIO * out, TXT_DB * db);
int TXT_DB_create_index(TXT_DB * db, int field, int (*qual)(), LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp);
void TXT_DB_free(TXT_DB * db);
char ** TXT_DB_get_by_index(TXT_DB * db, int idx, char ** value);
int TXT_DB_insert(TXT_DB * db, char ** value);
UI * UI_new(void);
UI * UI_new_method(const UI_METHOD * method);
void UI_free(UI * ui);
int UI_add_input_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize);
int UI_dup_input_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize);
int UI_add_verify_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize, const char * test_buf);
int UI_dup_verify_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize, const char * test_buf);
int UI_add_input_boolean(UI * ui, const char * prompt, const char * action_desc, const char * ok_chars, const char * cancel_chars, int flags, char * result_buf);
int UI_dup_input_boolean(UI * ui, const char * prompt, const char * action_desc, const char * ok_chars, const char * cancel_chars, int flags, char * result_buf);
int UI_add_info_string(UI * ui, const char * text);
int UI_dup_info_string(UI * ui, const char * text);
int UI_add_error_string(UI * ui, const char * text);
int UI_dup_error_string(UI * ui, const char * text);
char * UI_construct_prompt(UI * ui_method, const char * object_desc, const char * object_name);
void * UI_add_user_data(UI * ui, void * user_data);
void * UI_get0_user_data(UI * ui);
const char * UI_get0_result(UI * ui, int i);
int UI_process(UI * ui);
int UI_ctrl(UI * ui, int cmd, long i, void * p, void (*f)());
int UI_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int UI_set_ex_data(UI * r, int idx, void * arg);
void * UI_get_ex_data(UI * r, int idx);
void UI_set_default_method(const UI_METHOD * meth);
const UI_METHOD * UI_get_default_method(void);
const UI_METHOD * UI_get_method(UI * ui);
const UI_METHOD * UI_set_method(UI * ui, const UI_METHOD * meth);
UI_METHOD * UI_OpenSSL(void);
UI_METHOD * UI_create_method(char * name);
void UI_destroy_method(UI_METHOD * ui_method);
int UI_method_set_opener(UI_METHOD * method, int (*opener)(UI *ui));
int UI_method_set_writer(UI_METHOD * method, int (*writer)(UI *ui,UI_STRING *uis));
int UI_method_set_flusher(UI_METHOD * method, int (*flusher)(UI *ui));
int UI_method_set_reader(UI_METHOD * method, int (*reader)(UI *ui,UI_STRING *uis));
int UI_method_set_closer(UI_METHOD * method, int (*closer)(UI *ui));
int (*)(UI *) UI_method_get_opener(UI_METHOD * method);
int (*)(UI *, UI_STRING *) UI_method_get_writer(UI_METHOD * method);
int (*)(UI *) UI_method_get_flusher(UI_METHOD * method);
int (*)(UI *, UI_STRING *) UI_method_get_reader(UI_METHOD * method);
int (*)(UI *) UI_method_get_closer(UI_METHOD * method);
enum UI_string_types UI_get_string_type(UI_STRING * uis);
int UI_get_input_flags(UI_STRING * uis);
const char * UI_get0_output_string(UI_STRING * uis);
const char * UI_get0_action_string(UI_STRING * uis);
const char * UI_get0_result_string(UI_STRING * uis);
const char * UI_get0_test_string(UI_STRING * uis);
int UI_get_result_minsize(UI_STRING * uis);
int UI_get_result_maxsize(UI_STRING * uis);
int UI_set_result(UI * ui, UI_STRING * uis, const char * result);
int UI_UTIL_read_pw_string(char * buf, int length, const char * prompt, int verify);
int UI_UTIL_read_pw(char * buf, char * buff, int size, const char * prompt, int verify);
void ERR_load_UI_strings(void);
int _ossl_old_des_read_pw_string(char * buf, int length, const char * prompt, int verify);
int _ossl_old_des_read_pw(char * buf, char * buff, int size, const char * prompt, int verify);
const char * X509_verify_cert_error_string(long n);
int X509_verify(X509 * a, EVP_PKEY * r);
int X509_REQ_verify(X509_REQ * a, EVP_PKEY * r);
int X509_CRL_verify(X509_CRL * a, EVP_PKEY * r);
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI * a, EVP_PKEY * r);
NETSCAPE_SPKI * NETSCAPE_SPKI_b64_decode(const char * str, int len);
char * NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI * x);
EVP_PKEY * NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI * x);
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI * x, EVP_PKEY * pkey);
int NETSCAPE_SPKI_print(BIO * out, NETSCAPE_SPKI * spki);
int X509_signature_print(BIO * bp, X509_ALGOR * alg, ASN1_STRING * sig);
int X509_sign(X509 * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_REQ_sign(X509_REQ * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_CRL_sign(X509_CRL * x, EVP_PKEY * pkey, const EVP_MD * md);
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI * x, EVP_PKEY * pkey, const EVP_MD * md);
int X509_pubkey_digest(const X509 * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
int X509_digest(const X509 * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
int X509_CRL_digest(const X509_CRL * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
int X509_REQ_digest(const X509_REQ * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
int X509_NAME_digest(const X509_NAME * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
X509 * d2i_X509_bio(BIO * bp, X509 ** x509);
int i2d_X509_bio(BIO * bp, X509 * x509);
X509_CRL * d2i_X509_CRL_bio(BIO * bp, X509_CRL ** crl);
int i2d_X509_CRL_bio(BIO * bp, X509_CRL * crl);
X509_REQ * d2i_X509_REQ_bio(BIO * bp, X509_REQ ** req);
int i2d_X509_REQ_bio(BIO * bp, X509_REQ * req);
RSA * d2i_RSAPrivateKey_bio(BIO * bp, RSA ** rsa);
int i2d_RSAPrivateKey_bio(BIO * bp, RSA * rsa);
RSA * d2i_RSAPublicKey_bio(BIO * bp, RSA ** rsa);
int i2d_RSAPublicKey_bio(BIO * bp, RSA * rsa);
RSA * d2i_RSA_PUBKEY_bio(BIO * bp, RSA ** rsa);
int i2d_RSA_PUBKEY_bio(BIO * bp, RSA * rsa);
DSA * d2i_DSA_PUBKEY_bio(BIO * bp, DSA ** dsa);
int i2d_DSA_PUBKEY_bio(BIO * bp, DSA * dsa);
DSA * d2i_DSAPrivateKey_bio(BIO * bp, DSA ** dsa);
int i2d_DSAPrivateKey_bio(BIO * bp, DSA * dsa);
X509_SIG * d2i_PKCS8_bio(BIO * bp, X509_SIG ** p8);
int i2d_PKCS8_bio(BIO * bp, X509_SIG * p8);
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO ** p8inf);
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO * p8inf);
int i2d_PKCS8PrivateKeyInfo_bio(BIO * bp, EVP_PKEY * key);
int i2d_PrivateKey_bio(BIO * bp, EVP_PKEY * pkey);
EVP_PKEY * d2i_PrivateKey_bio(BIO * bp, EVP_PKEY ** a);
int i2d_PUBKEY_bio(BIO * bp, EVP_PKEY * pkey);
EVP_PKEY * d2i_PUBKEY_bio(BIO * bp, EVP_PKEY ** a);
X509 * X509_dup(X509 * x509);
X509_ATTRIBUTE * X509_ATTRIBUTE_dup(X509_ATTRIBUTE * xa);
X509_EXTENSION * X509_EXTENSION_dup(X509_EXTENSION * ex);
X509_CRL * X509_CRL_dup(X509_CRL * crl);
X509_REQ * X509_REQ_dup(X509_REQ * req);
X509_ALGOR * X509_ALGOR_dup(X509_ALGOR * xn);
X509_NAME * X509_NAME_dup(X509_NAME * xn);
X509_NAME_ENTRY * X509_NAME_ENTRY_dup(X509_NAME_ENTRY * ne);
int X509_cmp_time(ASN1_TIME * s, time_t * t);
int X509_cmp_current_time(ASN1_TIME * s);
ASN1_TIME * X509_time_adj(ASN1_TIME * s, long adj, time_t * t);
ASN1_TIME * X509_gmtime_adj(ASN1_TIME * s, long adj);
const char * X509_get_default_cert_area(void);
const char * X509_get_default_cert_dir(void);
const char * X509_get_default_cert_file(void);
const char * X509_get_default_cert_dir_env(void);
const char * X509_get_default_cert_file_env(void);
const char * X509_get_default_private_dir(void);
X509_REQ * X509_to_X509_REQ(X509 * x, EVP_PKEY * pkey, const EVP_MD * md);
X509 * X509_REQ_to_X509(X509_REQ * r, int days, EVP_PKEY * pkey);
X509_ALGOR * X509_ALGOR_new(void);
void X509_ALGOR_free(X509_ALGOR * a);
X509_ALGOR * d2i_X509_ALGOR(X509_ALGOR ** a, const unsigned char ** in, long len);
int i2d_X509_ALGOR(X509_ALGOR * a, unsigned char ** out);
const ASN1_ITEM * X509_ALGOR_it(void);
X509_VAL * X509_VAL_new(void);
void X509_VAL_free(X509_VAL * a);
X509_VAL * d2i_X509_VAL(X509_VAL ** a, const unsigned char ** in, long len);
int i2d_X509_VAL(X509_VAL * a, unsigned char ** out);
const ASN1_ITEM * X509_VAL_it(void);
X509_PUBKEY * X509_PUBKEY_new(void);
void X509_PUBKEY_free(X509_PUBKEY * a);
X509_PUBKEY * d2i_X509_PUBKEY(X509_PUBKEY ** a, const unsigned char ** in, long len);
int i2d_X509_PUBKEY(X509_PUBKEY * a, unsigned char ** out);
const ASN1_ITEM * X509_PUBKEY_it(void);
int X509_PUBKEY_set(X509_PUBKEY ** x, EVP_PKEY * pkey);
EVP_PKEY * X509_PUBKEY_get(X509_PUBKEY * key);
int X509_get_pubkey_parameters(EVP_PKEY * pkey, STACK_OF(X509) * chain);
int i2d_PUBKEY(EVP_PKEY * a, unsigned char ** pp);
EVP_PKEY * d2i_PUBKEY(EVP_PKEY ** a, const unsigned char ** pp, long length);
int i2d_RSA_PUBKEY(RSA * a, unsigned char ** pp);
RSA * d2i_RSA_PUBKEY(RSA ** a, const unsigned char ** pp, long length);
int i2d_DSA_PUBKEY(DSA * a, unsigned char ** pp);
DSA * d2i_DSA_PUBKEY(DSA ** a, const unsigned char ** pp, long length);
X509_SIG * X509_SIG_new(void);
void X509_SIG_free(X509_SIG * a);
X509_SIG * d2i_X509_SIG(X509_SIG ** a, const unsigned char ** in, long len);
int i2d_X509_SIG(X509_SIG * a, unsigned char ** out);
const ASN1_ITEM * X509_SIG_it(void);
X509_REQ_INFO * X509_REQ_INFO_new(void);
void X509_REQ_INFO_free(X509_REQ_INFO * a);
X509_REQ_INFO * d2i_X509_REQ_INFO(X509_REQ_INFO ** a, const unsigned char ** in, long len);
int i2d_X509_REQ_INFO(X509_REQ_INFO * a, unsigned char ** out);
const ASN1_ITEM * X509_REQ_INFO_it(void);
X509_REQ * X509_REQ_new(void);
void X509_REQ_free(X509_REQ * a);
X509_REQ * d2i_X509_REQ(X509_REQ ** a, const unsigned char ** in, long len);
int i2d_X509_REQ(X509_REQ * a, unsigned char ** out);
const ASN1_ITEM * X509_REQ_it(void);
X509_ATTRIBUTE * X509_ATTRIBUTE_new(void);
void X509_ATTRIBUTE_free(X509_ATTRIBUTE * a);
X509_ATTRIBUTE * d2i_X509_ATTRIBUTE(X509_ATTRIBUTE ** a, const unsigned char ** in, long len);
int i2d_X509_ATTRIBUTE(X509_ATTRIBUTE * a, unsigned char ** out);
const ASN1_ITEM * X509_ATTRIBUTE_it(void);
X509_ATTRIBUTE * X509_ATTRIBUTE_create(int nid, int atrtype, void * value);
X509_EXTENSION * X509_EXTENSION_new(void);
void X509_EXTENSION_free(X509_EXTENSION * a);
X509_EXTENSION * d2i_X509_EXTENSION(X509_EXTENSION ** a, const unsigned char ** in, long len);
int i2d_X509_EXTENSION(X509_EXTENSION * a, unsigned char ** out);
const ASN1_ITEM * X509_EXTENSION_it(void);
X509_NAME_ENTRY * X509_NAME_ENTRY_new(void);
void X509_NAME_ENTRY_free(X509_NAME_ENTRY * a);
X509_NAME_ENTRY * d2i_X509_NAME_ENTRY(X509_NAME_ENTRY ** a, const unsigned char ** in, long len);
int i2d_X509_NAME_ENTRY(X509_NAME_ENTRY * a, unsigned char ** out);
const ASN1_ITEM * X509_NAME_ENTRY_it(void);
X509_NAME * X509_NAME_new(void);
void X509_NAME_free(X509_NAME * a);
X509_NAME * d2i_X509_NAME(X509_NAME ** a, const unsigned char ** in, long len);
int i2d_X509_NAME(X509_NAME * a, unsigned char ** out);
const ASN1_ITEM * X509_NAME_it(void);
int X509_NAME_set(X509_NAME ** xn, X509_NAME * name);
X509_CINF * X509_CINF_new(void);
void X509_CINF_free(X509_CINF * a);
X509_CINF * d2i_X509_CINF(X509_CINF ** a, const unsigned char ** in, long len);
int i2d_X509_CINF(X509_CINF * a, unsigned char ** out);
const ASN1_ITEM * X509_CINF_it(void);
X509 * X509_new(void);
void X509_free(X509 * a);
X509 * d2i_X509(X509 ** a, const unsigned char ** in, long len);
int i2d_X509(X509 * a, unsigned char ** out);
const ASN1_ITEM * X509_it(void);
X509_CERT_AUX * X509_CERT_AUX_new(void);
void X509_CERT_AUX_free(X509_CERT_AUX * a);
X509_CERT_AUX * d2i_X509_CERT_AUX(X509_CERT_AUX ** a, const unsigned char ** in, long len);
int i2d_X509_CERT_AUX(X509_CERT_AUX * a, unsigned char ** out);
const ASN1_ITEM * X509_CERT_AUX_it(void);
int X509_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int X509_set_ex_data(X509 * r, int idx, void * arg);
void * X509_get_ex_data(X509 * r, int idx);
int i2d_X509_AUX(X509 * a, unsigned char ** pp);
X509 * d2i_X509_AUX(X509 ** a, const unsigned char ** pp, long length);
int X509_alias_set1(X509 * x, unsigned char * name, int len);
int X509_keyid_set1(X509 * x, unsigned char * id, int len);
unsigned char * X509_alias_get0(X509 * x, int * len);
int (*)(int, X509 *, int) X509_TRUST_set_default(int (*trust)(int,X509 *,int));
int X509_TRUST_set(int * t, int trust);
int X509_add1_trust_object(X509 * x, ASN1_OBJECT * obj);
int X509_add1_reject_object(X509 * x, ASN1_OBJECT * obj);
void X509_trust_clear(X509 * x);
void X509_reject_clear(X509 * x);
X509_REVOKED * X509_REVOKED_new(void);
void X509_REVOKED_free(X509_REVOKED * a);
X509_REVOKED * d2i_X509_REVOKED(X509_REVOKED ** a, const unsigned char ** in, long len);
int i2d_X509_REVOKED(X509_REVOKED * a, unsigned char ** out);
const ASN1_ITEM * X509_REVOKED_it(void);
X509_CRL_INFO * X509_CRL_INFO_new(void);
void X509_CRL_INFO_free(X509_CRL_INFO * a);
X509_CRL_INFO * d2i_X509_CRL_INFO(X509_CRL_INFO ** a, const unsigned char ** in, long len);
int i2d_X509_CRL_INFO(X509_CRL_INFO * a, unsigned char ** out);
const ASN1_ITEM * X509_CRL_INFO_it(void);
X509_CRL * X509_CRL_new(void);
void X509_CRL_free(X509_CRL * a);
X509_CRL * d2i_X509_CRL(X509_CRL ** a, const unsigned char ** in, long len);
int i2d_X509_CRL(X509_CRL * a, unsigned char ** out);
const ASN1_ITEM * X509_CRL_it(void);
int X509_CRL_add0_revoked(X509_CRL * crl, X509_REVOKED * rev);
X509_PKEY * X509_PKEY_new(void);
void X509_PKEY_free(X509_PKEY * a);
int i2d_X509_PKEY(X509_PKEY * a, unsigned char ** pp);
X509_PKEY * d2i_X509_PKEY(X509_PKEY ** a, const unsigned char ** pp, long length);
NETSCAPE_SPKI * NETSCAPE_SPKI_new(void);
void NETSCAPE_SPKI_free(NETSCAPE_SPKI * a);
NETSCAPE_SPKI * d2i_NETSCAPE_SPKI(NETSCAPE_SPKI ** a, const unsigned char ** in, long len);
int i2d_NETSCAPE_SPKI(NETSCAPE_SPKI * a, unsigned char ** out);
const ASN1_ITEM * NETSCAPE_SPKI_it(void);
NETSCAPE_SPKAC * NETSCAPE_SPKAC_new(void);
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC * a);
NETSCAPE_SPKAC * d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC ** a, const unsigned char ** in, long len);
int i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC * a, unsigned char ** out);
const ASN1_ITEM * NETSCAPE_SPKAC_it(void);
NETSCAPE_CERT_SEQUENCE * NETSCAPE_CERT_SEQUENCE_new(void);
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE * a);
NETSCAPE_CERT_SEQUENCE * d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE ** a, const unsigned char ** in, long len);
int i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE * a, unsigned char ** out);
const ASN1_ITEM * NETSCAPE_CERT_SEQUENCE_it(void);
X509_INFO * X509_INFO_new(void);
void X509_INFO_free(X509_INFO * a);
char * X509_NAME_oneline(X509_NAME * a, char * buf, int size);
int ASN1_verify(int (*i2d)(), X509_ALGOR * algor1, ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey);
int ASN1_digest(int (*i2d)(), const EVP_MD * type, char * data, unsigned char * md, unsigned int * len);
int ASN1_sign(int (*i2d)(), X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey, const EVP_MD * type);
int ASN1_item_digest(const ASN1_ITEM * it, const EVP_MD * type, void * data, unsigned char * md, unsigned int * len);
int ASN1_item_verify(const ASN1_ITEM * it, X509_ALGOR * algor1, ASN1_BIT_STRING * signature, void * data, EVP_PKEY * pkey);
int ASN1_item_sign(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, void * data, EVP_PKEY * pkey, const EVP_MD * type);
int X509_set_version(X509 * x, long version);
int X509_set_serialNumber(X509 * x, ASN1_INTEGER * serial);
ASN1_INTEGER * X509_get_serialNumber(X509 * x);
int X509_set_issuer_name(X509 * x, X509_NAME * name);
X509_NAME * X509_get_issuer_name(X509 * a);
int X509_set_subject_name(X509 * x, X509_NAME * name);
X509_NAME * X509_get_subject_name(X509 * a);
int X509_set_notBefore(X509 * x, ASN1_TIME * tm);
int X509_set_notAfter(X509 * x, ASN1_TIME * tm);
int X509_set_pubkey(X509 * x, EVP_PKEY * pkey);
EVP_PKEY * X509_get_pubkey(X509 * x);
ASN1_BIT_STRING * X509_get0_pubkey_bitstr(const X509 * x);
int X509_certificate_type(X509 * x, EVP_PKEY * pubkey);
int X509_REQ_set_version(X509_REQ * x, long version);
int X509_REQ_set_subject_name(X509_REQ * req, X509_NAME * name);
int X509_REQ_set_pubkey(X509_REQ * x, EVP_PKEY * pkey);
EVP_PKEY * X509_REQ_get_pubkey(X509_REQ * req);
int X509_REQ_extension_nid(int nid);
int * X509_REQ_get_extension_nids(void);
void X509_REQ_set_extension_nids(int * nids);
STACK_OF(X509_EXTENSION) * X509_REQ_get_extensions(X509_REQ * req);
int X509_REQ_add_extensions_nid(X509_REQ * req, STACK_OF(X509_EXTENSION) * exts, int nid);
int X509_REQ_add_extensions(X509_REQ * req, STACK_OF(X509_EXTENSION) * exts);
int X509_REQ_get_attr_count(const X509_REQ * req);
int X509_REQ_get_attr_by_NID(const X509_REQ * req, int nid, int lastpos);
int X509_REQ_get_attr_by_OBJ(const X509_REQ * req, ASN1_OBJECT * obj, int lastpos);
X509_ATTRIBUTE * X509_REQ_get_attr(const X509_REQ * req, int loc);
X509_ATTRIBUTE * X509_REQ_delete_attr(X509_REQ * req, int loc);
int X509_REQ_add1_attr(X509_REQ * req, X509_ATTRIBUTE * attr);
int X509_REQ_add1_attr_by_OBJ(X509_REQ * req, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
int X509_REQ_add1_attr_by_NID(X509_REQ * req, int nid, int type, const unsigned char * bytes, int len);
int X509_REQ_add1_attr_by_txt(X509_REQ * req, const char * attrname, int type, const unsigned char * bytes, int len);
int X509_CRL_set_version(X509_CRL * x, long version);
int X509_CRL_set_issuer_name(X509_CRL * x, X509_NAME * name);
int X509_CRL_set_lastUpdate(X509_CRL * x, ASN1_TIME * tm);
int X509_CRL_set_nextUpdate(X509_CRL * x, ASN1_TIME * tm);
int X509_CRL_sort(X509_CRL * crl);
int X509_REVOKED_set_serialNumber(X509_REVOKED * x, ASN1_INTEGER * serial);
int X509_REVOKED_set_revocationDate(X509_REVOKED * r, ASN1_TIME * tm);
int X509_check_private_key(X509 * x509, EVP_PKEY * pkey);
int X509_issuer_and_serial_cmp(const X509 * a, const X509 * b);
unsigned long X509_issuer_and_serial_hash(X509 * a);
int X509_issuer_name_cmp(const X509 * a, const X509 * b);
unsigned long X509_issuer_name_hash(X509 * a);
int X509_subject_name_cmp(const X509 * a, const X509 * b);
unsigned long X509_subject_name_hash(X509 * x);
int X509_cmp(const X509 * a, const X509 * b);
int X509_NAME_cmp(const X509_NAME * a, const X509_NAME * b);
unsigned long X509_NAME_hash(X509_NAME * x);
int X509_CRL_cmp(const X509_CRL * a, const X509_CRL * b);
int X509_NAME_print(BIO * bp, X509_NAME * name, int obase);
int X509_NAME_print_ex(BIO * out, X509_NAME * nm, int indent, unsigned long flags);
int X509_print_ex(BIO * bp, X509 * x, unsigned long nmflag, unsigned long cflag);
int X509_print(BIO * bp, X509 * x);
int X509_ocspid_print(BIO * bp, X509 * x);
int X509_CERT_AUX_print(BIO * bp, X509_CERT_AUX * x, int indent);
int X509_CRL_print(BIO * bp, X509_CRL * x);
int X509_REQ_print_ex(BIO * bp, X509_REQ * x, unsigned long nmflag, unsigned long cflag);
int X509_REQ_print(BIO * bp, X509_REQ * req);
int X509_NAME_entry_count(X509_NAME * name);
int X509_NAME_get_text_by_NID(X509_NAME * name, int nid, char * buf, int len);
int X509_NAME_get_text_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, char * buf, int len);
int X509_NAME_get_index_by_NID(X509_NAME * name, int nid, int lastpos);
int X509_NAME_get_index_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, int lastpos);
X509_NAME_ENTRY * X509_NAME_get_entry(X509_NAME * name, int loc);
X509_NAME_ENTRY * X509_NAME_delete_entry(X509_NAME * name, int loc);
int X509_NAME_add_entry(X509_NAME * name, X509_NAME_ENTRY * ne, int loc, int set);
int X509_NAME_add_entry_by_OBJ(X509_NAME * name, ASN1_OBJECT * obj, int type, unsigned char * bytes, int len, int loc, int set);
int X509_NAME_add_entry_by_NID(X509_NAME * name, int nid, int type, unsigned char * bytes, int len, int loc, int set);
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY ** ne, const char * field, int type, const unsigned char * bytes, int len);
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY ** ne, int nid, int type, unsigned char * bytes, int len);
int X509_NAME_add_entry_by_txt(X509_NAME * name, const char * field, int type, const unsigned char * bytes, int len, int loc, int set);
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY ** ne, ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY * ne, ASN1_OBJECT * obj);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY * ne, int type, const unsigned char * bytes, int len);
ASN1_OBJECT * X509_NAME_ENTRY_get_object(X509_NAME_ENTRY * ne);
ASN1_STRING * X509_NAME_ENTRY_get_data(X509_NAME_ENTRY * ne);
int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) * x);
int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) * x, int nid, int lastpos);
int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) * x, ASN1_OBJECT * obj, int lastpos);
int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) * x, int crit, int lastpos);
X509_EXTENSION * X509v3_get_ext(const STACK_OF(X509_EXTENSION) * x, int loc);
X509_EXTENSION * X509v3_delete_ext(STACK_OF(X509_EXTENSION) * x, int loc);
STACK_OF(X509_EXTENSION) * X509v3_add_ext(STACK_OF(X509_EXTENSION) ** x, X509_EXTENSION * ex, int loc);
int X509_get_ext_count(X509 * x);
int X509_get_ext_by_NID(X509 * x, int nid, int lastpos);
int X509_get_ext_by_OBJ(X509 * x, ASN1_OBJECT * obj, int lastpos);
int X509_get_ext_by_critical(X509 * x, int crit, int lastpos);
X509_EXTENSION * X509_get_ext(X509 * x, int loc);
X509_EXTENSION * X509_delete_ext(X509 * x, int loc);
int X509_add_ext(X509 * x, X509_EXTENSION * ex, int loc);
void * X509_get_ext_d2i(X509 * x, int nid, int * crit, int * idx);
int X509_add1_ext_i2d(X509 * x, int nid, void * value, int crit, unsigned long flags);
int X509_CRL_get_ext_count(X509_CRL * x);
int X509_CRL_get_ext_by_NID(X509_CRL * x, int nid, int lastpos);
int X509_CRL_get_ext_by_OBJ(X509_CRL * x, ASN1_OBJECT * obj, int lastpos);
int X509_CRL_get_ext_by_critical(X509_CRL * x, int crit, int lastpos);
X509_EXTENSION * X509_CRL_get_ext(X509_CRL * x, int loc);
X509_EXTENSION * X509_CRL_delete_ext(X509_CRL * x, int loc);
int X509_CRL_add_ext(X509_CRL * x, X509_EXTENSION * ex, int loc);
void * X509_CRL_get_ext_d2i(X509_CRL * x, int nid, int * crit, int * idx);
int X509_CRL_add1_ext_i2d(X509_CRL * x, int nid, void * value, int crit, unsigned long flags);
int X509_REVOKED_get_ext_count(X509_REVOKED * x);
int X509_REVOKED_get_ext_by_NID(X509_REVOKED * x, int nid, int lastpos);
int X509_REVOKED_get_ext_by_OBJ(X509_REVOKED * x, ASN1_OBJECT * obj, int lastpos);
int X509_REVOKED_get_ext_by_critical(X509_REVOKED * x, int crit, int lastpos);
X509_EXTENSION * X509_REVOKED_get_ext(X509_REVOKED * x, int loc);
X509_EXTENSION * X509_REVOKED_delete_ext(X509_REVOKED * x, int loc);
int X509_REVOKED_add_ext(X509_REVOKED * x, X509_EXTENSION * ex, int loc);
void * X509_REVOKED_get_ext_d2i(X509_REVOKED * x, int nid, int * crit, int * idx);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED * x, int nid, void * value, int crit, unsigned long flags);
X509_EXTENSION * X509_EXTENSION_create_by_NID(X509_EXTENSION ** ex, int nid, int crit, ASN1_OCTET_STRING * data);
X509_EXTENSION * X509_EXTENSION_create_by_OBJ(X509_EXTENSION ** ex, ASN1_OBJECT * obj, int crit, ASN1_OCTET_STRING * data);
int X509_EXTENSION_set_object(X509_EXTENSION * ex, ASN1_OBJECT * obj);
int X509_EXTENSION_set_critical(X509_EXTENSION * ex, int crit);
int X509_EXTENSION_set_data(X509_EXTENSION * ex, ASN1_OCTET_STRING * data);
ASN1_OBJECT * X509_EXTENSION_get_object(X509_EXTENSION * ex);
ASN1_OCTET_STRING * X509_EXTENSION_get_data(X509_EXTENSION * ne);
int X509_EXTENSION_get_critical(X509_EXTENSION * ex);
int X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) * x);
int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) * x, int nid, int lastpos);
int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) * sk, ASN1_OBJECT * obj, int lastpos);
X509_ATTRIBUTE * X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) * x, int loc);
X509_ATTRIBUTE * X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) * x, int loc);
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) ** x, X509_ATTRIBUTE * attr);
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE) ** x, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE) ** x, int nid, int type, const unsigned char * bytes, int len);
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE) ** x, const char * attrname, int type, const unsigned char * bytes, int len);
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE ** attr, int nid, int atrtype, const void * data, int len);
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE ** attr, const ASN1_OBJECT * obj, int atrtype, const void * data, int len);
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE ** attr, const char * atrname, int type, const unsigned char * bytes, int len);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE * attr, const ASN1_OBJECT * obj);
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE * attr, int attrtype, const void * data, int len);
void * X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE * attr, int idx, int atrtype, void * data);
int X509_ATTRIBUTE_count(X509_ATTRIBUTE * attr);
ASN1_OBJECT * X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE * attr);
ASN1_TYPE * X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE * attr, int idx);
int X509_verify_cert(X509_STORE_CTX * ctx);
X509 * X509_find_by_issuer_and_serial(STACK_OF(X509) * sk, X509_NAME * name, ASN1_INTEGER * serial);
X509 * X509_find_by_subject(STACK_OF(X509) * sk, X509_NAME * name);
PBEPARAM * PBEPARAM_new(void);
void PBEPARAM_free(PBEPARAM * a);
PBEPARAM * d2i_PBEPARAM(PBEPARAM ** a, const unsigned char ** in, long len);
int i2d_PBEPARAM(PBEPARAM * a, unsigned char ** out);
const ASN1_ITEM * PBEPARAM_it(void);
PBE2PARAM * PBE2PARAM_new(void);
void PBE2PARAM_free(PBE2PARAM * a);
PBE2PARAM * d2i_PBE2PARAM(PBE2PARAM ** a, const unsigned char ** in, long len);
int i2d_PBE2PARAM(PBE2PARAM * a, unsigned char ** out);
const ASN1_ITEM * PBE2PARAM_it(void);
PBKDF2PARAM * PBKDF2PARAM_new(void);
void PBKDF2PARAM_free(PBKDF2PARAM * a);
PBKDF2PARAM * d2i_PBKDF2PARAM(PBKDF2PARAM ** a, const unsigned char ** in, long len);
int i2d_PBKDF2PARAM(PBKDF2PARAM * a, unsigned char ** out);
const ASN1_ITEM * PBKDF2PARAM_it(void);
X509_ALGOR * PKCS5_pbe_set(int alg, int iter, unsigned char * salt, int saltlen);
X509_ALGOR * PKCS5_pbe2_set(const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen);
PKCS8_PRIV_KEY_INFO * PKCS8_PRIV_KEY_INFO_new(void);
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO * a);
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO ** a, const unsigned char ** in, long len);
int i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO * a, unsigned char ** out);
const ASN1_ITEM * PKCS8_PRIV_KEY_INFO_it(void);
EVP_PKEY * EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO * p8);
PKCS8_PRIV_KEY_INFO * EVP_PKEY2PKCS8(EVP_PKEY * pkey);
PKCS8_PRIV_KEY_INFO * EVP_PKEY2PKCS8_broken(EVP_PKEY * pkey, int broken);
PKCS8_PRIV_KEY_INFO * PKCS8_set_broken(PKCS8_PRIV_KEY_INFO * p8, int broken);
int X509_check_trust(X509 * x, int id, int flags);
int X509_TRUST_get_count(void);
X509_TRUST * X509_TRUST_get0(int idx);
int X509_TRUST_get_by_id(int id);
int X509_TRUST_add(int id, int flags, int (*ck)(X509_TRUST *,X509 *,int), char * name, int arg1, void * arg2);
void X509_TRUST_cleanup(void);
int X509_TRUST_get_flags(X509_TRUST * xp);
char * X509_TRUST_get0_name(X509_TRUST * xp);
int X509_TRUST_get_trust(X509_TRUST * xp);
void ERR_load_X509_strings(void);
int X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) * h, int type, X509_NAME * name);
X509_OBJECT * X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) * h, int type, X509_NAME * name);
X509_OBJECT * X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) * h, X509_OBJECT * x);
void X509_OBJECT_up_ref_count(X509_OBJECT * a);
void X509_OBJECT_free_contents(X509_OBJECT * a);
X509_STORE * X509_STORE_new(void);
void X509_STORE_free(X509_STORE * v);
void X509_STORE_set_flags(X509_STORE * ctx, long flags);
int X509_STORE_set_purpose(X509_STORE * ctx, int purpose);
int X509_STORE_set_trust(X509_STORE * ctx, int trust);
X509_STORE_CTX * X509_STORE_CTX_new(void);
int X509_STORE_CTX_get1_issuer(X509 ** issuer, X509_STORE_CTX * ctx, X509 * x);
void X509_STORE_CTX_free(X509_STORE_CTX * ctx);
int X509_STORE_CTX_init(X509_STORE_CTX * ctx, X509_STORE * store, X509 * x509, STACK_OF(X509) * chain);
void X509_STORE_CTX_trusted_stack(X509_STORE_CTX * ctx, STACK_OF(X509) * sk);
void X509_STORE_CTX_cleanup(X509_STORE_CTX * ctx);
X509_LOOKUP * X509_STORE_add_lookup(X509_STORE * v, X509_LOOKUP_METHOD * m);
X509_LOOKUP_METHOD * X509_LOOKUP_hash_dir(void);
X509_LOOKUP_METHOD * X509_LOOKUP_file(void);
int X509_STORE_add_cert(X509_STORE * ctx, X509 * x);
int X509_STORE_add_crl(X509_STORE * ctx, X509_CRL * x);
int X509_STORE_get_by_subject(X509_STORE_CTX * vs, int type, X509_NAME * name, X509_OBJECT * ret);
int X509_LOOKUP_ctrl(X509_LOOKUP * ctx, int cmd, const char * argc, long argl, char ** ret);
int X509_load_cert_file(X509_LOOKUP * ctx, const char * file, int type);
int X509_load_crl_file(X509_LOOKUP * ctx, const char * file, int type);
int X509_load_cert_crl_file(X509_LOOKUP * ctx, const char * file, int type);
X509_LOOKUP * X509_LOOKUP_new(X509_LOOKUP_METHOD * method);
void X509_LOOKUP_free(X509_LOOKUP * ctx);
int X509_LOOKUP_init(X509_LOOKUP * ctx);
int X509_LOOKUP_by_subject(X509_LOOKUP * ctx, int type, X509_NAME * name, X509_OBJECT * ret);
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP * ctx, int type, X509_NAME * name, ASN1_INTEGER * serial, X509_OBJECT * ret);
int X509_LOOKUP_by_fingerprint(X509_LOOKUP * ctx, int type, unsigned char * bytes, int len, X509_OBJECT * ret);
int X509_LOOKUP_by_alias(X509_LOOKUP * ctx, int type, char * str, int len, X509_OBJECT * ret);
int X509_LOOKUP_shutdown(X509_LOOKUP * ctx);
int X509_STORE_load_locations(X509_STORE * ctx, const char * file, const char * dir);
int X509_STORE_set_default_paths(X509_STORE * ctx);
int X509_STORE_CTX_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX * ctx, int idx, void * data);
void * X509_STORE_CTX_get_ex_data(X509_STORE_CTX * ctx, int idx);
int X509_STORE_CTX_get_error(X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_error(X509_STORE_CTX * ctx, int s);
int X509_STORE_CTX_get_error_depth(X509_STORE_CTX * ctx);
X509 * X509_STORE_CTX_get_current_cert(X509_STORE_CTX * ctx);
STACK_OF(X509) * X509_STORE_CTX_get_chain(X509_STORE_CTX * ctx);
STACK_OF(X509) * X509_STORE_CTX_get1_chain(X509_STORE_CTX * ctx);
void X509_STORE_CTX_set_cert(X509_STORE_CTX * c, X509 * x);
void X509_STORE_CTX_set_chain(X509_STORE_CTX * c, STACK_OF(X509) * sk);
int X509_STORE_CTX_set_purpose(X509_STORE_CTX * ctx, int purpose);
int X509_STORE_CTX_set_trust(X509_STORE_CTX * ctx, int trust);
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX * ctx, int def_purpose, int purpose, int trust);
void X509_STORE_CTX_set_flags(X509_STORE_CTX * ctx, long flags);
void X509_STORE_CTX_set_time(X509_STORE_CTX * ctx, long flags, time_t t);
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX * ctx, int (*verify_cb)(int,X509_STORE_CTX *));
BASIC_CONSTRAINTS * BASIC_CONSTRAINTS_new(void);
void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS * a);
BASIC_CONSTRAINTS * d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS ** a, const unsigned char ** in, long len);
int i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS * a, unsigned char ** out);
const ASN1_ITEM * BASIC_CONSTRAINTS_it(void);
SXNET * SXNET_new(void);
void SXNET_free(SXNET * a);
SXNET * d2i_SXNET(SXNET ** a, const unsigned char ** in, long len);
int i2d_SXNET(SXNET * a, unsigned char ** out);
const ASN1_ITEM * SXNET_it(void);
SXNETID * SXNETID_new(void);
void SXNETID_free(SXNETID * a);
SXNETID * d2i_SXNETID(SXNETID ** a, const unsigned char ** in, long len);
int i2d_SXNETID(SXNETID * a, unsigned char ** out);
const ASN1_ITEM * SXNETID_it(void);
int SXNET_add_id_asc(SXNET ** psx, char * zone, char * user, int userlen);
int SXNET_add_id_ulong(SXNET ** psx, unsigned long lzone, char * user, int userlen);
int SXNET_add_id_INTEGER(SXNET ** psx, ASN1_INTEGER * izone, char * user, int userlen);
ASN1_OCTET_STRING * SXNET_get_id_asc(SXNET * sx, char * zone);
ASN1_OCTET_STRING * SXNET_get_id_ulong(SXNET * sx, unsigned long lzone);
ASN1_OCTET_STRING * SXNET_get_id_INTEGER(SXNET * sx, ASN1_INTEGER * zone);
AUTHORITY_KEYID * AUTHORITY_KEYID_new(void);
void AUTHORITY_KEYID_free(AUTHORITY_KEYID * a);
AUTHORITY_KEYID * d2i_AUTHORITY_KEYID(AUTHORITY_KEYID ** a, const unsigned char ** in, long len);
int i2d_AUTHORITY_KEYID(AUTHORITY_KEYID * a, unsigned char ** out);
const ASN1_ITEM * AUTHORITY_KEYID_it(void);
PKEY_USAGE_PERIOD * PKEY_USAGE_PERIOD_new(void);
void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD * a);
PKEY_USAGE_PERIOD * d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD ** a, const unsigned char ** in, long len);
int i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD * a, unsigned char ** out);
const ASN1_ITEM * PKEY_USAGE_PERIOD_it(void);
GENERAL_NAME * GENERAL_NAME_new(void);
void GENERAL_NAME_free(GENERAL_NAME * a);
GENERAL_NAME * d2i_GENERAL_NAME(GENERAL_NAME ** a, const unsigned char ** in, long len);
int i2d_GENERAL_NAME(GENERAL_NAME * a, unsigned char ** out);
const ASN1_ITEM * GENERAL_NAME_it(void);
STACK_OF(CONF_VALUE) * i2v_GENERAL_NAME(X509V3_EXT_METHOD * method, GENERAL_NAME * gen, STACK_OF(CONF_VALUE) * ret);
int GENERAL_NAME_print(BIO * out, GENERAL_NAME * gen);
GENERAL_NAMES * GENERAL_NAMES_new(void);
void GENERAL_NAMES_free(GENERAL_NAMES * a);
GENERAL_NAMES * d2i_GENERAL_NAMES(GENERAL_NAMES ** a, const unsigned char ** in, long len);
int i2d_GENERAL_NAMES(GENERAL_NAMES * a, unsigned char ** out);
const ASN1_ITEM * GENERAL_NAMES_it(void);
STACK_OF(CONF_VALUE) * i2v_GENERAL_NAMES(X509V3_EXT_METHOD * method, GENERAL_NAMES * gen, STACK_OF(CONF_VALUE) * extlist);
GENERAL_NAMES * v2i_GENERAL_NAMES(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * nval);
OTHERNAME * OTHERNAME_new(void);
void OTHERNAME_free(OTHERNAME * a);
OTHERNAME * d2i_OTHERNAME(OTHERNAME ** a, const unsigned char ** in, long len);
int i2d_OTHERNAME(OTHERNAME * a, unsigned char ** out);
const ASN1_ITEM * OTHERNAME_it(void);
EDIPARTYNAME * EDIPARTYNAME_new(void);
void EDIPARTYNAME_free(EDIPARTYNAME * a);
EDIPARTYNAME * d2i_EDIPARTYNAME(EDIPARTYNAME ** a, const unsigned char ** in, long len);
int i2d_EDIPARTYNAME(EDIPARTYNAME * a, unsigned char ** out);
const ASN1_ITEM * EDIPARTYNAME_it(void);
char * i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, ASN1_OCTET_STRING * ia5);
ASN1_OCTET_STRING * s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, char * str);
EXTENDED_KEY_USAGE * EXTENDED_KEY_USAGE_new(void);
void EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE * a);
EXTENDED_KEY_USAGE * d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE ** a, const unsigned char ** in, long len);
int i2d_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE * a, unsigned char ** out);
const ASN1_ITEM * EXTENDED_KEY_USAGE_it(void);
int i2a_ACCESS_DESCRIPTION(BIO * bp, ACCESS_DESCRIPTION * a);
CERTIFICATEPOLICIES * CERTIFICATEPOLICIES_new(void);
void CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES * a);
CERTIFICATEPOLICIES * d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES ** a, const unsigned char ** in, long len);
int i2d_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES * a, unsigned char ** out);
const ASN1_ITEM * CERTIFICATEPOLICIES_it(void);
POLICYINFO * POLICYINFO_new(void);
void POLICYINFO_free(POLICYINFO * a);
POLICYINFO * d2i_POLICYINFO(POLICYINFO ** a, const unsigned char ** in, long len);
int i2d_POLICYINFO(POLICYINFO * a, unsigned char ** out);
const ASN1_ITEM * POLICYINFO_it(void);
POLICYQUALINFO * POLICYQUALINFO_new(void);
void POLICYQUALINFO_free(POLICYQUALINFO * a);
POLICYQUALINFO * d2i_POLICYQUALINFO(POLICYQUALINFO ** a, const unsigned char ** in, long len);
int i2d_POLICYQUALINFO(POLICYQUALINFO * a, unsigned char ** out);
const ASN1_ITEM * POLICYQUALINFO_it(void);
USERNOTICE * USERNOTICE_new(void);
void USERNOTICE_free(USERNOTICE * a);
USERNOTICE * d2i_USERNOTICE(USERNOTICE ** a, const unsigned char ** in, long len);
int i2d_USERNOTICE(USERNOTICE * a, unsigned char ** out);
const ASN1_ITEM * USERNOTICE_it(void);
NOTICEREF * NOTICEREF_new(void);
void NOTICEREF_free(NOTICEREF * a);
NOTICEREF * d2i_NOTICEREF(NOTICEREF ** a, const unsigned char ** in, long len);
int i2d_NOTICEREF(NOTICEREF * a, unsigned char ** out);
const ASN1_ITEM * NOTICEREF_it(void);
CRL_DIST_POINTS * CRL_DIST_POINTS_new(void);
void CRL_DIST_POINTS_free(CRL_DIST_POINTS * a);
CRL_DIST_POINTS * d2i_CRL_DIST_POINTS(CRL_DIST_POINTS ** a, const unsigned char ** in, long len);
int i2d_CRL_DIST_POINTS(CRL_DIST_POINTS * a, unsigned char ** out);
const ASN1_ITEM * CRL_DIST_POINTS_it(void);
DIST_POINT * DIST_POINT_new(void);
void DIST_POINT_free(DIST_POINT * a);
DIST_POINT * d2i_DIST_POINT(DIST_POINT ** a, const unsigned char ** in, long len);
int i2d_DIST_POINT(DIST_POINT * a, unsigned char ** out);
const ASN1_ITEM * DIST_POINT_it(void);
DIST_POINT_NAME * DIST_POINT_NAME_new(void);
void DIST_POINT_NAME_free(DIST_POINT_NAME * a);
DIST_POINT_NAME * d2i_DIST_POINT_NAME(DIST_POINT_NAME ** a, const unsigned char ** in, long len);
int i2d_DIST_POINT_NAME(DIST_POINT_NAME * a, unsigned char ** out);
const ASN1_ITEM * DIST_POINT_NAME_it(void);
ACCESS_DESCRIPTION * ACCESS_DESCRIPTION_new(void);
void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION * a);
ACCESS_DESCRIPTION * d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION ** a, const unsigned char ** in, long len);
int i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION * a, unsigned char ** out);
const ASN1_ITEM * ACCESS_DESCRIPTION_it(void);
AUTHORITY_INFO_ACCESS * AUTHORITY_INFO_ACCESS_new(void);
void AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS * a);
AUTHORITY_INFO_ACCESS * d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS ** a, const unsigned char ** in, long len);
int i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS * a, unsigned char ** out);
const ASN1_ITEM * AUTHORITY_INFO_ACCESS_it(void);
GENERAL_NAME * v2i_GENERAL_NAME(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, CONF_VALUE * cnf);
void X509V3_conf_free(CONF_VALUE * val);
X509_EXTENSION * X509V3_EXT_nconf_nid(CONF * conf, X509V3_CTX * ctx, int ext_nid, char * value);
X509_EXTENSION * X509V3_EXT_nconf(CONF * conf, X509V3_CTX * ctx, char * name, char * value);
int X509V3_EXT_add_nconf_sk(CONF * conf, X509V3_CTX * ctx, char * section, STACK_OF(X509_EXTENSION) ** sk);
int X509V3_EXT_add_nconf(CONF * conf, X509V3_CTX * ctx, char * section, X509 * cert);
int X509V3_EXT_REQ_add_nconf(CONF * conf, X509V3_CTX * ctx, char * section, X509_REQ * req);
int X509V3_EXT_CRL_add_nconf(CONF * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl);
X509_EXTENSION * X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, int ext_nid, char * value);
X509_EXTENSION * X509V3_EXT_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * name, char * value);
int X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * section, X509 * cert);
int X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * section, X509_REQ * req);
int X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl);
int X509V3_add_value_bool_nf(char * name, int asn1_bool, STACK_OF(CONF_VALUE) ** extlist);
int X509V3_get_value_bool(CONF_VALUE * value, int * asn1_bool);
int X509V3_get_value_int(CONF_VALUE * value, ASN1_INTEGER ** aint);
void X509V3_set_nconf(X509V3_CTX * ctx, CONF * conf);
void X509V3_set_conf_lhash(X509V3_CTX * ctx, LHASH_OF(CONF_VALUE) * lhash);
char * X509V3_get_string(X509V3_CTX * ctx, char * name, char * section);
STACK_OF(CONF_VALUE) * X509V3_get_section(X509V3_CTX * ctx, char * section);
void X509V3_string_free(X509V3_CTX * ctx, char * str);
void X509V3_section_free(X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * section);
void X509V3_set_ctx(X509V3_CTX * ctx, X509 * issuer, X509 * subject, X509_REQ * req, X509_CRL * crl, int flags);
int X509V3_add_value(const char * name, const char * value, STACK_OF(CONF_VALUE) ** extlist);
int X509V3_add_value_uchar(const char * name, const unsigned char * value, STACK_OF(CONF_VALUE) ** extlist);
int X509V3_add_value_bool(const char * name, int asn1_bool, STACK_OF(CONF_VALUE) ** extlist);
int X509V3_add_value_int(const char * name, ASN1_INTEGER * aint, STACK_OF(CONF_VALUE) ** extlist);
char * i2s_ASN1_INTEGER(X509V3_EXT_METHOD * meth, ASN1_INTEGER * aint);
ASN1_INTEGER * s2i_ASN1_INTEGER(X509V3_EXT_METHOD * meth, char * value);
char * i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint);
char * i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint);
int X509V3_EXT_add(X509V3_EXT_METHOD * ext);
int X509V3_EXT_add_list(X509V3_EXT_METHOD * extlist);
int X509V3_EXT_add_alias(int nid_to, int nid_from);
void X509V3_EXT_cleanup(void);
const X509V3_EXT_METHOD * X509V3_EXT_get(X509_EXTENSION * ext);
const X509V3_EXT_METHOD * X509V3_EXT_get_nid(int nid);
int X509V3_add_standard_extensions(void);
STACK_OF(CONF_VALUE) * X509V3_parse_list(const char * line);
void * X509V3_EXT_d2i(X509_EXTENSION * ext);
void * X509V3_get_d2i(STACK_OF(X509_EXTENSION) * x, int nid, int * crit, int * idx);
X509_EXTENSION * X509V3_EXT_i2d(int ext_nid, int crit, void * ext_struc);
int X509V3_add1_i2d(STACK_OF(X509_EXTENSION) ** x, int nid, void * value, int crit, unsigned long flags);
char * hex_to_string(unsigned char * buffer, long len);
unsigned char * string_to_hex(char * str, long * len);
int name_cmp(const char * name, const char * cmp);
void X509V3_EXT_val_prn(BIO * out, STACK_OF(CONF_VALUE) * val, int indent, int ml);
int X509V3_EXT_print(BIO * out, X509_EXTENSION * ext, unsigned long flag, int indent);
int X509V3_extensions_print(BIO * out, char * title, STACK_OF(X509_EXTENSION) * exts, unsigned long flag, int indent);
int X509_check_purpose(X509 * x, int id, int ca);
int X509_supported_extension(X509_EXTENSION * ex);
int X509_PURPOSE_set(int * p, int purpose);
int X509_check_issued(X509 * issuer, X509 * subject);
int X509_PURPOSE_get_count(void);
X509_PURPOSE * X509_PURPOSE_get0(int idx);
int X509_PURPOSE_get_by_sname(char * sname);
int X509_PURPOSE_get_by_id(int id);
int X509_PURPOSE_add(int id, int trust, int flags, int (*ck)(const X509_PURPOSE *,const X509 *,int), char * name, char * sname, void * arg);
char * X509_PURPOSE_get0_name(X509_PURPOSE * xp);
char * X509_PURPOSE_get0_sname(X509_PURPOSE * xp);
int X509_PURPOSE_get_trust(X509_PURPOSE * xp);
void X509_PURPOSE_cleanup(void);
int X509_PURPOSE_get_id(X509_PURPOSE * a);
STACK_OF(OPENSSL_STRING) * X509_get1_email(X509 * x);
STACK_OF(OPENSSL_STRING) * X509_REQ_get1_email(X509_REQ * x);
void X509_email_free(STACK_OF(OPENSSL_STRING) * sk);
void ERR_load_X509V3_strings(void);
const char * AES_options(void);
int AES_set_encrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key);
int AES_set_decrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key);
void AES_encrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key);
void AES_decrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key);
void AES_ecb_encrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key, const int enc);
void AES_cbc_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, const int enc);
void AES_cfb128_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc);
void AES_cfb1_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc);
void AES_cfb8_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc);
void AES_ofb128_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num);
void AES_ctr128_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num);
void BF_set_key(BF_KEY * key, int len, const unsigned char * data);
void BF_encrypt(BF_LONG * data, const BF_KEY * key);
void BF_decrypt(BF_LONG * data, const BF_KEY * key);
void BF_ecb_encrypt(const unsigned char * in, unsigned char * out, const BF_KEY * key, int enc);
void BF_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int enc);
void BF_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int * num, int enc);
void BF_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int * num);
const char * BF_options(void);
void CAST_set_key(CAST_KEY * key, int len, const unsigned char * data);
void CAST_ecb_encrypt(const unsigned char * in, unsigned char * out, CAST_KEY * key, int enc);
void CAST_encrypt(CAST_LONG * data, CAST_KEY * key);
void CAST_decrypt(CAST_LONG * data, CAST_KEY * key);
void CAST_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, CAST_KEY * ks, unsigned char * iv, int enc);
void CAST_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, CAST_KEY * schedule, unsigned char * ivec, int * num, int enc);
void CAST_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, CAST_KEY * schedule, unsigned char * ivec, int * num);
void DES_ecb3_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, int enc);
DES_LONG DES_cbc_cksum(const unsigned char * input, DES_cblock * output, long length, DES_key_schedule * schedule, const_DES_cblock * ivec);
void DES_cbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
void DES_ncbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
void DES_xcbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, const_DES_cblock * inw, const_DES_cblock * outw, int enc);
void DES_cfb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
void DES_ecb_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks, int enc);
void DES_encrypt1(DES_LONG * data, DES_key_schedule * ks, int enc);
void DES_encrypt2(DES_LONG * data, DES_key_schedule * ks, int enc);
void DES_encrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3);
void DES_decrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3);
void DES_ede3_cbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc);
void DES_ede3_cbcm_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec1, DES_cblock * ivec2, int enc);
void DES_ede3_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int * num, int enc);
void DES_ede3_cfb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc);
void DES_ede3_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int * num);
int DES_enc_read(int fd, void * buf, int len, DES_key_schedule * sched, DES_cblock * iv);
int DES_enc_write(int fd, const void * buf, int len, DES_key_schedule * sched, DES_cblock * iv);
char * DES_fcrypt(const char * buf, const char * salt, char * ret);
char * DES_crypt(const char * buf, const char * salt);
void DES_ofb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec);
void DES_pcbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
DES_LONG DES_quad_cksum(const unsigned char * input, DES_cblock * output, long length, int out_count, DES_cblock * seed);
int DES_random_key(DES_cblock * ret);
void DES_set_odd_parity(DES_cblock * key);
int DES_check_key_parity(const_DES_cblock * key);
int DES_is_weak_key(const_DES_cblock * key);
int DES_set_key(const_DES_cblock * key, DES_key_schedule * schedule);
int DES_key_sched(const_DES_cblock * key, DES_key_schedule * schedule);
int DES_set_key_checked(const_DES_cblock * key, DES_key_schedule * schedule);
void DES_set_key_unchecked(const_DES_cblock * key, DES_key_schedule * schedule);
void DES_string_to_key(const char * str, DES_cblock * key);
void DES_string_to_2keys(const char * str, DES_cblock * key1, DES_cblock * key2);
void DES_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int * num, int enc);
void DES_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int * num);
int DES_read_password(DES_cblock * key, const char * prompt, int verify);
int DES_read_2passwords(DES_cblock * key1, DES_cblock * key2, const char * prompt, int verify);
const char * _ossl_old_des_options(void);
void _ossl_old_des_ecb3_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, int enc);
DES_LONG _ossl_old_des_cbc_cksum(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec);
void _ossl_old_des_cbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
void _ossl_old_des_ncbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
void _ossl_old_des_xcbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, _ossl_old_des_cblock * inw, _ossl_old_des_cblock * outw, int enc);
void _ossl_old_des_cfb_encrypt(unsigned char * in, unsigned char * out, int numbits, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
void _ossl_old_des_ecb_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, _ossl_old_des_key_schedule ks, int enc);
void _ossl_old_des_encrypt(DES_LONG * data, _ossl_old_des_key_schedule ks, int enc);
void _ossl_old_des_encrypt2(DES_LONG * data, _ossl_old_des_key_schedule ks, int enc);
void _ossl_old_des_encrypt3(DES_LONG * data, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3);
void _ossl_old_des_decrypt3(DES_LONG * data, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3);
void _ossl_old_des_ede3_cbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec, int enc);
void _ossl_old_des_ede3_cfb64_encrypt(unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec, int * num, int enc);
void _ossl_old_des_ede3_ofb64_encrypt(unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec, int * num);
int _ossl_old_des_enc_read(int fd, char * buf, int len, _ossl_old_des_key_schedule sched, _ossl_old_des_cblock * iv);
int _ossl_old_des_enc_write(int fd, char * buf, int len, _ossl_old_des_key_schedule sched, _ossl_old_des_cblock * iv);
char * _ossl_old_des_fcrypt(const char * buf, const char * salt, char * ret);
char * _ossl_old_des_crypt(const char * buf, const char * salt);
char * _ossl_old_crypt(const char * buf, const char * salt);
void _ossl_old_des_ofb_encrypt(unsigned char * in, unsigned char * out, int numbits, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec);
void _ossl_old_des_pcbc_encrypt(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
DES_LONG _ossl_old_des_quad_cksum(_ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, int out_count, _ossl_old_des_cblock * seed);
void _ossl_old_des_random_seed(_ossl_old_des_cblock key);
void _ossl_old_des_random_key(_ossl_old_des_cblock ret);
int _ossl_old_des_read_password(_ossl_old_des_cblock * key, const char * prompt, int verify);
int _ossl_old_des_read_2passwords(_ossl_old_des_cblock * key1, _ossl_old_des_cblock * key2, const char * prompt, int verify);
void _ossl_old_des_set_odd_parity(_ossl_old_des_cblock * key);
int _ossl_old_des_is_weak_key(_ossl_old_des_cblock * key);
int _ossl_old_des_set_key(_ossl_old_des_cblock * key, _ossl_old_des_key_schedule schedule);
int _ossl_old_des_key_sched(_ossl_old_des_cblock * key, _ossl_old_des_key_schedule schedule);
void _ossl_old_des_string_to_key(char * str, _ossl_old_des_cblock * key);
void _ossl_old_des_string_to_2keys(char * str, _ossl_old_des_cblock * key1, _ossl_old_des_cblock * key2);
void _ossl_old_des_cfb64_encrypt(unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int * num, int enc);
void _ossl_old_des_ofb64_encrypt(unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int * num);
void _ossl_096_des_random_seed(des_cblock * key);
const DH_METHOD * DH_OpenSSL(void);
void DH_set_default_method(const DH_METHOD * meth);
const DH_METHOD * DH_get_default_method(void);
int DH_set_method(DH * dh, const DH_METHOD * meth);
DH * DH_new_method(ENGINE * engine);
DH * DH_new(void);
void DH_free(DH * dh);
int DH_up_ref(DH * dh);
int DH_size(const DH * dh);
int DH_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int DH_set_ex_data(DH * d, int idx, void * arg);
void * DH_get_ex_data(DH * d, int idx);
DH * DH_generate_parameters(int prime_len, int generator, void (*callback)(int,int,void *), void * cb_arg);
int DH_check(const DH * dh, int * codes);
int DH_generate_key(DH * dh);
int DH_compute_key(unsigned char * key, const BIGNUM * pub_key, DH * dh);
DH * d2i_DHparams(DH ** a, const unsigned char ** pp, long length);
int i2d_DHparams(const DH * a, unsigned char ** pp);
int DHparams_print(BIO * bp, const DH * x);
void ERR_load_DH_strings(void);
DSA_SIG * DSA_SIG_new(void);
void DSA_SIG_free(DSA_SIG * sig);
int i2d_DSA_SIG(const DSA_SIG * a, unsigned char ** pp);
DSA_SIG * d2i_DSA_SIG(DSA_SIG ** v, const unsigned char ** pp, long length);
DSA_SIG * DSA_do_sign(const unsigned char * dgst, int dlen, DSA * dsa);
int DSA_do_verify(const unsigned char * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa);
const DSA_METHOD * DSA_OpenSSL(void);
void DSA_set_default_method(const DSA_METHOD * a);
const DSA_METHOD * DSA_get_default_method(void);
int DSA_set_method(DSA * dsa, const DSA_METHOD * a);
DSA * DSA_new(void);
DSA * DSA_new_method(ENGINE * engine);
void DSA_free(DSA * r);
int DSA_up_ref(DSA * r);
int DSA_size(const DSA * a);
int DSA_sign_setup(DSA * dsa, BN_CTX * ctx_in, BIGNUM ** kinvp, BIGNUM ** rp);
int DSA_sign(int type, const unsigned char * dgst, int dlen, unsigned char * sig, unsigned int * siglen, DSA * dsa);
int DSA_verify(int type, const unsigned char * dgst, int dgst_len, const unsigned char * sigbuf, int siglen, DSA * dsa);
int DSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int DSA_set_ex_data(DSA * d, int idx, void * arg);
void * DSA_get_ex_data(DSA * d, int idx);
DSA * d2i_DSAPublicKey(DSA ** a, const unsigned char ** pp, long length);
DSA * d2i_DSAPrivateKey(DSA ** a, const unsigned char ** pp, long length);
DSA * d2i_DSAparams(DSA ** a, const unsigned char ** pp, long length);
DSA * DSA_generate_parameters(int bits, unsigned char * seed, int seed_len, int * counter_ret, unsigned long * h_ret, void (*callback)(int,int,void *), void * cb_arg);
int DSA_generate_key(DSA * a);
int i2d_DSAPublicKey(const DSA * a, unsigned char ** pp);
int i2d_DSAPrivateKey(const DSA * a, unsigned char ** pp);
int i2d_DSAparams(const DSA * a, unsigned char ** pp);
int DSAparams_print(BIO * bp, const DSA * x);
int DSA_print(BIO * bp, const DSA * x, int off);
DH * DSA_dup_DH(const DSA * r);
void ERR_load_DSA_strings(void);
const char * idea_options(void);
void idea_ecb_encrypt(const unsigned char * in, unsigned char * out, IDEA_KEY_SCHEDULE * ks);
void idea_set_encrypt_key(const unsigned char * key, IDEA_KEY_SCHEDULE * ks);
void idea_set_decrypt_key(IDEA_KEY_SCHEDULE * ek, IDEA_KEY_SCHEDULE * dk);
void idea_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int enc);
void idea_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num, int enc);
void idea_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num);
void idea_encrypt(unsigned long * in, IDEA_KEY_SCHEDULE * ks);
const char * MD2_options(void);
int MD2_Init(MD2_CTX * c);
int MD2_Update(MD2_CTX * c, const unsigned char * data, unsigned long len);
int MD2_Final(unsigned char * md, MD2_CTX * c);
unsigned char * MD2(const unsigned char * d, unsigned long n, unsigned char * md);
int MD4_Init(MD4_CTX * c);
int MD4_Update(MD4_CTX * c, const void * data, unsigned long len);
int MD4_Final(unsigned char * md, MD4_CTX * c);
unsigned char * MD4(const unsigned char * d, unsigned long n, unsigned char * md);
void MD4_Transform(MD4_CTX * c, const unsigned char * b);
int MD5_Init(MD5_CTX * c);
int MD5_Update(MD5_CTX * c, const void * data, unsigned long len);
int MD5_Final(unsigned char * md, MD5_CTX * c);
unsigned char * MD5(const unsigned char * d, unsigned long n, unsigned char * md);
void MD5_Transform(MD5_CTX * c, const unsigned char * b);
int MDC2_Init(MDC2_CTX * c);
int MDC2_Update(MDC2_CTX * c, const unsigned char * data, unsigned long len);
int MDC2_Final(unsigned char * md, MDC2_CTX * c);
unsigned char * MDC2(const unsigned char * d, unsigned long n, unsigned char * md);
void RC2_set_key(RC2_KEY * key, int len, const unsigned char * data, int bits);
void RC2_ecb_encrypt(const unsigned char * in, unsigned char * out, RC2_KEY * key, int enc);
void RC2_encrypt(unsigned long * data, RC2_KEY * key);
void RC2_decrypt(unsigned long * data, RC2_KEY * key);
void RC2_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, RC2_KEY * ks, unsigned char * iv, int enc);
void RC2_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC2_KEY * schedule, unsigned char * ivec, int * num, int enc);
void RC2_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC2_KEY * schedule, unsigned char * ivec, int * num);
const char * RC4_options(void);
void RC4_set_key(RC4_KEY * key, int len, const unsigned char * data);
void RC4(RC4_KEY * key, unsigned long len, const unsigned char * indata, unsigned char * outdata);
void RC5_32_set_key(RC5_32_KEY * key, int len, const unsigned char * data, int rounds);
void RC5_32_ecb_encrypt(const unsigned char * in, unsigned char * out, RC5_32_KEY * key, int enc);
void RC5_32_encrypt(unsigned long * data, RC5_32_KEY * key);
void RC5_32_decrypt(unsigned long * data, RC5_32_KEY * key);
void RC5_32_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * ks, unsigned char * iv, int enc);
void RC5_32_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * schedule, unsigned char * ivec, int * num, int enc);
void RC5_32_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * schedule, unsigned char * ivec, int * num);
int RIPEMD160_Init(RIPEMD160_CTX * c);
int RIPEMD160_Update(RIPEMD160_CTX * c, const void * data, unsigned long len);
int RIPEMD160_Final(unsigned char * md, RIPEMD160_CTX * c);
unsigned char * RIPEMD160(const unsigned char * d, unsigned long n, unsigned char * md);
void RIPEMD160_Transform(RIPEMD160_CTX * c, const unsigned char * b);
RSA * RSA_new(void);
RSA * RSA_new_method(ENGINE * engine);
int RSA_size(const RSA * a);
RSA * RSA_generate_key(int bits, unsigned long e, void (*callback)(int,int,void *), void * cb_arg);
int RSA_check_key(const RSA * a);
int RSA_public_encrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
int RSA_private_encrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
int RSA_public_decrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
int RSA_private_decrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
void RSA_free(RSA * r);
int RSA_up_ref(RSA * r);
int RSA_flags(const RSA * r);
void RSA_set_default_method(const RSA_METHOD * meth);
const RSA_METHOD * RSA_get_default_method(void);
const RSA_METHOD * RSA_get_method(const RSA * rsa);
int RSA_set_method(RSA * rsa, const RSA_METHOD * meth);
int RSA_memory_lock(RSA * r);
const RSA_METHOD * RSA_PKCS1_SSLeay(void);
const RSA_METHOD * RSA_null_method(void);
RSA * d2i_RSAPublicKey(RSA ** a, const unsigned char ** in, long len);
int i2d_RSAPublicKey(const RSA * a, unsigned char ** out);
const ASN1_ITEM * RSAPublicKey_it(void);
RSA * d2i_RSAPrivateKey(RSA ** a, const unsigned char ** in, long len);
int i2d_RSAPrivateKey(const RSA * a, unsigned char ** out);
const ASN1_ITEM * RSAPrivateKey_it(void);
int RSA_print(BIO * bp, const RSA * r, int offset);
int i2d_RSA_NET(const RSA * a, unsigned char ** pp, int (*cb)(), int sgckey);
RSA * d2i_RSA_NET(RSA ** a, const unsigned char ** pp, long length, int (*cb)(), int sgckey);
int i2d_Netscape_RSA(const RSA * a, unsigned char ** pp, int (*cb)());
RSA * d2i_Netscape_RSA(RSA ** a, const unsigned char ** pp, long length, int (*cb)());
int RSA_sign(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigret, unsigned int * siglen, RSA * rsa);
int RSA_verify(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigbuf, unsigned int siglen, RSA * rsa);
int RSA_sign_ASN1_OCTET_STRING(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigret, unsigned int * siglen, RSA * rsa);
int RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigbuf, unsigned int siglen, RSA * rsa);
int RSA_blinding_on(RSA * rsa, BN_CTX * ctx);
void RSA_blinding_off(RSA * rsa);
int RSA_padding_add_PKCS1_type_1(unsigned char * to, int tlen, const unsigned char * f, int fl);
int RSA_padding_check_PKCS1_type_1(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
int RSA_padding_add_PKCS1_type_2(unsigned char * to, int tlen, const unsigned char * f, int fl);
int RSA_padding_check_PKCS1_type_2(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
int RSA_padding_add_PKCS1_OAEP(unsigned char * to, int tlen, const unsigned char * f, int fl, const unsigned char * p, int pl);
int RSA_padding_check_PKCS1_OAEP(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len, const unsigned char * p, int pl);
int RSA_padding_add_SSLv23(unsigned char * to, int tlen, const unsigned char * f, int fl);
int RSA_padding_check_SSLv23(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
int RSA_padding_add_none(unsigned char * to, int tlen, const unsigned char * f, int fl);
int RSA_padding_check_none(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
int RSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
int RSA_set_ex_data(RSA * r, int idx, void * arg);
void * RSA_get_ex_data(const RSA * r, int idx);
RSA * RSAPublicKey_dup(RSA * rsa);
RSA * RSAPrivateKey_dup(RSA * rsa);
void ERR_load_RSA_strings(void);
int SHA_Init(SHA_CTX * c);
int SHA_Update(SHA_CTX * c, const void * data, unsigned long len);
int SHA_Final(unsigned char * md, SHA_CTX * c);
unsigned char * SHA(const unsigned char * d, unsigned long n, unsigned char * md);
void SHA_Transform(SHA_CTX * c, const unsigned char * data);
int SHA1_Init(SHA_CTX * c);
int SHA1_Update(SHA_CTX * c, const void * data, unsigned long len);
int SHA1_Final(unsigned char * md, SHA_CTX * c);
unsigned char * SHA1(const unsigned char * d, unsigned long n, unsigned char * md);
void SHA1_Transform(SHA_CTX * c, const unsigned char * data);
void HMAC_CTX_set_flags(HMAC_CTX * ctx, unsigned long flags);
void private_RC4_set_key(RC4_KEY * key, int len, const unsigned char * data);
int X509_check_ca(X509 * x);
PROXY_POLICY * PROXY_POLICY_new(void);
void PROXY_POLICY_free(PROXY_POLICY * a);
PROXY_POLICY * d2i_PROXY_POLICY(PROXY_POLICY ** a, const unsigned char ** in, long len);
int i2d_PROXY_POLICY(PROXY_POLICY * a, unsigned char ** out);
const ASN1_ITEM * PROXY_POLICY_it(void);
PROXY_CERT_INFO_EXTENSION * PROXY_CERT_INFO_EXTENSION_new(void);
void PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION * a);
PROXY_CERT_INFO_EXTENSION * d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION ** a, const unsigned char ** in, long len);
int i2d_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION * a, unsigned char ** out);
const ASN1_ITEM * PROXY_CERT_INFO_EXTENSION_it(void);
int BN_mod_exp_mont_consttime(BIGNUM * rr, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * in_mont);
BN_MONT_CTX * BN_MONT_CTX_set_locked(BN_MONT_CTX ** pmont, int lock, const BIGNUM * mod, BN_CTX * ctx);
int PKCS1_MGF1(unsigned char * mask, long len, const unsigned char * seed, long seedlen, const EVP_MD * dgst);
int RSA_padding_add_X931(unsigned char * to, int tlen, const unsigned char * from, int flen);
int RSA_padding_check_X931(unsigned char * to, int tlen, const unsigned char * from, int flen, int num);
int RSA_X931_hash_id(int nid);
int RSA_verify_PKCS1_PSS(RSA * rsa, const unsigned char * mHash, const EVP_MD * Hash, const unsigned char * EM, int sLen);
int RSA_padding_add_PKCS1_PSS(RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, int sLen);
const EVP_MD * EVP_sha224(void);
const EVP_MD * EVP_sha256(void);
const EVP_MD * EVP_sha384(void);
const EVP_MD * EVP_sha512(void);
int BN_GF2m_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
int BN_GF2m_arr2poly(const int * p, BIGNUM * a);
int BN_GF2m_mod(BIGNUM * r, const BIGNUM * a, const BIGNUM * p);
int BN_GF2m_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_inv(BIGNUM * r, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_div(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_sqrt(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_GF2m_mod_solve_quad(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BN_generate_prime_ex(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, BN_GENCB * cb);
int BN_is_prime_ex(const BIGNUM * p, int nchecks, BN_CTX * ctx, BN_GENCB * cb);
void BN_set_negative(BIGNUM * b, int n);
int EC_GROUP_get_degree(const EC_GROUP * group);
const EC_METHOD * EC_GF2m_simple_method(void);
int EC_GROUP_set_curve_GF2m(EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
int EC_GROUP_get_curve_GF2m(const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx);
int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP * group, EC_POINT * point, const BIGNUM * x, const BIGNUM * y, BN_CTX * ctx);
int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP * group, const EC_POINT * point, BIGNUM * x, BIGNUM * y, BN_CTX * ctx);
size_t EC_get_builtin_curves(EC_builtin_curve * r, size_t nitems);
EC_GROUP * EC_GROUP_new_by_curve_name(int nid);
int EC_GROUP_check(const EC_GROUP * group, BN_CTX * ctx);
void ENGINE_cleanup(void);
int DSA_generate_parameters_ex(DSA * dsa, int bits, unsigned char * seed, int seed_len, int * counter_ret, unsigned long * h_ret, BN_GENCB * cb);
const EVP_MD * EVP_ecdsa(void);
EC_KEY * EC_KEY_new_by_curve_name(int nid);
int EC_KEY_generate_key(EC_KEY * key);
void EC_KEY_free(EC_KEY * key);
void ECDSA_SIG_free(ECDSA_SIG * a);
ECDSA_SIG * ECDSA_do_sign(const unsigned char * dgst, int dlen, EC_KEY * eckey);
int ECDSA_do_verify(const unsigned char * dgst, int dgst_len, const ECDSA_SIG * sig, EC_KEY * eckey);
EC_KEY * EC_KEY_new(void);
int EC_KEY_set_group(EC_KEY * eckey, const EC_GROUP * group);
const EC_GROUP * EC_KEY_get0_group(const EC_KEY * key);
int EC_KEY_check_key(const EC_KEY * eckey);
int ECDSA_size(const EC_KEY * eckey);
int ECDSA_sign(int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, EC_KEY * eckey);
int ECDSA_verify(int type, const unsigned char * dgst, int dgstlen, const unsigned char * sig, int siglen, EC_KEY * eckey);
ECDSA_SIG * d2i_ECDSA_SIG(ECDSA_SIG ** v, const unsigned char ** pp, long len);
int i2d_ECDSA_SIG(const ECDSA_SIG * a, unsigned char ** pp);
int DH_generate_parameters_ex(DH * ret, int prime_len, int generator, BN_GENCB * cb);
int EC_METHOD_get_field_type(const EC_METHOD * meth);
const EC_POINT * EC_KEY_get0_public_key(const EC_KEY * eckey);
int ECDH_compute_key(void * out, size_t outlen, const EC_POINT * pub_key, EC_KEY * ecdh, void *(*KDF)(const void *,size_t,void *,size_t *));
const BIGNUM * EC_KEY_get0_private_key(const EC_KEY * eckey);
ENGINE * ENGINE_get_first(void);
const char * ENGINE_get_id(const ENGINE * e);
const char * ENGINE_get_name(const ENGINE * e);
ENGINE * ENGINE_get_next(ENGINE * e);
int ENGINE_free(ENGINE * e);
ENGINE * ENGINE_new(void);
int ENGINE_set_id(ENGINE * e, const char * id);
int ENGINE_set_name(ENGINE * e, const char * name);
int ENGINE_add(ENGINE * e);
int ENGINE_remove(ENGINE * e);
void ENGINE_load_builtin_engines(void);
void ENGINE_register_all_ciphers(void);
int EVP_CIPHER_nid(const EVP_CIPHER * cipher);
int EVP_MD_type(const EVP_MD * md);
void ENGINE_register_all_digests(void);
int BIO_test_flags(const BIO * b, int flags);
STACK_OF(SSL_COMP) * SSL_COMP_get_compression_methods(void);
int RSA_generate_key_ex(RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb);
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM * param);
int X509_STORE_set1_param(X509_STORE * ctx, X509_VERIFY_PARAM * pm);
ASN1_TYPE * ASN1_generate_nconf(char * str, CONF * nconf);
EC_GROUP * PEM_read_bio_ECPKParameters(BIO * bp, EC_GROUP ** x, pem_password_cb * cb, void * u);
EC_KEY * EC_KEY_dup(const EC_KEY * ec_key);
void BIO_set_callback(BIO * b, long (*callback)(struct bio_st *,int,const char *,int,long,long));
void BIO_set_callback_arg(BIO * b, char * arg);
void EVP_MD_CTX_set_flags(EVP_MD_CTX * ctx, int flags);
void BIO_set_flags(BIO * b, int flags);
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX * ctx, int flags);
int EVP_CIPHER_iv_length(const EVP_CIPHER * cipher);
int X509_REQ_check_private_key(X509_REQ * x509, EVP_PKEY * pkey);
EC_KEY * PEM_read_bio_EC_PUBKEY(BIO * bp, EC_KEY ** x, pem_password_cb * cb, void * u);
EC_KEY * PEM_read_bio_ECPrivateKey(BIO * bp, EC_KEY ** x, pem_password_cb * cb, void * u);
int PEM_write_bio_EC_PUBKEY(BIO * bp, EC_KEY * x);
EC_KEY * d2i_EC_PUBKEY_bio(BIO * bp, EC_KEY ** eckey);
void EC_KEY_set_asn1_flag(EC_KEY * key, int flag);
void EC_KEY_set_conv_form(EC_KEY * key, point_conversion_form_t cform);
int EC_KEY_print(BIO * bp, const EC_KEY * x, int off);
EC_KEY * d2i_ECPrivateKey_bio(BIO * bp, EC_KEY ** eckey);
int i2d_EC_PUBKEY_bio(BIO * bp, EC_KEY * eckey);
int PEM_write_bio_ECPrivateKey(BIO * bp, EC_KEY * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
int PEM_write_bio_ECPKParameters(BIO * bp, const EC_GROUP * x);
int i2d_ECPrivateKey_bio(BIO * bp, EC_KEY * eckey);
int i2d_ECPKParameters(const EC_GROUP * a, unsigned char ** out);
void EC_GROUP_set_asn1_flag(EC_GROUP * group, int flag);
void EC_GROUP_set_point_conversion_form(EC_GROUP * group, point_conversion_form_t form);
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP * group);
int ECPKParameters_print(BIO * bp, const EC_GROUP * x, int off);
size_t EC_GROUP_set_seed(EC_GROUP * group, const unsigned char * p, size_t len);
EC_GROUP * d2i_ECPKParameters(EC_GROUP ** a, const unsigned char ** in, long len);
BIGNUM * EC_POINT_point2bn(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, BIGNUM * ret, BN_CTX * ctx);
STACK_OF(OPENSSL_STRING) * X509_get1_ocsp(X509 * x);
const char * SSL_get_servername(const SSL * s, const int type);
SSL_CTX * SSL_set_SSL_CTX(SSL * ssl, SSL_CTX * ctx);
void SSL_CTX_set_cookie_generate_cb(SSL_CTX * ctx, int (*app_gen_cookie_cb)(SSL *ssl,unsigned char *cookie,unsigned int *cookie_len));
void SSL_CTX_set_cookie_verify_cb(SSL_CTX * ctx, int (*app_verify_cookie_cb)(SSL *ssl,unsigned char *cookie,unsigned int cookie_len));
void SSL_CTX_set_info_callback(SSL_CTX * ctx, void (*cb)(const SSL *ssl,int type,int val));
const SSL_METHOD * DTLSv1_server_method(void);
BIO * BIO_new_dgram(int fd, int close_flag);
int SSL_get_servername_type(const SSL * s);
const COMP_METHOD * SSL_get_current_compression(SSL * s);
const COMP_METHOD * SSL_get_current_expansion(SSL * s);
const char * SSL_COMP_get_name(const COMP_METHOD * comp);
ENGINE * ENGINE_by_id(const char * id);
int SSL_CTX_set_client_cert_engine(SSL_CTX * ctx, ENGINE * e);
const SSL_METHOD * DTLSv1_client_method(void);
const SSL_METHOD * DTLSv1_method(void);
unsigned char * SHA256(const unsigned char * d, size_t n, unsigned char * md);
unsigned char * SHA512(const unsigned char * d, size_t n, unsigned char * md);
void AES_ige_encrypt(const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, const int enc);
int EC_KEY_precompute_mult(EC_KEY * key, BN_CTX * ctx);
EVP_PKEY * ENGINE_load_private_key(ENGINE * e, const char * key_id, UI_METHOD * ui_method, void * callback_data);
EVP_PKEY * ENGINE_load_public_key(ENGINE * e, const char * key_id, UI_METHOD * ui_method, void * callback_data);
int ENGINE_ctrl_cmd(ENGINE * e, const char * cmd_name, long i, void * p, void (*f)(void), int cmd_optional);
int ENGINE_set_default(ENGINE * e, unsigned int flags);
int ENGINE_ctrl(ENGINE * e, int cmd, long i, void * p, void (*f)(void));
int ENGINE_register_all_complete(void);
int ENGINE_ctrl_cmd_string(ENGINE * e, const char * cmd_name, const char * arg, int cmd_optional);
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM * param, ASN1_OBJECT * policy);
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM * param, int purpose);
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM * param, unsigned long flags);
X509_VERIFY_PARAM * X509_VERIFY_PARAM_new(void);
void X509_POLICY_NODE_print(BIO * out, X509_POLICY_NODE * node, int indent);
X509_POLICY_TREE * X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX * ctx);
int X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX * ctx);
STACK_OF(X509_POLICY_NODE) * X509_policy_tree_get0_policies(const X509_POLICY_TREE * tree);
STACK_OF(X509_POLICY_NODE) * X509_policy_tree_get0_user_policies(const X509_POLICY_TREE * tree);
char * BIO_get_callback_arg(const BIO * b);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY * key, int nid, int type, const unsigned char * bytes, int len);
const RSA_METHOD * ENGINE_get_RSA(const ENGINE * e);
const DSA_METHOD * ENGINE_get_DSA(const ENGINE * e);
const DH_METHOD * ENGINE_get_DH(const ENGINE * e);
const RAND_METHOD * ENGINE_get_RAND(const ENGINE * e);
ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE * e);
ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE * e);
int ENGINE_init(ENGINE * e);
int ENGINE_finish(ENGINE * e);
OCSP_REQ_CTX * OCSP_sendreq_new(BIO * io, char * path, OCSP_REQUEST * req, int maxline);
int OCSP_sendreq_nbio(OCSP_RESPONSE ** presp, OCSP_REQ_CTX * rctx);
void OCSP_REQ_CTX_free(OCSP_REQ_CTX * rctx);
int SSL_CTX_use_psk_identity_hint(SSL_CTX * ctx, const char * identity_hint);
void SSL_CTX_set_psk_client_callback(SSL_CTX * ctx, unsigned int (*psk_client_callback)(SSL *ssl,const char *hint,char *identity,unsigned int max_identity_len,unsigned char *psk,unsigned int max_psk_len));
const char * SSL_get_psk_identity_hint(const SSL * s);
void SSL_set_psk_server_callback(SSL * ssl, unsigned int (*psk_server_callback)(SSL *ssl,const char *identity,unsigned char *psk,unsigned int max_psk_len));
int SSL_use_psk_identity_hint(SSL * s, const char * identity_hint);
void SSL_set_psk_client_callback(SSL * ssl, unsigned int (*psk_client_callback)(SSL *ssl,const char *hint,char *identity,unsigned int max_identity_len,unsigned char *psk,unsigned int max_psk_len));
void SSL_CTX_set_psk_server_callback(SSL_CTX * ctx, unsigned int (*psk_server_callback)(SSL *ssl,const char *identity,unsigned char *psk,unsigned int max_psk_len));
const char * SSL_get_psk_identity(const SSL * s);
int SSL_set_session_ticket_ext(SSL * s, void * ext_data, int ext_len);
int SSL_set_session_secret_cb(SSL * s, tls_session_secret_cb_fn tls_session_secret_cb, void * arg);
int SSL_set_session_ticket_ext_cb(SSL * s, tls_session_ticket_ext_cb_fn cb, void * arg);
int SSL_set1_param(SSL * ssl, X509_VERIFY_PARAM * vpm);
int SSL_CTX_set1_param(SSL_CTX * ctx, X509_VERIFY_PARAM * vpm);
int SSL_renegotiate_abbreviated(SSL * s);
const SSL_METHOD * TLSv1_1_method(void);
const SSL_METHOD * TLSv1_1_client_method(void);
const SSL_METHOD * TLSv1_1_server_method(void);
int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX * ctx, char * (*cb)(SSL *,void *));
BIGNUM * SSL_get_srp_g(SSL * s);
int SSL_CTX_set_srp_username_callback(SSL_CTX * ctx, int (*cb)(SSL *,int *,void *));
char * SSL_get_srp_userinfo(SSL * s);
int SSL_set_srp_server_param(SSL * s, const BIGNUM * N, const BIGNUM * g, BIGNUM * sa, BIGNUM * v, char * info);
int SSL_set_srp_server_param_pw(SSL * s, const char * user, const char * pass, const char * grp);
BIGNUM * SSL_get_srp_N(SSL * s);
char * SSL_get_srp_username(SSL * s);
int SSL_CTX_set_srp_password(SSL_CTX * ctx, char * password);
int SSL_CTX_set_srp_strength(SSL_CTX * ctx, int strength);
int SSL_CTX_set_srp_verify_param_callback(SSL_CTX * ctx, int (*cb)(SSL *,void *));
int SSL_CTX_set_srp_cb_arg(SSL_CTX * ctx, void * arg);
int SSL_CTX_set_srp_username(SSL_CTX * ctx, char * name);
int SSL_CTX_SRP_CTX_init(SSL_CTX * ctx);
int SRP_Calc_A_param(SSL * s);
int SRP_generate_server_master_secret(SSL * s, unsigned char * master_key);
int SSL_CTX_SRP_CTX_free(SSL_CTX * ctx);
int SRP_generate_client_master_secret(SSL * s, unsigned char * master_key);
int SSL_srp_server_param_with_username(SSL * s, int * ad);
int SSL_SRP_CTX_free(SSL * ctx);
void SSL_set_debug(SSL * s, int debug);
X509 * SSL_SESSION_get0_peer(SSL_SESSION * s);
const SSL_METHOD * TLSv1_2_client_method(void);
int SSL_SESSION_set1_id_context(SSL_SESSION * s, const unsigned char * sid_ctx, unsigned int sid_ctx_len);
const SSL_METHOD * TLSv1_2_server_method(void);
int SSL_cache_hit(SSL * s);
void SSL_set_state(SSL * ssl, int state);
unsigned long SSL_CIPHER_get_id(const SSL_CIPHER * c);
const SSL_METHOD * TLSv1_2_method(void);
int SSL_export_keying_material(SSL * s, unsigned char * out, size_t olen, const char * label, size_t llen, const unsigned char * p, size_t plen, int use_context);
int SSL_set_tlsext_use_srtp(SSL * ctx, const char * profiles);
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX * s, int (*cb)(SSL *ssl,const unsigned char **out,unsigned int *outlen,void *arg), void * arg);
void SSL_get0_next_proto_negotiated(const SSL * s, const unsigned char ** data, unsigned * len);
SRTP_PROTECTION_PROFILE * SSL_get_selected_srtp_profile(SSL * s);
int SSL_CTX_set_tlsext_use_srtp(SSL_CTX * ctx, const char * profiles);
int SSL_select_next_proto(unsigned char ** out, unsigned char * outlen, const unsigned char * in, unsigned int inlen, const unsigned char * client, unsigned int client_len);
STACK_OF(SRTP_PROTECTION_PROFILE) * SSL_get_srtp_profiles(SSL * s);
void SSL_CTX_set_next_proto_select_cb(SSL_CTX * s, int (*cb)(SSL *ssl,unsigned char **out,unsigned char *outlen,const unsigned char *in,unsigned int inlen,void *arg), void * arg);
unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION * s);
void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX * ctx, EC_KEY *(*ecdh)(SSL *ssl,int is_export,int keylength));
void SSL_set_tmp_ecdh_callback(SSL * ssl, EC_KEY *(*ecdh)(SSL *ssl,int is_export,int keylength));
int SSL_SRP_CTX_init(SSL * s);
const char * DES_options(void);
void ERR_load_ENGINE_strings(void);
int ENGINE_set_DSA(ENGINE * e, const DSA_METHOD * dsa_meth);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE * e);
ENGINE * ENGINE_get_default_RSA(void);
int ENGINE_set_DH(ENGINE * e, const DH_METHOD * dh_meth);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE * e);
int ENGINE_set_init_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR init_f);
int ENGINE_set_default_DSA(ENGINE * e);
ENGINE * ENGINE_get_last(void);
ENGINE * ENGINE_get_prev(ENGINE * e);
ENGINE * ENGINE_get_default_DH(void);
int ENGINE_set_finish_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR finish_f);
int ENGINE_set_RSA(ENGINE * e, const RSA_METHOD * rsa_meth);
int ENGINE_set_default_RAND(ENGINE * e);
ENGINE * ENGINE_get_default_DSA(void);
int ENGINE_set_default_RSA(ENGINE * e);
ENGINE * ENGINE_get_default_RAND(void);
int ENGINE_set_RAND(ENGINE * e, const RAND_METHOD * rand_meth);
int ENGINE_set_default_DH(ENGINE * e);
ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE * e);
int ENGINE_set_ctrl_function(ENGINE * e, ENGINE_CTRL_FUNC_PTR ctrl_f);
void ENGINE_unregister_ciphers(ENGINE * e);
void ENGINE_unregister_RSA(ENGINE * e);
void ENGINE_register_all_RAND(void);
void ENGINE_load_dynamic(void);
ENGINE * ENGINE_get_digest_engine(int nid);
int ENGINE_register_DH(ENGINE * e);
int ENGINE_register_RAND(ENGINE * e);
void ENGINE_load_cryptodev(void);
int ENGINE_register_ciphers(ENGINE * e);
void ENGINE_load_ubsec(void);
void ENGINE_load_openssl(void);
const ENGINE_CMD_DEFN * ENGINE_get_cmd_defns(const ENGINE * e);
int ENGINE_set_load_privkey_function(ENGINE * e, ENGINE_LOAD_KEY_PTR loadpriv_f);
int ENGINE_set_default_digests(ENGINE * e);
int ENGINE_register_RSA(ENGINE * e);
void ENGINE_unregister_DSA(ENGINE * e);
int ENGINE_set_ciphers(ENGINE * e, ENGINE_CIPHERS_PTR f);
int RAND_set_rand_engine(ENGINE * engine);
const EVP_MD * ENGINE_get_digest(ENGINE * e, int nid);
const EVP_CIPHER * ENGINE_get_cipher(ENGINE * e, int nid);
int ENGINE_cmd_is_executable(ENGINE * e, int cmd);
int ENGINE_register_DSA(ENGINE * e);
int ENGINE_set_load_pubkey_function(ENGINE * e, ENGINE_LOAD_KEY_PTR loadpub_f);
ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE * e);
void ENGINE_register_all_RSA(void);
void ENGINE_unregister_digests(ENGINE * e);
int ENGINE_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dep_func, CRYPTO_EX_free * free_func);
void * ENGINE_get_ex_data(const ENGINE * e, int idx);
int ENGINE_set_cmd_defns(ENGINE * e, const ENGINE_CMD_DEFN * defns);
int ENGINE_register_digests(ENGINE * e);
void ENGINE_register_all_DH(void);
int ENGINE_get_flags(const ENGINE * e);
void ENGINE_unregister_DH(ENGINE * e);
void ENGINE_register_all_DSA(void);
int ENGINE_set_digests(ENGINE * e, ENGINE_DIGESTS_PTR f);
int ENGINE_register_complete(ENGINE * e);
int ENGINE_set_ex_data(ENGINE * e, int idx, void * arg);
int ENGINE_set_destroy_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR destroy_f);
ENGINE * ENGINE_get_cipher_engine(int nid);
void ENGINE_load_cswift(void);
int ENGINE_set_default_ciphers(ENGINE * e);
void ENGINE_unregister_RAND(ENGINE * e);
void ENGINE_load_nuron(void);
void ENGINE_set_table_flags(unsigned int flags);
void ENGINE_load_chil(void);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE * e);
void ENGINE_load_atalla(void);
unsigned int ENGINE_get_table_flags(void);
int ENGINE_set_flags(ENGINE * e, int flags);
ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE * e);
int ENGINE_set_default_string(ENGINE * e, const char * def_list);
void ENGINE_add_conf_module(void);
void ENGINE_load_aep(void);
void ENGINE_load_sureware(void);
void ENGINE_load_4758cca(void);
int ENGINE_up_ref(ENGINE * e);
int ENGINE_set_STORE(ENGINE * e, const STORE_METHOD * store_meth);
int ENGINE_register_ECDSA(ENGINE * e);
unsigned long BN_BLINDING_get_thread_id(const BN_BLINDING * b);
int EC_GROUP_get_trinomial_basis(const EC_GROUP * eg, unsigned int * k);
const ECDH_METHOD * ECDH_get_default_method(void);
int ENGINE_register_ECDH(ENGINE * e);
int SHA512_Update(SHA512_CTX * c, const void * data, size_t len);
int i2d_ECPrivateKey(EC_KEY * key, unsigned char ** out);
int BN_GF2m_mod_exp_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx);
int BN_GF2m_mod_mul_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx);
EC_KEY * o2i_ECPublicKey(EC_KEY ** key, const unsigned char ** in, long len);
EC_KEY * EC_KEY_copy(EC_KEY * dst, const EC_KEY * src);
int EC_GROUP_check_discriminant(const EC_GROUP * group, BN_CTX * ctx);
int i2o_ECPublicKey(EC_KEY * key, unsigned char ** out);
EC_GROUP * EC_GROUP_new_curve_GF2m(const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
void ENGINE_unregister_STORE(ENGINE * e);
struct ec_key_st * EVP_PKEY_get1_EC_KEY(EVP_PKEY * pkey);
ENGINE * ENGINE_get_default_ECDH(void);
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY * key);
void * ENGINE_get_static_state(void);
ECDSA_SIG * ECDSA_SIG_new(void);
EC_POINT * EC_POINT_bn2point(const EC_GROUP * g, const BIGNUM * b, EC_POINT * p, BN_CTX * ctx);
void * EC_KEY_get_key_method_data(EC_KEY * key, void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *));
int ECDSA_sign_ex(int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey);
int EC_GROUP_get_pentanomial_basis(const EC_GROUP * ecgroup, unsigned int * k1, unsigned int * k2, unsigned int * k3);
int ECDSA_sign_setup(EC_KEY * eckey, BN_CTX * ctx, BIGNUM ** kinv, BIGNUM ** rp);
int BN_GF2m_mod_solve_quad_arr(BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx);
int EC_KEY_up_ref(EC_KEY * key);
EC_KEY * d2i_EC_PUBKEY(EC_KEY ** a, const unsigned char ** pp, long length);
int EC_GROUP_have_precompute_mult(const EC_GROUP * group);
int BN_GF2m_mod_arr(BIGNUM * r, const BIGNUM * a, const int * p);
void * ECDH_get_ex_data(EC_KEY * d, int idx);
void ENGINE_unregister_ECDH(ENGINE * e);
const ECDH_METHOD * ECDH_OpenSSL(void);
EC_POINT * EC_POINT_dup(const EC_POINT * src, const EC_GROUP * group);
int EVP_PKEY_set1_EC_KEY(EVP_PKEY * pkey, struct ec_key_st * key);
int BN_GF2m_mod_sqrt_arr(BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx);
int EC_KEY_set_private_key(EC_KEY * key, const BIGNUM * prv);
int BN_GF2m_poly2arr(const BIGNUM * a, int * p, int max);
int i2d_ECParameters(EC_KEY * key, unsigned char ** out);
int ENGINE_set_ECDH(ENGINE * e, const ECDH_METHOD * ecdh_meth);
int SHA256_Init(SHA256_CTX * c);
void * ECDSA_get_ex_data(EC_KEY * d, int idx);
unsigned char * SHA224(const unsigned char * d, size_t n, unsigned char * md);
size_t EC_GROUP_get_seed_len(const EC_GROUP * ecgroup);
int i2d_EC_PUBKEY(EC_KEY * a, unsigned char ** pp);
const ECDSA_METHOD * ECDSA_get_default_method(void);
const EC_METHOD * EC_GFp_nist_method(void);
void ENGINE_load_padlock(void);
void EC_GROUP_set_curve_name(EC_GROUP * group, int nid);
int BN_GF2m_mod_sqr_arr(BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx);
BIO_METHOD * BIO_s_datagram(void);
int ENGINE_set_default_ECDSA(ENGINE * e);
void ECDH_set_default_method(const ECDH_METHOD * method);
int SHA384_Update(SHA512_CTX * c, const void * data, size_t len);
void * EC_KEY_insert_key_method_data(EC_KEY * key, void * data, void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *));
int SHA224_Final(unsigned char * md, SHA256_CTX * c);
int SHA224_Update(SHA256_CTX * c, const void * data, size_t len);
EC_KEY * d2i_ECPrivateKey(EC_KEY ** key, const unsigned char ** in, long len);
void ENGINE_register_all_STORE(void);
int SHA512_Final(unsigned char * md, SHA512_CTX * c);
int EC_GROUP_get_asn1_flag(const EC_GROUP * group);
int ECDH_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
unsigned char * EC_GROUP_get0_seed(const EC_GROUP * x);
int BN_GF2m_mod_div_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx);
int ENGINE_set_ECDSA(ENGINE * e, const ECDSA_METHOD * ecdsa_meth);
int ECDH_set_method(EC_KEY * key, const ECDH_METHOD * meth);
int ECDH_set_ex_data(EC_KEY * d, int idx, void * arg);
const ECDSA_METHOD * ECDSA_OpenSSL(void);
unsigned EC_KEY_get_enc_flags(const EC_KEY * key);
void ECDSA_set_default_method(const ECDSA_METHOD * meth);
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, int y_bit, BN_CTX * ctx);
int EC_GROUP_cmp(const EC_GROUP * a, const EC_GROUP * b, BN_CTX * ctx);
int SHA224_Init(SHA256_CTX * c);
int SHA512_Init(SHA512_CTX * c);
void ERR_load_ECDSA_strings(void);
int EC_GROUP_get_basis_type(const EC_GROUP * group);
void ENGINE_register_all_ECDH(void);
void ENGINE_register_all_ECDSA(void);
EC_GROUP * EC_GROUP_dup(const EC_GROUP * src);
ENGINE * ENGINE_get_default_ECDSA(void);
void SHA256_Transform(SHA256_CTX * c, const unsigned char * data);
void EC_KEY_set_enc_flags(EC_KEY * eckey, unsigned int flags);
char * EC_POINT_point2hex(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, BN_CTX * ctx);
const STORE_METHOD * ENGINE_get_STORE(const ENGINE * e);
ECDSA_SIG * ECDSA_do_sign_ex(const unsigned char * dgst, int dgstlen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey);
void SHA512_Transform(SHA512_CTX * c, const unsigned char * data);
int EC_KEY_set_public_key(EC_KEY * key, const EC_POINT * pub);
int ENGINE_register_STORE(ENGINE * e);
int EC_GROUP_get_curve_name(const EC_GROUP * group);
int SHA256_Final(unsigned char * md, SHA256_CTX * c);
const ECDH_METHOD * ENGINE_get_ECDH(const ENGINE * e);
const ECDSA_METHOD * ENGINE_get_ECDSA(const ENGINE * e);
void ERR_load_ECDH_strings(void);
int ECDSA_set_method(EC_KEY * eckey, const ECDSA_METHOD * meth);
EC_KEY * d2i_ECParameters(EC_KEY ** key, const unsigned char ** in, long len);
int SHA384_Init(SHA512_CTX * c);
int ECDSA_set_ex_data(EC_KEY * d, int idx, void * arg);
int SHA384_Final(unsigned char * md, SHA512_CTX * c);
int ECDSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
unsigned char * SHA384(const unsigned char * d, size_t n, unsigned char * md);
int ENGINE_set_default_ECDH(ENGINE * e);
EC_POINT * EC_POINT_hex2point(const EC_GROUP * group, const char * c, EC_POINT * p, BN_CTX * ctx);
int SHA256_Update(SHA256_CTX * c, const void * data, size_t len);
int BN_GF2m_mod_inv_arr(BIGNUM * r, const BIGNUM * b, const int * p, BN_CTX * ctx);
void ENGINE_unregister_ECDSA(ENGINE * e);
void BN_BLINDING_set_thread_id(BN_BLINDING * b, unsigned long l);
int DH_check_pub_key(const DH * dh, const BIGNUM * pub_key, int * codes);
void Camellia_cbc_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, const int enc);
void Camellia_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc);
void Camellia_cfb1_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc);
void Camellia_cfb8_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc);
void Camellia_ctr128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num);
void Camellia_decrypt(const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key);
void Camellia_ecb_encrypt(const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key, const int enc);
void Camellia_encrypt(const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key);
void Camellia_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num);
int Camellia_set_key(const unsigned char * userKey, const int bits, CAMELLIA_KEY * key);
const EVP_CIPHER * EVP_camellia_128_cbc(void);
const EVP_CIPHER * EVP_camellia_128_cfb128(void);
const EVP_CIPHER * EVP_camellia_128_cfb1(void);
const EVP_CIPHER * EVP_camellia_128_cfb8(void);
const EVP_CIPHER * EVP_camellia_128_ecb(void);
const EVP_CIPHER * EVP_camellia_128_ofb(void);
const EVP_CIPHER * EVP_camellia_192_cbc(void);
const EVP_CIPHER * EVP_camellia_192_cfb128(void);
const EVP_CIPHER * EVP_camellia_192_cfb1(void);
const EVP_CIPHER * EVP_camellia_192_cfb8(void);
const EVP_CIPHER * EVP_camellia_192_ecb(void);
const EVP_CIPHER * EVP_camellia_192_ofb(void);
const EVP_CIPHER * EVP_camellia_256_cbc(void);
const EVP_CIPHER * EVP_camellia_256_cfb128(void);
const EVP_CIPHER * EVP_camellia_256_cfb1(void);
const EVP_CIPHER * EVP_camellia_256_cfb8(void);
const EVP_CIPHER * EVP_camellia_256_ecb(void);
const EVP_CIPHER * EVP_camellia_256_ofb(void);
void AES_bi_ige_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, const AES_KEY * key2, const unsigned char * ivec, const int enc);
void SEED_decrypt(const unsigned char * s, unsigned char * d, const SEED_KEY_SCHEDULE * ks);
void SEED_encrypt(const unsigned char * s, unsigned char * d, const SEED_KEY_SCHEDULE * ks);
void SEED_cbc_encrypt(const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int enc);
const EVP_CIPHER * EVP_seed_ofb(void);
void SEED_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int * num, int enc);
void SEED_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int * num);
const EVP_CIPHER * EVP_seed_cbc(void);
void SEED_ecb_encrypt(const unsigned char * in, unsigned char * out, const SEED_KEY_SCHEDULE * ks, int enc);
const EVP_CIPHER * EVP_seed_ecb(void);
void SEED_set_key(const unsigned char * rawkey, SEED_KEY_SCHEDULE * ks);
const EVP_CIPHER * EVP_seed_cfb128(void);
int AES_unwrap_key(AES_KEY * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, unsigned int inlen);
int AES_wrap_key(AES_KEY * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, unsigned int inlen);
void CMS_ReceiptRequest_free(CMS_ReceiptRequest * rr);
CMS_CertificateChoices * CMS_add0_CertificateChoices(CMS_ContentInfo * cms);
int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void * bytes, int len);
void ERR_load_CMS_strings(void);
CMS_ContentInfo * CMS_sign_receipt(CMS_SignerInfo * si, X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, unsigned int flags);
int i2d_CMS_ContentInfo(CMS_ContentInfo * a, unsigned char ** out);
X509_ATTRIBUTE * CMS_signed_delete_attr(CMS_SignerInfo * si, int loc);
CMS_ContentInfo * d2i_CMS_bio(BIO * bp, CMS_ContentInfo ** cms);
int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo * si, int nid, int lastpos);
int CMS_verify(CMS_ContentInfo * cms, STACK_OF(X509) * certs, X509_STORE * store, BIO * dcont, BIO * out, unsigned int flags);
CMS_ContentInfo * SMIME_read_CMS(BIO * bio, BIO ** biocont);
int CMS_decrypt_set1_key(CMS_ContentInfo * cms, unsigned char * key, size_t keylen, unsigned char * id, size_t idlen);
void CMS_SignerInfo_get0_algs(CMS_SignerInfo * si, EVP_PKEY ** pk, X509 ** signer, X509_ALGOR ** pdig, X509_ALGOR ** psig);
int CMS_add1_cert(CMS_ContentInfo * cms, X509 * cert);
int CMS_set_detached(CMS_ContentInfo * cms, int detached);
CMS_ContentInfo * CMS_encrypt(STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, unsigned int flags);
CMS_ContentInfo * CMS_EnvelopedData_create(const EVP_CIPHER * cipher);
int CMS_uncompress(CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags);
int CMS_add0_crl(CMS_ContentInfo * cms, X509_CRL * crl);
int CMS_SignerInfo_verify_content(CMS_SignerInfo * si, BIO * chain);
void * CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo * si, ASN1_OBJECT * oid, int lastpos, int type);
int PEM_write_bio_CMS(BIO * out, CMS_ContentInfo * cms);
X509_ATTRIBUTE * CMS_unsigned_get_attr(const CMS_SignerInfo * si, int loc);
int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo * ri, X509 * cert);
int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo * ri, EVP_PKEY ** pk, X509 ** recip, X509_ALGOR ** palg);
void CMS_ContentInfo_free(CMS_ContentInfo * cms);
int CMS_final(CMS_ContentInfo * cms, BIO * data, BIO * dcont, unsigned int flags);
int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) ** algs, int algnid, int keysize);
int CMS_SignerInfo_verify(CMS_SignerInfo * si);
int CMS_data(CMS_ContentInfo * cms, BIO * out, unsigned int flags);
CMS_ReceiptRequest * d2i_CMS_ReceiptRequest(CMS_ReceiptRequest ** a, unsigned char const ** in, long len);
CMS_ContentInfo * CMS_compress(BIO * in, int comp_nid, unsigned int flags);
CMS_ContentInfo * CMS_digest_create(BIO * in, const EVP_MD * md, unsigned int flags);
int CMS_SignerInfo_cert_cmp(CMS_SignerInfo * si, X509 * cert);
int CMS_SignerInfo_sign(CMS_SignerInfo * si);
CMS_ContentInfo * CMS_data_create(BIO * in, unsigned int flags);
int i2d_CMS_bio(BIO * bp, CMS_ContentInfo * cms);
int CMS_EncryptedData_set1_key(CMS_ContentInfo * cms, const EVP_CIPHER * ciph, const unsigned char * key, size_t keylen);
int CMS_decrypt(CMS_ContentInfo * cms, EVP_PKEY * pkey, X509 * cert, BIO * dcont, BIO * out, unsigned int flags);
X509_ATTRIBUTE * CMS_unsigned_delete_attr(CMS_SignerInfo * si, int loc);
int CMS_unsigned_get_attr_count(const CMS_SignerInfo * si);
int CMS_add_smimecap(CMS_SignerInfo * si, STACK_OF(X509_ALGOR) * algs);
int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo * si, ASN1_OBJECT * obj, int lastpos);
CMS_ContentInfo * d2i_CMS_ContentInfo(CMS_ContentInfo ** a, unsigned char const ** in, long len);
int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) ** smcap);
CMS_ContentInfo * CMS_ContentInfo_new(void);
int CMS_RecipientInfo_type(CMS_RecipientInfo * ri);
const ASN1_OBJECT * CMS_get0_type(CMS_ContentInfo * cms);
int CMS_is_detached(CMS_ContentInfo * cms);
CMS_ContentInfo * CMS_sign(X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, unsigned int flags);
int CMS_signed_add1_attr(CMS_SignerInfo * si, X509_ATTRIBUTE * attr);
int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo * si, ASN1_OBJECT * obj, int lastpos);
int SMIME_write_CMS(BIO * bio, CMS_ContentInfo * cms, BIO * data, int flags);
int CMS_EncryptedData_decrypt(CMS_ContentInfo * cms, const unsigned char * key, size_t keylen, BIO * dcont, BIO * out, unsigned int flags);
STACK_OF(CMS_RecipientInfo) * CMS_get0_RecipientInfos(CMS_ContentInfo * cms);
CMS_RevocationInfoChoice * CMS_add0_RevocationInfoChoice(CMS_ContentInfo * cms);
int CMS_decrypt_set1_pkey(CMS_ContentInfo * cms, EVP_PKEY * pk, X509 * cert);
void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo * si, X509 * signer);
STACK_OF(X509) * CMS_get0_signers(CMS_ContentInfo * cms);
void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest * rr, ASN1_STRING ** pcid, int * pallorfirst, STACK_OF(GENERAL_NAMES) ** plist, STACK_OF(GENERAL_NAMES) ** prto);
void * CMS_signed_get0_data_by_OBJ(CMS_SignerInfo * si, ASN1_OBJECT * oid, int lastpos, int type);
STACK_OF(CMS_SignerInfo) * CMS_get0_SignerInfos(CMS_ContentInfo * cms);
int CMS_add0_cert(CMS_ContentInfo * cms, X509 * cert);
CMS_ContentInfo * CMS_EncryptedData_encrypt(BIO * in, const EVP_CIPHER * cipher, const unsigned char * key, size_t keylen, unsigned int flags);
int CMS_digest_verify(CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags);
int CMS_set1_signers_certs(CMS_ContentInfo * cms, STACK_OF(X509) * certs, unsigned int flags);
X509_ATTRIBUTE * CMS_signed_get_attr(const CMS_SignerInfo * si, int loc);
int CMS_RecipientInfo_set0_key(CMS_RecipientInfo * ri, unsigned char * key, size_t keylen);
int CMS_SignedData_init(CMS_ContentInfo * cms);
int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo * ri, X509_ALGOR ** palg, ASN1_OCTET_STRING ** pid, ASN1_GENERALIZEDTIME ** pdate, ASN1_OBJECT ** potherid, ASN1_TYPE ** pothertype);
int CMS_verify_receipt(CMS_ContentInfo * rcms, CMS_ContentInfo * ocms, STACK_OF(X509) * certs, X509_STORE * store, unsigned int flags);
CMS_ContentInfo * PEM_read_bio_CMS(BIO * bp, CMS_ContentInfo ** x, pem_password_cb * cb, void * u);
STACK_OF(X509_CRL) * CMS_get1_crls(CMS_ContentInfo * cms);
CMS_RecipientInfo * CMS_add0_recipient_key(CMS_ContentInfo * cms, int nid, unsigned char * key, size_t keylen, unsigned char * id, size_t idlen, ASN1_GENERALIZEDTIME * date, ASN1_OBJECT * otherTypeId, ASN1_TYPE * otherType);
CMS_ReceiptRequest * CMS_ReceiptRequest_new(void);
ASN1_OCTET_STRING ** CMS_get0_content(CMS_ContentInfo * cms);
int CMS_get1_ReceiptRequest(CMS_SignerInfo * si, CMS_ReceiptRequest ** prr);
int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void * bytes, int len);
int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo * ri, const unsigned char * id, size_t idlen);
int CMS_add1_ReceiptRequest(CMS_SignerInfo * si, CMS_ReceiptRequest * rr);
int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo * si, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno);
int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo * si, int nid, int type, const void * bytes, int len);
int CMS_unsigned_add1_attr(CMS_SignerInfo * si, X509_ATTRIBUTE * attr);
int CMS_signed_get_attr_by_NID(const CMS_SignerInfo * si, int nid, int lastpos);
STACK_OF(X509) * CMS_get1_certs(CMS_ContentInfo * cms);
int CMS_signed_add1_attr_by_NID(CMS_SignerInfo * si, int nid, int type, const void * bytes, int len);
int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo * si, const char * attrname, int type, const void * bytes, int len);
int CMS_dataFinal(CMS_ContentInfo * cms, BIO * bio);
int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo * ri, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno);
int i2d_CMS_ReceiptRequest(CMS_ReceiptRequest * a, unsigned char ** out);
CMS_RecipientInfo * CMS_add1_recipient_cert(CMS_ContentInfo * cms, X509 * recip, unsigned int flags);
BIO * CMS_dataInit(CMS_ContentInfo * cms, BIO * icont);
int CMS_signed_add1_attr_by_txt(CMS_SignerInfo * si, const char * attrname, int type, const void * bytes, int len);
int CMS_RecipientInfo_decrypt(CMS_ContentInfo * cms, CMS_RecipientInfo * ri);
int CMS_signed_get_attr_count(const CMS_SignerInfo * si);
const ASN1_OBJECT * CMS_get0_eContentType(CMS_ContentInfo * cms);
int CMS_set1_eContentType(CMS_ContentInfo * cms, const ASN1_OBJECT * oid);
CMS_ReceiptRequest * CMS_ReceiptRequest_create0(unsigned char * id, int idlen, int allorfirst, STACK_OF(GENERAL_NAMES) * receiptList, STACK_OF(GENERAL_NAMES) * receiptsTo);
CMS_SignerInfo * CMS_add1_signer(CMS_ContentInfo * cms, X509 * signer, EVP_PKEY * pk, const EVP_MD * md, unsigned int flags);
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo * ri, EVP_PKEY * pkey);
int ENGINE_set_load_ssl_client_cert_function(ENGINE * e, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f);
ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE * e);
int ENGINE_load_ssl_client_cert(ENGINE * e, SSL * s, STACK_OF(X509_NAME) * ca_dn, X509 ** pcert, EVP_PKEY ** ppkey, STACK_OF(X509) ** pother, UI_METHOD * ui_method, void * callback_data);
void ENGINE_load_capi(void);
int ENGINE_register_pkey_meths(ENGINE * e);
ENGINE * ENGINE_get_pkey_asn1_meth_engine(int nid);
int WHIRLPOOL_Init(WHIRLPOOL_CTX * c);
unsigned char * WHIRLPOOL(const void * inp, size_t bytes, unsigned char * md);
const EVP_PKEY_ASN1_METHOD * ENGINE_get_pkey_asn1_meth(ENGINE * e, int nid);
const EVP_PKEY_METHOD * ENGINE_get_pkey_meth(ENGINE * e, int nid);
BIO * BIO_new_CMS(BIO * out, CMS_ContentInfo * cms);
int ENGINE_set_default_pkey_asn1_meths(ENGINE * e);
void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX * ctx, const void * inp, size_t bits);
int i2d_CMS_bio_stream(BIO * out, CMS_ContentInfo * cms, BIO * in, int flags);
int CMS_stream(unsigned char *** boundary, CMS_ContentInfo * cms);
const EVP_PKEY_ASN1_METHOD * ENGINE_pkey_asn1_find_str(ENGINE ** pe, const char * str, int len);
ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE * e);
int ENGINE_register_pkey_asn1_meths(ENGINE * e);
int ENGINE_set_default_pkey_meths(ENGINE * e);
int HMAC_CTX_copy(HMAC_CTX * dctx, HMAC_CTX * sctx);
ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE * e);
const EVP_MD * EVP_whirlpool(void);
void ENGINE_register_all_pkey_meths(void);
int WHIRLPOOL_Final(unsigned char * md, WHIRLPOOL_CTX * c);
const EVP_PKEY_ASN1_METHOD * ENGINE_get_pkey_asn1_meth_str(ENGINE * e, const char * str, int len);
void ENGINE_register_all_pkey_asn1_meths(void);
void CMS_ContentInfo_print_ctx(BIO * out, CMS_ContentInfo * cms, int a, void * p);
int CMS_add1_crl(CMS_ContentInfo * cms, X509_CRL * crl);
int ENGINE_set_pkey_asn1_meths(ENGINE * e, ENGINE_PKEY_ASN1_METHS_PTR f);
ENGINE * ENGINE_get_pkey_meth_engine(int nid);
int WHIRLPOOL_Update(WHIRLPOOL_CTX * c, const void * inp, size_t bytes);
int PEM_write_bio_CMS_stream(BIO * out, CMS_ContentInfo * cms, BIO * in, int flags);
void ENGINE_unregister_pkey_meths(ENGINE * e);
void ENGINE_unregister_pkey_asn1_meths(ENGINE * e);
int ENGINE_set_pkey_meths(ENGINE * e, ENGINE_PKEY_METHS_PTR f);
DSA * DSAparams_dup(DSA * x);
DH * DHparams_dup(DH * d);
unsigned long X509_issuer_name_hash_old(X509 * a);
unsigned long X509_subject_name_hash_old(X509 * x);
SRP_user_pwd * SRP_VBASE_get_by_user(SRP_VBASE * vb, char * username);
BIGNUM * SRP_Calc_server_key(BIGNUM * A, BIGNUM * v, BIGNUM * u, BIGNUM * b, BIGNUM * N);
char * SRP_create_verifier(const char * user, const char * pass, char ** salt, char ** verifier, const char * N, const char * g);
int SRP_create_verifier_BN(const char * user, const char * pass, BIGNUM ** salt, BIGNUM ** verifier, BIGNUM * N, BIGNUM * g);
BIGNUM * SRP_Calc_u(BIGNUM * A, BIGNUM * B, BIGNUM * N);
int SRP_VBASE_free(SRP_VBASE * vb);
BIGNUM * SRP_Calc_client_key(BIGNUM * N, BIGNUM * B, BIGNUM * g, BIGNUM * x, BIGNUM * a, BIGNUM * u);
SRP_gN * SRP_get_default_gN(const char * id);
BIGNUM * SRP_Calc_x(BIGNUM * s, const char * user, const char * pass);
BIGNUM * SRP_Calc_B(BIGNUM * b, BIGNUM * N, BIGNUM * g, BIGNUM * v);
SRP_VBASE * SRP_VBASE_new(char * seed_key);
char * SRP_check_known_gN_param(BIGNUM * g, BIGNUM * N);
BIGNUM * SRP_Calc_A(BIGNUM * a, BIGNUM * N, BIGNUM * g);
int SRP_Verify_A_mod_N(BIGNUM * A, BIGNUM * N);
int SRP_VBASE_init(SRP_VBASE * vb, char * verifier_file);
int SRP_Verify_B_mod_N(BIGNUM * B, BIGNUM * N);
int EC_KEY_set_public_key_affine_coordinates(EC_KEY * key, BIGNUM * x, BIGNUM * y);
const EVP_CIPHER * EVP_aes_192_ctr(void);
const EVP_CIPHER * EVP_aes_128_ctr(void);
const EVP_CIPHER * EVP_aes_256_ctr(void);
int EC_KEY_get_flags(const EC_KEY * key);
const EVP_CIPHER * EVP_aes_128_xts(void);
int private_AES_set_decrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key);
const EVP_CIPHER * EVP_aes_256_xts(void);
const EVP_CIPHER * EVP_aes_128_gcm(void);
void EC_KEY_clear_flags(EC_KEY * key, int flags);
void EC_KEY_set_flags(EC_KEY * key, int flags);
const EVP_CIPHER * EVP_aes_256_ccm(void);
int private_AES_set_encrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key);
const EVP_CIPHER * EVP_aes_128_ccm(void);
const EVP_CIPHER * EVP_aes_192_gcm(void);
const EVP_CIPHER * EVP_aes_256_gcm(void);
const EVP_CIPHER * EVP_aes_192_ccm(void);
const EVP_CIPHER * EVP_rc4_hmac_md5(void);
const EVP_CIPHER * EVP_aes_128_cbc_hmac_sha1(void);
void ENGINE_load_rdrand(void);
void ENGINE_load_rsax(void);
const EVP_CIPHER * EVP_aes_256_cbc_hmac_sha1(void);
CMS_RecipientInfo * CMS_add0_recipient_password(CMS_ContentInfo * cms, int iter, int wrap_nid, int pbe_nid, unsigned char * pass, ossl_ssize_t passlen, const EVP_CIPHER * kekciph);
int CMS_decrypt_set1_password(CMS_ContentInfo * cms, unsigned char * pass, ossl_ssize_t passlen);
int CMS_RecipientInfo_set0_password(CMS_RecipientInfo * ri, unsigned char * pass, ossl_ssize_t passlen);
int X509_REQ_sign_ctx(X509_REQ * x, EVP_MD_CTX * ctx);
int X509_CRL_sign_ctx(X509_CRL * x, EVP_MD_CTX * ctx);
int X509_signature_dump(BIO * bp, const ASN1_STRING * sig, int indent);
int X509_sign_ctx(X509 * x, EVP_MD_CTX * ctx);
int ASN1_item_sign_ctx(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, void * asn, EVP_MD_CTX * ctx);
void OPENSSL_cpuid_setup(void);
void ERR_remove_thread_state(const CRYPTO_THREADID * id);
void X509_STORE_CTX_set0_crls(X509_STORE_CTX * ctx, STACK_OF(X509_CRL) * sk);
const unsigned char * SSL_SESSION_get_id(const SSL_SESSION * s, unsigned int * len);
void SSL_CTX_sess_set_new_cb(SSL_CTX * ctx, int (*new_session_cb)(struct ssl_st *ssl,SSL_SESSION *sess));
SSL_SESSION *(*)(struct ssl_st *ssl, unsigned char *Data, int len, int *copy) SSL_CTX_sess_get_get_cb(SSL_CTX * ctx);
void SSL_CTX_sess_set_get_cb(SSL_CTX * ctx, SSL_SESSION *(*get_session_cb)(struct ssl_st *ssl,unsigned char *data,int len,int *copy));
void (*)(const SSL *ssl,int type,int val) SSL_CTX_get_info_callback(SSL_CTX * ctx);
void SSL_CTX_set_client_cert_cb(SSL_CTX * ctx, int (*client_cert_cb)(SSL *ssl,X509 **x509,EVP_PKEY **pkey));
void SSL_CTX_sess_set_remove_cb(SSL_CTX * ctx, void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess));
int (*)(struct ssl_st *ssl, SSL_SESSION *sess) SSL_CTX_sess_get_new_cb(SSL_CTX * ctx);
int (*)(SSL *ssl, X509 **x509, EVP_PKEY **pkey) SSL_CTX_get_client_cert_cb(SSL_CTX * ctx);
void (*)(struct ssl_ctx_st *ctx, SSL_SESSION *sess) SSL_CTX_sess_get_remove_cb(SSL_CTX * ctx);
int PEM_write_bio_SSL_SESSION(BIO * bp, SSL_SESSION * x);
SSL_SESSION * PEM_read_bio_SSL_SESSION(BIO * bp, SSL_SESSION ** x, pem_password_cb * cb, void * u);
int FIPS_mode_set(int r);
int BN_X931_generate_Xpq(BIGNUM * Xp, BIGNUM * Xq, int nbits, BN_CTX * ctx);
const BIGNUM * BN_get0_nist_prime_384(void);
int ERR_set_mark(void);
int BN_BLINDING_invert_ex(BIGNUM * n, const BIGNUM * r, BN_BLINDING * b, BN_CTX * ctx);
void NAME_CONSTRAINTS_free(NAME_CONSTRAINTS * ncons);
void X509_STORE_CTX_set0_param(X509_STORE_CTX * ctx, X509_VERIFY_PARAM * param);
void POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS * pcons);
int BN_nist_mod_192(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
void GENERAL_SUBTREE_free(GENERAL_SUBTREE * sub);
int PKCS12_add_safe(STACK_OF(PKCS7) ** psafes, STACK_OF(PKCS12_SAFEBAG) * bags, int safe_nid, int iter, char * pass);
const BIGNUM * BN_get0_nist_prime_192(void);
unsigned char * X509_keyid_get0(X509 * x, int * len);
pitem * pitem_new(unsigned char * prio64be, void * data);
const X509_POLICY_NODE * X509_policy_node_get0_parent(const X509_POLICY_NODE * node);
ASN1_OCTET_STRING * a2i_IPADDRESS(const char * ipasc);
void X509_STORE_CTX_set_depth(X509_STORE_CTX * ctx, int depth);
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from);
pitem * pqueue_iterator(pqueue pq);
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM * param, int depth);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY * key, const char * attrname, int type, const unsigned char * bytes, int len);
void BN_BLINDING_set_flags(BN_BLINDING * b, unsigned long l);
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM * param, STACK_OF(ASN1_OBJECT) * policies);
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM * param, const char * name);
void POLICY_MAPPING_free(POLICY_MAPPING * pmap);
void pqueue_print(pqueue pq);
int PEM_write_bio_X509_CERT_PAIR(BIO * bp, X509_CERT_PAIR * x);
int EVP_PKEY_cmp(const EVP_PKEY * a, const EVP_PKEY * b);
int X509_policy_level_node_count(X509_POLICY_LEVEL * level);
X509_ATTRIBUTE * EVP_PKEY_get_attr(const EVP_PKEY * key, int loc);
GENERAL_SUBTREE * GENERAL_SUBTREE_new(void);
STACK_OF(POLICYQUALINFO) * X509_policy_node_get0_qualifiers(const X509_POLICY_NODE * node);
pitem * pqueue_find(pqueue pq, unsigned char * prio64be);
pitem * pqueue_peek(pqueue pq);
const ASN1_OBJECT * X509_policy_node_get0_policy(const X509_POLICY_NODE * node);
PKCS12 * PKCS12_add_safes(STACK_OF(PKCS7) * safes, int p7_nid);
int BN_BLINDING_convert_ex(BIGNUM * n, BIGNUM * r, BN_BLINDING * b, BN_CTX * ctx);
void X509_policy_tree_free(X509_POLICY_TREE * tree);
unsigned long * OPENSSL_ia32cap_loc(void);
const BIGNUM * BN_get0_nist_prime_224(void);
int BN_GENCB_call(BN_GENCB * cb, int a, int b);
NAME_CONSTRAINTS * NAME_CONSTRAINTS_new(void);
int ECParameters_print(BIO * bp, const EC_KEY * key);
void * BUF_memdup(const void * data, size_t siz);
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM * param, int trust);
int EVP_PKEY_get_attr_count(const EVP_PKEY * key);
X509_VERIFY_PARAM * X509_STORE_CTX_get0_param(X509_STORE_CTX * ctx);
int X509_STORE_set_depth(X509_STORE * store, int depth);
char * BUF_strndup(const char * str, size_t siz);
int ASN1_put_eoc(unsigned char ** pp);
void X509_VERIFY_PARAM_table_cleanup(void);
BN_BLINDING * RSA_setup_blinding(RSA * rsa, BN_CTX * ctx);
int sk_find_ex(_STACK * st, void * data);
POLICY_CONSTRAINTS * POLICY_CONSTRAINTS_new(void);
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM * param);
int ASN1_item_ndef_i2d(ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it);
int ERR_pop_to_mark(void);
X509_POLICY_NODE * X509_policy_level_get0_node(X509_POLICY_LEVEL * level, int i);
int i2d_PKCS7_NDEF(PKCS7 * a, unsigned char ** out);
ASN1_TYPE * ASN1_generate_v3(char * str, X509V3_CTX * cnf);
int X509_policy_tree_level_count(const X509_POLICY_TREE * tree);
void X509_CERT_PAIR_free(X509_CERT_PAIR * pair);
int BN_nist_mod_224(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int BIO_dgram_non_fatal_error(int error);
ASN1_BIT_STRING * v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * nval);
int X509_STORE_CTX_set_default(X509_STORE_CTX * ctx, const char * name);
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from);
GENERAL_NAME * v2i_GENERAL_NAME_ex(GENERAL_NAME * out, const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, CONF_VALUE * cnf, int is_nc);
int BN_nist_mod_521(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
X509_POLICY_LEVEL * X509_policy_tree_get0_level(const X509_POLICY_TREE * tree, int i);
int ASN1_const_check_infinite_end(const unsigned char ** p, long len);
X509_ATTRIBUTE * EVP_PKEY_delete_attr(EVP_PKEY * key, int loc);
const BIGNUM * BN_get0_nist_prime_256(void);
STACK_OF(CONF_VALUE) * i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD * method, ASN1_BIT_STRING * bits, STACK_OF(CONF_VALUE) * extlist);
int BN_nist_mod_384(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int i2d_X509_CERT_PAIR(X509_CERT_PAIR * a, unsigned char ** out);
pitem * pqueue_pop(pqueue pq);
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY * key, ASN1_OBJECT * obj, int lastpos);
const X509_VERIFY_PARAM * X509_VERIFY_PARAM_lookup(const char * name);
X509_CERT_PAIR * X509_CERT_PAIR_new(void);
int X509V3_NAME_from_section(X509_NAME * nm, STACK_OF(CONF_VALUE) * dn_sk, unsigned long chtype);
int EVP_PKEY_add1_attr(EVP_PKEY * key, X509_ATTRIBUTE * attr);
int BIO_dump_indent_cb(int (*cb)(const void *data,size_t len,void *u), void * u, const char * s, int len, int indent);
X509_CERT_PAIR * d2i_X509_CERT_PAIR(X509_CERT_PAIR ** a, const unsigned char ** in, long len);
int asn1_const_Finish(ASN1_const_CTX * c);
int BN_nist_mod_256(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM * param);
void pqueue_free(pqueue pq);
BN_BLINDING * BN_BLINDING_create_param(BN_BLINDING * b, const BIGNUM * e, BIGNUM * m, BN_CTX * ctx, int (*bn_mod_exp)(BIGNUM *r,const BIGNUM *a,const BIGNUM *p,const BIGNUM *m,BN_CTX *ctx,BN_MONT_CTX *m_ctx), BN_MONT_CTX * m_ctx);
const BIGNUM * BN_get0_nist_prime_521(void);
int BN_is_prime_fasttest_ex(const BIGNUM * p, int nchecks, BN_CTX * ctx, int do_trial_devision, BN_GENCB * cb);
int X509_policy_check(X509_POLICY_TREE ** ptree, int * pexplicit_policy, STACK_OF(X509) * certs, STACK_OF(ASN1_OBJECT) * policy_oids, unsigned int flags);
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY * key, int nid, int lastpos);
unsigned long BN_BLINDING_get_flags(const BN_BLINDING * b);
PKCS12_SAFEBAG * PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) ** pbags, X509 * cert);
int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX * ctx, unsigned char * key);
ASN1_OCTET_STRING * a2i_IPADDRESS_NC(const char * ipasc);
int PKCS7_set_digest(PKCS7 * p7, const EVP_MD * md);
POLICY_MAPPING * POLICY_MAPPING_new(void);
int PKCS7_set0_type_other(PKCS7 * p7, int type, ASN1_TYPE * other);
X509_CERT_PAIR * PEM_read_bio_X509_CERT_PAIR(BIO * bp, X509_CERT_PAIR ** x, pem_password_cb * cb, void * u);
pitem * pqueue_next(piterator * iter);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY * key, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM * param, time_t t);
pqueue pqueue_new(void);
PKCS12_SAFEBAG * PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) ** pbags, EVP_PKEY * key, int key_usage, int iter, int key_nid, char * pass);
char * DSO_merge(DSO * dso, const char * filespec1, const char * filespec2);
int BIO_dump_cb(int (*cb)(const void *data,size_t len,void *u), void * u, const char * s, int len);
pitem * pqueue_insert(pqueue pq, pitem * item);
void pitem_free(pitem * item);
BIGNUM * get_rfc3526_prime_8192(BIGNUM * bn);
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM * param, unsigned long flags);
BIGNUM * get_rfc2409_prime_1024(BIGNUM * bn);
BIGNUM * get_rfc3526_prime_2048(BIGNUM * bn);
BIGNUM * get_rfc3526_prime_6144(BIGNUM * bn);
BIGNUM * get_rfc3526_prime_1536(BIGNUM * bn);
BIGNUM * get_rfc3526_prime_3072(BIGNUM * bn);
BIGNUM * get_rfc3526_prime_4096(BIGNUM * bn);
BIGNUM * get_rfc2409_prime_768(BIGNUM * bn);
unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM * param);
EVP_CIPHER_CTX * EVP_CIPHER_CTX_new(void);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX * a);
int a2i_ipadd(unsigned char * ipout, const char * ipasc);
int EVP_CIPHER_block_size(const EVP_CIPHER * cipher);
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX * ctx, void * data);
int BIO_method_type(const BIO * b);
int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX * ctx);
int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX * ctx);
int EVP_MD_size(const EVP_MD * md);
int EVP_MD_CTX_test_flags(const EVP_MD_CTX * ctx, int flags);
void BIO_clear_flags(BIO * b, int flags);
int EVP_MD_pkey_type(const EVP_MD * md);
void EVP_MD_CTX_clear_flags(EVP_MD_CTX * ctx, int flags);
unsigned long EVP_CIPHER_flags(const EVP_CIPHER * cipher);
long (*)(struct bio_st *,int,const char *,int, long,long) BIO_get_callback(const BIO * b);
int EVP_CIPHER_key_length(const EVP_CIPHER * cipher);
int EVP_Cipher(EVP_CIPHER_CTX * c, unsigned char * out, const unsigned char * in, unsigned int inl);
int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX * ctx);
const EVP_CIPHER * EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX * ctx);
void * EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX * ctx);
int EVP_MD_block_size(const EVP_MD * md);
unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX * ctx);
const EVP_MD * EVP_MD_CTX_md(const EVP_MD_CTX * ctx);
const char * BIO_method_name(const BIO * b);
int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX * ctx);
int CRYPTO_memcmp(const void * a, const void * b, size_t len);
void BN_consttime_swap(BN_ULONG swap, BIGNUM * a, BIGNUM * b, int nwords);
int i2d_X509_EXTENSIONS(X509_EXTENSIONS * a, unsigned char ** out);
X509_EXTENSIONS * d2i_X509_EXTENSIONS(X509_EXTENSIONS ** a, const unsigned char ** in, long len);
void X509_ALGOR_get0(ASN1_OBJECT ** pobj, int * pptype, void ** ppval, X509_ALGOR * algor);
int X509_ALGOR_set0(X509_ALGOR * alg, ASN1_OBJECT * aobj, int ptype, void * pval);
void * X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) * x, ASN1_OBJECT * obj, int lastpos, int type);
int ASN1_TYPE_set1(ASN1_TYPE * a, int type, const void * value);
void ASN1_STRING_set0(ASN1_STRING * str, void * data, int len);
int i2d_X509_ALGORS(X509_ALGORS * a, unsigned char ** out);
void COMP_zlib_cleanup(void);
X509_ALGORS * d2i_X509_ALGORS(X509_ALGORS ** a, const unsigned char ** in, long len);
ASN1_VALUE * SMIME_read_ASN1(BIO * bio, BIO ** bcont, const ASN1_ITEM * it);
int OPENSSL_isservice(void);
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX * ctx, int flags);
int BN_X931_generate_prime_ex(BIGNUM * p, BIGNUM * p1, BIGNUM * p2, BIGNUM * Xp1, BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb);
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX * ctx, int flags);
void EVP_add_alg_module(void);
int BN_X931_derive_prime_ex(BIGNUM * p, BIGNUM * p1, BIGNUM * p2, const BIGNUM * Xp, const BIGNUM * Xp1, const BIGNUM * Xp2, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb);
void OPENSSL_init(void);
char * CRYPTO_strdup(const char * str, const char * file, int line);
int pqueue_size(pqueue pq);
int i2d_TS_ACCURACY(const TS_ACCURACY * a, unsigned char ** pp);
int i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT * a, unsigned char ** pp);
int EVP_PKEY_print_public(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
EVP_PKEY_CTX * EVP_PKEY_CTX_new(EVP_PKEY * pkey, ENGINE * e);
int i2d_TS_TST_INFO(const TS_TST_INFO * a, unsigned char ** pp);
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_find(ENGINE ** pe, int type);
DSO_METHOD * DSO_METHOD_beos(void);
X509 * TS_CONF_load_cert(const char * file);
X509_EXTENSION * TS_REQ_get_ext(TS_REQ * a, int loc);
int EVP_PKEY_sign_init(EVP_PKEY_CTX * ctx);
int ASN1_item_print(BIO * out, ASN1_VALUE * ifld, int indent, const ASN1_ITEM * it, const ASN1_PCTX * ctx);
int TS_TST_INFO_set_nonce(TS_TST_INFO * a, const ASN1_INTEGER * nonce);
TS_RESP * TS_RESP_dup(TS_RESP * a);
int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD * ameth);
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO * si, ASN1_TIME * t);
int BIO_asn1_get_prefix(BIO * b, asn1_ps_func ** pprefix, asn1_ps_func ** pprefix_free);
int TS_TST_INFO_set_time(TS_TST_INFO * a, const ASN1_GENERALIZEDTIME * gtime);
void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD * pmeth, int (*decrypt_init)(EVP_PKEY_CTX *ctx), int (*decrypt)(EVP_PKEY_CTX *ctx,unsigned char *out,size_t *outlen,const unsigned char *in,size_t inlen));
int EVP_PKEY_set_type_str(EVP_PKEY * pkey, const char * str, int len);
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX * ctx, int idx);
int TS_REQ_set_policy_id(TS_REQ * a, ASN1_OBJECT * policy);
int TS_RESP_set_status_info(TS_RESP * a, TS_STATUS_INFO * info);
int EVP_PKEY_keygen(EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey);
int EVP_DigestSignInit(EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey);
int TS_ACCURACY_set_millis(TS_ACCURACY * a, const ASN1_INTEGER * millis);
TS_REQ * TS_REQ_dup(TS_REQ * a);
GENERAL_NAME * GENERAL_NAME_dup(GENERAL_NAME * a);
STACK_OF(X509_CRL) * X509_STORE_get1_crls(X509_STORE_CTX * st, X509_NAME * nm);
EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_new(int id, int flags, const char * pem_str, const char * info);
BIO * BIO_new_NDEF(BIO * out, ASN1_VALUE * val, const ASN1_ITEM * it);
int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT * a, X509_ALGOR * alg);
int i2d_TS_TST_INFO_bio(BIO * fp, TS_TST_INFO * a);
int TS_TST_INFO_set_ordering(TS_TST_INFO * a, int ordering);
int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO * a, ASN1_OBJECT * obj, int lastpos);
void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID * id, void * ptr);
const char * TS_CONF_get_tsa_section(CONF * conf, const char * section);
int SMIME_write_ASN1(BIO * bio, ASN1_VALUE * val, BIO * data, int flags, int ctype_nid, int econt_nid, STACK_OF(X509_ALGOR) * mdalgs, const ASN1_ITEM * it);
int TS_RESP_CTX_set_signer_key(TS_RESP_CTX * ctx, EVP_PKEY * key);
int EVP_PKEY_encrypt_old(unsigned char * enc_key, const unsigned char * key, int key_len, EVP_PKEY * pub_key);
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX * ctx);
void CRYPTO_THREADID_cpy(CRYPTO_THREADID * dest, const CRYPTO_THREADID * src);
unsigned long ASN1_PCTX_get_cert_flags(ASN1_PCTX * p);
int i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT * a, unsigned char ** pp);
EVP_PKEY * TS_CONF_load_key(const char * file, const char * pass);
int i2d_ASN1_SEQUENCE_ANY(const ASN1_SEQUENCE_ANY * a, unsigned char ** pp);
TS_MSG_IMPRINT * d2i_TS_MSG_IMPRINT_bio(BIO * fp, TS_MSG_IMPRINT ** a);
void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD * ameth, int (*pub_decode)(EVP_PKEY *pk,X509_PUBKEY *pub), int (*pub_encode)(X509_PUBKEY *pub,const EVP_PKEY *pk), int (*pub_cmp)(const EVP_PKEY *a,const EVP_PKEY *b), int (*pub_print)(BIO *out,const EVP_PKEY *pkey,int indent,ASN1_PCTX *pctx), int (*pkey_size)(const EVP_PKEY *pk), int (*pkey_bits)(const EVP_PKEY *pk));
EVP_PKEY * b2i_PublicKey_bio(BIO * in);
int BIO_asn1_set_prefix(BIO * b, asn1_ps_func * prefix, asn1_ps_func * prefix_free);
EVP_PKEY * EVP_PKEY_new_mac_key(int type, ENGINE * e, const unsigned char * key, int keylen);
int CRYPTO_THREADID_cmp(const CRYPTO_THREADID * a, const CRYPTO_THREADID * b);
void TS_REQ_ext_free(TS_REQ * a);
void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD * ameth, void (*pkey_free)(EVP_PKEY *pkey));
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_get0_asn1(EVP_PKEY * pkey);
NETSCAPE_X509 * d2i_NETSCAPE_X509(NETSCAPE_X509 ** a, unsigned char const ** in, long len);
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX * ctx);
void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX * ctx, void * data);
int EVP_PKEY_keygen_init(EVP_PKEY_CTX * ctx);
int TS_RESP_CTX_set_status_info(TS_RESP_CTX * ctx, int status, const char * text);
X509_ALGOR * TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT * a);
int TS_REQ_print_bio(BIO * bio, TS_REQ * a);
int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX * ctx, const char * type, const char * value);
int EVP_PKEY_get_default_digest_nid(EVP_PKEY * pkey, int * pnid);
int PEM_write_bio_PKCS7_stream(BIO * out, PKCS7 * p7, BIO * in, int flags);
int TS_MSG_IMPRINT_print_bio(BIO * bio, TS_MSG_IMPRINT * msg);
int BN_asc2bn(BIGNUM ** a, const char * str);
ASN1_OBJECT * TS_REQ_get_policy_id(TS_REQ * a);
TS_ACCURACY * d2i_TS_ACCURACY(TS_ACCURACY ** a, const unsigned char ** pp, long length);
void * DSO_global_lookup(const char * name);
int TS_CONF_set_tsa_name(CONF * conf, const char * section, TS_RESP_CTX * ctx);
int i2d_ASN1_SET_ANY(const ASN1_SEQUENCE_ANY * a, unsigned char ** pp);
unsigned long ASN1_PCTX_get_flags(ASN1_PCTX * p);
int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO * a, int nid, int lastpos);
TS_RESP * TS_RESP_new(void);
ESS_CERT_ID * ESS_CERT_ID_dup(ESS_CERT_ID * a);
TS_STATUS_INFO * TS_STATUS_INFO_dup(TS_STATUS_INFO * a);
X509_EXTENSION * TS_REQ_delete_ext(TS_REQ * a, int loc);
int EVP_DigestVerifyFinal(EVP_MD_CTX * ctx, unsigned char * sig, size_t siglen);
int EVP_PKEY_print_params(BIO * out, const EVP_PKEY * pkey, int inden, ASN1_PCTX * pctx);
TS_MSG_IMPRINT * TS_REQ_get_msg_imprint(TS_REQ * a);
int OBJ_find_sigid_by_algs(int * psignid, int dig_nid, int pkey_nid);
const ASN1_INTEGER * TS_TST_INFO_get_serial(const TS_TST_INFO * a);
const ASN1_INTEGER * TS_REQ_get_nonce(const TS_REQ * a);
int X509_PUBKEY_set0_param(X509_PUBKEY * pub, ASN1_OBJECT * aobj, int ptype, void * pval, unsigned char * penc, int penclen);
void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX * ctx, int * dat, int datlen);
int DIST_POINT_set_dpname(DIST_POINT_NAME * dpn, X509_NAME * iname);
int i2d_ISSUING_DIST_POINT(ISSUING_DIST_POINT * a, unsigned char ** pp);
void * EVP_PKEY_CTX_get_data(EVP_PKEY_CTX * ctx);
int TS_STATUS_INFO_print_bio(BIO * bio, TS_STATUS_INFO * a);
int EVP_PKEY_derive_init(EVP_PKEY_CTX * ctx);
TS_TST_INFO * d2i_TS_TST_INFO(TS_TST_INFO ** a, const unsigned char ** pp, long length);
int EVP_PKEY_asn1_add_alias(int to, int from);
TS_RESP * d2i_TS_RESP_bio(BIO * fp, TS_RESP ** a);
int OTHERNAME_cmp(OTHERNAME * a, OTHERNAME * b);
void GENERAL_NAME_set0_value(GENERAL_NAME * a, int type, void * value);
void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO * ri, X509_ALGOR ** penc);
TS_RESP_CTX * TS_RESP_CTX_new(void);
void TS_RESP_set_tst_info(TS_RESP * a, PKCS7 * p7, TS_TST_INFO * tst_info);
int PKCS7_final(PKCS7 * p7, BIO * data, int flags);
int EVP_PKEY_base_id(const EVP_PKEY * pkey);
int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX * ctx, X509 * signer);
int TS_REQ_set_msg_imprint(TS_REQ * a, TS_MSG_IMPRINT * msg_imprint);
int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX * ctx, int keytype, int optype, int cmd, int p1, void * p2);
int TS_CONF_set_digests(CONF * conf, const char * section, TS_RESP_CTX * ctx);
TS_MSG_IMPRINT * d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT ** a, const unsigned char ** pp, long length);
void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD * pmeth, int (*ctrl)(EVP_PKEY_CTX *ctx,int type,int p1,void *p2), int (*ctrl_str)(EVP_PKEY_CTX *ctx,const char *type,const char *value));
int TS_REQ_get_ext_by_NID(TS_REQ * a, int nid, int lastpos);
int PKCS5_pbe_set0_algor(X509_ALGOR * algor, int alg, int iter, const unsigned char * salt, int saltlen);
CRYPTO_THREADID * BN_BLINDING_thread_id(BN_BLINDING * b);
TS_ACCURACY * TS_ACCURACY_new(void);
void X509_CRL_METHOD_free(X509_CRL_METHOD * m);
unsigned long ASN1_PCTX_get_nm_flags(ASN1_PCTX * p);
void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD * pmeth, int (*sign_init)(EVP_PKEY_CTX *ctx), int (*sign)(EVP_PKEY_CTX *ctx,unsigned char *sig,size_t *siglen,const unsigned char *tbs,size_t tbslen));
void CRYPTO_THREADID_current(CRYPTO_THREADID * id);
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX * ctx);
void NETSCAPE_X509_free(NETSCAPE_X509 * a);
int i2b_PVK_bio(BIO * out, EVP_PKEY * pk, int enclevel, pem_password_cb * cb, void * u);
int EVP_PKEY_print_private(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
void * GENERAL_NAME_get0_value(GENERAL_NAME * a, int * ptype);
EVP_PKEY * b2i_PVK_bio(BIO * in, pem_password_cb * cb, void * u);
ASN1_UTCTIME * ASN1_UTCTIME_adj(ASN1_UTCTIME * s, time_t t, int offset_day, int offset_sec);
TS_TST_INFO * TS_TST_INFO_new(void);
void EVP_MD_do_all_sorted(void (*fn)(const EVP_MD *ciph,const char *from,const char *to,void *x), void * arg);
int TS_CONF_set_default_engine(const char * name);
int TS_ACCURACY_set_seconds(TS_ACCURACY * a, const ASN1_INTEGER * seconds);
const ASN1_GENERALIZEDTIME * TS_TST_INFO_get_time(const TS_TST_INFO * a);
int PKCS8_pkey_get0(ASN1_OBJECT ** ppkalg, const unsigned char ** pk, int * ppklen, X509_ALGOR ** pa, PKCS8_PRIV_KEY_INFO * p8);
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_get0(int idx);
int OBJ_add_sigid(int signid, int dig_id, int pkey_id);
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO * si);
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX * ctx);
int EVP_PKEY_sign(EVP_PKEY_CTX * ctx, unsigned char * sig, size_t * siglen, const unsigned char * tbs, size_t tbslen);
void OBJ_sigid_free(void);
void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD * pmeth, int (*init)(EVP_PKEY_CTX *ctx));
ESS_ISSUER_SERIAL * d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL ** a, const unsigned char ** pp, long length);
ISSUING_DIST_POINT * ISSUING_DIST_POINT_new(void);
ASN1_TIME * ASN1_TIME_adj(ASN1_TIME * s, time_t t, int offset_day, int offset_sec);
int TS_OBJ_print_bio(BIO * bio, const ASN1_OBJECT * obj);
void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD * pmeth, int (*verify_recover_init)(EVP_PKEY_CTX *ctx), int (*verify_recover)(EVP_PKEY_CTX *ctx,unsigned char *sig,size_t *siglen,const unsigned char *tbs,size_t tbslen));
TS_STATUS_INFO * TS_RESP_get_status_info(TS_RESP * g);
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX * ctx, EVP_PKEY_gen_cb * cb);
TS_TST_INFO * PKCS7_to_TS_TST_INFO(PKCS7 * token);
unsigned long ASN1_PCTX_get_oid_flags(ASN1_PCTX * p);
int TS_TST_INFO_add_ext(TS_TST_INFO * a, X509_EXTENSION * ex, int loc);
void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD * pmeth, int (*derive_init)(EVP_PKEY_CTX *ctx), int (*derive)(EVP_PKEY_CTX *ctx,unsigned char *key,size_t *keylen));
int i2d_TS_MSG_IMPRINT_bio(BIO * fp, TS_MSG_IMPRINT * a);
int TS_RESP_CTX_set_accuracy(TS_RESP_CTX * ctx, int secs, int millis, int micros);
int TS_REQ_set_nonce(TS_REQ * a, const ASN1_INTEGER * nonce);
ESS_CERT_ID * ESS_CERT_ID_new(void);
int TS_REQ_get_ext_count(TS_REQ * a);
void BUF_reverse(unsigned char * out, const unsigned char * in, size_t siz);
int TS_TST_INFO_print_bio(BIO * bio, TS_TST_INFO * a);
ISSUING_DIST_POINT * d2i_ISSUING_DIST_POINT(ISSUING_DIST_POINT ** a, const unsigned char ** pp, long length);
int i2b_PrivateKey_bio(BIO * out, EVP_PKEY * pk);
int i2d_TS_RESP(const TS_RESP * a, unsigned char ** pp);
EVP_PKEY * b2i_PublicKey(const unsigned char ** in, long length);
void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX * ctx);
void TS_STATUS_INFO_free(TS_STATUS_INFO * a);
int TS_RESP_verify_token(TS_VERIFY_CTX * ctx, PKCS7 * token);
const void * OBJ_bsearch_ex_(const void * key, const void * base, int num, int size, int (*cmp)(const void *,const void *), int flags);
int ASN1_bn_print(BIO * bp, const char * number, const BIGNUM * num, unsigned char * buf, int off);
int EVP_PKEY_asn1_get_count(void);
void ASN1_PCTX_set_nm_flags(ASN1_PCTX * p, unsigned long flags);
int EVP_DigestVerifyInit(EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey);
ASN1_OBJECT * TS_TST_INFO_get_policy_id(TS_TST_INFO * a);
int TS_REQ_get_cert_req(const TS_REQ * a);
void X509_CRL_set_meth_data(X509_CRL * crl, void * dat);
int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO * priv, ASN1_OBJECT * aobj, int version, int ptype, void * pval, unsigned char * penc, int penclen);
int ASN1_STRING_copy(ASN1_STRING * dst, const ASN1_STRING * str);
int X509_CRL_match(const X509_CRL * a, const X509_CRL * b);
void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD * ameth, int (*priv_decode)(EVP_PKEY *pk,PKCS8_PRIV_KEY_INFO *p8inf), int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8,const EVP_PKEY *pk), int (*priv_print)(BIO *out,const EVP_PKEY *pkey,int indent,ASN1_PCTX *pctx));
void * TS_TST_INFO_get_ext_d2i(TS_TST_INFO * a, int nid, int * crit, int * idx);
int TS_RESP_CTX_add_policy(TS_RESP_CTX * ctx, ASN1_OBJECT * policy);
TS_RESP * d2i_TS_RESP(TS_RESP ** a, const unsigned char ** pp, long length);
STACK_OF(X509) * TS_CONF_load_certs(const char * file);
TS_MSG_IMPRINT * TS_TST_INFO_get_msg_imprint(TS_TST_INFO * a);
void ERR_load_TS_strings(void);
long TS_TST_INFO_get_version(const TS_TST_INFO * a);
EVP_PKEY_CTX * EVP_PKEY_CTX_dup(EVP_PKEY_CTX * ctx);
void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD * pmeth, int (*verify_init)(EVP_PKEY_CTX *ctx), int (*verify)(EVP_PKEY_CTX *ctx,const unsigned char *sig,size_t siglen,const unsigned char *tbs,size_t tbslen));
int i2b_PublicKey_bio(BIO * out, EVP_PKEY * pk);
int TS_CONF_set_certs(CONF * conf, const char * section, const char * certs, TS_RESP_CTX * ctx);
int EVP_PKEY_asn1_get0_info(int * ppkey_id, int * ppkey_base_id, int * ppkey_flags, const char ** pinfo, const char ** ppem_str, const EVP_PKEY_ASN1_METHOD * ameth);
void TS_VERIFY_CTX_free(TS_VERIFY_CTX * ctx);
int TS_REQ_get_ext_by_critical(TS_REQ * a, int crit, int lastpos);
void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX * ctx, TS_serial_cb cb, void * data);
void * X509_CRL_get_meth_data(X509_CRL * crl);
void TS_RESP_CTX_set_time_cb(TS_RESP_CTX * ctx, TS_time_cb cb, void * data);
ASN1_OCTET_STRING * TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT * a);
void TS_TST_INFO_ext_free(TS_TST_INFO * a);
long TS_REQ_get_version(const TS_REQ * a);
int TS_REQ_add_ext(TS_REQ * a, X509_EXTENSION * ex, int loc);
void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX * ctx, void * data);
const void * OBJ_bsearch_(const void * key, const void * base, int num, int size, int (*cmp)(const void *,const void *));
void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD * pmeth, int (*verifyctx_init)(EVP_PKEY_CTX *ctx,EVP_MD_CTX *mctx), int (*verifyctx)(EVP_PKEY_CTX *ctx,const unsigned char *sig,int siglen,EVP_MD_CTX *mctx));
int i2d_PKCS7_bio_stream(BIO * out, PKCS7 * p7, BIO * in, int flags);
void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID * id, unsigned long val);
PKCS7_SIGNER_INFO * PKCS7_sign_add_signer(PKCS7 * p7, X509 * signcert, EVP_PKEY * pkey, const EVP_MD * md, int flags);
TS_TST_INFO * d2i_TS_TST_INFO_bio(BIO * bp, TS_TST_INFO ** a);
int TS_TST_INFO_get_ordering(const TS_TST_INFO * a);
int TS_RESP_print_bio(BIO * bio, TS_RESP * a);
STACK_OF(X509_EXTENSION) * TS_TST_INFO_get_exts(TS_TST_INFO * a);
X509_ALGOR * PKCS5_pbe2_set_iv(const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen, unsigned char * aiv, int prf_nid);
EVP_PKEY * b2i_PrivateKey(const unsigned char ** in, long length);
void * EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX * ctx);
int TS_REQ_set_cert_req(TS_REQ * a, int cert_req);
int CRYPTO_THREADID_set_callback(void (*threadid_func)(CRYPTO_THREADID *));
int TS_CONF_set_serial(CONF * conf, const char * section, TS_serial_cb cb, TS_RESP_CTX * ctx);
void TS_TST_INFO_free(TS_TST_INFO * a);
int TS_RESP_verify_response(TS_VERIFY_CTX * ctx, TS_RESP * response);
int i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL * a, unsigned char ** pp);
const ASN1_INTEGER * TS_ACCURACY_get_seconds(const TS_ACCURACY * a);
void EVP_CIPHER_do_all(void (*fn)(const EVP_CIPHER *ciph,const char *from,const char *to,void *x), void * arg);
EVP_PKEY * b2i_PrivateKey_bio(BIO * in);
OCSP_CERTID * OCSP_CERTID_dup(OCSP_CERTID * a);
int X509_PUBKEY_get0_param(ASN1_OBJECT ** ppkalg, const unsigned char ** pk, int * ppklen, X509_ALGOR ** pa, X509_PUBKEY * pub);
TS_MSG_IMPRINT * TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT * a);
void PKCS7_print_ctx(BIO * out, PKCS7 * x, int indent, const ASN1_PCTX * pctx);
int i2d_TS_REQ_bio(BIO * fp, TS_REQ * a);
void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD * ameth, int (*param_decode)(EVP_PKEY *pkey,const unsigned char **pder,int derlen), int (*param_encode)(const EVP_PKEY *pkey,unsigned char **pder), int (*param_missing)(const EVP_PKEY *pk), int (*param_copy)(EVP_PKEY *to,const EVP_PKEY *from), int (*param_cmp)(const EVP_PKEY *a,const EVP_PKEY *b), int (*param_print)(BIO *out,const EVP_PKEY *pkey,int indent,ASN1_PCTX *pctx));
void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD * pmeth, int (*encrypt_init)(EVP_PKEY_CTX *ctx), int (*encryptfn)(EVP_PKEY_CTX *ctx,unsigned char *out,size_t *outlen,const unsigned char *in,size_t inlen));
void ASN1_PCTX_set_flags(ASN1_PCTX * p, unsigned long flags);
int i2d_ESS_CERT_ID(const ESS_CERT_ID * a, unsigned char ** pp);
TS_VERIFY_CTX * TS_VERIFY_CTX_new(void);
void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX * ctx, TS_extension_cb cb, void * data);
int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX * ctx, int status, const char * text);
int EVP_PKEY_verify(EVP_PKEY_CTX * ctx, const unsigned char * sig, size_t siglen, const unsigned char * tbs, size_t tbslen);
X509_CRL_METHOD * X509_CRL_METHOD_new(int (*crl_init)(X509_CRL *crl), int (*crl_free)(X509_CRL *crl), int (*crl_lookup)(X509_CRL *crl,X509_REVOKED **ret,ASN1_INTEGER *ser,X509_NAME *issuer), int (*crl_verify)(X509_CRL *crl,EVP_PKEY *pk));
int EVP_DigestSignFinal(EVP_MD_CTX * ctx, unsigned char * sigret, size_t * siglen);
int TS_RESP_CTX_set_def_policy(TS_RESP_CTX * ctx, ASN1_OBJECT * def_policy);
TS_RESP * TS_RESP_create_response(TS_RESP_CTX * ctx, BIO * req_bio);
void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO * si, EVP_PKEY ** pk, X509_ALGOR ** pdig, X509_ALGOR ** psig);
const ASN1_INTEGER * TS_TST_INFO_get_nonce(const TS_TST_INFO * a);
int EVP_PKEY_decrypt_old(unsigned char * dec_key, const unsigned char * enc_key, int enc_key_len, EVP_PKEY * private_key);
int TS_TST_INFO_set_policy_id(TS_TST_INFO * a, ASN1_OBJECT * policy_id);
int TS_CONF_set_ess_cert_id_chain(CONF * conf, const char * section, TS_RESP_CTX * ctx);
EVP_PKEY * EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX * ctx);
TS_REQ * d2i_TS_REQ(TS_REQ ** a, const unsigned char ** pp, long length);
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_find_str(ENGINE ** pe, const char * str, int len);
BIO_METHOD * BIO_f_asn1(void);
ESS_SIGNING_CERT * ESS_SIGNING_CERT_new(void);
int EVP_PBE_find(int type, int pbe_nid, int * pcnid, int * pmnid, EVP_PBE_KEYGEN ** pkeygen);
int X509_CRL_get0_by_cert(X509_CRL * crl, X509_REVOKED ** ret, X509 * x);
int EVP_PKEY_derive(EVP_PKEY_CTX * ctx, unsigned char * key, size_t * keylen);
int i2d_TS_REQ(const TS_REQ * a, unsigned char ** pp);
X509_EXTENSION * TS_TST_INFO_delete_ext(TS_TST_INFO * a, int loc);
void ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL * a);
void ASN1_PCTX_set_str_flags(ASN1_PCTX * p, unsigned long flags);
int TS_CONF_set_signer_key(CONF * conf, const char * section, const char * key, const char * pass, TS_RESP_CTX * ctx);
const ASN1_INTEGER * TS_ACCURACY_get_millis(const TS_ACCURACY * a);
PKCS7 * TS_RESP_get_token(TS_RESP * a);
TS_ACCURACY * TS_ACCURACY_dup(TS_ACCURACY * a);
void X509_CRL_set_default_method(const X509_CRL_METHOD * meth);
unsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID * id);
void TS_RESP_free(TS_RESP * a);
void ISSUING_DIST_POINT_free(ISSUING_DIST_POINT * a);
ESS_ISSUER_SERIAL * ESS_ISSUER_SERIAL_new(void);
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO * si, const unsigned char * md, int mdlen);
int TS_RESP_CTX_add_md(TS_RESP_CTX * ctx, const EVP_MD * md);
TS_TST_INFO * TS_TST_INFO_dup(TS_TST_INFO * a);
int PEM_write_bio_Parameters(BIO * bp, EVP_PKEY * x);
TS_ACCURACY * TS_TST_INFO_get_accuracy(TS_TST_INFO * a);
int X509_CRL_get0_by_serial(X509_CRL * crl, X509_REVOKED ** ret, ASN1_INTEGER * serial);
int TS_TST_INFO_set_version(TS_TST_INFO * a, long version);
TS_TST_INFO * TS_RESP_CTX_get_tst_info(TS_RESP_CTX * ctx);
int TS_RESP_verify_signature(PKCS7 * token, STACK_OF(X509) * certs, X509_STORE * store, X509 ** signer_out);
void (*)(CRYPTO_THREADID *) CRYPTO_THREADID_get_callback(void);
GENERAL_NAME * TS_TST_INFO_get_tsa(TS_TST_INFO * a);
TS_STATUS_INFO * TS_STATUS_INFO_new(void);
int (*)(EVP_PKEY_CTX *ctx) EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX * ctx);
void * TS_REQ_get_ext_d2i(TS_REQ * a, int nid, int * crit, int * idx);
int GENERAL_NAME_set0_othername(GENERAL_NAME * gen, ASN1_OBJECT * oid, ASN1_TYPE * value);
int TS_TST_INFO_get_ext_count(TS_TST_INFO * a);
TS_REQ * TS_RESP_CTX_get_request(TS_RESP_CTX * ctx);
int i2d_NETSCAPE_X509(NETSCAPE_X509 * a, unsigned char ** out);
void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD * pmeth, int (*signctx_init)(EVP_PKEY_CTX *ctx,EVP_MD_CTX *mctx), int (*signctx)(EVP_PKEY_CTX *ctx,unsigned char *sig,size_t *siglen,EVP_MD_CTX *mctx));
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD * dst, const EVP_PKEY_ASN1_METHOD * src);
int ASN1_TYPE_cmp(ASN1_TYPE * a, ASN1_TYPE * b);
void EVP_CIPHER_do_all_sorted(void (*fn)(const EVP_CIPHER *ciph,const char *from,const char *to,void *x), void * arg);
void EVP_PKEY_CTX_free(EVP_PKEY_CTX * ctx);
STACK_OF(X509) * X509_STORE_get1_certs(X509_STORE_CTX * st, X509_NAME * nm);
int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX * ctx);
ESS_SIGNING_CERT * d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT ** a, const unsigned char ** pp, long length);
int TS_CONF_set_ordering(CONF * conf, const char * section, TS_RESP_CTX * ctx);
int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN * keygen);
int TS_REQ_set_version(TS_REQ * a, long version);
void * EVP_PKEY_get0(EVP_PKEY * pkey);
int BIO_asn1_set_suffix(BIO * b, asn1_ps_func * suffix, asn1_ps_func * suffix_free);
int i2d_TS_STATUS_INFO(const TS_STATUS_INFO * a, unsigned char ** pp);
void EVP_MD_do_all(void (*fn)(const EVP_MD *ciph,const char *from,const char *to,void *x), void * arg);
int TS_TST_INFO_set_accuracy(TS_TST_INFO * a, TS_ACCURACY * accuracy);
int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO * si, ASN1_OBJECT * coid);
int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD * pmeth);
int TS_TST_INFO_set_tsa(TS_TST_INFO * a, GENERAL_NAME * tsa);
EVP_PKEY_METHOD * EVP_PKEY_meth_new(int id, int flags);
int TS_CONF_set_accuracy(CONF * conf, const char * section, TS_RESP_CTX * ctx);
void ASN1_PCTX_set_oid_flags(ASN1_PCTX * p, unsigned long flags);
ESS_SIGNING_CERT * ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT * a);
TS_REQ * d2i_TS_REQ_bio(BIO * fp, TS_REQ ** a);
ASN1_TIME * X509_time_adj_ex(ASN1_TIME * s, int offset_day, long offset_sec, time_t * t);
void TS_RESP_CTX_add_flags(TS_RESP_CTX * ctx, int flags);
TS_STATUS_INFO * d2i_TS_STATUS_INFO(TS_STATUS_INFO ** a, const unsigned char ** pp, long length);
int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT * a, unsigned char * d, int len);
int BIO_asn1_get_suffix(BIO * b, asn1_ps_func ** psuffix, asn1_ps_func ** psuffix_free);
void TS_REQ_free(TS_REQ * a);
void EVP_PKEY_meth_free(EVP_PKEY_METHOD * pmeth);
STACK_OF(X509_EXTENSION) * TS_REQ_get_exts(TS_REQ * a);
int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX * ctx, unsigned clock_precision_digits);
int TS_RESP_CTX_add_failure_info(TS_RESP_CTX * ctx, int failure);
int i2d_TS_RESP_bio(BIO * fp, TS_RESP * a);
EVP_PKEY * EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX * ctx);
TS_REQ * TS_REQ_new(void);
TS_MSG_IMPRINT * TS_MSG_IMPRINT_new(void);
const EVP_PKEY_METHOD * EVP_PKEY_meth_find(int type);
int EVP_PKEY_id(const EVP_PKEY * pkey);
int TS_TST_INFO_set_serial(TS_TST_INFO * a, const ASN1_INTEGER * serial);
GENERAL_NAME * a2i_GENERAL_NAME(GENERAL_NAME * out, const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, int gen_type, char * value, int is_nc);
int TS_CONF_set_crypto_device(CONF * conf, const char * section, const char * device);
int EVP_PKEY_verify_init(EVP_PKEY_CTX * ctx);
int TS_CONF_set_policies(CONF * conf, const char * section, TS_RESP_CTX * ctx);
ASN1_PCTX * ASN1_PCTX_new(void);
void ESS_CERT_ID_free(ESS_CERT_ID * a);
void TS_MSG_IMPRINT_free(TS_MSG_IMPRINT * a);
void TS_VERIFY_CTX_init(TS_VERIFY_CTX * ctx);
int PKCS7_stream(unsigned char *** boundary, PKCS7 * p7);
int TS_RESP_CTX_set_certs(TS_RESP_CTX * ctx, STACK_OF(X509) * certs);
int TS_CONF_set_def_policy(CONF * conf, const char * section, const char * policy, TS_RESP_CTX * ctx);
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME * s, time_t t, int offset_day, long offset_sec);
NETSCAPE_X509 * NETSCAPE_X509_new(void);
void TS_ACCURACY_free(TS_ACCURACY * a);
TS_TST_INFO * TS_RESP_get_tst_info(TS_RESP * a);
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX * ctx, EVP_PKEY * peer);
EVP_PKEY * PEM_read_bio_Parameters(BIO * bp, EVP_PKEY ** x);
int TS_CONF_set_clock_precision_digits(CONF * conf, const char * section, TS_RESP_CTX * ctx);
ESS_ISSUER_SERIAL * ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL * a);
const ASN1_INTEGER * TS_ACCURACY_get_micros(const TS_ACCURACY * a);
unsigned long ASN1_PCTX_get_str_flags(ASN1_PCTX * p);
int NAME_CONSTRAINTS_check(X509 * x, NAME_CONSTRAINTS * nc);
int ASN1_BIT_STRING_check(ASN1_BIT_STRING * a, unsigned char * flags, int flags_len);
int X509_check_akid(X509 * issuer, AUTHORITY_KEYID * akid);
void ASN1_PCTX_free(ASN1_PCTX * p);
int PEM_write_bio_ASN1_stream(BIO * out, ASN1_VALUE * val, BIO * in, int flags, const char * hdr, const ASN1_ITEM * it);
int i2d_ASN1_bio_stream(BIO * out, ASN1_VALUE * val, BIO * in, int flags, const ASN1_ITEM * it);
int TS_X509_ALGOR_print_bio(BIO * bio, const X509_ALGOR * alg);
void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD * pmeth, void (*cleanup)(EVP_PKEY_CTX *ctx));
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD * ameth);
void ESS_SIGNING_CERT_free(ESS_SIGNING_CERT * a);
int TS_TST_INFO_set_msg_imprint(TS_TST_INFO * a, TS_MSG_IMPRINT * msg_imprint);
int GENERAL_NAME_cmp(GENERAL_NAME * a, GENERAL_NAME * b);
ASN1_SEQUENCE_ANY * d2i_ASN1_SET_ANY(ASN1_SEQUENCE_ANY ** a, const unsigned char ** pp, long length);
ASN1_SEQUENCE_ANY * d2i_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY ** a, const unsigned char ** pp, long length);
int GENERAL_NAME_get0_otherName(GENERAL_NAME * gen, ASN1_OBJECT ** poid, ASN1_TYPE ** pvalue);
ESS_CERT_ID * d2i_ESS_CERT_ID(ESS_CERT_ID ** a, const unsigned char ** pp, long length);
int OBJ_find_sigid_algs(int signid, int * pdig_nid, int * ppkey_nid);
void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD * pmeth, int (*keygen_init)(EVP_PKEY_CTX *ctx), int (*keygen)(EVP_PKEY_CTX *ctx,EVP_PKEY *pkey));
int PKCS5_PBKDF2_HMAC(const char * pass, int passlen, const unsigned char * salt, int saltlen, int iter, const EVP_MD * digest, int keylen, unsigned char * out);
int EVP_PKEY_paramgen(EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey);
void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD * pmeth, int (*paramgen_init)(EVP_PKEY_CTX *ctx), int (*paramgen)(EVP_PKEY_CTX *ctx,EVP_PKEY *pkey));
BIO * BIO_new_PKCS7(BIO * out, PKCS7 * p7);
int EVP_PKEY_verify_recover(EVP_PKEY_CTX * ctx, unsigned char * rout, size_t * routlen, const unsigned char * sig, size_t siglen);
int TS_ext_print_bio(BIO * bio, STACK_OF(X509_EXTENSION) * extensions);
int TS_ASN1_INTEGER_print_bio(BIO * bio, const ASN1_INTEGER * num);
void check_defer(int nid);
int DSO_pathbyaddr(void * addr, char * path, int sz);
int EVP_PKEY_set_type(EVP_PKEY * pkey, int type);
int TS_ACCURACY_set_micros(TS_ACCURACY * a, const ASN1_INTEGER * micros);
TS_VERIFY_CTX * TS_REQ_to_TS_VERIFY_CTX(TS_REQ * req, TS_VERIFY_CTX * ctx);
void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD * pmeth, int (*copy)(EVP_PKEY_CTX *dst,EVP_PKEY_CTX *src));
void ASN1_PCTX_set_cert_flags(ASN1_PCTX * p, unsigned long flags);
X509_EXTENSION * TS_TST_INFO_get_ext(TS_TST_INFO * a, int loc);
void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_ctrl)(EVP_PKEY *pkey,int op,long arg1,void *arg2));
int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO * a, int crit, int lastpos);
EVP_PKEY_CTX * EVP_PKEY_CTX_new_id(int id, ENGINE * e);
int TS_REQ_get_ext_by_OBJ(TS_REQ * a, ASN1_OBJECT * obj, int lastpos);
int TS_CONF_set_signer_cert(CONF * conf, const char * section, const char * cert, TS_RESP_CTX * ctx);
unsigned long X509_NAME_hash_old(X509_NAME * x);
int ASN1_TIME_set_string(ASN1_TIME * s, const char * str);
unsigned long EVP_MD_flags(const EVP_MD * md);
void TS_RESP_CTX_free(TS_RESP_CTX * ctx);
int OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX * rctx, const char * name, const char * value);
int OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX * rctx, OCSP_REQUEST * req);
void X509_STORE_set_verify_cb(X509_STORE * ctx, int (*verify_cb)(int,X509_STORE_CTX *));
X509_CRL * X509_STORE_CTX_get0_current_crl(X509_STORE_CTX * ctx);
X509_STORE_CTX * X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX * ctx);
X509 * X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX * ctx);
int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX * out, const EVP_CIPHER_CTX * in);
char *(*)(UI*, const char*, const char*) UI_method_get_prompt_constructor(UI_METHOD * method);
int UI_method_set_prompt_constructor(UI_METHOD * method, char *(*prompt_constructor)(UI* ui,const char* object_desc,const char* object_name));
int EVP_read_pw_string_min(char * buf, int minlen, int maxlen, const char * prompt, int verify);
size_t CRYPTO_cts128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
size_t CRYPTO_cts128_decrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
void CRYPTO_cfb128_1_encrypt(const unsigned char * in, unsigned char * out, size_t bits, const void * key, unsigned char * ivec, int * num, int enc, block128_f block);
void CRYPTO_cbc128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
void CRYPTO_ctr128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num, block128_f block);
void CRYPTO_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, int * num, block128_f block);
size_t CRYPTO_cts128_decrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
size_t CRYPTO_cts128_encrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
void CRYPTO_cbc128_decrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
void CRYPTO_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, int * num, int enc, block128_f block);
void CRYPTO_cfb128_8_encrypt(const unsigned char * in, unsigned char * out, size_t length, const void * key, unsigned char * ivec, int * num, int enc, block128_f block);
int OPENSSL_strcasecmp(const char * str1, const char * str2);
int OPENSSL_memcmp(const void * p1, const void * p2, size_t n);
int OPENSSL_strncasecmp(const char * str1, const char * str2, size_t n);
struct tm * OPENSSL_gmtime(const time_t * timer, struct tm * result);
int OPENSSL_gmtime_adj(struct tm * tm, int offset_day, long offset_sec);
void EVP_PKEY_meth_get0_info(int * ppkey_id, int * pflags, const EVP_PKEY_METHOD * meth);
void EVP_PKEY_meth_copy(EVP_PKEY_METHOD * dst, const EVP_PKEY_METHOD * src);
int RSA_padding_add_PKCS1_PSS_mgf1(RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, int sLen);
int RSA_verify_PKCS1_PSS_mgf1(RSA * rsa, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, const unsigned char * EM, int sLen);
void X509_ALGOR_set_md(X509_ALGOR * alg, const EVP_MD * md);
int CMAC_CTX_copy(CMAC_CTX * out, const CMAC_CTX * in);
void CMAC_CTX_free(CMAC_CTX * ctx);
EVP_CIPHER_CTX * CMAC_CTX_get0_cipher_ctx(CMAC_CTX * ctx);
void CMAC_CTX_cleanup(CMAC_CTX * ctx);
int CMAC_Init(CMAC_CTX * ctx, const void * key, size_t keylen, const EVP_CIPHER * cipher, ENGINE * impl);
int CMAC_Update(CMAC_CTX * ctx, const void * data, size_t dlen);
int CMAC_resume(CMAC_CTX * ctx);
CMAC_CTX * CMAC_CTX_new(void);
int CMAC_Final(CMAC_CTX * ctx, unsigned char * out, size_t * poutlen);
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num, ctr128_f ctr);
void CRYPTO_gcm128_release(GCM128_CONTEXT * ctx);
int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len, ccm128_f stream);
int CRYPTO_ccm128_encrypt(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len);
int CRYPTO_gcm128_encrypt(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len);
int CRYPTO_xts128_encrypt(XTS128_CONTEXT * ctx, const unsigned char * iv, const unsigned char * inp, unsigned char * out, size_t len, int enc);
size_t CRYPTO_nistcts128_decrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
void CRYPTO_gcm128_setiv(GCM128_CONTEXT * ctx, const unsigned char * iv, size_t len);
size_t CRYPTO_nistcts128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
void CRYPTO_gcm128_tag(GCM128_CONTEXT * ctx, unsigned char * tag, size_t len);
int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len, ccm128_f stream);
int CRYPTO_ccm128_setiv(CCM128_CONTEXT * ctx, const unsigned char * nonce, size_t nlen, size_t mlen);
size_t CRYPTO_nistcts128_encrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
int CRYPTO_gcm128_aad(GCM128_CONTEXT * ctx, const unsigned char * aad, size_t len);
void CRYPTO_ccm128_init(CCM128_CONTEXT * ctx, unsigned int M, unsigned int L, void * key, block128_f block);
size_t CRYPTO_nistcts128_decrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
GCM128_CONTEXT * CRYPTO_gcm128_new(void * key, block128_f block);
size_t CRYPTO_ccm128_tag(CCM128_CONTEXT * ctx, unsigned char * tag, size_t len);
int CRYPTO_ccm128_decrypt(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len);
void CRYPTO_ccm128_aad(CCM128_CONTEXT * ctx, const unsigned char * aad, size_t alen);
void CRYPTO_gcm128_init(GCM128_CONTEXT * ctx, void * key, block128_f block);
int CRYPTO_gcm128_decrypt(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len);
int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len, ctr128_f stream);
int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len, ctr128_f stream);
int CRYPTO_gcm128_finish(GCM128_CONTEXT * ctx, const unsigned char * tag, size_t len);
X509_ALGOR * PKCS5_pbkdf2_set(int iter, unsigned char * salt, int saltlen, int prf_nid, int keylen);
RSA_PSS_PARAMS * RSA_PSS_PARAMS_new(void);
RSA_PSS_PARAMS * d2i_RSA_PSS_PARAMS(RSA_PSS_PARAMS ** a, const unsigned char ** pp, long length);
void RSA_PSS_PARAMS_free(RSA_PSS_PARAMS * a);
int i2d_RSA_PSS_PARAMS(RSA_PSS_PARAMS * a, unsigned char ** out);
void * OPENSSL_stderr(void);
void OPENSSL_showfatal(const char * fmta, long dummy, ...);
const ASN1_ITEM * POLICY_MAPPING_it(void);
const ASN1_ITEM * NAME_CONSTRAINTS_it(void);
const ASN1_ITEM * ASN1_OCTET_STRING_NDEF_it(void);
const ASN1_ITEM * X509_CERT_PAIR_it(void);
const ASN1_ITEM * POLICY_CONSTRAINTS_it(void);
const ASN1_ITEM * POLICY_MAPPINGS_it(void);
const ASN1_ITEM * GENERAL_SUBTREE_it(void);
const ASN1_ITEM * X509_EXTENSIONS_it(void);
const ASN1_ITEM * X509_ALGORS_it(void);
const ASN1_ITEM * CMS_ContentInfo_it(void);
const ASN1_ITEM * CMS_ReceiptRequest_it(void);
const ASN1_ITEM * ASN1_SEQUENCE_ANY_it(void);
const ASN1_ITEM * ASN1_SET_ANY_it(void);
const ASN1_ITEM * NETSCAPE_X509_it(void);
const ASN1_ITEM * ISSUING_DIST_POINT_it(void);
const ASN1_ITEM * RSA_PSS_PARAMS_it(void);
int * _shadow_DES_rw_mode(void);
int * _shadow_DES_check_key(void);
void ENGINE_load_gost(void);
#endif

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CLIB_AMISSL_PROTOS_H */
