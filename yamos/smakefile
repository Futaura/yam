#/***************************************************************************
#
# YAM - Yet Another Mailer
# Copyright (C) 1995-2000 by Marcel Beck <mbeck@yam.ch>
# Copyright (C) 2000-2001 by YAM Open Source Team
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# YAM Official Support Site :  http://www.yam.ch
# YAM OpenSource project    :  http://sourceforge.net/projects/yamos/
#
# $Id$
#
#***************************************************************************/

# Programs
CC = sc
CP = copy
RM = delete

# Files
OBJS = YAM_locale.o YAM.o YAM_AB.o YAM_CL.o YAM_CO.o YAM_COg.o YAM_COs.o YAM_DI.o YAM_EA.o\
  YAM_ER.o YAM_FI.o YAM_FO.o YAM_MA.o YAM_MAf.o YAM_MI.o YAM_RE.o YAM_TR.o YAM_US.o\
  YAM_UT.o YAM_WR.o YAM_rexx.o YAM_rexx_rxcl.o YAM_rexx_rxif.o\
  YAM_md5.o all_sas.o YAM_global.o

# Compiler flags
CPU      = 68020
OPTFLAGS = OPT OPTSIZE OPTINLOCAL OPTGO OPTLOOP OPTPEEP #OPTSCHED
DEBUG    = DEF DEBUG DEBUG=LINE NOSTRIPDEBUG NOOPT
# CPU can be defined outside, defaults to above
# OPTFLAGS are disabled by DEBUG!

CFLAGS = RESOPT NOVER PARM=R NOLINK WARN=ALL IGNORE=147,306,62,165,148,178,61,212,120,51\
  DATA=FAR CODE=FAR ERRORREXX INCLUDEDIR=includes STRINGSECTION=FAR STRIPDEBUG $(OPTFLAGS)\
  NOICONS IDLEN=60 CPU=$(CPU) NOCHECKABORT UTILLIB SMALLCODE $(DEBUG)

YAM: $(OBJS)
  $(CC) $(CFLAGS) LINK "LINKOPT=MAP YAM.map,fhx FWIDTH 32 PWIDTH 32 SWIDTH 32"\
  LIB lib:scnb.lib lib:amiga.lib lib:debug.lib TO $@ WITH <<
  $(OBJS)
  <

.c.o:
  $(CC) $(CFLAGS) $*.c

clean: # leaves final YAM exe
  $(RM) \#?.(o|map|lnk) (YAM_locale.\#?)

cleanall:
  $(RM) \#?.(o|map|lnk) (YAM_locale.\#?|YAM)

copy:
  $(CP) YAM YAM:

#######################################

YAM.o:     YAM.c     YAM.h YAM_locale.h
YAM_AB.o:  YAM_AB.c  YAM.h YAM_locale.h
YAM_CL.o:  YAM_CL.c  YAM.h YAM_locale.h
YAM_CO.o:  YAM_CO.c  YAM.h YAM_locale.h
YAM_COg.o: YAM_COg.c YAM.h YAM_locale.h
YAM_COs.o: YAM_COs.c YAM.h YAM_locale.h
YAM_DI.o:  YAM_DI.c  YAM.h YAM_locale.h
YAM_EA.o:  YAM_EA.c  YAM.h YAM_locale.h
YAM_ER.o:  YAM_ER.c  YAM.h YAM_locale.h
YAM_FI.o:  YAM_FI.c  YAM.h YAM_locale.h
YAM_FO.o:  YAM_FO.c  YAM.h YAM_locale.h
YAM_MA.o:  YAM_MA.c  YAM.h YAM_locale.h
YAM_MAf.o: YAM_MAf.c YAM.h YAM_locale.h
YAM_MI.o:  YAM_MI.c  YAM.h YAM_locale.h
YAM_RE.o:  YAM_RE.c  YAM.h YAM_locale.h
YAM_TR.o:  YAM_TR.c  YAM.h YAM_locale.h
YAM_US.o:  YAM_US.c  YAM.h YAM_locale.h
YAM_UT.o:  YAM_UT.c  YAM.h YAM_locale.h
YAM_WR.o:  YAM_WR.c  YAM_write.h YAM.h YAM_locale.h
YAM_rexx.o  : YAM_rexx.c YAM_rexx.h
YAM_rexx_rxcl.o: YAM_rexx_rxcl.c YAM_rexx.h
YAM_rexx_rxif.o: YAM_rexx_rxif.c YAM_rexx.h YAM.h YAM_locale.h
YAM_locale.o:   YAM_locale.h YAM_locale.c

YAM_global.o: YAM_global.c YAM_global.h YAM_stringsizes.h
  $(CC) $(CFLAGS)  YAM_global.c `rx >T:YAM-date.tmp "say 'DEF __YAM_VERDATE=' || '22'x || right(date(S),2)*1'.'substr(date(S),5,2)*1'.'left(date(S),4) || '22'x || ' DEF __YAM_VERDAYS=' || date('I')"`

YAM_locale.h: locale/YAM.cd C_h.sd C_c.sd
  flexcat locale/YAM.cd YAM_locale.h=C_h.sd YAM_locale.c=C_c.sd

YAM_locale.c: locale/YAM.cd C_h.sd C_c.sd
  ; # dummy entry to make smake happy

