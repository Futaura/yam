<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<!-- autogenerated by fdtrans v50.7 -->
<library name="amissl" basename="AmiSSLBase" openname="amissl.library">
	<include>amissl/amissl.h</include>
	<include>dos/dos.h</include>
	<include>utility/tagitem.h</include>
	<include>stdlib.h</include>
	<interface name="main" version="1.0" struct="AmiSSLIFace" prefix="_AmiSSL_" asmprefix="IAmiSSL" global="IAmiSSL">
		<method name="Obtain" result="ULONG"/>
		<method name="Release" result="ULONG"/>
		<method name="Expunge" result="void" status="unimplemented"/>
		<method name="Clone" result="struct Interface *" status="unimplemented"/>
		<method name="InitAmiSSLA" result="long" inline4="normal">
			<arg name="tagList" type="struct TagItem *"/>
		</method>
		<method name="InitAmiSSL" result="long" inline4="normal">
			<vararg name="tagList" type="Tag"/>
		</method>
		<method name="CleanupAmiSSLA" result="long" inline4="normal">
			<arg name="tagList" type="struct TagItem *"/>
		</method>
		<method name="CleanupAmiSSL" result="long" inline4="normal">
			<vararg name="tagList" type="Tag"/>
		</method>
		<method name="AmiSSLMalloc" result="void *" inline4="normal">
			<arg name="num" type="long"/>
		</method>
		<method name="AmiSSLRealloc" result="void *" inline4="normal">
			<arg name="block" type="void *"/>
			<arg name="num" type="long"/>
		</method>
		<method name="AmiSSLFree" result="void" inline4="normal">
			<arg name="block" type="void *"/>
		</method>
		<method name="EVP_BF_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_CAST_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_des_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_idea_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_MD2_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_MD5_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_MDC2_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_RC2_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_RC4_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_RC5_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_RIPEMD160_IsReal" result="long" inline4="normal">
		</method>
		<method name="EVP_SHA_IsReal" result="long" inline4="normal">
		</method>
		<method name="ASN1_TYPE_new" result="ASN1_TYPE *" inline4="normal">
		</method>
		<method name="ASN1_TYPE_free" result="void" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
		</method>
		<method name="i2d_ASN1_TYPE" result="int" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_TYPE" result="ASN1_TYPE *" inline4="normal">
			<arg name="a" type="ASN1_TYPE **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ASN1_TYPE_get" result="int" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
		</method>
		<method name="ASN1_TYPE_set" result="void" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
			<arg name="type" type="int"/>
			<arg name="value" type="void *"/>
		</method>
		<method name="ASN1_OBJECT_new" result="ASN1_OBJECT *" inline4="normal">
		</method>
		<method name="ASN1_OBJECT_free" result="void" inline4="normal">
			<arg name="a" type="ASN1_OBJECT *"/>
		</method>
		<method name="i2d_ASN1_OBJECT" result="int" inline4="normal">
			<arg name="a" type="ASN1_OBJECT *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_OBJECT" result="ASN1_OBJECT *" inline4="normal">
			<arg name="a" type="ASN1_OBJECT **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ASN1_STRING_new" result="ASN1_STRING *" inline4="normal">
		</method>
		<method name="ASN1_STRING_free" result="void" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
		</method>
		<method name="ASN1_STRING_dup" result="ASN1_STRING *" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
		</method>
		<method name="ASN1_STRING_type_new" result="ASN1_STRING *" inline4="normal">
			<arg name="type" type="int"/>
		</method>
		<method name="ASN1_STRING_cmp" result="int" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
			<arg name="b" type="ASN1_STRING *"/>
		</method>
		<method name="ASN1_STRING_set" result="int" inline4="normal">
			<arg name="str" type="ASN1_STRING *"/>
			<arg name="data" type="const void *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="i2d_ASN1_BIT_STRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_BIT_STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_BIT_STRING" result="ASN1_BIT_STRING *" inline4="normal">
			<arg name="a" type="ASN1_BIT_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ASN1_BIT_STRING_set_bit" result="int" inline4="normal">
			<arg name="a" type="ASN1_BIT_STRING *"/>
			<arg name="n" type="int"/>
			<arg name="value" type="int"/>
		</method>
		<method name="ASN1_BIT_STRING_get_bit" result="int" inline4="normal">
			<arg name="a" type="ASN1_BIT_STRING *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="i2d_ASN1_BOOLEAN" result="int" inline4="normal">
			<arg name="a" type="int"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_BOOLEAN" result="int" inline4="normal">
			<arg name="a" type="int *"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_INTEGER" result="int" inline4="normal">
			<arg name="a" type="ASN1_INTEGER *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_INTEGER" result="ASN1_INTEGER *" inline4="normal">
			<arg name="a" type="ASN1_INTEGER **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="d2i_ASN1_UINTEGER" result="ASN1_INTEGER *" inline4="normal">
			<arg name="a" type="ASN1_INTEGER **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_ENUMERATED" result="int" inline4="normal">
			<arg name="a" type="ASN1_ENUMERATED *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_ENUMERATED" result="ASN1_ENUMERATED *" inline4="normal">
			<arg name="a" type="ASN1_ENUMERATED **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ASN1_UTCTIME_check" result="int" inline4="normal">
			<arg name="a" type="ASN1_UTCTIME *"/>
		</method>
		<method name="ASN1_UTCTIME_set" result="ASN1_UTCTIME *" inline4="normal">
			<arg name="s" type="ASN1_UTCTIME *"/>
			<arg name="t" type="time_t"/>
		</method>
		<method name="ASN1_UTCTIME_set_string" result="int" inline4="normal">
			<arg name="s" type="ASN1_UTCTIME *"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_check" result="int" inline4="normal">
			<arg name="a" type="ASN1_GENERALIZEDTIME *"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_set" result="ASN1_GENERALIZEDTIME *" inline4="normal">
			<arg name="s" type="ASN1_GENERALIZEDTIME *"/>
			<arg name="t" type="time_t"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_set_string" result="int" inline4="normal">
			<arg name="s" type="ASN1_GENERALIZEDTIME *"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="i2d_ASN1_OCTET_STRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_OCTET_STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_OCTET_STRING" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="a" type="ASN1_OCTET_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_VISIBLESTRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_VISIBLESTRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_VISIBLESTRING" result="ASN1_VISIBLESTRING *" inline4="normal">
			<arg name="a" type="ASN1_VISIBLESTRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_UTF8STRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_UTF8STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_UTF8STRING" result="ASN1_UTF8STRING *" inline4="normal">
			<arg name="a" type="ASN1_UTF8STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_BMPSTRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_BMPSTRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_BMPSTRING" result="ASN1_BMPSTRING *" inline4="normal">
			<arg name="a" type="ASN1_BMPSTRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_PRINTABLE" result="int" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_PRINTABLE" result="ASN1_STRING *" inline4="normal">
			<arg name="a" type="ASN1_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="l" type="long"/>
		</method>
		<method name="d2i_ASN1_PRINTABLESTRING" result="ASN1_PRINTABLESTRING *" inline4="normal">
			<arg name="a" type="ASN1_PRINTABLESTRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="l" type="long"/>
		</method>
		<method name="i2d_DIRECTORYSTRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_DIRECTORYSTRING" result="ASN1_STRING *" inline4="normal">
			<arg name="a" type="ASN1_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_DISPLAYTEXT" result="int" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_DISPLAYTEXT" result="ASN1_STRING *" inline4="normal">
			<arg name="a" type="ASN1_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="d2i_ASN1_T61STRING" result="ASN1_T61STRING *" inline4="normal">
			<arg name="a" type="ASN1_T61STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="l" type="long"/>
		</method>
		<method name="i2d_ASN1_IA5STRING" result="int" inline4="normal">
			<arg name="a" type="ASN1_IA5STRING *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_IA5STRING" result="ASN1_IA5STRING *" inline4="normal">
			<arg name="a" type="ASN1_IA5STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="l" type="long"/>
		</method>
		<method name="i2d_ASN1_UTCTIME" result="int" inline4="normal">
			<arg name="a" type="ASN1_UTCTIME *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_UTCTIME" result="ASN1_UTCTIME *" inline4="normal">
			<arg name="a" type="ASN1_UTCTIME **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_GENERALIZEDTIME" result="int" inline4="normal">
			<arg name="a" type="ASN1_GENERALIZEDTIME *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_GENERALIZEDTIME" result="ASN1_GENERALIZEDTIME *" inline4="normal">
			<arg name="a" type="ASN1_GENERALIZEDTIME **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_ASN1_TIME" result="int" inline4="normal">
			<arg name="a" type="ASN1_TIME *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_TIME" result="ASN1_TIME *" inline4="normal">
			<arg name="a" type="ASN1_TIME **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ASN1_TIME_set" result="ASN1_TIME *" inline4="normal">
			<arg name="s" type="ASN1_TIME *"/>
			<arg name="t" type="time_t"/>
		</method>
		<method name="i2d_ASN1_SET" result="int" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="func() " type="int"/>
			<arg name="ex_tag" type="int"/>
			<arg name="ex_class" type="int"/>
			<arg name="is_set" type="int"/>
		</method>
		<method name="d2i_ASN1_SET" result="STACK *" inline4="normal">
			<arg name="a" type="STACK **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
			<arg name="func() " type="char *"/>
			<arg name="free_func() " type="void"/>
			<arg name="ex_tag" type="int"/>
			<arg name="ex_class" type="int"/>
		</method>
		<method name="i2a_ASN1_INTEGER" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="a" type="ASN1_INTEGER *"/>
		</method>
		<method name="a2i_ASN1_INTEGER" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="bs" type="ASN1_INTEGER *"/>
			<arg name="buf" type="char *"/>
			<arg name="size" type="int"/>
		</method>
		<method name="i2a_ASN1_ENUMERATED" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="a" type="ASN1_ENUMERATED *"/>
		</method>
		<method name="a2i_ASN1_ENUMERATED" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="bs" type="ASN1_ENUMERATED *"/>
			<arg name="buf" type="char *"/>
			<arg name="size" type="int"/>
		</method>
		<method name="i2a_ASN1_OBJECT" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="a" type="ASN1_OBJECT *"/>
		</method>
		<method name="a2i_ASN1_STRING" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="bs" type="ASN1_STRING *"/>
			<arg name="buf" type="char *"/>
			<arg name="size" type="int"/>
		</method>
		<method name="i2a_ASN1_STRING" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="a" type="ASN1_STRING *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="i2t_ASN1_OBJECT" result="int" inline4="normal">
			<arg name="buf" type="char *"/>
			<arg name="buf_len" type="int"/>
			<arg name="a" type="ASN1_OBJECT *"/>
		</method>
		<method name="a2d_ASN1_OBJECT" result="int" inline4="normal">
			<arg name="out" type="unsigned char *"/>
			<arg name="olen" type="int"/>
			<arg name="buf" type="const char *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="ASN1_OBJECT_create" result="ASN1_OBJECT *" inline4="normal">
			<arg name="nid" type="int"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="len" type="int"/>
			<arg name="sn" type="char *"/>
			<arg name="ln" type="char *"/>
		</method>
		<method name="ASN1_INTEGER_set" result="int" inline4="normal">
			<arg name="a" type="ASN1_INTEGER *"/>
			<arg name="v" type="long"/>
		</method>
		<method name="ASN1_INTEGER_get" result="long" inline4="normal">
			<arg name="a" type="ASN1_INTEGER *"/>
		</method>
		<method name="BN_to_ASN1_INTEGER" result="ASN1_INTEGER *" inline4="normal">
			<arg name="bn" type="BIGNUM *"/>
			<arg name="ai" type="ASN1_INTEGER *"/>
		</method>
		<method name="ASN1_INTEGER_to_BN" result="BIGNUM *" inline4="normal">
			<arg name="ai" type="ASN1_INTEGER *"/>
			<arg name="bn" type="BIGNUM *"/>
		</method>
		<method name="ASN1_ENUMERATED_set" result="int" inline4="normal">
			<arg name="a" type="ASN1_ENUMERATED *"/>
			<arg name="v" type="long"/>
		</method>
		<method name="ASN1_ENUMERATED_get" result="long" inline4="normal">
			<arg name="a" type="ASN1_ENUMERATED *"/>
		</method>
		<method name="BN_to_ASN1_ENUMERATED" result="ASN1_ENUMERATED *" inline4="normal">
			<arg name="bn" type="BIGNUM *"/>
			<arg name="ai" type="ASN1_ENUMERATED *"/>
		</method>
		<method name="ASN1_ENUMERATED_to_BN" result="BIGNUM *" inline4="normal">
			<arg name="ai" type="ASN1_ENUMERATED *"/>
			<arg name="bn" type="BIGNUM *"/>
		</method>
		<method name="ASN1_PRINTABLE_type" result="int" inline4="normal">
			<arg name="s" type="unsigned char *"/>
			<arg name="max" type="int"/>
		</method>
		<method name="i2d_ASN1_bytes" result="int" inline4="normal">
			<arg name="a" type="ASN1_STRING *"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="tags" type="int"/>
			<arg name="xclass" type="int"/>
		</method>
		<method name="d2i_ASN1_bytes" result="ASN1_STRING *" inline4="normal">
			<arg name="a" type="ASN1_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
			<arg name="Ptag" type="int"/>
			<arg name="Pclass" type="int"/>
		</method>
		<method name="d2i_ASN1_type_bytes" result="ASN1_STRING *" inline4="normal">
			<arg name="a" type="ASN1_STRING **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
			<arg name="type" type="int"/>
		</method>
		<method name="asn1_Finish" result="int" inline4="normal">
			<arg name="c" type="ASN1_CTX *"/>
		</method>
		<method name="ASN1_get_object" result="int" inline4="normal">
			<arg name="pp" type="unsigned char **"/>
			<arg name="plength" type="long *"/>
			<arg name="ptag" type="int *"/>
			<arg name="pclass" type="int *"/>
			<arg name="omax" type="long"/>
		</method>
		<method name="ASN1_check_infinite_end" result="int" inline4="normal">
			<arg name="p" type="unsigned char **"/>
			<arg name="len" type="long"/>
		</method>
		<method name="ASN1_put_object" result="void" inline4="normal">
			<arg name="pp" type="unsigned char **"/>
			<arg name="constructed" type="int"/>
			<arg name="length" type="int"/>
			<arg name="tags" type="int"/>
			<arg name="xclass" type="int"/>
		</method>
		<method name="ASN1_object_size" result="int" inline4="normal">
			<arg name="constructed" type="int"/>
			<arg name="length" type="int"/>
			<arg name="tags" type="int"/>
		</method>
		<method name="ASN1_dup" result="char *" inline4="normal">
			<arg name="i2d() " type="int"/>
			<arg name="d2i() " type="char *"/>
			<arg name="x" type="char *"/>
		</method>
		<method name="ASN1_d2i_bio" result="char *" inline4="normal">
			<arg name="xnew() " type="char *"/>
			<arg name="d2i() " type="char *"/>
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="unsigned char **"/>
		</method>
		<method name="ASN1_i2d_bio" result="int" inline4="normal">
			<arg name="i2d() " type="int"/>
			<arg name="out" type="BIO *"/>
			<arg name="x" type="unsigned char *"/>
		</method>
		<method name="ASN1_UTCTIME_print" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="a" type="ASN1_UTCTIME *"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_print" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="a" type="ASN1_GENERALIZEDTIME *"/>
		</method>
		<method name="ASN1_TIME_print" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="a" type="ASN1_TIME *"/>
		</method>
		<method name="ASN1_STRING_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="v" type="ASN1_STRING *"/>
		</method>
		<method name="ASN1_parse" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="pp" type="unsigned char *"/>
			<arg name="len" type="long"/>
			<arg name="indent" type="int"/>
		</method>
		<method name="i2d_ASN1_HEADER" result="int" inline4="normal">
			<arg name="a" type="ASN1_HEADER *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ASN1_HEADER" result="ASN1_HEADER *" inline4="normal">
			<arg name="a" type="ASN1_HEADER **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ASN1_HEADER_new" result="ASN1_HEADER *" inline4="normal">
		</method>
		<method name="ASN1_HEADER_free" result="void" inline4="normal">
			<arg name="a" type="ASN1_HEADER *"/>
		</method>
		<method name="ASN1_UNIVERSALSTRING_to_string" result="int" inline4="normal">
			<arg name="s" type="ASN1_UNIVERSALSTRING *"/>
		</method>
		<method name="ERR_load_ASN1_strings" result="void" inline4="normal">
		</method>
		<method name="X509_asn1_meth" result="ASN1_METHOD *" inline4="normal">
		</method>
		<method name="RSAPrivateKey_asn1_meth" result="ASN1_METHOD *" inline4="normal">
		</method>
		<method name="ASN1_IA5STRING_asn1_meth" result="ASN1_METHOD *" inline4="normal">
		</method>
		<method name="ASN1_BIT_STRING_asn1_meth" result="ASN1_METHOD *" inline4="normal">
		</method>
		<method name="ASN1_TYPE_set_octetstring" result="int" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="ASN1_TYPE_get_octetstring" result="int" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="max_len" type="int"/>
		</method>
		<method name="ASN1_TYPE_set_int_octetstring" result="int" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
			<arg name="num" type="long"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="ASN1_TYPE_get_int_octetstring" result="int" inline4="normal">
			<arg name="a" type="ASN1_TYPE *"/>
			<arg name="num" type="long *"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="max_len" type="int"/>
		</method>
		<method name="ASN1_seq_unpack" result="STACK *" inline4="normal">
			<arg name="buf" type="unsigned char *"/>
			<arg name="len" type="int"/>
			<arg name="d2i() " type="char *"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="ASN1_seq_pack" result="unsigned char *" inline4="normal">
			<arg name="safes" type="STACK *"/>
			<arg name="i2d() " type="int"/>
			<arg name="buf" type="unsigned char **"/>
			<arg name="len" type="int *"/>
		</method>
		<method name="ASN1_unpack_string" result="void *" inline4="normal">
			<arg name="oct" type="ASN1_STRING *"/>
			<arg name="d2i() " type="char *"/>
		</method>
		<method name="ASN1_pack_string" result="ASN1_STRING *" inline4="normal">
			<arg name="obj" type="void *"/>
			<arg name="i2d() " type="int"/>
			<arg name="oct" type="ASN1_OCTET_STRING **"/>
		</method>
		<method name="asn1_GetSequence" result="int" inline4="normal">
			<arg name="c" type="ASN1_CTX *"/>
			<arg name="length" type="long *"/>
		</method>
		<method name="asn1_add_error" result="void" inline4="normal">
			<arg name="address" type="unsigned char *"/>
			<arg name="offset" type="int"/>
		</method>
		<method name="BIO_set_ex_data" result="int" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<arg name="idx" type="int"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="BIO_get_ex_data" result="char *" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="BIO_get_ex_new_index" result="int" inline4="normal">
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="BIO_s_file" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_new_file" result="BIO *" inline4="normal">
			<arg name="filename" type="const char *"/>
			<arg name="mode" type="const char *"/>
		</method>
		<method name="BIO_new_fp_amiga" result="BIO *" inline4="normal">
			<arg name="stream" type="BPTR"/>
			<arg name="close_flag" type="int"/>
		</method>
		<method name="BIO_new" result="BIO *" inline4="normal">
			<arg name="type" type="BIO_METHOD *"/>
		</method>
		<method name="BIO_set" result="int" inline4="normal">
			<arg name="a" type="BIO *"/>
			<arg name="type" type="BIO_METHOD *"/>
		</method>
		<method name="BIO_free" result="int" inline4="normal">
			<arg name="a" type="BIO *"/>
		</method>
		<method name="BIO_read" result="int" inline4="normal">
			<arg name="b" type="BIO *"/>
			<arg name="data" type="void *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="BIO_gets" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="buf" type="char *"/>
			<arg name="size" type="int"/>
		</method>
		<method name="BIO_write" result="int" inline4="normal">
			<arg name="b" type="BIO *"/>
			<arg name="data" type="const char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="BIO_puts" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="buf" type="const char *"/>
		</method>
		<method name="BIO_ctrl" result="long" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="cmd" type="int"/>
			<arg name="larg" type="long"/>
			<arg name="parg" type="void *"/>
		</method>
		<method name="BIO_ptr_ctrl" result="char *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="cmd" type="int"/>
			<arg name="larg" type="long"/>
		</method>
		<method name="BIO_int_ctrl" result="long" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="cmd" type="int"/>
			<arg name="larg" type="long"/>
			<arg name="iarg" type="int"/>
		</method>
		<method name="BIO_push" result="BIO *" inline4="normal">
			<arg name="b" type="BIO *"/>
			<arg name="append" type="BIO *"/>
		</method>
		<method name="BIO_pop" result="BIO *" inline4="normal">
			<arg name="b" type="BIO *"/>
		</method>
		<method name="BIO_free_all" result="void" inline4="normal">
			<arg name="a" type="BIO *"/>
		</method>
		<method name="BIO_find_type" result="BIO *" inline4="normal">
			<arg name="b" type="BIO *"/>
			<arg name="bio_type" type="int"/>
		</method>
		<method name="BIO_get_retry_BIO" result="BIO *" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<arg name="reason" type="int *"/>
		</method>
		<method name="BIO_get_retry_reason" result="int" inline4="normal">
			<arg name="bio" type="BIO *"/>
		</method>
		<method name="BIO_dup_chain" result="BIO *" inline4="normal">
			<arg name="in" type="BIO *"/>
		</method>
		<method name="BIO_debug_callback" result="long" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<arg name="cmd" type="int"/>
			<arg name="argp" type="const char *"/>
			<arg name="argi" type="int"/>
			<arg name="argl" type="long"/>
			<arg name="ret" type="long"/>
		</method>
		<method name="BIO_s_mem" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_s_socket" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_s_connect" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_s_accept" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_s_fd" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_s_log" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_s_null" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_f_null" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_f_buffer" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_f_nbio_test" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_sock_should_retry" result="int" inline4="normal">
			<arg name="i" type="int"/>
		</method>
		<method name="BIO_sock_non_fatal_error" result="int" inline4="normal">
			<arg name="error" type="int"/>
		</method>
		<method name="BIO_fd_should_retry" result="int" inline4="normal">
			<arg name="i" type="int"/>
		</method>
		<method name="BIO_fd_non_fatal_error" result="int" inline4="normal">
			<arg name="error" type="int"/>
		</method>
		<method name="BIO_dump" result="int" inline4="normal">
			<arg name="b" type="BIO *"/>
			<arg name="bytes" type="const char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="BIO_gethostbyname" result="struct hostent *" inline4="normal">
			<arg name="name" type="const char *"/>
		</method>
		<method name="BIO_sock_error" result="int" inline4="normal">
			<arg name="sock" type="int"/>
		</method>
		<method name="BIO_socket_ioctl" result="int" inline4="normal">
			<arg name="fd" type="int"/>
			<arg name="type" type="long"/>
			<arg name="arg" type="unsigned long *"/>
		</method>
		<method name="BIO_socket_nbio" result="int" inline4="normal">
			<arg name="fd" type="int"/>
			<arg name="mode" type="int"/>
		</method>
		<method name="BIO_get_port" result="int" inline4="normal">
			<arg name="str" type="const char *"/>
			<arg name="port_ptr" type="unsigned short *"/>
		</method>
		<method name="BIO_get_host_ip" result="int" inline4="normal">
			<arg name="str" type="const char *"/>
			<arg name="ip" type="unsigned char *"/>
		</method>
		<method name="BIO_get_accept_socket" result="int" inline4="normal">
			<arg name="host_port" type="char *"/>
			<arg name="mode" type="int"/>
		</method>
		<method name="BIO_accept" result="int" inline4="normal">
			<arg name="sock" type="int"/>
			<arg name="ip_port" type="char **"/>
		</method>
		<method name="BIO_sock_init" result="int" inline4="normal">
		</method>
		<method name="BIO_sock_cleanup" result="void" inline4="normal">
		</method>
		<method name="BIO_set_tcp_ndelay" result="int" inline4="normal">
			<arg name="sock" type="int"/>
			<arg name="turn_on" type="int"/>
		</method>
		<method name="ERR_load_BIO_strings" result="void" inline4="normal">
		</method>
		<method name="BIO_new_socket" result="BIO *" inline4="normal">
			<arg name="sock" type="int"/>
			<arg name="close_flag" type="int"/>
		</method>
		<method name="BIO_new_fd" result="BIO *" inline4="normal">
			<arg name="fd" type="int"/>
			<arg name="close_flag" type="int"/>
		</method>
		<method name="BIO_new_connect" result="BIO *" inline4="normal">
			<arg name="host_port" type="char *"/>
		</method>
		<method name="BIO_new_accept" result="BIO *" inline4="normal">
			<arg name="host_port" type="char *"/>
		</method>
		<method name="BIO_copy_next_retry" result="void" inline4="normal">
			<arg name="b" type="BIO *"/>
		</method>
		<method name="BIO_ghbn_ctrl" result="long" inline4="normal">
			<arg name="cmd" type="int"/>
			<arg name="iarg" type="int"/>
			<arg name="parg" type="char *"/>
		</method>
		<method name="BIO_printfA" result="int" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<arg name="args" type="void *"/>
		</method>
		<method name="BIO_printf" result="int" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<vararg name="tag1" type="ULONG"/>
		</method>
		<method name="BN_value_one" result="BIGNUM *" inline4="normal">
		</method>
		<method name="BN_options" result="char *" inline4="normal">
		</method>
		<method name="BN_CTX_new" result="BN_CTX *" inline4="normal">
		</method>
		<method name="BN_CTX_init" result="void" inline4="normal">
			<arg name="c" type="BN_CTX *"/>
		</method>
		<method name="BN_CTX_free" result="void" inline4="normal">
			<arg name="c" type="BN_CTX *"/>
		</method>
		<method name="BN_rand" result="int" inline4="normal">
			<arg name="rnd" type="BIGNUM *"/>
			<arg name="bits" type="int"/>
			<arg name="top" type="int"/>
			<arg name="bottom" type="int"/>
		</method>
		<method name="BN_num_bits" result="int" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
		</method>
		<method name="BN_num_bits_word" result="int" inline4="normal">
			<arg name="a" type="BN_ULONG"/>
		</method>
		<method name="BN_new" result="BIGNUM *" inline4="normal">
		</method>
		<method name="BN_init" result="void" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="BN_clear_free" result="void" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="BN_copy" result="BIGNUM *" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="b" type="const BIGNUM *"/>
		</method>
		<method name="BN_bin2bn" result="BIGNUM *" inline4="normal">
			<arg name="s" type="const unsigned char *"/>
			<arg name="len" type="int"/>
			<arg name="ret" type="BIGNUM *"/>
		</method>
		<method name="BN_bn2bin" result="int" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
			<arg name="to" type="unsigned char *"/>
		</method>
		<method name="BN_mpi2bn" result="BIGNUM *" inline4="normal">
			<arg name="s" type="unsigned char *"/>
			<arg name="len" type="int"/>
			<arg name="ret" type="BIGNUM *"/>
		</method>
		<method name="BN_bn2mpi" result="int" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
			<arg name="to" type="unsigned char *"/>
		</method>
		<method name="BN_sub" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="const BIGNUM *"/>
			<arg name="b" type="const BIGNUM *"/>
		</method>
		<method name="BN_usub" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="const BIGNUM *"/>
			<arg name="b" type="const BIGNUM *"/>
		</method>
		<method name="BN_uadd" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="const BIGNUM *"/>
			<arg name="b" type="const BIGNUM *"/>
		</method>
		<method name="BN_add" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="b" type="BIGNUM *"/>
		</method>
		<method name="BN_mod" result="int" inline4="normal">
			<arg name="rem" type="BIGNUM *"/>
			<arg name="m" type="const BIGNUM *"/>
			<arg name="d" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_div" result="int" inline4="normal">
			<arg name="dv" type="BIGNUM *"/>
			<arg name="rem" type="BIGNUM *"/>
			<arg name="m" type="const BIGNUM *"/>
			<arg name="d" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mul" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="b" type="BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_sqr" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mod_word" result="BN_ULONG" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="BN_div_word" result="BN_ULONG" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="BN_mul_word" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="BN_add_word" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="BN_sub_word" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="BN_set_word" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="BN_get_word" result="BN_ULONG" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="BN_cmp" result="int" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
			<arg name="b" type="const BIGNUM *"/>
		</method>
		<method name="BN_free" result="void" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="BN_is_bit_set" result="int" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="BN_lshift" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="const BIGNUM *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="BN_lshift1" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="BN_exp" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="p" type="BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mod_exp" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="p" type="const BIGNUM *"/>
			<arg name="m" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mod_exp_mont" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="p" type="const BIGNUM *"/>
			<arg name="m" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
			<arg name="m_ctx" type="BN_MONT_CTX *"/>
		</method>
		<method name="BN_mod_exp2_mont" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a1" type="BIGNUM *"/>
			<arg name="p1" type="BIGNUM *"/>
			<arg name="a2" type="BIGNUM *"/>
			<arg name="p2" type="BIGNUM *"/>
			<arg name="m" type="BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
			<arg name="m_ctx" type="BN_MONT_CTX *"/>
		</method>
		<method name="BN_mod_exp_simple" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="p" type="BIGNUM *"/>
			<arg name="m" type="BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mask_bits" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="BN_mod_mul" result="int" inline4="normal">
			<arg name="ret" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="b" type="BIGNUM *"/>
			<arg name="m" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_print" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="a" type="const BIGNUM *"/>
		</method>
		<method name="BN_reciprocal" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="m" type="BIGNUM *"/>
			<arg name="len" type="int"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_rshift" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="BN_rshift1" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="BN_clear" result="void" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
		</method>
		<method name="bn_expand2" result="BIGNUM *" inline4="normal">
			<arg name="b" type="BIGNUM *"/>
			<arg name="bits" type="int"/>
		</method>
		<method name="BN_dup" result="BIGNUM *" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
		</method>
		<method name="BN_ucmp" result="int" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
			<arg name="b" type="const BIGNUM *"/>
		</method>
		<method name="BN_set_bit" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="BN_clear_bit" result="int" inline4="normal">
			<arg name="a" type="BIGNUM *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="BN_bn2hex" result="char *" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
		</method>
		<method name="BN_bn2dec" result="char *" inline4="normal">
			<arg name="a" type="const BIGNUM *"/>
		</method>
		<method name="BN_hex2bn" result="int" inline4="normal">
			<arg name="a" type="BIGNUM **"/>
			<arg name="str" type="const char *"/>
		</method>
		<method name="BN_dec2bn" result="int" inline4="normal">
			<arg name="a" type="BIGNUM **"/>
			<arg name="str" type="const char *"/>
		</method>
		<method name="BN_gcd" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="in_a" type="BIGNUM *"/>
			<arg name="in_b" type="BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mod_inverse" result="BIGNUM *" inline4="normal">
			<arg name="ret" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="n" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_generate_prime" result="BIGNUM *" inline4="normal">
			<arg name="ret" type="BIGNUM *"/>
			<arg name="bits" type="int"/>
			<arg name="strong" type="int"/>
			<arg name="add" type="BIGNUM *"/>
			<arg name="rem" type="BIGNUM *"/>
			<arg name="callback(int , int , void * ) " type="void"/>
			<arg name="cb_arg" type="void *"/>
		</method>
		<method name="BN_is_prime" result="int" inline4="normal">
			<arg name="p" type="BIGNUM *"/>
			<arg name="nchecks" type="int"/>
			<arg name="callback(int , int , void * ) " type="void"/>
			<arg name="ctx" type="BN_CTX *"/>
			<arg name="cb_arg" type="void *"/>
		</method>
		<method name="ERR_load_BN_strings" result="void" inline4="normal">
		</method>
		<method name="bn_mul_add_words" result="BN_ULONG" inline4="normal">
			<arg name="rp" type="BN_ULONG *"/>
			<arg name="ap" type="BN_ULONG *"/>
			<arg name="num" type="int"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="bn_mul_words" result="BN_ULONG" inline4="normal">
			<arg name="rp" type="BN_ULONG *"/>
			<arg name="ap" type="BN_ULONG *"/>
			<arg name="num" type="int"/>
			<arg name="w" type="BN_ULONG"/>
		</method>
		<method name="bn_sqr_words" result="void" inline4="normal">
			<arg name="rp" type="BN_ULONG *"/>
			<arg name="ap" type="BN_ULONG *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="bn_div_words" result="BN_ULONG" inline4="normal">
			<arg name="h" type="BN_ULONG"/>
			<arg name="l" type="BN_ULONG"/>
			<arg name="d" type="BN_ULONG"/>
		</method>
		<method name="bn_add_words" result="BN_ULONG" inline4="normal">
			<arg name="rp" type="BN_ULONG *"/>
			<arg name="ap" type="BN_ULONG *"/>
			<arg name="bp" type="BN_ULONG *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="bn_sub_words" result="BN_ULONG" inline4="normal">
			<arg name="rp" type="BN_ULONG *"/>
			<arg name="ap" type="BN_ULONG *"/>
			<arg name="bp" type="BN_ULONG *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="BN_MONT_CTX_new" result="BN_MONT_CTX *" inline4="normal">
		</method>
		<method name="BN_MONT_CTX_init" result="void" inline4="normal">
			<arg name="ctx" type="BN_MONT_CTX *"/>
		</method>
		<method name="BN_mod_mul_montgomery" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="b" type="BIGNUM *"/>
			<arg name="mont" type="BN_MONT_CTX *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_from_montgomery" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="BIGNUM *"/>
			<arg name="mont" type="BN_MONT_CTX *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_MONT_CTX_free" result="void" inline4="normal">
			<arg name="mont" type="BN_MONT_CTX *"/>
		</method>
		<method name="BN_MONT_CTX_set" result="int" inline4="normal">
			<arg name="mont" type="BN_MONT_CTX *"/>
			<arg name="modulus" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_MONT_CTX_copy" result="BN_MONT_CTX *" inline4="normal">
			<arg name="to" type="BN_MONT_CTX *"/>
			<arg name="from" type="BN_MONT_CTX *"/>
		</method>
		<method name="BN_BLINDING_new" result="BN_BLINDING *" inline4="normal">
			<arg name="A" type="BIGNUM *"/>
			<arg name="Ai" type="BIGNUM *"/>
			<arg name="mod" type="BIGNUM *"/>
		</method>
		<method name="BN_BLINDING_free" result="void" inline4="normal">
			<arg name="b" type="BN_BLINDING *"/>
		</method>
		<method name="BN_BLINDING_update" result="int" inline4="normal">
			<arg name="b" type="BN_BLINDING *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_BLINDING_convert" result="int" inline4="normal">
			<arg name="n" type="BIGNUM *"/>
			<arg name="r" type="BN_BLINDING *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_BLINDING_invert" result="int" inline4="normal">
			<arg name="n" type="BIGNUM *"/>
			<arg name="b" type="BN_BLINDING *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_set_params" result="void" inline4="normal">
			<arg name="mul" type="int"/>
			<arg name="high" type="int"/>
			<arg name="low" type="int"/>
			<arg name="mont" type="int"/>
		</method>
		<method name="BN_get_params" result="int" inline4="normal">
			<arg name="which" type="int"/>
		</method>
		<method name="BN_RECP_CTX_init" result="void" inline4="normal">
			<arg name="recp" type="BN_RECP_CTX *"/>
		</method>
		<method name="BN_RECP_CTX_new" result="BN_RECP_CTX *" inline4="normal">
		</method>
		<method name="BN_RECP_CTX_free" result="void" inline4="normal">
			<arg name="recp" type="BN_RECP_CTX *"/>
		</method>
		<method name="BN_RECP_CTX_set" result="int" inline4="normal">
			<arg name="recp" type="BN_RECP_CTX *"/>
			<arg name="rdiv" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mod_mul_reciprocal" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="x" type="BIGNUM *"/>
			<arg name="y" type="BIGNUM *"/>
			<arg name="recp" type="BN_RECP_CTX *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_mod_exp_recp" result="int" inline4="normal">
			<arg name="r" type="BIGNUM *"/>
			<arg name="a" type="const BIGNUM *"/>
			<arg name="p" type="const BIGNUM *"/>
			<arg name="m" type="const BIGNUM *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BN_div_recp" result="int" inline4="normal">
			<arg name="dv" type="BIGNUM *"/>
			<arg name="rem" type="BIGNUM *"/>
			<arg name="m" type="BIGNUM *"/>
			<arg name="recp" type="BN_RECP_CTX *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="BUF_MEM_new" result="BUF_MEM *" inline4="normal">
		</method>
		<method name="BUF_MEM_free" result="void" inline4="normal">
			<arg name="a" type="BUF_MEM *"/>
		</method>
		<method name="BUF_MEM_grow" result="int" inline4="normal">
			<arg name="str" type="BUF_MEM *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="BUF_strdup" result="char *" inline4="normal">
			<arg name="str" type="const char *"/>
		</method>
		<method name="ERR_load_BUF_strings" result="void" inline4="normal">
		</method>
		<method name="COMP_CTX_new" result="COMP_CTX *" inline4="normal">
			<arg name="meth" type="COMP_METHOD *"/>
		</method>
		<method name="COMP_CTX_free" result="void" inline4="normal">
			<arg name="ctx" type="COMP_CTX *"/>
		</method>
		<method name="COMP_compress_block" result="int" inline4="normal">
			<arg name="ctx" type="COMP_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="olen" type="int"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="ilen" type="int"/>
		</method>
		<method name="COMP_expand_block" result="int" inline4="normal">
			<arg name="ctx" type="COMP_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="olen" type="int"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="ilen" type="int"/>
		</method>
		<method name="COMP_rle" result="COMP_METHOD *" inline4="normal">
		</method>
		<method name="CONF_load" result="LHASH *" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="file" type="const char *"/>
			<arg name="eline" type="long *"/>
		</method>
		<method name="CONF_get_section" result="STACK *" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="section" type="char *"/>
		</method>
		<method name="CONF_get_string" result="char *" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="group" type="char *"/>
			<arg name="name" type="char *"/>
		</method>
		<method name="CONF_get_number" result="long" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="group" type="char *"/>
			<arg name="name" type="char *"/>
		</method>
		<method name="CONF_free" result="void" inline4="normal">
			<arg name="conf" type="LHASH *"/>
		</method>
		<method name="ERR_load_CONF_strings" result="void" inline4="normal">
		</method>
		<method name="SSLeay_version" result="const char *" inline4="normal">
			<arg name="type" type="int"/>
		</method>
		<method name="SSLeay" result="unsigned long" inline4="normal">
		</method>
		<method name="CRYPTO_get_ex_new_index" result="int" inline4="normal">
			<arg name="idx" type="int"/>
			<arg name="sk" type="STACK **"/>
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="CRYPTO_set_ex_data" result="int" inline4="normal">
			<arg name="ad" type="CRYPTO_EX_DATA *"/>
			<arg name="idx" type="int"/>
			<arg name="val" type="char *"/>
		</method>
		<method name="CRYPTO_get_ex_data" result="char *" inline4="normal">
			<arg name="ad" type="CRYPTO_EX_DATA *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="CRYPTO_dup_ex_data" result="int" inline4="normal">
			<arg name="meth" type="STACK *"/>
			<arg name="from" type="CRYPTO_EX_DATA *"/>
			<arg name="to" type="CRYPTO_EX_DATA *"/>
		</method>
		<method name="CRYPTO_free_ex_data" result="void" inline4="normal">
			<arg name="meth" type="STACK *"/>
			<arg name="obj" type="char *"/>
			<arg name="ad" type="CRYPTO_EX_DATA *"/>
		</method>
		<method name="CRYPTO_new_ex_data" result="void" inline4="normal">
			<arg name="meth" type="STACK *"/>
			<arg name="obj" type="char *"/>
			<arg name="ad" type="CRYPTO_EX_DATA *"/>
		</method>
		<method name="CRYPTO_mem_ctrl" result="int" inline4="normal">
			<arg name="mode" type="int"/>
		</method>
		<method name="CRYPTO_get_new_lockid" result="int" inline4="normal">
			<arg name="name" type="char *"/>
		</method>
		<method name="CRYPTO_lock" result="void" inline4="normal">
			<arg name="mode" type="int"/>
			<arg name="type" type="int"/>
			<arg name="file" type="const char *"/>
			<arg name="line" type="int"/>
		</method>
		<method name="CRYPTO_set_locking_callback" result="void" inline4="normal">
			<arg name="func(int mode , int type , const char * file , int line ) " type="void"/>
		</method>
		<method name="CRYPTO_get_locking_callback" result="void *" inline4="normal">
		</method>
		<method name="CRYPTO_set_add_lock_callback" result="void" inline4="normal">
			<arg name="func(int * num , int mount , int type , const char * file , int line ) " type="int"/>
		</method>
		<method name="CRYPTO_get_add_lock_callback" result="int *" inline4="normal">
		</method>
		<method name="CRYPTO_set_id_callback" result="void" inline4="normal">
			<arg name="func(void ) " type="unsigned long"/>
		</method>
		<method name="CRYPTO_get_id_callback" result="unsigned long *" inline4="normal">
		</method>
		<method name="CRYPTO_thread_id" result="unsigned long" inline4="normal">
		</method>
		<method name="CRYPTO_get_lock_name" result="const char *" inline4="normal">
			<arg name="type" type="int"/>
		</method>
		<method name="CRYPTO_add_lock" result="int" inline4="normal">
			<arg name="pointer" type="int *"/>
			<arg name="amount" type="int"/>
			<arg name="type" type="int"/>
			<arg name="file" type="const char *"/>
			<arg name="line" type="int"/>
		</method>
		<method name="CRYPTO_set_mem_functions" result="void" inline4="normal">
			<arg name="m() " type="char *"/>
			<arg name="r() " type="char *"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="CRYPTO_get_mem_functions" result="void" inline4="normal">
			<arg name="m() " type="char *"/>
			<arg name="r() " type="char *"/>
			<arg name="f() " type="void"/>
		</method>
		<method name="CRYPTO_set_locked_mem_functions" result="void" inline4="normal">
			<arg name="m() " type="char *"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="CRYPTO_get_locked_mem_functions" result="void" inline4="normal">
			<arg name="m() " type="char *"/>
			<arg name="f() " type="void"/>
		</method>
		<method name="CRYPTO_malloc_locked" result="void *" inline4="normal">
			<arg name="num" type="int"/>
		</method>
		<method name="CRYPTO_free_locked" result="void" inline4="normal">
			<arg name="a" type="void *"/>
		</method>
		<method name="CRYPTO_malloc" result="void *" inline4="normal">
			<arg name="num" type="int"/>
		</method>
		<method name="CRYPTO_free" result="void" inline4="normal">
			<arg name="a" type="void *"/>
		</method>
		<method name="CRYPTO_realloc" result="void *" inline4="normal">
			<arg name="addr" type="void *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="CRYPTO_remalloc" result="void *" inline4="normal">
			<arg name="addr" type="void *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="CRYPTO_dbg_malloc" result="void *" inline4="normal">
			<arg name="num" type="int"/>
			<arg name="file" type="const char *"/>
			<arg name="line" type="int"/>
		</method>
		<method name="CRYPTO_dbg_realloc" result="void *" inline4="normal">
			<arg name="addr" type="void *"/>
			<arg name="num" type="int"/>
			<arg name="file" type="const char *"/>
			<arg name="line" type="int"/>
		</method>
		<method name="CRYPTO_dbg_free" result="void" inline4="normal">
			<arg name="a" type="void *"/>
		</method>
		<method name="CRYPTO_dbg_remalloc" result="void *" inline4="normal">
			<arg name="addr" type="void *"/>
			<arg name="num" type="int"/>
			<arg name="file" type="const char *"/>
			<arg name="line" type="int"/>
		</method>
		<method name="CRYPTO_mem_leaks" result="void" inline4="normal">
			<arg name="bio" type="struct bio_st *"/>
		</method>
		<method name="CRYPTO_mem_leaks_cb" result="void" inline4="normal">
			<arg name="cb() " type="void"/>
		</method>
		<method name="ERR_load_CRYPTO_strings" result="void" inline4="normal">
		</method>
		<method name="DH_new" result="DH *" inline4="normal">
		</method>
		<method name="DH_free" result="void" inline4="normal">
			<arg name="dh" type="DH *"/>
		</method>
		<method name="DH_size" result="int" inline4="normal">
			<arg name="dh" type="DH *"/>
		</method>
		<method name="DH_generate_parameters" result="DH *" inline4="normal">
			<arg name="prime_len" type="int"/>
			<arg name="generator" type="int"/>
			<arg name="callback(int , int , void * ) " type="void"/>
			<arg name="cb_arg" type="void *"/>
		</method>
		<method name="DH_check" result="int" inline4="normal">
			<arg name="dh" type="DH *"/>
			<arg name="codes" type="int *"/>
		</method>
		<method name="DH_generate_key" result="int" inline4="normal">
			<arg name="dh" type="DH *"/>
		</method>
		<method name="DH_compute_key" result="int" inline4="normal">
			<arg name="key" type="unsigned char *"/>
			<arg name="pub_key" type="BIGNUM *"/>
			<arg name="dh" type="DH *"/>
		</method>
		<method name="d2i_DHparams" result="DH *" inline4="normal">
			<arg name="a" type="DH **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_DHparams" result="int" inline4="normal">
			<arg name="a" type="DH *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="DHparams_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DH *"/>
		</method>
		<method name="ERR_load_DH_strings" result="void" inline4="normal">
		</method>
		<method name="DSA_SIG_new" result="DSA_SIG *" inline4="normal">
		</method>
		<method name="DSA_SIG_free" result="void" inline4="normal">
			<arg name="a" type="DSA_SIG *"/>
		</method>
		<method name="i2d_DSA_SIG" result="int" inline4="normal">
			<arg name="a" type="DSA_SIG *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_DSA_SIG" result="DSA_SIG *" inline4="normal">
			<arg name="v" type="DSA_SIG **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="DSA_do_sign" result="DSA_SIG *" inline4="normal">
			<arg name="dgst" type="const unsigned char *"/>
			<arg name="dlen" type="int"/>
			<arg name="dsa" type="DSA *"/>
		</method>
		<method name="DSA_do_verify" result="int" inline4="normal">
			<arg name="dgst" type="const unsigned char *"/>
			<arg name="dgst_len" type="int"/>
			<arg name="sig" type="DSA_SIG *"/>
			<arg name="dsa" type="DSA *"/>
		</method>
		<method name="DSA_new" result="DSA *" inline4="normal">
		</method>
		<method name="DSA_size" result="int" inline4="normal">
			<arg name="a" type="DSA *"/>
		</method>
		<method name="DSA_sign_setup" result="int" inline4="normal">
			<arg name="dsa" type="DSA *"/>
			<arg name="ctx_in" type="BN_CTX *"/>
			<arg name="kinvp" type="BIGNUM **"/>
			<arg name="rp" type="BIGNUM **"/>
		</method>
		<method name="DSA_sign" result="int" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="dgst" type="const unsigned char *"/>
			<arg name="dlen" type="int"/>
			<arg name="sig" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int *"/>
			<arg name="dsa" type="DSA *"/>
		</method>
		<method name="DSA_verify" result="int" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="dgst" type="const unsigned char *"/>
			<arg name="dgst_len" type="int"/>
			<arg name="sigbuf" type="unsigned char *"/>
			<arg name="siglen" type="int"/>
			<arg name="dsa" type="DSA *"/>
		</method>
		<method name="DSA_free" result="void" inline4="normal">
			<arg name="r" type="DSA *"/>
		</method>
		<method name="ERR_load_DSA_strings" result="void" inline4="normal">
		</method>
		<method name="d2i_DSAPublicKey" result="DSA *" inline4="normal">
			<arg name="a" type="DSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="d2i_DSAPrivateKey" result="DSA *" inline4="normal">
			<arg name="a" type="DSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="d2i_DSAparams" result="DSA *" inline4="normal">
			<arg name="a" type="DSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="DSA_generate_parameters" result="DSA *" inline4="normal">
			<arg name="bits" type="int"/>
			<arg name="seed" type="unsigned char *"/>
			<arg name="seed_len" type="int"/>
			<arg name="counter_ret" type="int *"/>
			<arg name="h_ret" type="unsigned long *"/>
			<arg name="callback() " type="void"/>
			<arg name="cb_arg" type="char *"/>
		</method>
		<method name="DSA_generate_key" result="int" inline4="normal">
			<arg name="a" type="DSA *"/>
		</method>
		<method name="i2d_DSAPublicKey" result="int" inline4="normal">
			<arg name="a" type="DSA *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="i2d_DSAPrivateKey" result="int" inline4="normal">
			<arg name="a" type="DSA *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="i2d_DSAparams" result="int" inline4="normal">
			<arg name="a" type="DSA *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="DSAparams_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DSA *"/>
		</method>
		<method name="DSA_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DSA *"/>
			<arg name="off" type="int"/>
		</method>
		<method name="DSA_is_prime" result="int" inline4="normal">
			<arg name="q" type="BIGNUM *"/>
			<arg name="callback() " type="void"/>
			<arg name="cb_arg" type="char *"/>
		</method>
		<method name="ERR_put_error" result="void" inline4="normal">
			<arg name="lib" type="int"/>
			<arg name="func" type="int"/>
			<arg name="reason" type="int"/>
			<arg name="file" type="const char *"/>
			<arg name="line" type="int"/>
		</method>
		<method name="ERR_set_error_data" result="void" inline4="normal">
			<arg name="data" type="char *"/>
			<arg name="flags" type="int"/>
		</method>
		<method name="ERR_get_error" result="unsigned long" inline4="normal">
		</method>
		<method name="ERR_get_error_line" result="unsigned long" inline4="normal">
			<arg name="file" type="const char **"/>
			<arg name="line" type="int *"/>
		</method>
		<method name="ERR_get_error_line_data" result="unsigned long" inline4="normal">
			<arg name="file" type="const char **"/>
			<arg name="line" type="int *"/>
			<arg name="data" type="const char **"/>
			<arg name="flags" type="int *"/>
		</method>
		<method name="ERR_peek_error" result="unsigned long" inline4="normal">
		</method>
		<method name="ERR_peek_error_line" result="unsigned long" inline4="normal">
			<arg name="file" type="const char **"/>
			<arg name="line" type="int *"/>
		</method>
		<method name="ERR_peek_error_line_data" result="unsigned long" inline4="normal">
			<arg name="file" type="const char **"/>
			<arg name="line" type="int *"/>
			<arg name="data" type="const char **"/>
			<arg name="flags" type="int *"/>
		</method>
		<method name="ERR_clear_error" result="void" inline4="normal">
		</method>
		<method name="ERR_error_string" result="char *" inline4="normal">
			<arg name="e" type="unsigned long"/>
			<arg name="buf" type="char *"/>
		</method>
		<method name="ERR_lib_error_string" result="const char *" inline4="normal">
			<arg name="e" type="unsigned long"/>
		</method>
		<method name="ERR_func_error_string" result="const char *" inline4="normal">
			<arg name="e" type="unsigned long"/>
		</method>
		<method name="ERR_reason_error_string" result="const char *" inline4="normal">
			<arg name="e" type="unsigned long"/>
		</method>
		<method name="ERR_print_errors" result="void" inline4="normal">
			<arg name="bp" type="BIO *"/>
		</method>
		<method name="ERR_add_error_dataA" result="void" inline4="normal">
			<arg name="num" type="int"/>
			<arg name="data" type="void *"/>
		</method>
		<method name="ERR_add_error_data" result="void" inline4="normal">
			<arg name="num" type="int"/>
			<vararg name="tag1" type="ULONG"/>
		</method>
		<method name="ERR_load_strings" result="void" inline4="normal">
			<arg name="lib" type="int"/>
			<arg name="str" type="ERR_STRING_DATA *"/>
		</method>
		<method name="ERR_load_ERR_strings" result="void" inline4="normal">
		</method>
		<method name="ERR_load_crypto_strings" result="void" inline4="normal">
		</method>
		<method name="ERR_free_strings" result="void" inline4="normal">
		</method>
		<method name="ERR_remove_state" result="void" inline4="normal">
			<arg name="pid" type="unsigned long"/>
		</method>
		<method name="ERR_get_state" result="ERR_STATE *" inline4="normal">
		</method>
		<method name="ERR_get_string_table" result="LHASH *" inline4="normal">
		</method>
		<method name="ERR_get_err_state_table" result="LHASH *" inline4="normal">
		</method>
		<method name="ERR_get_next_error_library" result="int" inline4="normal">
		</method>
		<method name="EVP_MD_CTX_copy" result="int" inline4="normal">
			<arg name="out" type="EVP_MD_CTX *"/>
			<arg name="in" type="EVP_MD_CTX *"/>
		</method>
		<method name="EVP_DigestInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="type" type="const EVP_MD *"/>
		</method>
		<method name="EVP_DigestUpdate" result="void" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="d" type="const unsigned char *"/>
			<arg name="cnt" type="unsigned int"/>
		</method>
		<method name="EVP_DigestFinal" result="void" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="s" type="unsigned int *"/>
		</method>
		<method name="EVP_read_pw_string" result="int" inline4="normal">
			<arg name="buf" type="char *"/>
			<arg name="length" type="int"/>
			<arg name="prompt" type="const char *"/>
			<arg name="verify" type="int"/>
		</method>
		<method name="EVP_set_pw_prompt" result="void" inline4="normal">
			<arg name="prompt" type="char *"/>
		</method>
		<method name="EVP_get_pw_prompt" result="char *" inline4="normal">
		</method>
		<method name="EVP_BytesToKey" result="int" inline4="normal">
			<arg name="type" type="const EVP_CIPHER *"/>
			<arg name="md" type="EVP_MD *"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="datal" type="int"/>
			<arg name="count" type="int"/>
			<arg name="key" type="unsigned char *"/>
			<arg name="iv" type="unsigned char *"/>
		</method>
		<method name="EVP_EncryptInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="const EVP_CIPHER *"/>
			<arg name="key" type="unsigned char *"/>
			<arg name="iv" type="unsigned char *"/>
		</method>
		<method name="EVP_EncryptUpdate" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inl" type="int"/>
		</method>
		<method name="EVP_EncryptFinal" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_DecryptInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="const EVP_CIPHER *"/>
			<arg name="key" type="unsigned char *"/>
			<arg name="iv" type="unsigned char *"/>
		</method>
		<method name="EVP_DecryptUpdate" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inl" type="int"/>
		</method>
		<method name="EVP_DecryptFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="outm" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_CipherInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="const EVP_CIPHER *"/>
			<arg name="key" type="unsigned char *"/>
			<arg name="iv" type="unsigned char *"/>
			<arg name="enc" type="int"/>
		</method>
		<method name="EVP_CipherUpdate" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inl" type="int"/>
		</method>
		<method name="EVP_CipherFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="outm" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_SignFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="s" type="unsigned int *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_VerifyFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="sigbuf" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_OpenInit" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="EVP_CIPHER *"/>
			<arg name="ek" type="unsigned char *"/>
			<arg name="ekl" type="int"/>
			<arg name="iv" type="unsigned char *"/>
			<arg name="priv" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_OpenFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_SealInit" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="EVP_CIPHER *"/>
			<arg name="ek" type="unsigned char **"/>
			<arg name="ekl" type="int *"/>
			<arg name="iv" type="unsigned char *"/>
			<arg name="pubk" type="EVP_PKEY **"/>
			<arg name="npubk" type="int"/>
		</method>
		<method name="EVP_SealFinal" result="void" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_EncodeInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_ENCODE_CTX *"/>
		</method>
		<method name="EVP_EncodeUpdate" result="void" inline4="normal">
			<arg name="ctx" type="EVP_ENCODE_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inl" type="int"/>
		</method>
		<method name="EVP_EncodeFinal" result="void" inline4="normal">
			<arg name="ctx" type="EVP_ENCODE_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_EncodeBlock" result="int" inline4="normal">
			<arg name="t" type="unsigned char *"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="EVP_DecodeInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_ENCODE_CTX *"/>
		</method>
		<method name="EVP_DecodeUpdate" result="int" inline4="normal">
			<arg name="ctx" type="EVP_ENCODE_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inl" type="int"/>
		</method>
		<method name="EVP_DecodeFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_ENCODE_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
		</method>
		<method name="EVP_DecodeBlock" result="int" inline4="normal">
			<arg name="t" type="unsigned char *"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="ERR_load_EVP_strings" result="void" inline4="normal">
		</method>
		<method name="EVP_CIPHER_CTX_init" result="void" inline4="normal">
			<arg name="a" type="EVP_CIPHER_CTX *"/>
		</method>
		<method name="EVP_CIPHER_CTX_cleanup" result="void" inline4="normal">
			<arg name="a" type="EVP_CIPHER_CTX *"/>
		</method>
		<method name="BIO_f_md" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_f_base64" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_f_cipher" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_f_reliable" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_set_cipher" result="void" inline4="normal">
			<arg name="b" type="BIO *"/>
			<arg name="c" type="const EVP_CIPHER *"/>
			<arg name="k" type="unsigned char *"/>
			<arg name="i" type="unsigned char *"/>
			<arg name="enc" type="int"/>
		</method>
		<method name="EVP_md_null" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_md2" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_md5" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_sha" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_sha1" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_dss" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_dss1" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_mdc2" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_ripemd160" result="EVP_MD *" inline4="normal">
		</method>
		<method name="EVP_enc_null" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ecb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede3" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede3_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede3_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_des_ede3_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_desx_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc4" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc4_40" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_idea_ecb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_idea_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_idea_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_idea_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc2_ecb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc2_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc2_40_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc2_64_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc2_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc2_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_bf_ecb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_bf_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_bf_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_bf_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_cast5_ecb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_cast5_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_cast5_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_cast5_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc5_32_12_16_cbc" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc5_32_12_16_ecb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc5_32_12_16_cfb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="EVP_rc5_32_12_16_ofb" result="EVP_CIPHER *" inline4="normal">
		</method>
		<method name="SSLeay_add_all_algorithms" result="void" inline4="normal">
		</method>
		<method name="SSLeay_add_all_ciphers" result="void" inline4="normal">
		</method>
		<method name="SSLeay_add_all_digests" result="void" inline4="normal">
		</method>
		<method name="EVP_add_cipher" result="int" inline4="normal">
			<arg name="cipher" type="EVP_CIPHER *"/>
		</method>
		<method name="EVP_add_digest" result="int" inline4="normal">
			<arg name="digest" type="EVP_MD *"/>
		</method>
		<method name="EVP_get_cipherbyname" result="const EVP_CIPHER *" inline4="normal">
			<arg name="name" type="const char *"/>
		</method>
		<method name="EVP_get_digestbyname" result="const EVP_MD *" inline4="normal">
			<arg name="name" type="const char *"/>
		</method>
		<method name="EVP_cleanup" result="void" inline4="normal">
		</method>
		<method name="EVP_PKEY_decrypt" result="int" inline4="normal">
			<arg name="dec_key" type="unsigned char *"/>
			<arg name="enc_key" type="unsigned char *"/>
			<arg name="enc_key_len" type="int"/>
			<arg name="private_key" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_PKEY_encrypt" result="int" inline4="normal">
			<arg name="enc_key" type="unsigned char *"/>
			<arg name="key" type="unsigned char *"/>
			<arg name="key_len" type="int"/>
			<arg name="pub_key" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_PKEY_type" result="int" inline4="normal">
			<arg name="type" type="int"/>
		</method>
		<method name="EVP_PKEY_bits" result="int" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_PKEY_size" result="int" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_PKEY_assign" result="int" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="type" type="int"/>
			<arg name="key" type="char *"/>
		</method>
		<method name="EVP_PKEY_new" result="EVP_PKEY *" inline4="normal">
		</method>
		<method name="EVP_PKEY_free" result="void" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="d2i_PublicKey" result="EVP_PKEY *" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="a" type="EVP_PKEY **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_PublicKey" result="int" inline4="normal">
			<arg name="a" type="EVP_PKEY *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PrivateKey" result="EVP_PKEY *" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="a" type="EVP_PKEY **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_PrivateKey" result="int" inline4="normal">
			<arg name="a" type="EVP_PKEY *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="EVP_PKEY_copy_parameters" result="int" inline4="normal">
			<arg name="to" type="EVP_PKEY *"/>
			<arg name="from" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_PKEY_missing_parameters" result="int" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_PKEY_save_parameters" result="int" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="mode" type="int"/>
		</method>
		<method name="EVP_PKEY_cmp_parameters" result="int" inline4="normal">
			<arg name="a" type="EVP_PKEY *"/>
			<arg name="b" type="EVP_PKEY *"/>
		</method>
		<method name="EVP_CIPHER_type" result="int" inline4="normal">
			<arg name="ctx" type="const EVP_CIPHER *"/>
		</method>
		<method name="EVP_CIPHER_param_to_asn1" result="int" inline4="normal">
			<arg name="c" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="ASN1_TYPE *"/>
		</method>
		<method name="EVP_CIPHER_asn1_to_param" result="int" inline4="normal">
			<arg name="c" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="ASN1_TYPE *"/>
		</method>
		<method name="EVP_CIPHER_set_asn1_iv" result="int" inline4="normal">
			<arg name="c" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="ASN1_TYPE *"/>
		</method>
		<method name="EVP_CIPHER_get_asn1_iv" result="int" inline4="normal">
			<arg name="c" type="EVP_CIPHER_CTX *"/>
			<arg name="type" type="ASN1_TYPE *"/>
		</method>
		<method name="HMAC_Init" result="void" inline4="normal">
			<arg name="ctx" type="HMAC_CTX *"/>
			<arg name="key" type="const void *"/>
			<arg name="len" type="int"/>
			<arg name="md" type="const EVP_MD *"/>
		</method>
		<method name="HMAC_Update" result="void" inline4="normal">
			<arg name="ctx" type="HMAC_CTX *"/>
			<arg name="key" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="HMAC_Final" result="void" inline4="normal">
			<arg name="ctx" type="HMAC_CTX *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="len" type="unsigned int *"/>
		</method>
		<method name="HMAC_cleanup" result="void" inline4="normal">
			<arg name="ctx" type="HMAC_CTX *"/>
		</method>
		<method name="HMAC" result="unsigned char *" inline4="normal">
			<arg name="evp_md" type="const EVP_MD *"/>
			<arg name="key" type="const void *"/>
			<arg name="key_len" type="int"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="n" type="int"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="md_len" type="unsigned int *"/>
		</method>
		<method name="lh_new" result="LHASH *" inline4="normal">
			<arg name="h() " type="unsigned long"/>
			<arg name="c() " type="int"/>
		</method>
		<method name="lh_free" result="void" inline4="normal">
			<arg name="lh" type="LHASH *"/>
		</method>
		<method name="lh_insert" result="char *" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="lh_delete" result="char *" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="lh_retrieve" result="char *" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="lh_doall" result="void" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="func() " type="void"/>
		</method>
		<method name="lh_doall_arg" result="void" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="func() " type="void"/>
			<arg name="arg" type="char *"/>
		</method>
		<method name="lh_strhash" result="unsigned long" inline4="normal">
			<arg name="c" type="const char *"/>
		</method>
		<method name="lh_stats_bio" result="void" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="out" type="BIO *"/>
		</method>
		<method name="lh_node_stats_bio" result="void" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="out" type="BIO *"/>
		</method>
		<method name="lh_node_usage_stats_bio" result="void" inline4="normal">
			<arg name="lh" type="LHASH *"/>
			<arg name="out" type="BIO *"/>
		</method>
		<method name="OBJ_NAME_init" result="int" inline4="normal">
		</method>
		<method name="OBJ_NAME_new_index" result="int" inline4="normal">
			<arg name="hash_func() " type="unsigned long"/>
			<arg name="cmp_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="OBJ_NAME_get" result="const char *" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="OBJ_NAME_add" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="type" type="int"/>
			<arg name="data" type="const char *"/>
		</method>
		<method name="OBJ_NAME_remove" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="OBJ_NAME_cleanup" result="void" inline4="normal">
			<arg name="type" type="int"/>
		</method>
		<method name="OBJ_dup" result="ASN1_OBJECT *" inline4="normal">
			<arg name="o" type="ASN1_OBJECT *"/>
		</method>
		<method name="OBJ_nid2obj" result="ASN1_OBJECT *" inline4="normal">
			<arg name="n" type="int"/>
		</method>
		<method name="OBJ_nid2ln" result="const char *" inline4="normal">
			<arg name="n" type="int"/>
		</method>
		<method name="OBJ_nid2sn" result="const char *" inline4="normal">
			<arg name="n" type="int"/>
		</method>
		<method name="OBJ_obj2nid" result="int" inline4="normal">
			<arg name="o" type="ASN1_OBJECT *"/>
		</method>
		<method name="OBJ_txt2obj" result="ASN1_OBJECT *" inline4="normal">
			<arg name="s" type="const char *"/>
			<arg name="no_name" type="int"/>
		</method>
		<method name="OBJ_txt2nid" result="int" inline4="normal">
			<arg name="s" type="char *"/>
		</method>
		<method name="OBJ_ln2nid" result="int" inline4="normal">
			<arg name="s" type="const char *"/>
		</method>
		<method name="OBJ_sn2nid" result="int" inline4="normal">
			<arg name="s" type="const char *"/>
		</method>
		<method name="OBJ_cmp" result="int" inline4="normal">
			<arg name="a" type="ASN1_OBJECT *"/>
			<arg name="b" type="ASN1_OBJECT *"/>
		</method>
		<method name="OBJ_bsearch" result="char *" inline4="normal">
			<arg name="key" type="char *"/>
			<arg name="base" type="char *"/>
			<arg name="num" type="int"/>
			<arg name="size" type="int"/>
			<arg name="cmp() " type="int"/>
		</method>
		<method name="ERR_load_OBJ_strings" result="void" inline4="normal">
		</method>
		<method name="OBJ_new_nid" result="int" inline4="normal">
			<arg name="num" type="int"/>
		</method>
		<method name="OBJ_add_object" result="int" inline4="normal">
			<arg name="obj" type="ASN1_OBJECT *"/>
		</method>
		<method name="OBJ_create" result="int" inline4="normal">
			<arg name="oid" type="char *"/>
			<arg name="sn" type="char *"/>
			<arg name="ln" type="char *"/>
		</method>
		<method name="OBJ_cleanup" result="void" inline4="normal">
		</method>
		<method name="OBJ_create_objects" result="int" inline4="normal">
			<arg name="in" type="BIO *"/>
		</method>
		<method name="PEM_get_EVP_CIPHER_INFO" result="int" inline4="normal">
			<arg name="header" type="char *"/>
			<arg name="cipher" type="EVP_CIPHER_INFO *"/>
		</method>
		<method name="PEM_do_header" result="int" inline4="normal">
			<arg name="cipher" type="EVP_CIPHER_INFO *"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="len" type="long *"/>
			<arg name="callback(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="name" type="char **"/>
			<arg name="header" type="char **"/>
			<arg name="data" type="unsigned char **"/>
			<arg name="len" type="long *"/>
		</method>
		<method name="PEM_write_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="name" type="const char *"/>
			<arg name="hdr" type="char *"/>
			<arg name="data" type="unsigned char *"/>
			<arg name="len" type="long"/>
		</method>
		<method name="PEM_ASN1_read_bio" result="char *" inline4="normal">
			<arg name="d2i() " type="char *"/>
			<arg name="name" type="const char *"/>
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="char **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_ASN1_write_bio" result="int" inline4="normal">
			<arg name="i2d() " type="int"/>
			<arg name="name" type="const char *"/>
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="char *"/>
			<arg name="enc" type="const EVP_CIPHER *"/>
			<arg name="kstr" type="unsigned char *"/>
			<arg name="klen" type="int"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_X509_INFO_read_bio" result="STACK *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="sk" type="STACK *"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_X509_INFO_write_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="xi" type="X509_INFO *"/>
			<arg name="enc" type="EVP_CIPHER *"/>
			<arg name="kstr" type="unsigned char *"/>
			<arg name="klen" type="int"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_SealInit" result="int" inline4="normal">
			<arg name="ctx" type="PEM_ENCODE_SEAL_CTX *"/>
			<arg name="type" type="EVP_CIPHER *"/>
			<arg name="md_type" type="EVP_MD *"/>
			<arg name="ek" type="unsigned char **"/>
			<arg name="ekl" type="int *"/>
			<arg name="iv" type="unsigned char *"/>
			<arg name="pubk" type="EVP_PKEY **"/>
			<arg name="npubk" type="int"/>
		</method>
		<method name="PEM_SealUpdate" result="void" inline4="normal">
			<arg name="ctx" type="PEM_ENCODE_SEAL_CTX *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inl" type="int"/>
		</method>
		<method name="PEM_SealFinal" result="int" inline4="normal">
			<arg name="ctx" type="PEM_ENCODE_SEAL_CTX *"/>
			<arg name="sig" type="unsigned char *"/>
			<arg name="sigl" type="int *"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="outl" type="int *"/>
			<arg name="priv" type="EVP_PKEY *"/>
		</method>
		<method name="PEM_SignInit" result="void" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="type" type="EVP_MD *"/>
		</method>
		<method name="PEM_SignUpdate" result="void" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="cnt" type="unsigned int"/>
		</method>
		<method name="PEM_SignFinal" result="int" inline4="normal">
			<arg name="ctx" type="EVP_MD_CTX *"/>
			<arg name="sigret" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="ERR_load_PEM_strings" result="void" inline4="normal">
		</method>
		<method name="PEM_proc_type" result="void" inline4="normal">
			<arg name="buf" type="char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="PEM_dek_info" result="void" inline4="normal">
			<arg name="buf" type="char *"/>
			<arg name="type" type="const char *"/>
			<arg name="len" type="int"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="PEM_read_bio_X509" result="X509 *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509 **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_X509_REQ" result="X509_REQ *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_REQ **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_X509_CRL" result="X509_CRL *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_CRL **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_RSAPrivateKey" result="RSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="RSA **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_RSAPublicKey" result="RSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="RSA **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_DSAPrivateKey" result="DSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DSA **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_PrivateKey" result="EVP_PKEY *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="EVP_PKEY **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_PKCS7" result="PKCS7 *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="PKCS7 **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_DHparams" result="DH *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DH **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="NETSCAPE_CERT_SEQUENCE **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_DSAparams" result="DSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DSA **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_write_bio_X509" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="PEM_write_bio_X509_REQ" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_REQ *"/>
		</method>
		<method name="PEM_write_bio_X509_CRL" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_CRL *"/>
		</method>
		<method name="PEM_write_bio_RSAPrivateKey" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="x" type="RSA *"/>
			<arg name="enc" type="const EVP_CIPHER *"/>
			<arg name="kstr" type="unsigned char *"/>
			<arg name="klen" type="int"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_write_bio_RSAPublicKey" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="x" type="RSA *"/>
		</method>
		<method name="PEM_write_bio_DSAPrivateKey" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="x" type="DSA *"/>
			<arg name="enc" type="const EVP_CIPHER *"/>
			<arg name="kstr" type="unsigned char *"/>
			<arg name="klen" type="int"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_write_bio_PrivateKey" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="x" type="EVP_PKEY *"/>
			<arg name="enc" type="EVP_CIPHER *"/>
			<arg name="kstr" type="unsigned char *"/>
			<arg name="klen" type="int"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_write_bio_PKCS7" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="PKCS7 *"/>
		</method>
		<method name="PEM_write_bio_DHparams" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DH *"/>
		</method>
		<method name="PEM_write_bio_DSAparams" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="DSA *"/>
		</method>
		<method name="PEM_write_bio_NETSCAPE_CERT_SEQUENCE" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="NETSCAPE_CERT_SEQUENCE *"/>
		</method>
		<method name="PKCS12_pack_safebag" result="PKCS12_SAFEBAG *" inline4="normal">
			<arg name="obj" type="char *"/>
			<arg name="i2d() " type="int"/>
			<arg name="nid1" type="int"/>
			<arg name="nid2" type="int"/>
		</method>
		<method name="PKCS12_MAKE_KEYBAG" result="PKCS12_SAFEBAG *" inline4="normal">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="PKCS8_encrypt" result="X509_SIG *" inline4="normal">
			<arg name="pbe_nid" type="int"/>
			<arg name="cipher" type="const EVP_CIPHER *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="PKCS12_MAKE_SHKEYBAG" result="PKCS12_SAFEBAG *" inline4="normal">
			<arg name="pbe_nid" type="int"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="PKCS12_pack_p7data" result="PKCS7 *" inline4="normal">
			<arg name="sk" type="STACK *"/>
		</method>
		<method name="PKCS12_pack_p7encdata" result="PKCS7 *" inline4="normal">
			<arg name="pbe_nid" type="int"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="bags" type="STACK *"/>
		</method>
		<method name="PKCS12_add_localkeyid" result="int" inline4="normal">
			<arg name="bag" type="PKCS12_SAFEBAG *"/>
			<arg name="name" type="unsigned char *"/>
			<arg name="namelen" type="int"/>
		</method>
		<method name="PKCS12_add_friendlyname_asc" result="int" inline4="normal">
			<arg name="bag" type="PKCS12_SAFEBAG *"/>
			<arg name="name" type="const char *"/>
			<arg name="namelen" type="int"/>
		</method>
		<method name="PKCS12_add_friendlyname_uni" result="int" inline4="normal">
			<arg name="bag" type="PKCS12_SAFEBAG *"/>
			<arg name="name" type="const unsigned char *"/>
			<arg name="namelen" type="int"/>
		</method>
		<method name="PKCS8_add_keyusage" result="int" inline4="normal">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *"/>
			<arg name="usage" type="int"/>
		</method>
		<method name="PKCS12_get_attr_gen" result="ASN1_TYPE *" inline4="normal">
			<arg name="attrs" type="STACK *"/>
			<arg name="attr_nid" type="int"/>
		</method>
		<method name="PKCS12_get_friendlyname" result="char *" inline4="normal">
			<arg name="bag" type="PKCS12_SAFEBAG *"/>
		</method>
		<method name="PKCS12_pbe_crypt" result="unsigned char *" inline4="normal">
			<arg name="algor" type="X509_ALGOR *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="in" type="unsigned char *"/>
			<arg name="inlen" type="int"/>
			<arg name="data" type="unsigned char **"/>
			<arg name="datalen" type="int *"/>
			<arg name="en_de" type="int"/>
		</method>
		<method name="PKCS12_decrypt_d2i" result="char *" inline4="normal">
			<arg name="algor" type="X509_ALGOR *"/>
			<arg name="d2i() " type="char *"/>
			<arg name="free_func() " type="void"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="oct" type="ASN1_STRING *"/>
			<arg name="seq" type="int"/>
		</method>
		<method name="PKCS12_i2d_encrypt" result="ASN1_STRING *" inline4="normal">
			<arg name="algor" type="X509_ALGOR *"/>
			<arg name="i2d() " type="int"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="obj" type="char *"/>
			<arg name="seq" type="int"/>
		</method>
		<method name="PKCS12_init" result="PKCS12 *" inline4="normal">
			<arg name="mode" type="int"/>
		</method>
		<method name="PKCS12_key_gen_asc" result="int" inline4="normal">
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="id" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="n" type="int"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="md_type" type="const EVP_MD *"/>
		</method>
		<method name="PKCS12_key_gen_uni" result="int" inline4="normal">
			<arg name="pass" type="unsigned char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="id" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="n" type="int"/>
			<arg name="out" type="unsigned char *"/>
			<arg name="md_type" type="const EVP_MD *"/>
		</method>
		<method name="PKCS12_gen_mac" result="int" inline4="normal">
			<arg name="p12" type="PKCS12 *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="mac" type="unsigned char *"/>
			<arg name="maclen" type="unsigned int *"/>
		</method>
		<method name="PKCS12_verify_mac" result="int" inline4="normal">
			<arg name="p12" type="PKCS12 *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
		</method>
		<method name="PKCS12_set_mac" result="int" inline4="normal">
			<arg name="p12" type="PKCS12 *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="md_type" type="EVP_MD *"/>
		</method>
		<method name="PKCS12_setup_mac" result="int" inline4="normal">
			<arg name="p12" type="PKCS12 *"/>
			<arg name="iter" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="md_type" type="EVP_MD *"/>
		</method>
		<method name="asc2uni" result="unsigned char *" inline4="normal">
			<arg name="asc" type="const char *"/>
			<arg name="uni" type="unsigned char **"/>
			<arg name="unilen" type="int *"/>
		</method>
		<method name="uni2asc" result="char *" inline4="normal">
			<arg name="uni" type="unsigned char *"/>
			<arg name="unilen" type="int"/>
		</method>
		<method name="i2d_PKCS12_BAGS" result="int" inline4="normal">
			<arg name="a" type="PKCS12_BAGS *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PKCS12_BAGS_new" result="PKCS12_BAGS *" inline4="normal">
		</method>
		<method name="d2i_PKCS12_BAGS" result="PKCS12_BAGS *" inline4="normal">
			<arg name="a" type="PKCS12_BAGS **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS12_BAGS_free" result="void" inline4="normal">
			<arg name="a" type="PKCS12_BAGS *"/>
		</method>
		<method name="i2d_PKCS12" result="int" inline4="normal">
			<arg name="a" type="PKCS12 *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS12" result="PKCS12 *" inline4="normal">
			<arg name="a" type="PKCS12 **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS12_new" result="PKCS12 *" inline4="normal">
		</method>
		<method name="PKCS12_free" result="void" inline4="normal">
			<arg name="a" type="PKCS12 *"/>
		</method>
		<method name="i2d_PKCS12_MAC_DATA" result="int" inline4="normal">
			<arg name="a" type="PKCS12_MAC_DATA *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PKCS12_MAC_DATA_new" result="PKCS12_MAC_DATA *" inline4="normal">
		</method>
		<method name="d2i_PKCS12_MAC_DATA" result="PKCS12_MAC_DATA *" inline4="normal">
			<arg name="a" type="PKCS12_MAC_DATA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS12_MAC_DATA_free" result="void" inline4="normal">
			<arg name="a" type="PKCS12_MAC_DATA *"/>
		</method>
		<method name="i2d_PKCS12_SAFEBAG" result="int" inline4="normal">
			<arg name="a" type="PKCS12_SAFEBAG *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PKCS12_SAFEBAG_new" result="PKCS12_SAFEBAG *" inline4="normal">
		</method>
		<method name="d2i_PKCS12_SAFEBAG" result="PKCS12_SAFEBAG *" inline4="normal">
			<arg name="a" type="PKCS12_SAFEBAG **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS12_SAFEBAG_free" result="void" inline4="normal">
			<arg name="a" type="PKCS12_SAFEBAG *"/>
		</method>
		<method name="ERR_load_PKCS12_strings" result="void" inline4="normal">
		</method>
		<method name="PKCS12_PBE_add" result="void" inline4="normal">
		</method>
		<method name="PKCS12_parse" result="int" inline4="normal">
			<arg name="p12" type="PKCS12 *"/>
			<arg name="pass" type="const char *"/>
			<arg name="pkey" type="EVP_PKEY **"/>
			<arg name="cert" type="X509 **"/>
			<arg name="ca" type="STACK **"/>
		</method>
		<method name="PKCS12_create" result="PKCS12 *" inline4="normal">
			<arg name="pass" type="char *"/>
			<arg name="name" type="char *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="cert" type="X509 *"/>
			<arg name="ca" type="STACK *"/>
			<arg name="nid_key" type="int"/>
			<arg name="nid_cert" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="mac_iter" type="int"/>
			<arg name="keytype" type="int"/>
		</method>
		<method name="i2d_PKCS12_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p12" type="PKCS12 *"/>
		</method>
		<method name="d2i_PKCS12_bio" result="PKCS12 *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p12" type="PKCS12 **"/>
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_new" result="PKCS7_ISSUER_AND_SERIAL *" inline4="normal">
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_ISSUER_AND_SERIAL *"/>
		</method>
		<method name="i2d_PKCS7_ISSUER_AND_SERIAL" result="int" inline4="normal">
			<arg name="a" type="PKCS7_ISSUER_AND_SERIAL *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_ISSUER_AND_SERIAL" result="PKCS7_ISSUER_AND_SERIAL *" inline4="normal">
			<arg name="a" type="PKCS7_ISSUER_AND_SERIAL **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_digest" result="int" inline4="normal">
			<arg name="data" type="PKCS7_ISSUER_AND_SERIAL *"/>
			<arg name="type" type="EVP_MD *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="len" type="unsigned int *"/>
		</method>
		<method name="PKCS7_dup" result="PKCS7 *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
		</method>
		<method name="d2i_PKCS7_bio" result="PKCS7 *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p7" type="PKCS7 **"/>
		</method>
		<method name="i2d_PKCS7_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p7" type="PKCS7 *"/>
		</method>
		<method name="PKCS7_SIGNER_INFO_new" result="PKCS7_SIGNER_INFO *" inline4="normal">
		</method>
		<method name="PKCS7_SIGNER_INFO_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_SIGNER_INFO *"/>
		</method>
		<method name="i2d_PKCS7_SIGNER_INFO" result="int" inline4="normal">
			<arg name="a" type="PKCS7_SIGNER_INFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_SIGNER_INFO" result="PKCS7_SIGNER_INFO *" inline4="normal">
			<arg name="a" type="PKCS7_SIGNER_INFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_RECIP_INFO_new" result="PKCS7_RECIP_INFO *" inline4="normal">
		</method>
		<method name="PKCS7_RECIP_INFO_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_RECIP_INFO *"/>
		</method>
		<method name="i2d_PKCS7_RECIP_INFO" result="int" inline4="normal">
			<arg name="a" type="PKCS7_RECIP_INFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_RECIP_INFO" result="PKCS7_RECIP_INFO *" inline4="normal">
			<arg name="a" type="PKCS7_RECIP_INFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_SIGNED_new" result="PKCS7_SIGNED *" inline4="normal">
		</method>
		<method name="PKCS7_SIGNED_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_SIGNED *"/>
		</method>
		<method name="i2d_PKCS7_SIGNED" result="int" inline4="normal">
			<arg name="a" type="PKCS7_SIGNED *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_SIGNED" result="PKCS7_SIGNED *" inline4="normal">
			<arg name="a" type="PKCS7_SIGNED **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_ENC_CONTENT_new" result="PKCS7_ENC_CONTENT *" inline4="normal">
		</method>
		<method name="PKCS7_ENC_CONTENT_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_ENC_CONTENT *"/>
		</method>
		<method name="i2d_PKCS7_ENC_CONTENT" result="int" inline4="normal">
			<arg name="a" type="PKCS7_ENC_CONTENT *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_ENC_CONTENT" result="PKCS7_ENC_CONTENT *" inline4="normal">
			<arg name="a" type="PKCS7_ENC_CONTENT **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_ENVELOPE_new" result="PKCS7_ENVELOPE *" inline4="normal">
		</method>
		<method name="PKCS7_ENVELOPE_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_ENVELOPE *"/>
		</method>
		<method name="i2d_PKCS7_ENVELOPE" result="int" inline4="normal">
			<arg name="a" type="PKCS7_ENVELOPE *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_ENVELOPE" result="PKCS7_ENVELOPE *" inline4="normal">
			<arg name="a" type="PKCS7_ENVELOPE **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_SIGN_ENVELOPE_new" result="PKCS7_SIGN_ENVELOPE *" inline4="normal">
		</method>
		<method name="PKCS7_SIGN_ENVELOPE_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_SIGN_ENVELOPE *"/>
		</method>
		<method name="i2d_PKCS7_SIGN_ENVELOPE" result="int" inline4="normal">
			<arg name="a" type="PKCS7_SIGN_ENVELOPE *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_SIGN_ENVELOPE" result="PKCS7_SIGN_ENVELOPE *" inline4="normal">
			<arg name="a" type="PKCS7_SIGN_ENVELOPE **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_DIGEST_new" result="PKCS7_DIGEST *" inline4="normal">
		</method>
		<method name="PKCS7_DIGEST_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_DIGEST *"/>
		</method>
		<method name="i2d_PKCS7_DIGEST" result="int" inline4="normal">
			<arg name="a" type="PKCS7_DIGEST *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_DIGEST" result="PKCS7_DIGEST *" inline4="normal">
			<arg name="a" type="PKCS7_DIGEST **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_ENCRYPT_new" result="PKCS7_ENCRYPT *" inline4="normal">
		</method>
		<method name="PKCS7_ENCRYPT_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7_ENCRYPT *"/>
		</method>
		<method name="i2d_PKCS7_ENCRYPT" result="int" inline4="normal">
			<arg name="a" type="PKCS7_ENCRYPT *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7_ENCRYPT" result="PKCS7_ENCRYPT *" inline4="normal">
			<arg name="a" type="PKCS7_ENCRYPT **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS7_new" result="PKCS7 *" inline4="normal">
		</method>
		<method name="PKCS7_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7 *"/>
		</method>
		<method name="PKCS7_content_free" result="void" inline4="normal">
			<arg name="a" type="PKCS7 *"/>
		</method>
		<method name="i2d_PKCS7" result="int" inline4="normal">
			<arg name="a" type="PKCS7 *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKCS7" result="PKCS7 *" inline4="normal">
			<arg name="a" type="PKCS7 **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ERR_load_PKCS7_strings" result="void" inline4="normal">
		</method>
		<method name="PKCS7_ctrl" result="long" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="cmd" type="int"/>
			<arg name="larg" type="long"/>
			<arg name="parg" type="char *"/>
		</method>
		<method name="PKCS7_set_type" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="PKCS7_set_content" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="p7_data" type="PKCS7 *"/>
		</method>
		<method name="PKCS7_SIGNER_INFO_set" result="int" inline4="normal">
			<arg name="p7i" type="PKCS7_SIGNER_INFO *"/>
			<arg name="x509" type="X509 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="dgst" type="EVP_MD *"/>
		</method>
		<method name="PKCS7_add_signer" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="p7i" type="PKCS7_SIGNER_INFO *"/>
		</method>
		<method name="PKCS7_add_certificate" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="x509" type="X509 *"/>
		</method>
		<method name="PKCS7_add_crl" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="x509" type="X509_CRL *"/>
		</method>
		<method name="PKCS7_content_new" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="nid" type="int"/>
		</method>
		<method name="PKCS7_dataVerify" result="int" inline4="normal">
			<arg name="cert_store" type="X509_STORE *"/>
			<arg name="ctx" type="X509_STORE_CTX *"/>
			<arg name="bio" type="BIO *"/>
			<arg name="p7" type="PKCS7 *"/>
			<arg name="si" type="PKCS7_SIGNER_INFO *"/>
		</method>
		<method name="PKCS7_dataInit" result="BIO *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="bio" type="BIO *"/>
		</method>
		<method name="PKCS7_dataFinal" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="bio" type="BIO *"/>
		</method>
		<method name="PKCS7_dataDecode" result="BIO *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="in_bio" type="BIO *"/>
			<arg name="pcert" type="X509 *"/>
		</method>
		<method name="PKCS7_add_signature" result="PKCS7_SIGNER_INFO *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="x509" type="X509 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="dgst" type="EVP_MD *"/>
		</method>
		<method name="PKCS7_cert_from_signer_info" result="X509 *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="si" type="PKCS7_SIGNER_INFO *"/>
		</method>
		<method name="PKCS7_get_signer_info" result="STACK *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
		</method>
		<method name="PKCS7_add_recipient" result="PKCS7_RECIP_INFO *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="x509" type="X509 *"/>
		</method>
		<method name="PKCS7_add_recipient_info" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="ri" type="PKCS7_RECIP_INFO *"/>
		</method>
		<method name="PKCS7_RECIP_INFO_set" result="int" inline4="normal">
			<arg name="p7i" type="PKCS7_RECIP_INFO *"/>
			<arg name="x509" type="X509 *"/>
		</method>
		<method name="PKCS7_set_cipher" result="int" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="cipher" type="const EVP_CIPHER *"/>
		</method>
		<method name="PKCS7_get_issuer_and_serial" result="PKCS7_ISSUER_AND_SERIAL *" inline4="normal">
			<arg name="p7" type="PKCS7 *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="PKCS7_digest_from_attributes" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="sk" type="STACK *"/>
		</method>
		<method name="PKCS7_add_signed_attribute" result="int" inline4="normal">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="nid" type="int"/>
			<arg name="type" type="int"/>
			<arg name="data" type="void *"/>
		</method>
		<method name="PKCS7_add_attribute" result="int" inline4="normal">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="nid" type="int"/>
			<arg name="atrtype" type="int"/>
			<arg name="value" type="void *"/>
		</method>
		<method name="PKCS7_get_attribute" result="ASN1_TYPE *" inline4="normal">
			<arg name="si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="nid" type="int"/>
		</method>
		<method name="PKCS7_get_signed_attribute" result="ASN1_TYPE *" inline4="normal">
			<arg name="si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="nid" type="int"/>
		</method>
		<method name="PKCS7_set_signed_attributes" result="int" inline4="normal">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="sk" type="STACK *"/>
		</method>
		<method name="PKCS7_set_attributes" result="int" inline4="normal">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="sk" type="STACK *"/>
		</method>
		<method name="RAND_set_rand_method" result="void" inline4="normal">
			<arg name="meth" type="RAND_METHOD *"/>
		</method>
		<method name="RAND_get_rand_method" result="RAND_METHOD *" inline4="normal">
		</method>
		<method name="RAND_SSLeay" result="RAND_METHOD *" inline4="normal">
		</method>
		<method name="RAND_cleanup" result="void" inline4="normal">
		</method>
		<method name="RAND_bytes" result="void" inline4="normal">
			<arg name="buf" type="unsigned char *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="RAND_seed" result="void" inline4="normal">
			<arg name="buf" type="const void *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="RAND_load_file" result="int" inline4="normal">
			<arg name="file" type="const char *"/>
			<arg name="max_bytes" type="long"/>
		</method>
		<method name="RAND_write_file" result="int" inline4="normal">
			<arg name="file" type="const char *"/>
		</method>
		<method name="RAND_file_name" result="char *" inline4="normal">
			<arg name="file" type="char *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="ERR_load_RSAREF_strings" result="void" inline4="normal">
		</method>
		<method name="RSA_new" result="RSA *" inline4="normal">
		</method>
		<method name="RSA_new_method" result="RSA *" inline4="normal">
			<arg name="method" type="RSA_METHOD *"/>
		</method>
		<method name="RSA_size" result="int" inline4="normal">
			<arg name="a" type="RSA *"/>
		</method>
		<method name="RSA_generate_key" result="RSA *" inline4="normal">
			<arg name="bits" type="int"/>
			<arg name="e" type="unsigned long"/>
			<arg name="callback(int , int , void * ) " type="void"/>
			<arg name="cb_arg" type="void *"/>
		</method>
		<method name="RSA_public_encrypt" result="int" inline4="normal">
			<arg name="flen" type="int"/>
			<arg name="from" type="unsigned char *"/>
			<arg name="to" type="unsigned char *"/>
			<arg name="rsa" type="RSA *"/>
			<arg name="padding" type="int"/>
		</method>
		<method name="RSA_private_encrypt" result="int" inline4="normal">
			<arg name="flen" type="int"/>
			<arg name="from" type="unsigned char *"/>
			<arg name="to" type="unsigned char *"/>
			<arg name="rsa" type="RSA *"/>
			<arg name="padding" type="int"/>
		</method>
		<method name="RSA_public_decrypt" result="int" inline4="normal">
			<arg name="flen" type="int"/>
			<arg name="from" type="unsigned char *"/>
			<arg name="to" type="unsigned char *"/>
			<arg name="rsa" type="RSA *"/>
			<arg name="padding" type="int"/>
		</method>
		<method name="RSA_private_decrypt" result="int" inline4="normal">
			<arg name="flen" type="int"/>
			<arg name="from" type="unsigned char *"/>
			<arg name="to" type="unsigned char *"/>
			<arg name="rsa" type="RSA *"/>
			<arg name="padding" type="int"/>
		</method>
		<method name="RSA_free" result="void" inline4="normal">
			<arg name="r" type="RSA *"/>
		</method>
		<method name="RSA_flags" result="int" inline4="normal">
			<arg name="r" type="RSA *"/>
		</method>
		<method name="RSA_set_default_method" result="void" inline4="normal">
			<arg name="meth" type="RSA_METHOD *"/>
		</method>
		<method name="RSA_memory_lock" result="int" inline4="normal">
			<arg name="r" type="RSA *"/>
		</method>
		<method name="RSA_PKCS1_Default" result="RSA_METHOD *" inline4="normal">
		</method>
		<method name="ERR_load_RSA_strings" result="void" inline4="normal">
		</method>
		<method name="d2i_RSAPublicKey" result="RSA *" inline4="normal">
			<arg name="a" type="RSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_RSAPublicKey" result="int" inline4="normal">
			<arg name="a" type="RSA *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_RSAPrivateKey" result="RSA *" inline4="normal">
			<arg name="a" type="RSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_RSAPrivateKey" result="int" inline4="normal">
			<arg name="a" type="RSA *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="RSA_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="r" type="RSA *"/>
			<arg name="offset" type="int"/>
		</method>
		<method name="i2d_Netscape_RSA" result="int" inline4="normal">
			<arg name="a" type="RSA *"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="cb() " type="int"/>
		</method>
		<method name="d2i_Netscape_RSA" result="RSA *" inline4="normal">
			<arg name="a" type="RSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
			<arg name="cb() " type="int"/>
		</method>
		<method name="d2i_Netscape_RSA_2" result="RSA *" inline4="normal">
			<arg name="a" type="RSA **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
			<arg name="cb() " type="int"/>
		</method>
		<method name="RSA_sign" result="int" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="m" type="unsigned char *"/>
			<arg name="m_len" type="unsigned int"/>
			<arg name="sigret" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int *"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_verify" result="int" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="m" type="unsigned char *"/>
			<arg name="m_len" type="unsigned int"/>
			<arg name="sigbuf" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_sign_ASN1_OCTET_STRING" result="int" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="m" type="unsigned char *"/>
			<arg name="m_len" type="unsigned int"/>
			<arg name="sigret" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int *"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_verify_ASN1_OCTET_STRING" result="int" inline4="normal">
			<arg name="type" type="int"/>
			<arg name="m" type="unsigned char *"/>
			<arg name="m_len" type="unsigned int"/>
			<arg name="sigbuf" type="unsigned char *"/>
			<arg name="siglen" type="unsigned int"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_blinding_on" result="int" inline4="normal">
			<arg name="rsa" type="RSA *"/>
			<arg name="ctx" type="BN_CTX *"/>
		</method>
		<method name="RSA_blinding_off" result="void" inline4="normal">
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_padding_add_PKCS1_type_1" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
		</method>
		<method name="RSA_padding_check_PKCS1_type_1" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
			<arg name="rsa_len" type="int"/>
		</method>
		<method name="RSA_padding_add_PKCS1_type_2" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
		</method>
		<method name="RSA_padding_check_PKCS1_type_2" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
			<arg name="rsa_len" type="int"/>
		</method>
		<method name="RSA_padding_add_PKCS1_OAEP" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
			<arg name="p" type="unsigned char *"/>
			<arg name="pl" type="int"/>
		</method>
		<method name="RSA_padding_check_PKCS1_OAEP" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
			<arg name="rsa_len" type="int"/>
			<arg name="p" type="unsigned char *"/>
			<arg name="pl" type="int"/>
		</method>
		<method name="RSA_padding_add_SSLv23" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
		</method>
		<method name="RSA_padding_check_SSLv23" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
			<arg name="rsa_len" type="int"/>
		</method>
		<method name="RSA_padding_add_none" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
		</method>
		<method name="RSA_padding_check_none" result="int" inline4="normal">
			<arg name="to" type="unsigned char *"/>
			<arg name="tlen" type="int"/>
			<arg name="f" type="unsigned char *"/>
			<arg name="fl" type="int"/>
			<arg name="rsa_len" type="int"/>
		</method>
		<method name="RSA_get_ex_new_index" result="int" inline4="normal">
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="RSA_set_ex_data" result="int" inline4="normal">
			<arg name="r" type="RSA *"/>
			<arg name="idx" type="int"/>
			<arg name="arg" type="char *"/>
		</method>
		<method name="RSA_get_ex_data" result="char *" inline4="normal">
			<arg name="r" type="RSA *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="BIO_f_ssl" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_new_ssl" result="BIO *" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="client" type="int"/>
		</method>
		<method name="BIO_new_ssl_connect" result="BIO *" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="BIO_new_buffer_ssl_connect" result="BIO *" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="BIO_ssl_copy_session_id" result="int" inline4="normal">
			<arg name="to" type="BIO *"/>
			<arg name="from" type="BIO *"/>
		</method>
		<method name="BIO_ssl_shutdown" result="void" inline4="normal">
			<arg name="ssl_bio" type="BIO *"/>
		</method>
		<method name="SSL_CTX_set_cipher_list" result="int" inline4="normal">
			<arg name="a" type="SSL_CTX *"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="SSL_CTX_new" result="SSL_CTX *" inline4="normal">
			<arg name="meth" type="SSL_METHOD *"/>
		</method>
		<method name="SSL_CTX_free" result="void" inline4="normal">
			<arg name="a" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_set_timeout" result="long" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="t" type="long"/>
		</method>
		<method name="SSL_CTX_get_timeout" result="long" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_get_cert_store" result="X509_STORE *" inline4="normal">
			<arg name="a" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_set_cert_store" result="void" inline4="normal">
			<arg name="a" type="SSL_CTX *"/>
			<arg name="b" type="X509_STORE *"/>
		</method>
		<method name="SSL_want" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_clear" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_CTX_flush_sessions" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="tm" type="long"/>
		</method>
		<method name="SSL_get_current_cipher" result="SSL_CIPHER *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_CIPHER_get_bits" result="int" inline4="normal">
			<arg name="c" type="SSL_CIPHER *"/>
			<arg name="alg_bits" type="int *"/>
		</method>
		<method name="SSL_CIPHER_get_version" result="char *" inline4="normal">
			<arg name="c" type="SSL_CIPHER *"/>
		</method>
		<method name="SSL_CIPHER_get_name" result="const char *" inline4="normal">
			<arg name="c" type="SSL_CIPHER *"/>
		</method>
		<method name="SSL_get_fd" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_cipher_list" result="const char *" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="n" type="int"/>
		</method>
		<method name="SSL_get_shared_ciphers" result="char *" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="buf" type="char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="SSL_get_read_ahead" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_pending" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_set_fd" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="fd" type="int"/>
		</method>
		<method name="SSL_set_rfd" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="fd" type="int"/>
		</method>
		<method name="SSL_set_wfd" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="fd" type="int"/>
		</method>
		<method name="SSL_set_bio" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="rbio" type="BIO *"/>
			<arg name="wbio" type="BIO *"/>
		</method>
		<method name="SSL_get_rbio" result="BIO *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_wbio" result="BIO *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_set_cipher_list" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="SSL_set_read_ahead" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="yes" type="int"/>
		</method>
		<method name="SSL_get_verify_mode" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_verify_depth" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_verify_callback" result="int *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_set_verify" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="mode" type="int"/>
			<arg name="callback(int ok , X509_STORE_CTX * ctx ) " type="int"/>
		</method>
		<method name="SSL_set_verify_depth" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="depth" type="int"/>
		</method>
		<method name="SSL_use_RSAPrivateKey" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="SSL_use_RSAPrivateKey_ASN1" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="len" type="long"/>
		</method>
		<method name="SSL_use_PrivateKey" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="SSL_use_PrivateKey_ASN1" result="int" inline4="normal">
			<arg name="pk" type="int"/>
			<arg name="ssl" type="SSL *"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="len" type="long"/>
		</method>
		<method name="SSL_use_certificate" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="SSL_use_certificate_ASN1" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="SSL_use_RSAPrivateKey_file" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="SSL_use_PrivateKey_file" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="SSL_use_certificate_file" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="SSL_CTX_use_RSAPrivateKey_file" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="SSL_CTX_use_PrivateKey_file" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="SSL_CTX_use_certificate_file" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="SSL_CTX_use_certificate_chain_file" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="file" type="const char *"/>
		</method>
		<method name="SSL_load_client_CA_file" result="STACK *" inline4="normal">
			<arg name="file" type="const char *"/>
		</method>
		<method name="SSL_add_file_cert_subjects_to_stack" result="int" inline4="normal">
			<arg name="stackCAs" type="STACK *"/>
			<arg name="file" type="const char *"/>
		</method>
		<method name="SSL_add_dir_cert_subjects_to_stack" result="int" inline4="normal">
			<arg name="stackCAs" type="STACK *"/>
			<arg name="dir" type="const char *"/>
		</method>
		<method name="ERR_load_SSL_strings" result="void" inline4="normal">
		</method>
		<method name="SSL_load_error_strings" result="void" inline4="normal">
		</method>
		<method name="SSL_state_string" result="char *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_rstate_string" result="char *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_state_string_long" result="char *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_rstate_string_long" result="char *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_SESSION_get_time" result="long" inline4="normal">
			<arg name="s" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_SESSION_set_time" result="long" inline4="normal">
			<arg name="s" type="SSL_SESSION *"/>
			<arg name="t" type="long"/>
		</method>
		<method name="SSL_SESSION_get_timeout" result="long" inline4="normal">
			<arg name="s" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_SESSION_set_timeout" result="long" inline4="normal">
			<arg name="s" type="SSL_SESSION *"/>
			<arg name="t" type="long"/>
		</method>
		<method name="SSL_copy_session_id" result="void" inline4="normal">
			<arg name="to" type="SSL *"/>
			<arg name="from" type="SSL *"/>
		</method>
		<method name="SSL_SESSION_new" result="SSL_SESSION *" inline4="normal">
		</method>
		<method name="SSL_SESSION_hash" result="unsigned long" inline4="normal">
			<arg name="a" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_SESSION_cmp" result="int" inline4="normal">
			<arg name="a" type="SSL_SESSION *"/>
			<arg name="b" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_SESSION_print" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="ses" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_SESSION_free" result="void" inline4="normal">
			<arg name="ses" type="SSL_SESSION *"/>
		</method>
		<method name="i2d_SSL_SESSION" result="int" inline4="normal">
			<arg name="in" type="SSL_SESSION *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="SSL_set_session" result="int" inline4="normal">
			<arg name="to" type="SSL *"/>
			<arg name="session" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_CTX_add_session" result="int" inline4="normal">
			<arg name="s" type="SSL_CTX *"/>
			<arg name="c" type="SSL_SESSION *"/>
		</method>
		<method name="SSL_CTX_remove_session" result="int" inline4="normal">
			<arg name="a" type="SSL_CTX *"/>
			<arg name="c" type="SSL_SESSION *"/>
		</method>
		<method name="d2i_SSL_SESSION" result="SSL_SESSION *" inline4="normal">
			<arg name="a" type="SSL_SESSION **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="SSL_get_peer_certificate" result="X509 *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_peer_cert_chain" result="STACK *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_CTX_get_verify_mode" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_get_verify_depth" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_get_verify_callback" result="int *" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_set_verify" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="mode" type="int"/>
			<arg name="callback(int , X509_STORE_CTX * ) " type="int"/>
		</method>
		<method name="SSL_CTX_set_verify_depth" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="depth" type="int"/>
		</method>
		<method name="SSL_CTX_set_cert_verify_callback" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="cb() " type="int"/>
			<arg name="arg" type="char *"/>
		</method>
		<method name="SSL_CTX_use_RSAPrivateKey" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="SSL_CTX_use_RSAPrivateKey_ASN1" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="len" type="long"/>
		</method>
		<method name="SSL_CTX_use_PrivateKey" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="SSL_CTX_use_PrivateKey_ASN1" result="int" inline4="normal">
			<arg name="pk" type="int"/>
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="d" type="unsigned char *"/>
			<arg name="len" type="long"/>
		</method>
		<method name="SSL_CTX_use_certificate" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="SSL_CTX_use_certificate_ASN1" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="len" type="int"/>
			<arg name="d" type="unsigned char *"/>
		</method>
		<method name="SSL_CTX_set_default_passwd_cb" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
		</method>
		<method name="SSL_CTX_check_private_key" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_check_private_key" result="int" inline4="normal">
			<arg name="ctx" type="SSL *"/>
		</method>
		<method name="SSL_CTX_set_session_id_context" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="sid_ctx" type="const unsigned char *"/>
			<arg name="sid_ctx_len" type="unsigned int"/>
		</method>
		<method name="SSL_new" result="SSL *" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_set_session_id_context" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="sid_ctx" type="const unsigned char *"/>
			<arg name="sid_ctx_len" type="unsigned int"/>
		</method>
		<method name="SSL_free" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_accept" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_connect" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_read" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="buf" type="char *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="SSL_peek" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="buf" type="char *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="SSL_write" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="buf" type="const char *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="SSL_ctrl" result="long" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="cmd" type="int"/>
			<arg name="larg" type="long"/>
			<arg name="parg" type="char *"/>
		</method>
		<method name="SSL_CTX_ctrl" result="long" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="cmd" type="int"/>
			<arg name="larg" type="long"/>
			<arg name="parg" type="char *"/>
		</method>
		<method name="SSL_get_error" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="ret_code" type="int"/>
		</method>
		<method name="SSL_get_version" result="char *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_CTX_set_ssl_version" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="meth" type="SSL_METHOD *"/>
		</method>
		<method name="SSLv2_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv2_server_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv2_client_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv3_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv3_server_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv3_client_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv23_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv23_server_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSLv23_client_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="TLSv1_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="TLSv1_server_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="TLSv1_client_method" result="SSL_METHOD *" inline4="normal">
		</method>
		<method name="SSL_get_ciphers" result="STACK *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_do_handshake" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_renegotiate" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_shutdown" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_ssl_method" result="SSL_METHOD *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_set_ssl_method" result="int" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="method" type="SSL_METHOD *"/>
		</method>
		<method name="SSL_alert_type_string_long" result="char *" inline4="normal">
			<arg name="value" type="int"/>
		</method>
		<method name="SSL_alert_type_string" result="char *" inline4="normal">
			<arg name="value" type="int"/>
		</method>
		<method name="SSL_alert_desc_string_long" result="char *" inline4="normal">
			<arg name="value" type="int"/>
		</method>
		<method name="SSL_alert_desc_string" result="char *" inline4="normal">
			<arg name="value" type="int"/>
		</method>
		<method name="SSL_set_client_CA_list" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
			<arg name="list" type="STACK *"/>
		</method>
		<method name="SSL_CTX_set_client_CA_list" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="list" type="STACK *"/>
		</method>
		<method name="SSL_get_client_CA_list" result="STACK *" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_CTX_get_client_CA_list" result="STACK *" inline4="normal">
			<arg name="s" type="SSL_CTX *"/>
		</method>
		<method name="SSL_add_client_CA" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="SSL_CTX_add_client_CA" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="SSL_set_connect_state" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_set_accept_state" result="void" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_get_default_timeout" result="long" inline4="normal">
			<arg name="s" type="SSL *"/>
		</method>
		<method name="SSL_library_init" result="int" inline4="normal">
		</method>
		<method name="SSL_CIPHER_description" result="char *" inline4="normal">
			<arg name="a" type="SSL_CIPHER *"/>
			<arg name="buf" type="char *"/>
			<arg name="size" type="int"/>
		</method>
		<method name="SSL_dup_CA_list" result="STACK *" inline4="normal">
			<arg name="sk" type="STACK *"/>
		</method>
		<method name="SSL_dup" result="SSL *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_get_certificate" result="X509 *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_get_privatekey" result="struct evp_pkey_st *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_CTX_set_quiet_shutdown" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="mode" type="int"/>
		</method>
		<method name="SSL_CTX_get_quiet_shutdown" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_set_quiet_shutdown" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="mode" type="int"/>
		</method>
		<method name="SSL_get_quiet_shutdown" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_set_shutdown" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="mode" type="int"/>
		</method>
		<method name="SSL_get_shutdown" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_version" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_CTX_set_default_verify_paths" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
		</method>
		<method name="SSL_CTX_load_verify_locations" result="int" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="CAfile" type="const char *"/>
			<arg name="CApath" type="const char *"/>
		</method>
		<method name="SSL_get_session" result="SSL_SESSION *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_get_SSL_CTX" result="SSL_CTX *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_set_info_callback" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="cb() " type="void"/>
		</method>
		<method name="SSL_get_info_callback" result="void *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_state" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_set_verify_result" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="v" type="long"/>
		</method>
		<method name="SSL_get_verify_result" result="long" inline4="normal">
			<arg name="ssl" type="SSL *"/>
		</method>
		<method name="SSL_set_ex_data" result="int" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="idx" type="int"/>
			<arg name="data" type="void *"/>
		</method>
		<method name="SSL_get_ex_data" result="void *" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="SSL_get_ex_new_index" result="int" inline4="normal">
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="SSL_SESSION_set_ex_data" result="int" inline4="normal">
			<arg name="ss" type="SSL_SESSION *"/>
			<arg name="idx" type="int"/>
			<arg name="data" type="void *"/>
		</method>
		<method name="SSL_SESSION_get_ex_data" result="void *" inline4="normal">
			<arg name="ss" type="SSL_SESSION *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="SSL_SESSION_get_ex_new_index" result="int" inline4="normal">
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="SSL_CTX_set_ex_data" result="int" inline4="normal">
			<arg name="ssl" type="SSL_CTX *"/>
			<arg name="idx" type="int"/>
			<arg name="data" type="void *"/>
		</method>
		<method name="SSL_CTX_get_ex_data" result="void *" inline4="normal">
			<arg name="ssl" type="SSL_CTX *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="SSL_CTX_get_ex_new_index" result="int" inline4="normal">
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="SSL_get_ex_data_X509_STORE_CTX_idx" result="int" inline4="normal">
		</method>
		<method name="SSL_CTX_set_tmp_rsa_callback" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="cb(SSL * ssl , int is_export , int keylength ) " type="RSA *"/>
		</method>
		<method name="SSL_set_tmp_rsa_callback" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="cb(SSL * ssl , int is_export , int keylength ) " type="RSA *"/>
		</method>
		<method name="SSL_CTX_set_tmp_dh_callback" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="dh(SSL * ssl , int is_export , int keylength ) " type="DH *"/>
		</method>
		<method name="SSL_set_tmp_dh_callback" result="void" inline4="normal">
			<arg name="ssl" type="SSL *"/>
			<arg name="dh(SSL * ssl , int is_export , int keylength ) " type="DH *"/>
		</method>
		<method name="SSL_COMP_add_compression_method" result="int" inline4="normal">
			<arg name="id" type="int"/>
			<arg name="cm" type="COMP_METHOD *"/>
		</method>
		<method name="sk_num" result="int" inline4="normal">
			<arg name="a" type="STACK *"/>
		</method>
		<method name="sk_value" result="char *" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="b" type="int"/>
		</method>
		<method name="sk_set" result="char *" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="b" type="int"/>
			<arg name="c" type="char *"/>
		</method>
		<method name="sk_new" result="STACK *" inline4="normal">
			<arg name="cmp() " type="int"/>
		</method>
		<method name="sk_free" result="void" inline4="normal">
			<arg name="a" type="STACK *"/>
		</method>
		<method name="sk_pop_free" result="void" inline4="normal">
			<arg name="st" type="STACK *"/>
			<arg name="func() " type="void"/>
		</method>
		<method name="sk_insert" result="int" inline4="normal">
			<arg name="sk" type="STACK *"/>
			<arg name="data" type="char *"/>
			<arg name="where" type="int"/>
		</method>
		<method name="sk_delete" result="char *" inline4="normal">
			<arg name="st" type="STACK *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="sk_delete_ptr" result="char *" inline4="normal">
			<arg name="st" type="STACK *"/>
			<arg name="p" type="char *"/>
		</method>
		<method name="sk_find" result="int" inline4="normal">
			<arg name="st" type="STACK *"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="sk_push" result="int" inline4="normal">
			<arg name="st" type="STACK *"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="sk_unshift" result="int" inline4="normal">
			<arg name="st" type="STACK *"/>
			<arg name="data" type="char *"/>
		</method>
		<method name="sk_shift" result="char *" inline4="normal">
			<arg name="st" type="STACK *"/>
		</method>
		<method name="sk_pop" result="char *" inline4="normal">
			<arg name="st" type="STACK *"/>
		</method>
		<method name="sk_zero" result="void" inline4="normal">
			<arg name="st" type="STACK *"/>
		</method>
		<method name="sk_set_cmp_func" result="int *" inline4="normal">
			<arg name="sk" type="STACK *"/>
			<arg name="c() " type="int"/>
		</method>
		<method name="sk_dup" result="STACK *" inline4="normal">
			<arg name="st" type="STACK *"/>
		</method>
		<method name="ms_time_new" result="char *" inline4="normal">
		</method>
		<method name="ms_time_free" result="void" inline4="normal">
			<arg name="a" type="char *"/>
		</method>
		<method name="ms_time_get" result="void" inline4="normal">
			<arg name="a" type="char *"/>
		</method>
		<method name="ms_time_diff" result="double" inline4="normal">
			<arg name="start" type="char *"/>
			<arg name="end" type="char *"/>
		</method>
		<method name="ms_time_cmp" result="int" inline4="normal">
			<arg name="ap" type="char *"/>
			<arg name="bp" type="char *"/>
		</method>
		<method name="TXT_DB_read" result="TXT_DB *" inline4="normal">
			<arg name="in" type="BIO *"/>
			<arg name="num" type="int"/>
		</method>
		<method name="TXT_DB_write" result="long" inline4="normal">
			<arg name="out" type="BIO *"/>
			<arg name="db" type="TXT_DB *"/>
		</method>
		<method name="TXT_DB_create_index" result="int" inline4="normal">
			<arg name="db" type="TXT_DB *"/>
			<arg name="field" type="int"/>
			<arg name="qual() " type="int"/>
			<arg name="hash() " type="unsigned long"/>
			<arg name="cmp() " type="int"/>
		</method>
		<method name="TXT_DB_free" result="void" inline4="normal">
			<arg name="db" type="TXT_DB *"/>
		</method>
		<method name="TXT_DB_get_by_index" result="char **" inline4="normal">
			<arg name="db" type="TXT_DB *"/>
			<arg name="idx" type="int"/>
			<arg name="value" type="char **"/>
		</method>
		<method name="TXT_DB_insert" result="int" inline4="normal">
			<arg name="db" type="TXT_DB *"/>
			<arg name="value" type="char **"/>
		</method>
		<method name="ERR_load_X509V3_strings" result="void" inline4="normal">
		</method>
		<method name="i2d_BASIC_CONSTRAINTS" result="int" inline4="normal">
			<arg name="a" type="BASIC_CONSTRAINTS *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_BASIC_CONSTRAINTS" result="BASIC_CONSTRAINTS *" inline4="normal">
			<arg name="a" type="BASIC_CONSTRAINTS **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="BASIC_CONSTRAINTS_new" result="BASIC_CONSTRAINTS *" inline4="normal">
		</method>
		<method name="BASIC_CONSTRAINTS_free" result="void" inline4="normal">
			<arg name="a" type="BASIC_CONSTRAINTS *"/>
		</method>
		<method name="i2d_GENERAL_NAME" result="int" inline4="normal">
			<arg name="a" type="GENERAL_NAME *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_GENERAL_NAME" result="GENERAL_NAME *" inline4="normal">
			<arg name="a" type="GENERAL_NAME **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="GENERAL_NAME_new" result="GENERAL_NAME *" inline4="normal">
		</method>
		<method name="GENERAL_NAME_free" result="void" inline4="normal">
			<arg name="a" type="GENERAL_NAME *"/>
		</method>
		<method name="i2v_GENERAL_NAME" result="STACK *" inline4="normal">
			<arg name="method" type="X509V3_EXT_METHOD *"/>
			<arg name="gen" type="GENERAL_NAME *"/>
			<arg name="ret" type="STACK *"/>
		</method>
		<method name="i2d_SXNET" result="int" inline4="normal">
			<arg name="a" type="SXNET *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_SXNET" result="SXNET *" inline4="normal">
			<arg name="a" type="SXNET **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="SXNET_new" result="SXNET *" inline4="normal">
		</method>
		<method name="SXNET_free" result="void" inline4="normal">
			<arg name="a" type="SXNET *"/>
		</method>
		<method name="i2d_SXNETID" result="int" inline4="normal">
			<arg name="a" type="SXNETID *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_SXNETID" result="SXNETID *" inline4="normal">
			<arg name="a" type="SXNETID **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="SXNETID_new" result="SXNETID *" inline4="normal">
		</method>
		<method name="SXNETID_free" result="void" inline4="normal">
			<arg name="a" type="SXNETID *"/>
		</method>
		<method name="SXNET_add_id_asc" result="int" inline4="normal">
			<arg name="psx" type="SXNET **"/>
			<arg name="zone" type="char *"/>
			<arg name="user" type="char *"/>
			<arg name="userlen" type="int"/>
		</method>
		<method name="SXNET_add_id_ulong" result="int" inline4="normal">
			<arg name="psx" type="SXNET **"/>
			<arg name="lzone" type="unsigned long"/>
			<arg name="user" type="char *"/>
			<arg name="userlen" type="int"/>
		</method>
		<method name="SXNET_add_id_INTEGER" result="int" inline4="normal">
			<arg name="psx" type="SXNET **"/>
			<arg name="izone" type="ASN1_INTEGER *"/>
			<arg name="user" type="char *"/>
			<arg name="userlen" type="int"/>
		</method>
		<method name="SXNET_get_id_asc" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="sx" type="SXNET *"/>
			<arg name="zone" type="char *"/>
		</method>
		<method name="SXNET_get_id_ulong" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="sx" type="SXNET *"/>
			<arg name="lzone" type="unsigned long"/>
		</method>
		<method name="SXNET_get_id_INTEGER" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="sx" type="SXNET *"/>
			<arg name="zone" type="ASN1_INTEGER *"/>
		</method>
		<method name="i2d_AUTHORITY_KEYID" result="int" inline4="normal">
			<arg name="a" type="AUTHORITY_KEYID *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_AUTHORITY_KEYID" result="AUTHORITY_KEYID *" inline4="normal">
			<arg name="a" type="AUTHORITY_KEYID **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="AUTHORITY_KEYID_new" result="AUTHORITY_KEYID *" inline4="normal">
		</method>
		<method name="AUTHORITY_KEYID_free" result="void" inline4="normal">
			<arg name="a" type="AUTHORITY_KEYID *"/>
		</method>
		<method name="i2d_PKEY_USAGE_PERIOD" result="int" inline4="normal">
			<arg name="a" type="PKEY_USAGE_PERIOD *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_PKEY_USAGE_PERIOD" result="PKEY_USAGE_PERIOD *" inline4="normal">
			<arg name="a" type="PKEY_USAGE_PERIOD **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKEY_USAGE_PERIOD_new" result="PKEY_USAGE_PERIOD *" inline4="normal">
		</method>
		<method name="PKEY_USAGE_PERIOD_free" result="void" inline4="normal">
			<arg name="a" type="PKEY_USAGE_PERIOD *"/>
		</method>
		<method name="GENERAL_NAMES_new" result="STACK *" inline4="normal">
		</method>
		<method name="GENERAL_NAMES_free" result="void" inline4="normal">
			<arg name="a" type="STACK *"/>
		</method>
		<method name="d2i_GENERAL_NAMES" result="STACK *" inline4="normal">
			<arg name="a" type="STACK **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_GENERAL_NAMES" result="int" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="i2v_GENERAL_NAMES" result="STACK *" inline4="normal">
			<arg name="method" type="X509V3_EXT_METHOD *"/>
			<arg name="gen" type="STACK *"/>
			<arg name="extlist" type="STACK *"/>
		</method>
		<method name="v2i_GENERAL_NAMES" result="STACK *" inline4="normal">
			<arg name="method" type="X509V3_EXT_METHOD *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="nval" type="STACK *"/>
		</method>
		<method name="i2s_ASN1_OCTET_STRING" result="char *" inline4="normal">
			<arg name="method" type="X509V3_EXT_METHOD *"/>
			<arg name="ia5" type="ASN1_OCTET_STRING *"/>
		</method>
		<method name="s2i_ASN1_OCTET_STRING" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="method" type="X509V3_EXT_METHOD *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="i2d_ext_ku" result="int" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_ext_ku" result="STACK *" inline4="normal">
			<arg name="a" type="STACK **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="ext_ku_free" result="void" inline4="normal">
			<arg name="a" type="STACK *"/>
		</method>
		<method name="ext_ku_new" result="STACK *" inline4="normal">
		</method>
		<method name="i2d_CERTIFICATEPOLICIES" result="int" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="CERTIFICATEPOLICIES_new" result="STACK *" inline4="normal">
		</method>
		<method name="CERTIFICATEPOLICIES_free" result="void" inline4="normal">
			<arg name="a" type="STACK *"/>
		</method>
		<method name="d2i_CERTIFICATEPOLICIES" result="STACK *" inline4="normal">
			<arg name="a" type="STACK **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_POLICYINFO" result="int" inline4="normal">
			<arg name="a" type="POLICYINFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="POLICYINFO_new" result="POLICYINFO *" inline4="normal">
		</method>
		<method name="d2i_POLICYINFO" result="POLICYINFO *" inline4="normal">
			<arg name="a" type="POLICYINFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="POLICYINFO_free" result="void" inline4="normal">
			<arg name="a" type="POLICYINFO *"/>
		</method>
		<method name="i2d_POLICYQUALINFO" result="int" inline4="normal">
			<arg name="a" type="POLICYQUALINFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="POLICYQUALINFO_new" result="POLICYQUALINFO *" inline4="normal">
		</method>
		<method name="d2i_POLICYQUALINFO" result="POLICYQUALINFO *" inline4="normal">
			<arg name="a" type="POLICYQUALINFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="POLICYQUALINFO_free" result="void" inline4="normal">
			<arg name="a" type="POLICYQUALINFO *"/>
		</method>
		<method name="i2d_USERNOTICE" result="int" inline4="normal">
			<arg name="a" type="USERNOTICE *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="USERNOTICE_new" result="USERNOTICE *" inline4="normal">
		</method>
		<method name="d2i_USERNOTICE" result="USERNOTICE *" inline4="normal">
			<arg name="a" type="USERNOTICE **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="USERNOTICE_free" result="void" inline4="normal">
			<arg name="a" type="USERNOTICE *"/>
		</method>
		<method name="i2d_NOTICEREF" result="int" inline4="normal">
			<arg name="a" type="NOTICEREF *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="NOTICEREF_new" result="NOTICEREF *" inline4="normal">
		</method>
		<method name="d2i_NOTICEREF" result="NOTICEREF *" inline4="normal">
			<arg name="a" type="NOTICEREF **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="NOTICEREF_free" result="void" inline4="normal">
			<arg name="a" type="NOTICEREF *"/>
		</method>
		<method name="i2d_CRL_DIST_POINTS" result="int" inline4="normal">
			<arg name="a" type="STACK *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="CRL_DIST_POINTS_new" result="STACK *" inline4="normal">
		</method>
		<method name="CRL_DIST_POINTS_free" result="void" inline4="normal">
			<arg name="a" type="STACK *"/>
		</method>
		<method name="d2i_CRL_DIST_POINTS" result="STACK *" inline4="normal">
			<arg name="a" type="STACK **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_DIST_POINT" result="int" inline4="normal">
			<arg name="a" type="DIST_POINT *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="DIST_POINT_new" result="DIST_POINT *" inline4="normal">
		</method>
		<method name="d2i_DIST_POINT" result="DIST_POINT *" inline4="normal">
			<arg name="a" type="DIST_POINT **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="DIST_POINT_free" result="void" inline4="normal">
			<arg name="a" type="DIST_POINT *"/>
		</method>
		<method name="i2d_DIST_POINT_NAME" result="int" inline4="normal">
			<arg name="a" type="DIST_POINT_NAME *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="DIST_POINT_NAME_new" result="DIST_POINT_NAME *" inline4="normal">
		</method>
		<method name="DIST_POINT_NAME_free" result="void" inline4="normal">
			<arg name="a" type="DIST_POINT_NAME *"/>
		</method>
		<method name="d2i_DIST_POINT_NAME" result="DIST_POINT_NAME *" inline4="normal">
			<arg name="a" type="DIST_POINT_NAME **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="v2i_GENERAL_NAME" result="GENERAL_NAME *" inline4="normal">
			<arg name="method" type="X509V3_EXT_METHOD *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="cnf" type="CONF_VALUE *"/>
		</method>
		<method name="X509V3_conf_free" result="void" inline4="normal">
			<arg name="val" type="CONF_VALUE *"/>
		</method>
		<method name="X509V3_EXT_conf_nid" result="X509_EXTENSION *" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="ext_nid" type="int"/>
			<arg name="value" type="char *"/>
		</method>
		<method name="X509V3_EXT_conf" result="X509_EXTENSION *" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="name" type="char *"/>
			<arg name="value" type="char *"/>
		</method>
		<method name="X509V3_EXT_add_conf" result="int" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="section" type="char *"/>
			<arg name="cert" type="X509 *"/>
		</method>
		<method name="X509V3_EXT_CRL_add_conf" result="int" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="section" type="char *"/>
			<arg name="crl" type="X509_CRL *"/>
		</method>
		<method name="X509V3_add_value_bool_nf" result="int" inline4="normal">
			<arg name="name" type="char *"/>
			<arg name="asn1_bool" type="int"/>
			<arg name="extlist" type="STACK **"/>
		</method>
		<method name="X509V3_get_value_bool" result="int" inline4="normal">
			<arg name="value" type="CONF_VALUE *"/>
			<arg name="asn1_bool" type="int *"/>
		</method>
		<method name="X509V3_get_value_int" result="int" inline4="normal">
			<arg name="value" type="CONF_VALUE *"/>
			<arg name="aint" type="ASN1_INTEGER **"/>
		</method>
		<method name="X509V3_set_conf_lhash" result="void" inline4="normal">
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="lhash" type="LHASH *"/>
		</method>
		<method name="X509V3_get_string" result="char *" inline4="normal">
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="name" type="char *"/>
			<arg name="section" type="char *"/>
		</method>
		<method name="X509V3_get_section" result="STACK *" inline4="normal">
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="section" type="char *"/>
		</method>
		<method name="X509V3_string_free" result="void" inline4="normal">
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="str" type="char *"/>
		</method>
		<method name="X509V3_section_free" result="void" inline4="normal">
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="section" type="STACK *"/>
		</method>
		<method name="X509V3_set_ctx" result="void" inline4="normal">
			<arg name="ctx" type="X509V3_CTX *"/>
			<arg name="issuer" type="X509 *"/>
			<arg name="subject" type="X509 *"/>
			<arg name="req" type="X509_REQ *"/>
			<arg name="crl" type="X509_CRL *"/>
			<arg name="flags" type="int"/>
		</method>
		<method name="X509V3_add_value" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="value" type="const char *"/>
			<arg name="extlist" type="STACK **"/>
		</method>
		<method name="X509V3_add_value_uchar" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="value" type="const unsigned char *"/>
			<arg name="extlist" type="STACK **"/>
		</method>
		<method name="X509V3_add_value_bool" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="asn1_bool" type="int"/>
			<arg name="extlist" type="STACK **"/>
		</method>
		<method name="X509V3_add_value_int" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="aint" type="ASN1_INTEGER *"/>
			<arg name="extlist" type="STACK **"/>
		</method>
		<method name="i2s_ASN1_INTEGER" result="char *" inline4="normal">
			<arg name="meth" type="X509V3_EXT_METHOD *"/>
			<arg name="aint" type="ASN1_INTEGER *"/>
		</method>
		<method name="s2i_ASN1_INTEGER" result="ASN1_INTEGER *" inline4="normal">
			<arg name="meth" type="X509V3_EXT_METHOD *"/>
			<arg name="value" type="char *"/>
		</method>
		<method name="i2s_ASN1_ENUMERATED" result="char *" inline4="normal">
			<arg name="meth" type="X509V3_EXT_METHOD *"/>
			<arg name="aint" type="ASN1_ENUMERATED *"/>
		</method>
		<method name="i2s_ASN1_ENUMERATED_TABLE" result="char *" inline4="normal">
			<arg name="meth" type="X509V3_EXT_METHOD *"/>
			<arg name="aint" type="ASN1_ENUMERATED *"/>
		</method>
		<method name="X509V3_EXT_add" result="int" inline4="normal">
			<arg name="ext" type="X509V3_EXT_METHOD *"/>
		</method>
		<method name="X509V3_EXT_add_list" result="int" inline4="normal">
			<arg name="extlist" type="X509V3_EXT_METHOD *"/>
		</method>
		<method name="X509V3_EXT_add_alias" result="int" inline4="normal">
			<arg name="nid_to" type="int"/>
			<arg name="nid_from" type="int"/>
		</method>
		<method name="X509V3_EXT_cleanup" result="void" inline4="normal">
		</method>
		<method name="X509V3_EXT_get" result="X509V3_EXT_METHOD *" inline4="normal">
			<arg name="ext" type="X509_EXTENSION *"/>
		</method>
		<method name="X509V3_EXT_get_nid" result="X509V3_EXT_METHOD *" inline4="normal">
			<arg name="nid" type="int"/>
		</method>
		<method name="X509V3_add_standard_extensions" result="int" inline4="normal">
		</method>
		<method name="X509V3_parse_list" result="STACK *" inline4="normal">
			<arg name="line" type="char *"/>
		</method>
		<method name="X509V3_EXT_d2i" result="void *" inline4="normal">
			<arg name="ext" type="X509_EXTENSION *"/>
		</method>
		<method name="X509V3_EXT_i2d" result="X509_EXTENSION *" inline4="normal">
			<arg name="ext_nid" type="int"/>
			<arg name="crit" type="int"/>
			<arg name="ext_struc" type="void *"/>
		</method>
		<method name="hex_to_string" result="char *" inline4="normal">
			<arg name="buffer" type="unsigned char *"/>
			<arg name="len" type="long"/>
		</method>
		<method name="string_to_hex" result="unsigned char *" inline4="normal">
			<arg name="str" type="char *"/>
			<arg name="len" type="long *"/>
		</method>
		<method name="name_cmp" result="int" inline4="normal">
			<arg name="name" type="const char *"/>
			<arg name="cmp" type="const char *"/>
		</method>
		<method name="X509V3_EXT_val_prn" result="void" inline4="normal">
			<arg name="out" type="BIO *"/>
			<arg name="val" type="STACK *"/>
			<arg name="indent" type="int"/>
			<arg name="ml" type="int"/>
		</method>
		<method name="X509V3_EXT_print" result="int" inline4="normal">
			<arg name="out" type="BIO *"/>
			<arg name="ext" type="X509_EXTENSION *"/>
			<arg name="flag" type="int"/>
			<arg name="indent" type="int"/>
		</method>
		<method name="X509_verify" result="int" inline4="normal">
			<arg name="a" type="X509 *"/>
			<arg name="r" type="EVP_PKEY *"/>
		</method>
		<method name="X509_verify_cert_error_string" result="const char *" inline4="normal">
			<arg name="n" type="long"/>
		</method>
		<method name="X509_REQ_verify" result="int" inline4="normal">
			<arg name="a" type="X509_REQ *"/>
			<arg name="r" type="EVP_PKEY *"/>
		</method>
		<method name="X509_CRL_verify" result="int" inline4="normal">
			<arg name="a" type="X509_CRL *"/>
			<arg name="r" type="EVP_PKEY *"/>
		</method>
		<method name="NETSCAPE_SPKI_verify" result="int" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKI *"/>
			<arg name="r" type="EVP_PKEY *"/>
		</method>
		<method name="X509_sign" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="md" type="const EVP_MD *"/>
		</method>
		<method name="X509_REQ_sign" result="int" inline4="normal">
			<arg name="x" type="X509_REQ *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="md" type="const EVP_MD *"/>
		</method>
		<method name="X509_CRL_sign" result="int" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="md" type="const EVP_MD *"/>
		</method>
		<method name="NETSCAPE_SPKI_sign" result="int" inline4="normal">
			<arg name="x" type="NETSCAPE_SPKI *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="md" type="const EVP_MD *"/>
		</method>
		<method name="X509_digest" result="int" inline4="normal">
			<arg name="data" type="X509 *"/>
			<arg name="type" type="EVP_MD *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="len" type="unsigned int *"/>
		</method>
		<method name="X509_NAME_digest" result="int" inline4="normal">
			<arg name="data" type="X509_NAME *"/>
			<arg name="type" type="EVP_MD *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="len" type="unsigned int *"/>
		</method>
		<method name="d2i_X509_bio" result="X509 *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x509" type="X509 **"/>
		</method>
		<method name="i2d_X509_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x509" type="X509 *"/>
		</method>
		<method name="d2i_X509_CRL_bio" result="X509_CRL *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="crl" type="X509_CRL **"/>
		</method>
		<method name="i2d_X509_CRL_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="crl" type="X509_CRL *"/>
		</method>
		<method name="d2i_X509_REQ_bio" result="X509_REQ *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="req" type="X509_REQ **"/>
		</method>
		<method name="i2d_X509_REQ_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="req" type="X509_REQ *"/>
		</method>
		<method name="d2i_RSAPrivateKey_bio" result="RSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="rsa" type="RSA **"/>
		</method>
		<method name="i2d_RSAPrivateKey_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="d2i_RSAPublicKey_bio" result="RSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="rsa" type="RSA **"/>
		</method>
		<method name="i2d_RSAPublicKey_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="d2i_DSAPrivateKey_bio" result="DSA *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="dsa" type="DSA **"/>
		</method>
		<method name="i2d_DSAPrivateKey_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="dsa" type="DSA *"/>
		</method>
		<method name="X509_dup" result="X509 *" inline4="normal">
			<arg name="x509" type="X509 *"/>
		</method>
		<method name="X509_ATTRIBUTE_dup" result="X509_ATTRIBUTE *" inline4="normal">
			<arg name="xa" type="X509_ATTRIBUTE *"/>
		</method>
		<method name="X509_EXTENSION_dup" result="X509_EXTENSION *" inline4="normal">
			<arg name="ex" type="X509_EXTENSION *"/>
		</method>
		<method name="X509_CRL_dup" result="X509_CRL *" inline4="normal">
			<arg name="crl" type="X509_CRL *"/>
		</method>
		<method name="X509_REQ_dup" result="X509_REQ *" inline4="normal">
			<arg name="req" type="X509_REQ *"/>
		</method>
		<method name="X509_ALGOR_dup" result="X509_ALGOR *" inline4="normal">
			<arg name="xn" type="X509_ALGOR *"/>
		</method>
		<method name="X509_NAME_dup" result="X509_NAME *" inline4="normal">
			<arg name="xn" type="X509_NAME *"/>
		</method>
		<method name="X509_NAME_ENTRY_dup" result="X509_NAME_ENTRY *" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY *"/>
		</method>
		<method name="RSAPublicKey_dup" result="RSA *" inline4="normal">
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSAPrivateKey_dup" result="RSA *" inline4="normal">
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="X509_cmp_current_time" result="int" inline4="normal">
			<arg name="s" type="ASN1_UTCTIME *"/>
		</method>
		<method name="X509_gmtime_adj" result="ASN1_UTCTIME *" inline4="normal">
			<arg name="s" type="ASN1_UTCTIME *"/>
			<arg name="adj" type="long"/>
		</method>
		<method name="X509_get_default_cert_area" result="const char *" inline4="normal">
		</method>
		<method name="X509_get_default_cert_dir" result="const char *" inline4="normal">
		</method>
		<method name="X509_get_default_cert_file" result="const char *" inline4="normal">
		</method>
		<method name="X509_get_default_cert_dir_env" result="const char *" inline4="normal">
		</method>
		<method name="X509_get_default_cert_file_env" result="const char *" inline4="normal">
		</method>
		<method name="X509_get_default_private_dir" result="const char *" inline4="normal">
		</method>
		<method name="X509_to_X509_REQ" result="X509_REQ *" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="md" type="EVP_MD *"/>
		</method>
		<method name="X509_REQ_to_X509" result="X509 *" inline4="normal">
			<arg name="r" type="X509_REQ *"/>
			<arg name="days" type="int"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="ERR_load_X509_strings" result="void" inline4="normal">
		</method>
		<method name="X509_ALGOR_new" result="X509_ALGOR *" inline4="normal">
		</method>
		<method name="X509_ALGOR_free" result="void" inline4="normal">
			<arg name="a" type="X509_ALGOR *"/>
		</method>
		<method name="i2d_X509_ALGOR" result="int" inline4="normal">
			<arg name="a" type="X509_ALGOR *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_ALGOR" result="X509_ALGOR *" inline4="normal">
			<arg name="a" type="X509_ALGOR **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_VAL_new" result="X509_VAL *" inline4="normal">
		</method>
		<method name="X509_VAL_free" result="void" inline4="normal">
			<arg name="a" type="X509_VAL *"/>
		</method>
		<method name="i2d_X509_VAL" result="int" inline4="normal">
			<arg name="a" type="X509_VAL *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_VAL" result="X509_VAL *" inline4="normal">
			<arg name="a" type="X509_VAL **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_PUBKEY_new" result="X509_PUBKEY *" inline4="normal">
		</method>
		<method name="X509_PUBKEY_free" result="void" inline4="normal">
			<arg name="a" type="X509_PUBKEY *"/>
		</method>
		<method name="i2d_X509_PUBKEY" result="int" inline4="normal">
			<arg name="a" type="X509_PUBKEY *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_PUBKEY" result="X509_PUBKEY *" inline4="normal">
			<arg name="a" type="X509_PUBKEY **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_PUBKEY_set" result="int" inline4="normal">
			<arg name="x" type="X509_PUBKEY **"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="X509_PUBKEY_get" result="EVP_PKEY *" inline4="normal">
			<arg name="key" type="X509_PUBKEY *"/>
		</method>
		<method name="X509_get_pubkey_parameters" result="int" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="chain" type="STACK *"/>
		</method>
		<method name="X509_SIG_new" result="X509_SIG *" inline4="normal">
		</method>
		<method name="X509_SIG_free" result="void" inline4="normal">
			<arg name="a" type="X509_SIG *"/>
		</method>
		<method name="i2d_X509_SIG" result="int" inline4="normal">
			<arg name="a" type="X509_SIG *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_SIG" result="X509_SIG *" inline4="normal">
			<arg name="a" type="X509_SIG **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_REQ_INFO_new" result="X509_REQ_INFO *" inline4="normal">
		</method>
		<method name="X509_REQ_INFO_free" result="void" inline4="normal">
			<arg name="a" type="X509_REQ_INFO *"/>
		</method>
		<method name="i2d_X509_REQ_INFO" result="int" inline4="normal">
			<arg name="a" type="X509_REQ_INFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_REQ_INFO" result="X509_REQ_INFO *" inline4="normal">
			<arg name="a" type="X509_REQ_INFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_REQ_new" result="X509_REQ *" inline4="normal">
		</method>
		<method name="X509_REQ_free" result="void" inline4="normal">
			<arg name="a" type="X509_REQ *"/>
		</method>
		<method name="i2d_X509_REQ" result="int" inline4="normal">
			<arg name="a" type="X509_REQ *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_REQ" result="X509_REQ *" inline4="normal">
			<arg name="a" type="X509_REQ **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_ATTRIBUTE_new" result="X509_ATTRIBUTE *" inline4="normal">
		</method>
		<method name="X509_ATTRIBUTE_free" result="void" inline4="normal">
			<arg name="a" type="X509_ATTRIBUTE *"/>
		</method>
		<method name="i2d_X509_ATTRIBUTE" result="int" inline4="normal">
			<arg name="a" type="X509_ATTRIBUTE *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_ATTRIBUTE" result="X509_ATTRIBUTE *" inline4="normal">
			<arg name="a" type="X509_ATTRIBUTE **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_ATTRIBUTE_create" result="X509_ATTRIBUTE *" inline4="normal">
			<arg name="nid" type="int"/>
			<arg name="atrtype" type="int"/>
			<arg name="value" type="void *"/>
		</method>
		<method name="X509_EXTENSION_new" result="X509_EXTENSION *" inline4="normal">
		</method>
		<method name="X509_EXTENSION_free" result="void" inline4="normal">
			<arg name="a" type="X509_EXTENSION *"/>
		</method>
		<method name="i2d_X509_EXTENSION" result="int" inline4="normal">
			<arg name="a" type="X509_EXTENSION *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_EXTENSION" result="X509_EXTENSION *" inline4="normal">
			<arg name="a" type="X509_EXTENSION **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_NAME_ENTRY_new" result="X509_NAME_ENTRY *" inline4="normal">
		</method>
		<method name="X509_NAME_ENTRY_free" result="void" inline4="normal">
			<arg name="a" type="X509_NAME_ENTRY *"/>
		</method>
		<method name="i2d_X509_NAME_ENTRY" result="int" inline4="normal">
			<arg name="a" type="X509_NAME_ENTRY *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_NAME_ENTRY" result="X509_NAME_ENTRY *" inline4="normal">
			<arg name="a" type="X509_NAME_ENTRY **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_NAME_new" result="X509_NAME *" inline4="normal">
		</method>
		<method name="X509_NAME_free" result="void" inline4="normal">
			<arg name="a" type="X509_NAME *"/>
		</method>
		<method name="i2d_X509_NAME" result="int" inline4="normal">
			<arg name="a" type="X509_NAME *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_NAME" result="X509_NAME *" inline4="normal">
			<arg name="a" type="X509_NAME **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_NAME_set" result="int" inline4="normal">
			<arg name="xn" type="X509_NAME **"/>
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="X509_CINF_new" result="X509_CINF *" inline4="normal">
		</method>
		<method name="X509_CINF_free" result="void" inline4="normal">
			<arg name="a" type="X509_CINF *"/>
		</method>
		<method name="i2d_X509_CINF" result="int" inline4="normal">
			<arg name="a" type="X509_CINF *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_CINF" result="X509_CINF *" inline4="normal">
			<arg name="a" type="X509_CINF **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_new" result="X509 *" inline4="normal">
		</method>
		<method name="X509_free" result="void" inline4="normal">
			<arg name="a" type="X509 *"/>
		</method>
		<method name="i2d_X509" result="int" inline4="normal">
			<arg name="a" type="X509 *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509" result="X509 *" inline4="normal">
			<arg name="a" type="X509 **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_REVOKED_new" result="X509_REVOKED *" inline4="normal">
		</method>
		<method name="X509_REVOKED_free" result="void" inline4="normal">
			<arg name="a" type="X509_REVOKED *"/>
		</method>
		<method name="i2d_X509_REVOKED" result="int" inline4="normal">
			<arg name="a" type="X509_REVOKED *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_REVOKED" result="X509_REVOKED *" inline4="normal">
			<arg name="a" type="X509_REVOKED **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_CRL_INFO_new" result="X509_CRL_INFO *" inline4="normal">
		</method>
		<method name="X509_CRL_INFO_free" result="void" inline4="normal">
			<arg name="a" type="X509_CRL_INFO *"/>
		</method>
		<method name="i2d_X509_CRL_INFO" result="int" inline4="normal">
			<arg name="a" type="X509_CRL_INFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_CRL_INFO" result="X509_CRL_INFO *" inline4="normal">
			<arg name="a" type="X509_CRL_INFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_CRL_new" result="X509_CRL *" inline4="normal">
		</method>
		<method name="X509_CRL_free" result="void" inline4="normal">
			<arg name="a" type="X509_CRL *"/>
		</method>
		<method name="i2d_X509_CRL" result="int" inline4="normal">
			<arg name="a" type="X509_CRL *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_CRL" result="X509_CRL *" inline4="normal">
			<arg name="a" type="X509_CRL **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="X509_PKEY_new" result="X509_PKEY *" inline4="normal">
		</method>
		<method name="X509_PKEY_free" result="void" inline4="normal">
			<arg name="a" type="X509_PKEY *"/>
		</method>
		<method name="i2d_X509_PKEY" result="int" inline4="normal">
			<arg name="a" type="X509_PKEY *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_X509_PKEY" result="X509_PKEY *" inline4="normal">
			<arg name="a" type="X509_PKEY **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="NETSCAPE_SPKI_new" result="NETSCAPE_SPKI *" inline4="normal">
		</method>
		<method name="NETSCAPE_SPKI_free" result="void" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKI *"/>
		</method>
		<method name="i2d_NETSCAPE_SPKI" result="int" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKI *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_NETSCAPE_SPKI" result="NETSCAPE_SPKI *" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKI **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="NETSCAPE_SPKAC_new" result="NETSCAPE_SPKAC *" inline4="normal">
		</method>
		<method name="NETSCAPE_SPKAC_free" result="void" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKAC *"/>
		</method>
		<method name="i2d_NETSCAPE_SPKAC" result="int" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKAC *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="d2i_NETSCAPE_SPKAC" result="NETSCAPE_SPKAC *" inline4="normal">
			<arg name="a" type="NETSCAPE_SPKAC **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="i2d_NETSCAPE_CERT_SEQUENCE" result="int" inline4="normal">
			<arg name="a" type="NETSCAPE_CERT_SEQUENCE *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="NETSCAPE_CERT_SEQUENCE_new" result="NETSCAPE_CERT_SEQUENCE *" inline4="normal">
		</method>
		<method name="d2i_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *" inline4="normal">
			<arg name="a" type="NETSCAPE_CERT_SEQUENCE **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="NETSCAPE_CERT_SEQUENCE_free" result="void" inline4="normal">
			<arg name="a" type="NETSCAPE_CERT_SEQUENCE *"/>
		</method>
		<method name="X509_INFO_new" result="X509_INFO *" inline4="normal">
		</method>
		<method name="X509_INFO_free" result="void" inline4="normal">
			<arg name="a" type="X509_INFO *"/>
		</method>
		<method name="X509_NAME_oneline" result="char *" inline4="normal">
			<arg name="a" type="X509_NAME *"/>
			<arg name="buf" type="char *"/>
			<arg name="size" type="int"/>
		</method>
		<method name="ASN1_verify" result="int" inline4="normal">
			<arg name="i2d() " type="int"/>
			<arg name="algor1" type="X509_ALGOR *"/>
			<arg name="signature" type="ASN1_BIT_STRING *"/>
			<arg name="data" type="char *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="ASN1_digest" result="int" inline4="normal">
			<arg name="i2d() " type="int"/>
			<arg name="type" type="EVP_MD *"/>
			<arg name="data" type="char *"/>
			<arg name="md" type="unsigned char *"/>
			<arg name="len" type="unsigned int *"/>
		</method>
		<method name="ASN1_sign" result="int" inline4="normal">
			<arg name="i2d() " type="int"/>
			<arg name="algor1" type="X509_ALGOR *"/>
			<arg name="algor2" type="X509_ALGOR *"/>
			<arg name="signature" type="ASN1_BIT_STRING *"/>
			<arg name="data" type="char *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
			<arg name="type" type="const EVP_MD *"/>
		</method>
		<method name="X509_set_version" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="version" type="long"/>
		</method>
		<method name="X509_set_serialNumber" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="serial" type="ASN1_INTEGER *"/>
		</method>
		<method name="X509_get_serialNumber" result="ASN1_INTEGER *" inline4="normal">
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_set_issuer_name" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="X509_get_issuer_name" result="X509_NAME *" inline4="normal">
			<arg name="a" type="X509 *"/>
		</method>
		<method name="X509_set_subject_name" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="X509_get_subject_name" result="X509_NAME *" inline4="normal">
			<arg name="a" type="X509 *"/>
		</method>
		<method name="X509_set_notBefore" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="tm" type="ASN1_UTCTIME *"/>
		</method>
		<method name="X509_set_notAfter" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="tm" type="ASN1_UTCTIME *"/>
		</method>
		<method name="X509_set_pubkey" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="X509_get_pubkey" result="EVP_PKEY *" inline4="normal">
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_certificate_type" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="pubkey" type="EVP_PKEY *"/>
		</method>
		<method name="X509_REQ_set_version" result="int" inline4="normal">
			<arg name="x" type="X509_REQ *"/>
			<arg name="version" type="long"/>
		</method>
		<method name="X509_REQ_set_subject_name" result="int" inline4="normal">
			<arg name="req" type="X509_REQ *"/>
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="X509_REQ_set_pubkey" result="int" inline4="normal">
			<arg name="x" type="X509_REQ *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="X509_REQ_get_pubkey" result="EVP_PKEY *" inline4="normal">
			<arg name="req" type="X509_REQ *"/>
		</method>
		<method name="X509_check_private_key" result="int" inline4="normal">
			<arg name="x509" type="X509 *"/>
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="X509_issuer_and_serial_cmp" result="int" inline4="normal">
			<arg name="a" type="X509 *"/>
			<arg name="b" type="X509 *"/>
		</method>
		<method name="X509_issuer_and_serial_hash" result="unsigned long" inline4="normal">
			<arg name="a" type="X509 *"/>
		</method>
		<method name="X509_issuer_name_cmp" result="int" inline4="normal">
			<arg name="a" type="X509 *"/>
			<arg name="b" type="X509 *"/>
		</method>
		<method name="X509_issuer_name_hash" result="unsigned long" inline4="normal">
			<arg name="a" type="X509 *"/>
		</method>
		<method name="X509_subject_name_cmp" result="int" inline4="normal">
			<arg name="a" type="X509 *"/>
			<arg name="b" type="X509 *"/>
		</method>
		<method name="X509_subject_name_hash" result="unsigned long" inline4="normal">
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_NAME_cmp" result="int" inline4="normal">
			<arg name="a" type="X509_NAME *"/>
			<arg name="b" type="X509_NAME *"/>
		</method>
		<method name="X509_NAME_hash" result="unsigned long" inline4="normal">
			<arg name="x" type="X509_NAME *"/>
		</method>
		<method name="X509_CRL_cmp" result="int" inline4="normal">
			<arg name="a" type="X509_CRL *"/>
			<arg name="b" type="X509_CRL *"/>
		</method>
		<method name="X509_NAME_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="name" type="X509_NAME *"/>
			<arg name="obase" type="int"/>
		</method>
		<method name="X509_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_CRL_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_CRL *"/>
		</method>
		<method name="X509_REQ_print" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="req" type="X509_REQ *"/>
		</method>
		<method name="X509_NAME_entry_count" result="int" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="X509_NAME_get_text_by_NID" result="int" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="nid" type="int"/>
			<arg name="buf" type="char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="X509_NAME_get_text_by_OBJ" result="int" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="buf" type="char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="X509_NAME_get_index_by_NID" result="int" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="nid" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_NAME_get_index_by_OBJ" result="int" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_NAME_get_entry" result="X509_NAME_ENTRY *" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_NAME_delete_entry" result="X509_NAME_ENTRY *" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_NAME_add_entry" result="int" inline4="normal">
			<arg name="name" type="X509_NAME *"/>
			<arg name="ne" type="X509_NAME_ENTRY *"/>
			<arg name="loc" type="int"/>
			<arg name="set" type="int"/>
		</method>
		<method name="X509_NAME_ENTRY_create_by_NID" result="X509_NAME_ENTRY *" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY **"/>
			<arg name="nid" type="int"/>
			<arg name="type" type="int"/>
			<arg name="bytes" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="X509_NAME_ENTRY_create_by_OBJ" result="X509_NAME_ENTRY *" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY **"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="type" type="int"/>
			<arg name="bytes" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="X509_NAME_ENTRY_set_object" result="int" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
		</method>
		<method name="X509_NAME_ENTRY_set_data" result="int" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY *"/>
			<arg name="type" type="int"/>
			<arg name="bytes" type="unsigned char *"/>
			<arg name="len" type="int"/>
		</method>
		<method name="X509_NAME_ENTRY_get_object" result="ASN1_OBJECT *" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY *"/>
		</method>
		<method name="X509_NAME_ENTRY_get_data" result="ASN1_STRING *" inline4="normal">
			<arg name="ne" type="X509_NAME_ENTRY *"/>
		</method>
		<method name="X509v3_get_ext_count" result="int" inline4="normal">
			<arg name="x" type="const STACK *"/>
		</method>
		<method name="X509v3_get_ext_by_NID" result="int" inline4="normal">
			<arg name="x" type="const STACK *"/>
			<arg name="nid" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509v3_get_ext_by_OBJ" result="int" inline4="normal">
			<arg name="x" type="const STACK *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509v3_get_ext_by_critical" result="int" inline4="normal">
			<arg name="x" type="const STACK *"/>
			<arg name="crit" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509v3_get_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="const STACK *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509v3_delete_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="STACK *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509v3_add_ext" result="STACK *" inline4="normal">
			<arg name="x" type="STACK **"/>
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_get_ext_count" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_get_ext_by_NID" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="nid" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_get_ext_by_OBJ" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_get_ext_by_critical" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="crit" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_get_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_delete_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_add_ext" result="int" inline4="normal">
			<arg name="x" type="X509 *"/>
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_CRL_get_ext_count" result="int" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
		</method>
		<method name="X509_CRL_get_ext_by_NID" result="int" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="nid" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_CRL_get_ext_by_OBJ" result="int" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_CRL_get_ext_by_critical" result="int" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="crit" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_CRL_get_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_CRL_delete_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_CRL_add_ext" result="int" inline4="normal">
			<arg name="x" type="X509_CRL *"/>
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_REVOKED_get_ext_count" result="int" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
		</method>
		<method name="X509_REVOKED_get_ext_by_NID" result="int" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
			<arg name="nid" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_REVOKED_get_ext_by_OBJ" result="int" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_REVOKED_get_ext_by_critical" result="int" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
			<arg name="crit" type="int"/>
			<arg name="lastpos" type="int"/>
		</method>
		<method name="X509_REVOKED_get_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_REVOKED_delete_ext" result="X509_EXTENSION *" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_REVOKED_add_ext" result="int" inline4="normal">
			<arg name="x" type="X509_REVOKED *"/>
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="loc" type="int"/>
		</method>
		<method name="X509_EXTENSION_create_by_NID" result="X509_EXTENSION *" inline4="normal">
			<arg name="ex" type="X509_EXTENSION **"/>
			<arg name="nid" type="int"/>
			<arg name="crit" type="int"/>
			<arg name="data" type="ASN1_OCTET_STRING *"/>
		</method>
		<method name="X509_EXTENSION_create_by_OBJ" result="X509_EXTENSION *" inline4="normal">
			<arg name="ex" type="X509_EXTENSION **"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
			<arg name="crit" type="int"/>
			<arg name="data" type="ASN1_OCTET_STRING *"/>
		</method>
		<method name="X509_EXTENSION_set_object" result="int" inline4="normal">
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="obj" type="ASN1_OBJECT *"/>
		</method>
		<method name="X509_EXTENSION_set_critical" result="int" inline4="normal">
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="crit" type="int"/>
		</method>
		<method name="X509_EXTENSION_set_data" result="int" inline4="normal">
			<arg name="ex" type="X509_EXTENSION *"/>
			<arg name="data" type="ASN1_OCTET_STRING *"/>
		</method>
		<method name="X509_EXTENSION_get_object" result="ASN1_OBJECT *" inline4="normal">
			<arg name="ex" type="X509_EXTENSION *"/>
		</method>
		<method name="X509_EXTENSION_get_data" result="ASN1_OCTET_STRING *" inline4="normal">
			<arg name="ne" type="X509_EXTENSION *"/>
		</method>
		<method name="X509_EXTENSION_get_critical" result="int" inline4="normal">
			<arg name="ex" type="X509_EXTENSION *"/>
		</method>
		<method name="X509_verify_cert" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
		</method>
		<method name="X509_find_by_issuer_and_serial" result="X509 *" inline4="normal">
			<arg name="sk" type="STACK *"/>
			<arg name="name" type="X509_NAME *"/>
			<arg name="serial" type="ASN1_INTEGER *"/>
		</method>
		<method name="X509_find_by_subject" result="X509 *" inline4="normal">
			<arg name="sk" type="STACK *"/>
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="i2d_PBEPARAM" result="int" inline4="normal">
			<arg name="a" type="PBEPARAM *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PBEPARAM_new" result="PBEPARAM *" inline4="normal">
		</method>
		<method name="d2i_PBEPARAM" result="PBEPARAM *" inline4="normal">
			<arg name="a" type="PBEPARAM **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PBEPARAM_free" result="void" inline4="normal">
			<arg name="a" type="PBEPARAM *"/>
		</method>
		<method name="PKCS5_pbe_set" result="X509_ALGOR *" inline4="normal">
			<arg name="alg" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
		</method>
		<method name="i2d_PBKDF2PARAM" result="int" inline4="normal">
			<arg name="a" type="PBKDF2PARAM *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PBKDF2PARAM_new" result="PBKDF2PARAM *" inline4="normal">
		</method>
		<method name="d2i_PBKDF2PARAM" result="PBKDF2PARAM *" inline4="normal">
			<arg name="a" type="PBKDF2PARAM **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PBKDF2PARAM_free" result="void" inline4="normal">
			<arg name="a" type="PBKDF2PARAM *"/>
		</method>
		<method name="i2d_PBE2PARAM" result="int" inline4="normal">
			<arg name="a" type="PBE2PARAM *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PBE2PARAM_new" result="PBE2PARAM *" inline4="normal">
		</method>
		<method name="d2i_PBE2PARAM" result="PBE2PARAM *" inline4="normal">
			<arg name="a" type="PBE2PARAM **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PBE2PARAM_free" result="void" inline4="normal">
			<arg name="a" type="PBE2PARAM *"/>
		</method>
		<method name="i2d_PKCS8_PRIV_KEY_INFO" result="int" inline4="normal">
			<arg name="a" type="PKCS8_PRIV_KEY_INFO *"/>
			<arg name="pp" type="unsigned char **"/>
		</method>
		<method name="PKCS8_PRIV_KEY_INFO_new" result="PKCS8_PRIV_KEY_INFO *" inline4="normal">
		</method>
		<method name="d2i_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *" inline4="normal">
			<arg name="a" type="PKCS8_PRIV_KEY_INFO **"/>
			<arg name="pp" type="unsigned char **"/>
			<arg name="length" type="long"/>
		</method>
		<method name="PKCS8_PRIV_KEY_INFO_free" result="void" inline4="normal">
			<arg name="a" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="EVP_PKCS82PKEY" result="EVP_PKEY *" inline4="normal">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="EVP_PKEY2PKCS8" result="PKCS8_PRIV_KEY_INFO *" inline4="normal">
			<arg name="pkey" type="EVP_PKEY *"/>
		</method>
		<method name="PKCS8_set_broken" result="PKCS8_PRIV_KEY_INFO *" inline4="normal">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *"/>
			<arg name="broken" type="int"/>
		</method>
		<method name="X509_OBJECT_retrieve_by_subject" result="X509_OBJECT *" inline4="normal">
			<arg name="h" type="LHASH *"/>
			<arg name="type" type="int"/>
			<arg name="name" type="X509_NAME *"/>
		</method>
		<method name="X509_OBJECT_up_ref_count" result="void" inline4="normal">
			<arg name="a" type="X509_OBJECT *"/>
		</method>
		<method name="X509_OBJECT_free_contents" result="void" inline4="normal">
			<arg name="a" type="X509_OBJECT *"/>
		</method>
		<method name="X509_STORE_new" result="X509_STORE *" inline4="normal">
		</method>
		<method name="X509_STORE_free" result="void" inline4="normal">
			<arg name="v" type="X509_STORE *"/>
		</method>
		<method name="X509_STORE_CTX_init" result="void" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
			<arg name="store" type="X509_STORE *"/>
			<arg name="x509" type="X509 *"/>
			<arg name="chain" type="STACK *"/>
		</method>
		<method name="X509_STORE_CTX_cleanup" result="void" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
		</method>
		<method name="X509_STORE_add_lookup" result="X509_LOOKUP *" inline4="normal">
			<arg name="v" type="X509_STORE *"/>
			<arg name="m" type="X509_LOOKUP_METHOD *"/>
		</method>
		<method name="X509_LOOKUP_hash_dir" result="X509_LOOKUP_METHOD *" inline4="normal">
		</method>
		<method name="X509_LOOKUP_file" result="X509_LOOKUP_METHOD *" inline4="normal">
		</method>
		<method name="X509_STORE_add_cert" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_STORE_add_crl" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE *"/>
			<arg name="x" type="X509_CRL *"/>
		</method>
		<method name="X509_STORE_get_by_subject" result="int" inline4="normal">
			<arg name="vs" type="X509_STORE_CTX *"/>
			<arg name="type" type="int"/>
			<arg name="name" type="X509_NAME *"/>
			<arg name="ret" type="X509_OBJECT *"/>
		</method>
		<method name="X509_LOOKUP_ctrl" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="cmd" type="int"/>
			<arg name="argc" type="const char *"/>
			<arg name="argl" type="long"/>
			<arg name="ret" type="char **"/>
		</method>
		<method name="X509_load_cert_file" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="X509_load_crl_file" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="file" type="const char *"/>
			<arg name="type" type="int"/>
		</method>
		<method name="X509_LOOKUP_new" result="X509_LOOKUP *" inline4="normal">
			<arg name="method" type="X509_LOOKUP_METHOD *"/>
		</method>
		<method name="X509_LOOKUP_free" result="void" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
		</method>
		<method name="X509_LOOKUP_init" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
		</method>
		<method name="X509_LOOKUP_by_subject" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="type" type="int"/>
			<arg name="name" type="X509_NAME *"/>
			<arg name="ret" type="X509_OBJECT *"/>
		</method>
		<method name="X509_LOOKUP_by_issuer_serial" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="type" type="int"/>
			<arg name="name" type="X509_NAME *"/>
			<arg name="serial" type="ASN1_INTEGER *"/>
			<arg name="ret" type="X509_OBJECT *"/>
		</method>
		<method name="X509_LOOKUP_by_fingerprint" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="type" type="int"/>
			<arg name="bytes" type="unsigned char *"/>
			<arg name="len" type="int"/>
			<arg name="ret" type="X509_OBJECT *"/>
		</method>
		<method name="X509_LOOKUP_by_alias" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
			<arg name="type" type="int"/>
			<arg name="str" type="char *"/>
			<arg name="len" type="int"/>
			<arg name="ret" type="X509_OBJECT *"/>
		</method>
		<method name="X509_LOOKUP_shutdown" result="int" inline4="normal">
			<arg name="ctx" type="X509_LOOKUP *"/>
		</method>
		<method name="X509_STORE_load_locations" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE *"/>
			<arg name="file" type="const char *"/>
			<arg name="dir" type="const char *"/>
		</method>
		<method name="X509_STORE_set_default_paths" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE *"/>
		</method>
		<method name="X509_STORE_CTX_get_ex_new_index" result="int" inline4="normal">
			<arg name="argl" type="long"/>
			<arg name="argp" type="char *"/>
			<arg name="new_func() " type="int"/>
			<arg name="dup_func() " type="int"/>
			<arg name="free_func() " type="void"/>
		</method>
		<method name="X509_STORE_CTX_set_ex_data" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
			<arg name="idx" type="int"/>
			<arg name="data" type="void *"/>
		</method>
		<method name="X509_STORE_CTX_get_ex_data" result="void *" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
			<arg name="idx" type="int"/>
		</method>
		<method name="X509_STORE_CTX_get_error" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
		</method>
		<method name="X509_STORE_CTX_set_error" result="void" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
			<arg name="s" type="int"/>
		</method>
		<method name="X509_STORE_CTX_get_error_depth" result="int" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
		</method>
		<method name="X509_STORE_CTX_get_current_cert" result="X509 *" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
		</method>
		<method name="X509_STORE_CTX_get_chain" result="STACK *" inline4="normal">
			<arg name="ctx" type="X509_STORE_CTX *"/>
		</method>
		<method name="X509_STORE_CTX_set_cert" result="void" inline4="normal">
			<arg name="c" type="X509_STORE_CTX *"/>
			<arg name="x" type="X509 *"/>
		</method>
		<method name="X509_STORE_CTX_set_chain" result="void" inline4="normal">
			<arg name="c" type="X509_STORE_CTX *"/>
			<arg name="sk" type="STACK *"/>
		</method>
		<method name="BIO_ctrl_pending" result="size_t" inline4="normal">
			<arg name="b" type="BIO *"/>
		</method>
		<method name="BIO_ctrl_wpending" result="size_t" inline4="normal">
			<arg name="b" type="BIO *"/>
		</method>
		<method name="BIO_ctrl_get_write_guarantee" result="size_t" inline4="normal">
			<arg name="b" type="BIO *"/>
		</method>
		<method name="BIO_ctrl_get_read_request" result="size_t" inline4="normal">
			<arg name="b" type="BIO *"/>
		</method>
		<method name="BIO_s_bio" result="BIO_METHOD *" inline4="normal">
		</method>
		<method name="BIO_new_bio_pair" result="int" inline4="normal">
			<arg name="bio1" type="BIO **"/>
			<arg name="writebuf1" type="size_t"/>
			<arg name="bio2" type="BIO **"/>
			<arg name="writebuf2" type="size_t"/>
		</method>
		<method name="CRYPTO_num_locks" result="int" inline4="normal">
		</method>
		<method name="DSA_dup_DH" result="DH *" inline4="normal">
			<arg name="r" type="DSA *"/>
		</method>
		<method name="PKCS5_PBE_keyivgen" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="param" type="ASN1_TYPE *"/>
			<arg name="cipher" type="EVP_CIPHER *"/>
			<arg name="md" type="EVP_MD *"/>
			<arg name="en_de" type="int"/>
		</method>
		<method name="PKCS5_PBKDF2_HMAC_SHA1" result="int" inline4="normal">
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
			<arg name="iter" type="int"/>
			<arg name="keylen" type="int"/>
			<arg name="out" type="unsigned char *"/>
		</method>
		<method name="PKCS5_v2_PBE_keyivgen" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="param" type="ASN1_TYPE *"/>
			<arg name="cipher" type="EVP_CIPHER *"/>
			<arg name="md" type="EVP_MD *"/>
			<arg name="en_de" type="int"/>
		</method>
		<method name="PKCS5_PBE_add" result="void" inline4="normal">
		</method>
		<method name="EVP_PBE_CipherInit" result="int" inline4="normal">
			<arg name="pbe_obj" type="ASN1_OBJECT *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="param" type="ASN1_TYPE *"/>
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="en_de" type="int"/>
		</method>
		<method name="EVP_PBE_alg_add" result="int" inline4="normal">
			<arg name="nid" type="int"/>
			<arg name="cipher" type="EVP_CIPHER *"/>
			<arg name="md" type="EVP_MD *"/>
			<arg name="keygen(struct evp_cipher_ctx_st * ctx , const char * pass , int passlen , struct asn1_type_st * param , struct evp_cipher_st * cipher , struct env_md_st * md , int en_de ) " type="EVP_PBE_KEYGEN *"/>
		</method>
		<method name="EVP_PBE_cleanup" result="void" inline4="normal">
		</method>
		<method name="OBJ_obj2txt" result="int" inline4="normal">
			<arg name="buf" type="char *"/>
			<arg name="buf_len" type="int"/>
			<arg name="a" type="ASN1_OBJECT *"/>
			<arg name="no_name" type="int"/>
		</method>
		<method name="PKCS7_signatureVerify" result="int" inline4="normal">
			<arg name="bio" type="BIO *"/>
			<arg name="p7" type="PKCS7 *"/>
			<arg name="si" type="PKCS7_SIGNER_INFO *"/>
			<arg name="x509" type="X509 *"/>
		</method>
		<method name="RSA_check_key" result="int" inline4="normal">
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_get_default_method" result="RSA_METHOD *" inline4="normal">
		</method>
		<method name="RSA_get_method" result="RSA_METHOD *" inline4="normal">
			<arg name="rsa" type="RSA *"/>
		</method>
		<method name="RSA_set_method" result="RSA_METHOD *" inline4="normal">
			<arg name="rsa" type="RSA *"/>
			<arg name="meth" type="RSA_METHOD *"/>
		</method>
		<method name="sk_sort" result="void" inline4="normal">
			<arg name="st" type="STACK *"/>
		</method>
		<method name="SSL_CTX_set_default_passwd_cb_userdata" result="void" inline4="normal">
			<arg name="ctx" type="SSL_CTX *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="d2i_PKCS8_bio" result="X509_SIG *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p8" type="X509_SIG **"/>
		</method>
		<method name="i2d_PKCS8_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p8" type="X509_SIG *"/>
		</method>
		<method name="d2i_PKCS8_PRIV_KEY_INFO_bio" result="PKCS8_PRIV_KEY_INFO *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p8inf" type="PKCS8_PRIV_KEY_INFO **"/>
		</method>
		<method name="i2d_PKCS8_PRIV_KEY_INFO_bio" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="p8inf" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="PKCS5_pbe2_set" result="X509_ALGOR *" inline4="normal">
			<arg name="cipher" type="const EVP_CIPHER *"/>
			<arg name="iter" type="int"/>
			<arg name="salt" type="unsigned char *"/>
			<arg name="saltlen" type="int"/>
		</method>
		<method name="PKCS12_PBE_keyivgen" result="int" inline4="normal">
			<arg name="ctx" type="EVP_CIPHER_CTX *"/>
			<arg name="pass" type="const char *"/>
			<arg name="passlen" type="int"/>
			<arg name="param" type="ASN1_TYPE *"/>
			<arg name="cipher" type="EVP_CIPHER *"/>
			<arg name="md_type" type="EVP_MD *"/>
			<arg name="en_de" type="int"/>
		</method>
		<method name="PEM_read_bio_PKCS8" result="X509_SIG *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_SIG **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_read_bio_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="PKCS8_PRIV_KEY_INFO **"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="PEM_write_bio_PKCS8" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="X509_SIG *"/>
		</method>
		<method name="PEM_write_bio_PKCS8_PRIV_KEY_INFO" result="int" inline4="normal">
			<arg name="bp" type="BIO *"/>
			<arg name="x" type="PKCS8_PRIV_KEY_INFO *"/>
		</method>
		<method name="PEM_write_bio_PKCS8PrivateKey" result="int" inline4="normal">
			<arg name="fp" type="BIO *"/>
			<arg name="x" type="EVP_PKEY *"/>
			<arg name="enc" type="const EVP_CIPHER *"/>
			<arg name="kstr" type="char *"/>
			<arg name="klen" type="int"/>
			<arg name="cb(char * buf , int size , int rwflag , void * userdata ) " type="pem_password_cb *"/>
			<arg name="u" type="void *"/>
		</method>
		<method name="CONF_load_bio" result="LHASH *" inline4="normal">
			<arg name="conf" type="LHASH *"/>
			<arg name="bp" type="BIO *"/>
			<arg name="eline" type="long *"/>
		</method>
	</interface>
</library>
